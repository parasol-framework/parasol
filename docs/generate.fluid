-- This script will generate HTML documentation by running xsltproc against every XML document file found in the xml/
-- folder.  It will fail if xsltproc is not installed on the system.
--
-- Support parameters:
--
--   sdk:    Path to the parasol SDK (required if not discoverable)
--   filter: Filter for XML source files, defaults to "*.xml".
--   src:    Source folder for XML documents, defaults to "sdk:docs/xml/"

   require 'filesearch'

-----------------------------------------------------------------------------------------------------------------------
-- Resolve the location of the Parasol SDK and create an 'sdk:' volume.

function resolveSDKPath(Path)
   local sdk_path
   local err = ERR_Failed
   local search_list = { }
   if not Path then
      local search_path = 'CMakeLists.txt'
      local limit = 5
      while (err != ERR_Okay) and (limit > 0) do
         table.insert(search_list, search_path)
         err, sdk_path = mSys.ResolvePath(search_path)
         search_path = '../' .. search_path
         limit = limit - 1
      end
   else
      table.insert(search_list, Path .. '/CMakeLists.txt')
      err, sdk_path = mSys.ResolvePath(Path .. '/CMakeLists.txt')
   end

   if (err == ERR_Okay) then
      sdk_path = sdk_path:match('(.+)CMakeLists%.txt')
   else
      local msg = ''
      for _, path in ipairs(search_list) do
         msg = msg .. path .. '\n'
      end
      print('Unable to find CMakeLists.txt after searching the following paths:\n' .. msg)
      error('A path to the Parasol SDK could not be determined.')
   end

   mSys.SetVolume('sdk', sdk_path)
end

-----------------------------------------------------------------------------------------------------------------------

   resolveSDKPath(arg('sdk'))

   local xml_folder = arg('src', 'sdk:docs/xml/')

   file.search(xml_folder, {
      nameFilter = arg('filter', '^.*%.xml$'),
      nameWild   = true,
      matchFeedback = function(Path, FileName, File)
         local src_path = Path .. FileName
         local output_path = src_path:gsub('/xml/', '/html/')
         output_path = output_path:gsub('%.xml', '.html')

         err, res_output_path = mSys.ResolvePath(output_path, RSF_NO_FILE_CHECK)
         assert(err == ERR_Okay, 'Failed to resolve path ' .. output_path)

         err, res_src_path = mSys.ResolvePath(src_path)
         assert(err == ERR_Okay, 'Failed to resolve path ' .. src_path)

         local module_folder = xml_folder .. '/modules'
         err, res_module_folder = mSys.ResolvePath(module_folder)
         assert(err == ERR_Okay, 'Failed to resolve XML folder ' .. module_folder)

         local class_folder = xml_folder .. '/modules/classes'
         err, res_class_folder = mSys.ResolvePath(class_folder)
         assert(err == ERR_Okay, 'Failed to resolve XML folder ' .. class_folder)

         local parameters = res_src_path .. ' --encoding UTF-8 -o ' .. res_output_path .. ' --path "' .. res_module_folder .. ' ' .. res_class_folder .. '"'
         print('Running xsltproc ' .. parameters)

         local task = obj.new('task', {
            src   = 'xsltproc',
            args  = parameters,
            flags = 'WAIT',
            timeout = 5
         })
         task.acActivate()
      end
   })
