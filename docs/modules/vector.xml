<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="module.xsl"?>

<book>
  <info>
    <name>Vector</name>
    <type>module</type>
    <version>1</version>
    <copyright>Paul Manias Â© 2010-2021</copyright>
    <classes>
      <class>Vector</class>
      <class>VectorClip</class>
      <class>VectorColour</class>
      <class>VectorEllipse</class>
      <class>VectorFilter</class>
      <class>VectorGradient</class>
      <class>VectorImage</class>
      <class>VectorPath</class>
      <class>VectorPattern</class>
      <class>VectorPolygon</class>
      <class>VectorRectangle</class>
      <class>VectorScene</class>
      <class>VectorShape</class>
      <class>VectorSpiral</class>
      <class>VectorText</class>
      <class>VectorViewport</class>
      <class>VectorWave</class>
    </classes>
  </info>

  <function>
    <name>ApplyPath</name>
    <comment>Copy a pre-generated or custom path to a VectorPath object.</comment>
    <prototype>ERROR vecApplyPath(APTR Path, OBJECTPTR VectorPath)</prototype>
    <input>
      <param type="APTR" name="Path">The source path to be copied.</param>
      <param type="OBJECTPTR" name="VectorPath">The target VectorPath object.</param>
    </input>
    <description>
<p>Any path originating from <function module="Vector">GeneratePath</function>, <function module="Vector">GenerateEllipse</function> or <function module="Vector">GenerateRectangle</function> can be applied to a VectorPath object by calling ApplyPath().  The source Path can then be deallocated with <function module="Vector">FreePath</function> if it is no longer required.</p>
<p>This method is particularly useful when paths need to be generated or changed in real-time and the alternative of processing the path as a string is detrimental to performance.</p>
    </description>
    <result type="ERROR">
      <error code="NullArgs">Function call missing argument value(s)</error>
      <error code="Okay">Operation successful.</error>
    </result>
  </function>

  <function>
    <name>ArcTo</name>
    <comment>Alter a path by setting an arc-to command at the current vertex position.</comment>
    <prototype>void vecArcTo(APTR Path, DOUBLE RX, DOUBLE RY, DOUBLE Angle, DOUBLE X, DOUBLE Y, LONG Flags)</prototype>
    <input>
      <param type="APTR" name="Path">The vector path to modify.</param>
      <param type="DOUBLE" name="RX">The horizontal radius of the arc.</param>
      <param type="DOUBLE" name="RY">The vertical radius of the arc.</param>
      <param type="DOUBLE" name="Angle">The angle of the arc, expressed in radians.</param>
      <param type="DOUBLE" name="X">The horizontal end point for the arc command.</param>
      <param type="DOUBLE" name="Y">The vertical end point for the arc command.</param>
      <param type="LONG" name="Flags" lookup="ARC">Optional flags.</param>
    </input>
    <description>
<p>This function will set an arc-to command at the current vertex.  It then increments the vertex position for the next path command.</p>
    </description>
  </function>

  <function>
    <name>ClosePath</name>
    <comment>Close the path by connecting the beginning and end points.</comment>
    <prototype>void vecClosePath(APTR Path)</prototype>
    <input>
      <param type="APTR" name="Path">The vector path to modify.</param>
    </input>
    <description>
<p>This function will set a close-path command at the current vertex.  It then increments the vertex position for the next path command.</p>
<p>Note that closing a path does not necessarily terminate the vector.  Further paths can be added to the sequence and interesting effects can be created by taking advantage of fill rules.</p>
    </description>
  </function>

  <function>
    <name>Curve3</name>
    <comment>Alter a path by setting a quadratic bezier curve command at the current vertex position.</comment>
    <prototype>void vecCurve3(APTR Path, DOUBLE CtrlX, DOUBLE CtrlY, DOUBLE X, DOUBLE Y)</prototype>
    <input>
      <param type="APTR" name="Path">The vector path to modify.</param>
      <param type="DOUBLE" name="CtrlX">Control point horizontal coordinate.</param>
      <param type="DOUBLE" name="CtrlY">Control point vertical coordinate.</param>
      <param type="DOUBLE" name="X">The horizontal end point for the curve3 command.</param>
      <param type="DOUBLE" name="Y">The vertical end point for the curve3 command.</param>
    </input>
    <description>
<p>This function will set a quadratic bezier curve command at the current vertex.  It then increments the vertex position for the next path command.</p>
    </description>
  </function>

  <function>
    <name>Curve4</name>
    <comment>Alter a path by setting a curve4 command at the current vertex position.</comment>
    <prototype>void vecCurve4(APTR Path, DOUBLE CtrlX1, DOUBLE CtrlY1, DOUBLE CtrlX2, DOUBLE CtrlY2, DOUBLE X, DOUBLE Y)</prototype>
    <input>
      <param type="APTR" name="Path">The vector path to modify.</param>
      <param type="DOUBLE" name="CtrlX1">Control point 1 horizontal coordinate.</param>
      <param type="DOUBLE" name="CtrlY1">Control point 1 vertical coordinate.</param>
      <param type="DOUBLE" name="CtrlX2">Control point 2 horizontal coordinate.</param>
      <param type="DOUBLE" name="CtrlY2">Control point 2 vertical coordinate.</param>
      <param type="DOUBLE" name="X">The horizontal end point for the curve4 command.</param>
      <param type="DOUBLE" name="Y">The vertical end point for the curve4 command.</param>
    </input>
    <description>
<p>This function will set a cubic bezier curve command at the current vertex.  It then increments the vertex position for the next path command.</p>
    </description>
  </function>

  <function>
    <name>DrawPath</name>
    <comment>Draws a vector path to a target bitmap.</comment>
    <prototype>ERROR vecDrawPath(struct rkBitmap * Bitmap, APTR Path, DOUBLE StrokeWidth, OBJECTPTR StrokeStyle, OBJECTPTR FillStyle)</prototype>
    <input>
      <param type="struct rkBitmap *" name="Bitmap">Pointer to a target Bitmap object.</param>
      <param type="APTR" name="Path">The vector path to render.</param>
      <param type="DOUBLE" name="StrokeWidth">The width of the stroke.  Set to 0 if no stroke is required.</param>
      <param type="OBJECTPTR" name="StrokeStyle">Pointer to a valid object for stroke definition, or NULL if none required.</param>
      <param type="OBJECTPTR" name="FillStyle">Pointer to a valid object for fill definition, or NULL if none required.</param>
    </input>
    <description>
<p>Use DrawPath() to draw a generated path to a Bitmap, using customised fill and stroke definitions.  This functionality provides an effective alternative to configuring vector scenes for situations where only simple vector shapes are required.  However, it is limited in that advanced rendering options and effects are not available to the client.</p>
<p>A StrokeStyle and/or FillStyle will be required to render the path.  Valid styles are allocated and configured using recognised vector style objects, specifically from the classes <class name="VectorImage">VectorImage</class>, <class name="VectorPattern">VectorPattern</class> and <class name="VectorGradient">VectorGradient</class>.  If a fill or stroke operation is not required, set the relevant parameter to NULL.</p>
    </description>
    <result type="ERROR">
      <error code="NullArgs">Function call missing argument value(s)</error>
      <error code="Okay">Operation successful.</error>
    </result>
  </function>

  <function>
    <name>FreePath</name>
    <comment>Remove a generated path.</comment>
    <prototype>void vecFreePath(APTR Path)</prototype>
    <input>
      <param type="APTR" name="Path">Pointer to the path to deallocate.</param>
    </input>
    <description>
<p>Deallocates paths generated by the Vector module, such as <function module="Vector">GeneratePath</function>.</p>
    </description>
  </function>

  <function>
    <name>GenerateEllipse</name>
    <comment>Generates an elliptical path.</comment>
    <prototype>ERROR vecGenerateEllipse(DOUBLE CX, DOUBLE CY, DOUBLE RX, DOUBLE RY, LONG Vertices, APTR * Path)</prototype>
    <input>
      <param type="DOUBLE" name="CX">Horizontal center point of the ellipse.</param>
      <param type="DOUBLE" name="CY">Vertical center point of the ellipse.</param>
      <param type="DOUBLE" name="RX">Horizontal radius of the ellipse.</param>
      <param type="DOUBLE" name="RY">Vertical radius of the ellipse.</param>
      <param type="LONG" name="Vertices">Optional.  If &gt;= 3, the total number of generated vertices will be limited to the specified value.</param>
      <param type="APTR *" name="Path">A pointer variable that will receive the resulting path.</param>
    </input>
    <description>
<p>Use GenerateEllipse() to create an elliptical path suitable for passing to vector functions that receive a Path parameter.  The path must be manually deallocated with <function module="Vector">FreePath</function> once it is no longer required.</p>
    </description>
    <result type="ERROR">
      <error code="NullArgs">Function call missing argument value(s)</error>
      <error code="AllocMemory">A call to AllocMemory() failed to create a new memory block.</error>
      <error code="Okay">Operation successful.</error>
    </result>
  </function>

  <function>
    <name>GeneratePath</name>
    <comment>Generates a path from an SVG path command sequence, or an empty path for custom configuration.</comment>
    <prototype>ERROR vecGeneratePath(CSTRING Sequence, APTR * Path)</prototype>
    <input>
      <param type="CSTRING" name="Sequence">The command sequence to process.  If no sequence is specified then the path will be empty.</param>
      <param type="APTR *" name="Path">A pointer variable that will receive the resulting path.</param>
    </input>
    <description>
<p>This function will generate a vector path from a sequence of fixed point coordinates and curve instructions.  The resulting path can then be passed to vector functions that receive a Path parameter.  The path must be manually deallocated with <function module="Vector">FreePath</function> once it is no longer required.</p>
<p>The Sequence is a string of points and instructions that define the path.  It is based on the SVG standard for the path element 'd' attribute, but also provides some additional features that are present in the vector engine.  Commands are case insensitive.</p>
<p>The following commands are supported:</p>
<pre>M: Move To
L: Line To
V: Vertical Line To
H: Horizontal Line To
Q: Quadratic Curve To
T: Quadratic Smooth Curve To
C: Curve To
S: Smooth Curve To
A: Arc
Z: Close Path
</pre>
<p>The use of lower case characters will indicate that the provided coordinates are relative (based on the coordinate of the previous command).</p>
<p>If the Sequence is NULL then an empty path resource will be generated.  This path will be suitable for passing to path modifying functions such as <function module="Vector">MoveTo</function> and <function module="Vector">LineTo</function> for custom path generation.</p>
    </description>
    <result type="ERROR">
      <error code="NullArgs">Function call missing argument value(s)</error>
      <error code="AllocMemory">A call to AllocMemory() failed to create a new memory block.</error>
      <error code="Okay">Operation successful.</error>
    </result>
  </function>

  <function>
    <name>GenerateRectangle</name>
    <comment>Generate a rectangular path at (x,y) with size (width,height).</comment>
    <prototype>ERROR vecGenerateRectangle(DOUBLE X, DOUBLE Y, DOUBLE Width, DOUBLE Height, APTR * Path)</prototype>
    <input>
      <param type="DOUBLE" name="X">The horizontal position of the rectangle.</param>
      <param type="DOUBLE" name="Y">The vertical position of the rectangle.</param>
      <param type="DOUBLE" name="Width">The width of the rectangle.</param>
      <param type="DOUBLE" name="Height">The height of the rectangle.</param>
      <param type="APTR *" name="Path">A pointer variable that will receive the resulting path.</param>
    </input>
    <description>
<p>Use GenerateRectangle() to create a rectangular path suitable for passing to vector functions that receive a Path parameter.  The path must be manually deallocated with <function module="Vector">FreePath</function> once it is no longer required.</p>
    </description>
    <result type="ERROR">
      <error code="NullArgs">Function call missing argument value(s)</error>
      <error code="AllocMemory">A call to AllocMemory() failed to create a new memory block.</error>
      <error code="Okay">Operation successful.</error>
    </result>
  </function>

  <function>
    <name>GetVertex</name>
    <comment>Retrieve the coordinates of the current vertex.</comment>
    <prototype>LONG vecGetVertex(APTR Path, DOUBLE * X, DOUBLE * Y)</prototype>
    <input>
      <param type="APTR" name="Path">The vector path to modify.</param>
      <param type="DOUBLE *" name="X">Pointer to a DOUBLE that will receive the X coordinate value.</param>
      <param type="DOUBLE *" name="Y">Pointer to a DOUBLE that will receive the Y coordinate value.</param>
    </input>
    <description>
<p>The coordinates of the current vertex are returned by this function in the X and Y parameters.  In addition, the internal command number for that vertex is the return value.</p>
    </description>
    <result type="LONG">The internal command value for the vertex will be returned.</result>
  </function>

  <function>
    <name>LineTo</name>
    <comment>Alter a path by setting a line-to command at the current vertex position.</comment>
    <prototype>void vecLineTo(APTR Path, DOUBLE X, DOUBLE Y)</prototype>
    <input>
      <param type="APTR" name="Path">The vector path to modify.</param>
      <param type="DOUBLE" name="X">The line end point on the horizontal plane.</param>
      <param type="DOUBLE" name="Y">The line end point on the vertical plane.</param>
    </input>
    <description>
<p>This function alters a path by setting a line-to command at the current vertex position.  The index is then advanced by one to the next vertex position.</p>
    </description>
  </function>

  <function>
    <name>MoveTo</name>
    <comment>Alter a path by setting a move-to command at the current vertex position.</comment>
    <prototype>void vecMoveTo(APTR Path, DOUBLE X, DOUBLE Y)</prototype>
    <input>
      <param type="APTR" name="Path">The vector path to modify.</param>
      <param type="DOUBLE" name="X">The horizontal end point for the command.</param>
      <param type="DOUBLE" name="Y">The vertical end point for the command.</param>
    </input>
    <description>
<p>This function will set an move-to command at the current vertex.  It then increments the vertex position for the next path command.</p>
<p>The move-to command is used to move the pen to a new coordinate without drawing a line.</p>
    </description>
  </function>

  <function>
    <name>ReadPainter</name>
    <comment>Parses a painter string into its colour, gradient and image values.</comment>
    <prototype>void vecReadPainter(OBJECTPTR Vector, CSTRING IRI, struct DRGB * RGB, struct rkVectorGradient ** Gradient, struct rkVectorImage ** Image, struct rkVectorPattern ** Pattern)</prototype>
    <input>
      <param type="OBJECTPTR" name="Vector">Optional.  Required if url() references are to be resolved.</param>
      <param type="CSTRING" name="IRI">The IRI string to be translated.</param>
      <param type="struct DRGB *" name="RGB">A colour will be returned here if specified in the IRI.</param>
      <param type="struct rkVectorGradient **" name="Gradient">A VectorGradient will be returned here if specified in the IRI.</param>
      <param type="struct rkVectorImage **" name="Image">A VectorImage will be returned here if specified in the IRI.</param>
      <param type="struct rkVectorPattern **" name="Pattern">A VectorPattern will be returned here if specified in the IRI.</param>
    </input>
    <description>
<p>This function will parse an SVG style IRI into its equivalent internal lookup values.  The results can then be processed for rendering a stroke or fill operation in the chosen style.</p>
<p>Colours can be referenced using one of three methods.  Colour names such as 'orange' and 'red' are accepted.  Hexadecimal RGB values are supported in the format '#RRGGBBAA'.  Floating point RGB is supported as 'rgb(r,g,b,a)' whereby the component values range between 0.0 and 1.0.</p>
<p>A Gradient, Image or Pattern can be referenced using the 'url(#name)' format, where the 'name' is a definition that has been registered with the given Vector object.  If Vector is NULL then it will not be possible to find the reference. Any failure to lookup a reference will be silently discarded.</p>
    </description>
  </function>

  <function>
    <name>RewindPath</name>
    <comment>Resets the vertex seek position to zero.</comment>
    <prototype>void vecRewindPath(APTR Path)</prototype>
    <input>
      <param type="APTR" name="Path">The vector path to rewind.</param>
    </input>
    <description>
<p>Rewinding a path will reset the current vertex index to zero.  The next call to a vertex modification function such as <function module="Vector">LineTo</function> would result in the first vertex being modified.</p>
<p>If the referenced Path is empty, this function does nothing.</p>
    </description>
  </function>

  <function>
    <name>Smooth3</name>
    <comment>Alter a path by setting a smooth3 command at the current vertex position.</comment>
    <prototype>void vecSmooth3(APTR Path, DOUBLE X, DOUBLE Y)</prototype>
    <input>
      <param type="APTR" name="Path">The vector path to modify.</param>
      <param type="DOUBLE" name="X">The horizontal end point for the smooth3 command.</param>
      <param type="DOUBLE" name="Y">The vertical end point for the smooth3 command.</param>
    </input>
    <description>
<p>This function will set a quadratic bezier curve command at the current vertex.  It then increments the vertex position for the next path command.</p>
<p>The control point from the previous curve is used as the control point for the new curve, hence the 'smooth'.</p>
    </description>
  </function>

  <function>
    <name>Smooth4</name>
    <comment>Alter a path by setting a smooth4 command at the current vertex position.</comment>
    <prototype>void vecSmooth4(APTR Path, DOUBLE CtrlX, DOUBLE CtrlY, DOUBLE X, DOUBLE Y)</prototype>
    <input>
      <param type="APTR" name="Path">The vector path to modify.</param>
      <param type="DOUBLE" name="CtrlX">Control point horizontal coordinate.</param>
      <param type="DOUBLE" name="CtrlY">Control point vertical coordinate.</param>
      <param type="DOUBLE" name="X">The horizontal end point for the smooth4 instruction.</param>
      <param type="DOUBLE" name="Y">The vertical end point for the smooth4 instruction.</param>
    </input>
    <description>
<p>This function will set a cubic bezier curve command at the current vertex.  It then increments the vertex position for the next path command.</p>
<p>The control point from the previous curve will be used in addition to the CtrlX and CtrlY points, hence the name 'smoothed curve'.</p>
    </description>
  </function>

  <function>
    <name>TranslatePath</name>
    <comment>Translates a path by (x,y)</comment>
    <prototype>void vecTranslatePath(APTR Path, DOUBLE X, DOUBLE Y)</prototype>
    <input>
      <param type="APTR" name="Path">Pointer to a generated path.</param>
      <param type="DOUBLE" name="X">Translate the path horizontally by the given value.</param>
      <param type="DOUBLE" name="Y">Translate the path vertically by the given value.</param>
    </input>
    <description>
<p>This function will translate all vertices of a path by (X,Y).</p>
    </description>
  </function>

  <types>
    <constants lookup="ARC" comment="Options for drawing arcs.">
      <const name="LARGE"/>
      <const name="SWEEP"/>
    </constants>

    <constants lookup="VSM">
      <const name="AUTO">The default option is chosen by the system.  This will typically be bilinear, but slow machines may switch to nearest neighbour and high speed machines could use more advanced methods.</const>
      <const name="NEIGHBOUR">Nearest neighbour is the fastest sampler at the cost of poor quality.</const>
      <const name="BILINEAR">Bilinear is a common algorithm that produces a reasonable quality image.</const>
      <const name="BICUBIC">Produces a similar result to bilinear with a marginally sharper after-effect.</const>
      <const name="SPLINE16">About 1/2 the speed of bilinear, this method produces a considerably better result.</const>
      <const name="KAISER"/>
      <const name="QUADRIC"/>
      <const name="GAUSSIAN"/>
      <const name="BESSEL"/>
      <const name="MITCHELL"/>
      <const name="SINC3">Five times slower than bilinear, the final result is of very good quality.</const>
      <const name="LANCZOS3">This well known algorithm may serve as a point of comparison for evaluating the results of other methods.  It shares characteristics with SINC and BLACKMAN.</const>
      <const name="BLACKMAN3">Five times slower than bilinear, the final result will lack sharpness when compared to SINC3.</const>
      <const name="SINC8">15 times slower than bilinear, the final result is of excellent quality but may be marginally over-sharpened.</const>
      <const name="LANCZOS8"/>
      <const name="BLACKMAN8">15 times slower than bilinear, the final result is of excellent quality and sharpness is well balanced.</const>
    </constants>

    <constants lookup="VSPREAD" comment="Spread method options define the method to use for tiling filled graphics.">
      <const name="UNDEFINED">Either the default setting will be applied or the setting will be inherited from a parent object.</const>
      <const name="PAD">Scale the graphic to the object bounds.</const>
      <const name="REFLECT">Tile the graphic, reflecting the image alternately on the X and Y axis.</const>
      <const name="REPEAT">Tile the graphic repeatedly.</const>
      <const name="REFLECT_X">Tile the graphic, reflecting the image alternately on the X axis only.</const>
      <const name="REFLECT_Y">Tile the graphic, reflecting the image alternately on the Y axis only.</const>
      <const name="CLIP">Do not scale the graphic.  Clip it if it extends past imposed boundaries.</const>
    </constants>

    <constants lookup="VUNIT">
      <const name="UNDEFINED"/>
      <const name="BOUNDING_BOX">Coordinates are relative to the object's bounding box.</const>
      <const name="USERSPACE">Coordinates are relative to the current viewport.</const>
    </constants>

    <constants lookup="VTF" comment="Types of vector transforms.">
      <const name="SKEW">Skew the vector by (X,Y)</const>
      <const name="TRANSLATE">Translate the vector by (X,Y)</const>
      <const name="MATRIX">Apply a 2x3 matrix transformation to the vector.</const>
      <const name="SCALE">Scale the vector by (X,Y)</const>
      <const name="ROTATE">Rotate the vector around (CX,CY) by Angle.</const>
    </constants>

    <constants lookup="VIS" comment="Options for the Vector class' Visibility field.">
      <const name="HIDDEN">Hide the vector and its children.</const>
      <const name="VISIBLE">The default.  Ensures that the vector is visible.</const>
      <const name="COLLAPSE">Hide the vector and its children.  Do not use - provided for SVG compatibility only.</const>
      <const name="INHERIT">Inherit the visibility state from the parent.</const>
    </constants>

    <constants lookup="CS" comment="Colour space options.">
      <const name="SRGB">The default colour-space is sRGB, recommended for its speed.</const>
      <const name="LINEAR_RGB">Linear RGB is the default colour space for SVG and produces the best results.</const>
      <const name="INHERIT">Inherit the colour space option from the parent vector.</const>
    </constants>

    <constants lookup="VIJ" comment="Inner join options for angled lines.">
      <const name="BEVEL">Blunts the edge of the join.</const>
      <const name="MITER">Forms a sharp point at the join.  Typically not the best looking option.</const>
      <const name="JAG">A special non-SVG option.</const>
      <const name="ROUND">Rounds the edge of the join to produce the best looking results.</const>
      <const name="INHERIT">Inherit the parent's join value.</const>
    </constants>

    <constants lookup="VF" comment="Optional flags and indicators for the Vector class.">
      <const name="DISABLED">The vector is disabled and user input should be ignored.</const>
      <const name="HAS_FOCUS">The vector holds the user's input focus.</const>
    </constants>

    <constants lookup="VGF" comment="Gradient flags">
      <const name="FIXED_FY">FY is fixed</const>
      <const name="RELATIVE_X2">X2 is relative</const>
      <const name="RELATIVE_X1">X1 is relative</const>
      <const name="FIXED_X1">X1 is fixed</const>
      <const name="FIXED_Y2">Y2 is fixed</const>
      <const name="RELATIVE_CX">CX is relative</const>
      <const name="FIXED_RADIUS">is fixed</const>
      <const name="RELATIVE_RADIUS">Radius is relative</const>
      <const name="RELATIVE_FX">FX is relative</const>
      <const name="FIXED_CX">CX is fixed</const>
      <const name="RELATIVE_Y2">Y2 is relative</const>
      <const name="RELATIVE_CY">CY is relative</const>
      <const name="FIXED_FX">FX is fixed</const>
      <const name="RELATIVE_FY">FY is relative</const>
      <const name="FIXED_Y1">Y1 is fixed</const>
      <const name="FIXED_CY">CY is fixed</const>
      <const name="RELATIVE_Y1">Y1 is relative</const>
      <const name="FIXED_X2">X2 is fixed</const>
    </constants>

    <constants lookup="VLC" comment="Line-cap options.">
      <const name="BUTT">The default.  The line is sharply squared off at its exact end point.</const>
      <const name="SQUARE">Similar to butt, the line is sharply squared off but will extend past the end point by 'StrokeWidth / 2'.</const>
      <const name="ROUND">The line cap is a half-circle and the line's end-point forms the center point.</const>
      <const name="INHERIT">The cap type is inherited from the parent (defaults to butt if unspecified).</const>
    </constants>

    <constants lookup="VBF" comment="For vecGetBoundary()">
      <const name="INCLUSIVE">The result will be inclusive of all paths that belong to children of the queried vector.</const>
      <const name="NO_TRANSFORM">The transformation step will not be applied to the vector's path.</const>
    </constants>

    <constants lookup="VPF" comment="Optional flags for the VectorScene object.">
      <const name="RENDER_TIME">Compute the drawing frame-rate for the RenderTime field.</const>
      <const name="BITMAP_SIZED">Automatically adjust the PageWidth and PageHeight to match the target Bitmap width and height.</const>
      <const name="RESIZE">The vector will be stretched to fit the PageWidth and PageHeight values, if defined by the client.</const>
    </constants>

    <constants lookup="FM" comment="Mask for controlling feedback events that are received.">
      <const name="PATH_CHANGED">The vector path has been modified or affected by a transform.</const>
    </constants>

    <constants lookup="VLJ" comment="Options for the look of line joins.">
      <const name="MITER">The default.  The join will form a pointed edge.</const>
      <const name="MITER_REVERT"/>
      <const name="ROUND">The join is rounded.</const>
      <const name="BEVEL">The join is blunted, eliminating overly sharp edges.</const>
      <const name="MITER_ROUND">Default to MITER, but switch to ROUND if the miter limit is exceeded.</const>
      <const name="INHERIT">Inherit the join option from the parent.</const>
    </constants>

    <constants lookup="ARF" comment="Aspect ratios">
      <const name="NONE">Scale the viewbox to match the size of the viewport.  Aspect ratio is not preserved.</const>
      <const name="Y_MIN">Align to the top</const>
      <const name="Y_MAX">Align to the bottom</const>
      <const name="X_MID">Align to the horizontal center</const>
      <const name="X_MIN">Align to the left</const>
      <const name="X_MAX">Align to the right</const>
      <const name="SLICE">Aspect ratio is preserved. The viewbox can extend beyond the viewport's edges on one axis.  The viewbox is scaled up as much as possible.</const>
      <const name="Y_MID">Align to the vertical center</const>
      <const name="MEET">Aspect ratio is preserved. The entire viewbox will be visible in the viewport.  The viewbox is scaled up as much as possible.</const>
    </constants>

    <constants lookup="VGT" comment="VectorGradient options.">
      <const name="LINEAR">A linear gradient is drawn from (X1,Y1) to (X2,Y2).</const>
      <const name="RADIAL">A radial gradient is drawn from CenterX,CenterY to Radius.  An optional focal point can be expressed with FX and FY.</const>
      <const name="CONIC">The conic gradient is a variant on the radial type, whereby the colour values are drawn as a line that revolves around the cone's center point.</const>
      <const name="DIAMOND">A diamond gradient is drawn as a square emanating from the center point.</const>
      <const name="CONTOUR">Contoured gradients follow the contours of the vector path in which they are rendered.</const>
    </constants>

    <constants lookup="VFR" comment="Vector fill rules for the FillRule field in the Vector class.">
      <const name="NON_ZERO">This is the default.  This rule determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a path segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside the path. Otherwise, it is inside.</const>
      <const name="EVEN_ODD">This rule determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.</const>
      <const name="INHERIT">The rule is inherited from the parent vector(s).</const>
    </constants>

  </types>
  <structs>
    <struct name="VectorTransform">
      <field name="Next" type="struct VectorTransform *">The next transform in the list.</field>
      <field name="Prev" type="struct VectorTransform *">The previous transform in the list.</field>
      <field name="X" type="DOUBLE">The X value, the meaning of which is defined by the Type</field>
      <field name="Y" type="DOUBLE">The Y value, the meaning of which is defined by the Type</field>
      <field name="Angle" type="DOUBLE">Requires VTF_ROTATE.  A rotation by Angle degrees about a given point.  If optional parameters X and Y are not specified, the rotate is about the origin of the current user coordinate system.</field>
      <field name="Matrix[6]" type="DOUBLE">Requires VTF_MATRIX.  A transformation expressed as a matrix of six values.</field>
      <field name="Type" type="WORD" lookup="VTF">The VTF indicates the type of transformation: rotate, skew etc</field>
    </struct>

    <struct name="PathCommand" comment="Base structure for path commands.">
      <field name="Type" type="UBYTE">The command type (PE value)</field>
      <field name="Curved" type="UBYTE">Private</field>
      <field name="LargeArc" type="UBYTE">Equivalent to the large-arc-flag in SVG, it ensures that the arc follows the longest drawing path when TRUE.</field>
      <field name="Sweep" type="UBYTE">Equivalent to the sweep-flag in SVG, it inverts the default behaviour in generating arc paths.</field>
      <field name="Pad" type="LONG">Private</field>
      <field name="X" type="DOUBLE">The targeted X coordinate (absolute or relative) for the command</field>
      <field name="Y" type="DOUBLE">The targeted Y coordinate (absolute or relative) for the command</field>
      <field name="AbsX" type="DOUBLE">Private</field>
      <field name="AbsY" type="DOUBLE">Private</field>
      <field name="X2" type="DOUBLE">The X2 coordinate for curve commands, or RX for arcs</field>
      <field name="Y2" type="DOUBLE">The Y2 coordinate for curve commands, or RY for arcs</field>
      <field name="X3" type="DOUBLE">The X3 coordinate for curve-to or smooth-curve-to</field>
      <field name="Y3" type="DOUBLE">The Y3 coordinate for curve-to or smooth-curve-to</field>
      <field name="Angle" type="DOUBLE">Arc angle</field>
    </struct>

  </structs>
</book>
