<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="module.xsl"?>

<book>
  <info>
    <name>Network</name>
    <type>module</type>
    <version>1</version>
    <status>stable</status>
    <prefix>net</prefix>
    <copyright>Paul Manias Â© 2005-2022</copyright>
    <classes>
      <class>ClientSocket</class>
      <class>NetLookup</class>
      <class>NetSocket</class>
      <class>Proxy</class>
    </classes>
  </info>

  <function>
    <name>AddressToStr</name>
    <comment>Converts an IPAddress structure to an IPAddress in dotted string form.</comment>
    <prototype>CSTRING netAddressToStr(struct IPAddress * IPAddress)</prototype>
    <input>
      <param type="struct IPAddress *" name="IPAddress">A pointer to the IPAddress structure.</param>
    </input>
    <description>
<p>Converts an IPAddress structure to a string containing the IPAddress in dotted format.  Please free the resulting string with <function>FreeResource</function> once it is no longer required.</p>
    </description>
    <result type="CSTRING">The IP address is returned as an allocated string.</result>
  </function>

  <function>
    <name>HostToLong</name>
    <comment>Converts a 32 bit (unsigned) long from host to network byte order.</comment>
    <prototype>ULONG netHostToLong(ULONG Value)</prototype>
    <input>
      <param type="ULONG" name="Value">Data in host byte order to be converted to network byte order</param>
    </input>
    <description>
<p>Converts a 32 bit (unsigned) long from host to network byte order.</p>
    </description>
    <result type="ULONG">The long in network byte order</result>
  </function>

  <function>
    <name>HostToShort</name>
    <comment>Converts a 16 bit (unsigned) word from host to network byte order.</comment>
    <prototype>ULONG netHostToShort(ULONG Value)</prototype>
    <input>
      <param type="ULONG" name="Value">Data in host byte order to be converted to network byte order</param>
    </input>
    <description>
<p>Converts a 16 bit (unsigned) word from host to network byte order.</p>
    </description>
    <result type="ULONG">The word in network byte order</result>
  </function>

  <function>
    <name>LongToHost</name>
    <comment>Converts a 32 bit (unsigned) long from network to host byte order.</comment>
    <prototype>ULONG netLongToHost(ULONG Value)</prototype>
    <input>
      <param type="ULONG" name="Value">Data in network byte order to be converted to host byte order</param>
    </input>
    <description>
<p>Converts a 32 bit (unsigned) long from network to host byte order.</p>
    </description>
    <result type="ULONG">The Value in host byte order.</result>
  </function>

  <function>
    <name>SetSSL</name>
    <comment>Alters SSL settings on an initialised NetSocket object.</comment>
    <prototype>ERROR netSetSSL(struct rkNetSocket * NetSocket, ...)</prototype>
    <input>
      <param type="struct rkNetSocket *" name="NetSocket">The target NetSocket object.</param>
      <param type="..." name="Tags">Series of tags terminated by TAGEND.</param>
    </input>
    <description>
<p>Use the SetSSL() function to send SSL commands to a NetSocket object.  The following table illustrates the commands that are currently available:</p>
<p>If a failure occurs when executing a command, the execution of all further commands is aborted and the error code is returned immediately.</p>
    </description>
    <result type="ERROR">
      <error code="NullArgs">Function call missing argument value(s)</error>
      <error code="Okay">Operation successful.</error>
    </result>
  </function>

  <function>
    <name>ShortToHost</name>
    <comment>Converts a 16 bit (unsigned) word from network to host byte order.</comment>
    <prototype>ULONG netShortToHost(ULONG Value)</prototype>
    <input>
      <param type="ULONG" name="Value">Data in network byte order to be converted to host byte order</param>
    </input>
    <description>
<p>Converts a 16 bit (unsigned) word from network to host byte order.</p>
    </description>
    <result type="ULONG">The Value in host byte order</result>
  </function>

  <function>
    <name>StrToAddress</name>
    <comment>Converts an IP Address in string form to an IPAddress structure.</comment>
    <prototype>ERROR netStrToAddress(CSTRING String, struct IPAddress * Address)</prototype>
    <input>
      <param type="CSTRING" name="String">A null-terminated string containing the IP Address in dotted format.</param>
      <param type="struct IPAddress *" name="Address">Must point to an IPAddress structure that will be filled in.</param>
    </input>
    <description>
<p>Converts an IPv4 or an IPv6 address in dotted string format to an IPAddress structure.  The String must be of form <code>1.2.3.4</code> (IPv4).</p>
<pre>struct IPAddress addr;
if (!StrToAddress("127.0.0.1", &amp;addr)) {
   ...
}
</pre>
    </description>
    <result type="ERROR">
      <error code="Failed">General failure.</error>
      <error code="Okay">Operation successful.</error>
      <error code="Args">Invalid arguments passed to function.</error>
    </result>
  </function>

  <types>
    <constants lookup="IPADDR" comment="Address types for the IPAddress structure.">
      <const name="V4"/>
      <const name="V6"/>
    </constants>

    <constants lookup="NSF">
      <const name="SERVER">Puts the socket into server mode.  In this state the netsocket object will wait for incoming connections from clients.</const>
      <const name="SSL">Use Secure Sockets Layer for all communication.</const>
      <const name="MULTI_CONNECT">Allow multiple connections from the same IP when in server mode.</const>
      <const name="DEBUG">Print extra log messages.</const>
      <const name="SYNCHRONOUS">Use synchronous (blocking) network calls.</const>
    </constants>

    <constants lookup="NLF" comment="Options for NetLookup">
      <const name="NO_CACHE">Contact the name service and do not use the local DNS cache.</const>
    </constants>

    <constants lookup="NTC" comment="NetSocket states">
      <const name="DISCONNECTED">There is no connection.</const>
      <const name="CONNECTING">A connection is being established.</const>
      <const name="CONNECTING_SSL">An SSL connection is being established.</const>
      <const name="CONNECTED">There is an active connection at present.</const>
    </constants>

  </types>
  <structs>
    <struct name="IPAddress">
      <field name="Data" type="ULONG" size="4">128-bit array for supporting both V4 and V6 IP addresses.</field>
      <field name="Type" type="LONG" lookup="IPADDR"></field>
      <field name="Pad" type="LONG">Unused padding for 64-bit alignment</field>
    </struct>

    <struct name="rkNetClient" comment="Simple data storage class utilised by NetSocket to represent a client machine/IP.">
      <field name="IP" type="char" size="8">IP address in 4/8-byte format</field>
      <field name="Next" type="struct rkNetClient *">Next client in the chain</field>
      <field name="Prev" type="struct rkNetClient *">Previous client in the chain</field>
      <field name="NetSocket" type="struct rkNetSocket *">Reference to the parent socket</field>
      <field name="Sockets" type="struct rkClientSocket *">Pointer to a list of sockets opened with this client.</field>
      <field name="UserData" type="APTR">Free for user data storage.</field>
      <field name="TotalSockets" type="LONG">Count of all created sockets</field>
    </struct>

  </structs>
</book>
