<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="module.xsl"?>

<book>
  <info>
    <name>Audio</name>
    <type>module</type>
    <version>1</version>
    <copyright>Paul Manias Â© 2002-2022</copyright>
    <classes>
      <class>Audio</class>
      <class>Sound</class>
    </classes>
  </info>

  <function>
    <name>SetChannels</name>
    <comment>Defines the maximum number of channels available for sound mixing.</comment>
    <prototype>LONG sndSetChannels(LONG Total)</prototype>
    <input>
      <param type="LONG" name="Total">The total number of sound channels required by the client.</param>
    </input>
    <description>
<p>The maximum number of sound channels used for software-based sound mixing can be altered by calling this function.  The recommended number of channels is 8, which would indicate that a maximum of 8 sound samples could be played simultaneously at any given time.</p>
    </description>
    <result type="LONG">The previous setting for the maximum number of sound channels is returned.</result>
  </function>

  <function>
    <name>SetTaskVolume</name>
    <comment>Set the default volume for the task (not global)</comment>
    <prototype>DOUBLE sndSetTaskVolume(DOUBLE Volume)</prototype>
    <input>
      <param type="DOUBLE" name="Volume">Desired volume, between 0 and 100.</param>
    </input>
    <description>
<p>The default volume for the current task can be adjusted by calling this function.  The volume is expressed as a value between 0 and 1.0.  If it is outside of this range then no adjustment is made to the current volume.</p>
    </description>
    <result type="DOUBLE">The previous volume setting is returned by this function, regardless of whether the volume setting is successful or not.</result>
  </function>

  <function>
    <name>StartDrivers</name>
    <comment>Starts the audio drivers (platform dependent).</comment>
    <prototype>ERROR sndStartDrivers()</prototype>
    <description>
<p>This function will start the audio drivers if they have not already been loaded and initialised.  This feature is platform specific and is typically used on boot-up only.</p>
    </description>
    <result type="ERROR">
      <error code="Okay">Operation successful.</error>
    </result>
  </function>

  <function>
    <name>WaitDrivers</name>
    <comment>Wait for audio drivers to become initialised on boot-up.</comment>
    <prototype>ERROR sndWaitDrivers(LONG TimeOut)</prototype>
    <input>
      <param type="LONG" name="TimeOut">The desired timeout value indicated in 1/1000ths of a second.</param>
    </input>
    <description>
<p>This is an internal function used by the audio server to wait for audio drivers to start.  It does not return until the drivers have been initialised or the indicated TimeOut has expired.</p>
    </description>
    <result type="ERROR">
      <error code="Okay">Operation successful.</error>
    </result>
  </function>

  <types>
    <constants lookup="ADF" comment="Optional flags for the Audio object.">
      <const name="AUTO_SAVE">Save configuration information on exit.</const>
      <const name="FILTER_HIGH">Enable a high level of output filtering to minimise distortion.</const>
      <const name="FILTER_LOW">Enable a low level of output filtering to minimise distortion.</const>
      <const name="OVER_SAMPLING">Enables oversampling for higher quality audio at the cost of slower mixing.</const>
      <const name="SERVICE_MODE">Service mode gives the audio object complete control of the task.</const>
      <const name="STEREO">Enable stereo output (set by default if the platform supports stereo).  If not set, output is in mono.</const>
      <const name="SYSTEM_WIDE">Mixer changes should be applied system-wide.</const>
      <const name="VOL_RAMPING">Enable volume ramping for softer playback when a sample is played multiple times (enabled by default).</const>
    </constants>

    <constants lookup="CHF" comment="Optional flags for the AudioChannel structure.">
      <const name="BACKWARD">Play channel backwards.</const>
      <const name="CHANGED">Sample change</const>
      <const name="MUTE">Channel is muted.</const>
      <const name="VOL_RAMP">Volume ramping is enabled.</const>
    </constants>

    <constants lookup="CHS" comment="Channel status types for the AudioChannel structure.">
      <const name="FADE_OUT">Playback is fading out.</const>
      <const name="FINISHED">Playing has ended (not force stopped).</const>
      <const name="PLAYING">Sample playing and not released.</const>
      <const name="RELEASED">Sample playing and note has been released.</const>
      <const name="STOPPED">Playing is stopped.</const>
    </constants>

    <constants lookup="CMD" comment="Audio channel commands">
      <const name="CONTINUE">Continue a sound sample that has been stopped.</const>
      <const name="END_SEQUENCE">Terminates the current command sequence.</const>
      <const name="FADE_IN">Fades a channel in from zero to the current volume (as previously determined by the SetVolume command).</const>
      <const name="FADE_OUT">Fade out a channel.</const>
      <const name="MUTE">Mutes the channel so that no further audio will play until you unmute it.  The Data parameter needs to be set to either TRUE or FALSE to indicate the required mute status.</const>
      <const name="PLAY">Plays the sample associated with the channel.  You are required to set the playback frequency in the Data parameter.  This command does nothing if the channel does not have a sample loaded against it.</const>
      <const name="SET_FREQUENCY">Sets the current playback frequency of a channel.</const>
      <const name="SET_LENGTH">Sets the byte length of the sample playing in the channel.</const>
      <const name="SET_PAN">Sets a channel's panning position.  The Data parameter indicates the new pan and must be in the range of -100 to +100.  A setting of zero plays the sound at an equal level between both speakers.  If output is in mono, panning has no effect.</const>
      <const name="SET_POSITION">Sets the playback position within a channel's currently associated sample (measured in bytes).  Useful for starting playback from a preset position.</const>
      <const name="SET_RATE">Defines the interval between the processing of each command, measured in milliseconds.</const>
      <const name="SET_SAMPLE">Sets a new sample against a channel.  You are required to supply the sample handle (as obtained from AddSample or AddStream) in the Data parameter.  The sample will not play until you use the Play command.</const>
      <const name="SET_VOLUME">Sets a new channel volume.  The Data parameter indicates the new volume and must be in the range of 0 - 500% (100% is normal volume, 0% is silence).</const>
      <const name="START_SEQUENCE">Required to start a new sequence of commands.</const>
      <const name="STOP">Immediately stops a channel from playing any audio until the next Play command.</const>
      <const name="STOP_LOOPING">Tells the channel to stop performing any more audio loops related to the currently playing sample.  This command does nothing if the current sample has no associated loop information.</const>
    </constants>

    <constants lookup="LOOP" comment="Loop modes for the AudioLoop structure.">
      <const name="AMIGA">Single loop: Amiga style.</const>
      <const name="AMIGA_NONE">Amiga loop: Do nothing.</const>
      <const name="DOUBLE">Double loop: When the note is released, playing shifts to the second loop.</const>
      <const name="SINGLE">Single loop: Releasing will end the note.</const>
      <const name="SINGLE_RELEASE">Single loop: Sample data after the loop will be played when the note is released.</const>
    </constants>

    <constants lookup="LTYPE" comment="Loop types for the AudioLoop structure.">
      <const name="BIDIRECTIONAL">The sample will play in reverse whenever it hits the end marker, then forwards when it hits the start marker.</const>
      <const name="UNIDIRECTIONAL">The sample playback position returns to the byte position specified in the Loop1Start field.</const>
    </constants>

    <constants lookup="NOTE" comment="Definitions for the Note field.  An 'S' indicates a sharp note.">
      <const name="A"/>
      <const name="AS"/>
      <const name="B"/>
      <const name="C"/>
      <const name="CS"/>
      <const name="D"/>
      <const name="DS"/>
      <const name="E"/>
      <const name="F"/>
      <const name="FS"/>
      <const name="G"/>
      <const name="GS"/>
      <const name="OCTAVE"/>
    </constants>

    <constants lookup="SDF" comment="Sound flags">
      <const name="LOOP">Enables sample looping. The LoopStart and LoopEnd fields determine where the looping area lies within the sample data.</const>
      <const name="NEW">Create the sample from scratch (e.g. for audio recording purposes).</const>
      <const name="QUERY">Query the meta data of the sample source; do not load sample data.</const>
      <const name="RESTRICT_PLAY">Restricts playback so that the sound can never play on more than one channel at any given time.</const>
      <const name="STEREO">Indicates that the sound has multiple audio channels.</const>
      <const name="STREAM">Read-Only. Indicates that streaming is enabled.</const>
      <const name="TERMINATE">Self-terminate when the sound sample has finished playback.</const>
    </constants>

    <constants lookup="SFM" comment="These audio bit formats are supported by AddSample and AddStream.">
      <const name="BIG_ENDIAN">Combine this flag with any audio format to declare it as big endian.</const>
      <const name="S16_BIT_MONO">16-bit mono signed sample.</const>
      <const name="S16_BIT_STEREO">16-bit stereo signed sample.</const>
      <const name="U8_BIT_MONO">8-bit mono unsigned sample.</const>
      <const name="U8_BIT_STEREO">8-bit stereo unsigned sample.</const>
    </constants>

    <constants lookup="STREAM" comment="Streaming options">
      <const name="ALWAYS">Stream if the sample length exceeds 64k.</const>
      <const name="NEVER">No streaming - load all data into memory.</const>
      <const name="SMART">Smart streaming is the default.  If the sample appears to be relatively small with respect to available system RAM, it will be loaded into memory.  Otherwise it will be streamed.</const>
    </constants>

    <constants lookup="SVF" comment="Flags for the SetVolume() method.">
      <const name="CAPTURE">Set input, not output.</const>
      <const name="MUTE">Mute the audio for this channel.</const>
      <const name="SYNC">Synchronise volume settings between channels.</const>
      <const name="UNMUTE">Unmute the audio for this channel.</const>
      <const name="UNSYNC">Allow un-synchronised volume settings.</const>
    </constants>

    <constants lookup="VCF" comment="Volume control flags">
      <const name="CAPTURE">The mixer supports audio input.</const>
      <const name="JOINED">The mixer channels are joined (e.g. left and right speakers cannot be adjusted separately).</const>
      <const name="MONO">The mixer is restricted to mono input/output.</const>
      <const name="MUTE">The mixer is muted.</const>
      <const name="PLAYBACK">The mixer supports audio output.</const>
      <const name="SYNC">The mixer is synchronised.</const>
    </constants>

  </types>
  <structs>
    <struct name="AudioChannel" comment="Audio channel structure">
      <field name="Sample" type="struct AudioSample">Sample structure</field>
      <field name="LVolume" type="DOUBLE">Current left speaker volume (0 - 1.0)</field>
      <field name="RVolume" type="DOUBLE">Current right speaker volume (0 - 1.0)</field>
      <field name="LVolumeTarget" type="DOUBLE">Volume target when fading or ramping</field>
      <field name="RVolumeTarget" type="DOUBLE">Volume target when fading or ramping</field>
      <field name="SoundID" type="OBJECTID">ID of the sound object set on this channel</field>
      <field name="SampleHandle" type="LONG">Internal handle reference</field>
      <field name="Flags" type="LONG" lookup="CHF">Special flags</field>
      <field name="Position" type="ULONG">Current playing/mixing position</field>
      <field name="Frequency" type="ULONG">Playback frequency</field>
      <field name="PositionLow" type="UWORD">Playing position, lower bits</field>
      <field name="Volume" type="WORD">Playing volume (0-100)</field>
      <field name="Priority" type="BYTE">Priority of the sound that has been assigned to this channel</field>
      <field name="State" type="BYTE" lookup="CHS">Channel state</field>
      <field name="LoopIndex" type="BYTE">The current active loop (either 0, 1 or 2)</field>
      <field name="Pan" type="BYTE">Pan value (-100 to +100)</field>
    </struct>

    <struct name="AudioCommand" comment="Audio command structure.">
      <field name="CommandID" type="LONG">Command ID</field>
      <field name="Handle" type="LONG">Channel handle</field>
      <field name="Data" type="LONG">Special data related to the command ID</field>
    </struct>

    <struct name="AudioLoop" comment="Loop settings for the AddSample() method.">
      <field name="LoopMode" type="WORD" lookup="LOOP">Loop mode (single, double)</field>
      <field name="Loop1Type" type="BYTE" lookup="LTYPE">First loop type (unidirectional, bidirectional)</field>
      <field name="Loop2Type" type="BYTE" lookup="LTYPE">Second loop type (unidirectional, bidirectional)</field>
      <field name="Loop1Start" type="LONG">Start of the first loop</field>
      <field name="Loop1End" type="LONG">End of the first loop</field>
      <field name="Loop2Start" type="LONG">Start of the second loop</field>
      <field name="Loop2End" type="LONG">End of the second loop</field>
    </struct>

    <struct name="AudioSample" comment="Audio sample structure">
      <field name="Data" type="UBYTE *">Private.  Pointer to the sample data.</field>
      <field name="StreamID" type="OBJECTID">Reference to an object to use for streaming</field>
      <field name="SampleLength" type="LONG">Length of the sample data, in bytes</field>
      <field name="Loop1Start" type="LONG">Start of the first loop</field>
      <field name="Loop1End" type="LONG">End of the first loop</field>
      <field name="Loop2Start" type="LONG">Start of the second loop</field>
      <field name="Loop2End" type="LONG">End of the second loop</field>
      <field name="SeekStart" type="LONG"></field>
      <field name="StreamLength" type="LONG"></field>
      <field name="BufferLength" type="LONG"></field>
      <field name="StreamPos" type="LONG">Current read position within the audio stream</field>
      <field name="SampleType" type="UBYTE">Type of sample (bit format)</field>
      <field name="LoopMode" type="BYTE">Loop mode (single, double)</field>
      <field name="Loop1Type" type="BYTE">First loop type (unidirectional, bidirectional)</field>
      <field name="Loop2Type" type="BYTE">Second loop type (unidirectional, bidirectional)</field>
      <field name="Used" type="BYTE"></field>
      <field name="Free" type="BYTE"></field>
    </struct>

    <struct name="ChannelSet" comment="Channel set management structure.">
      <field name="Channel" type="struct AudioChannel *">Array of channel objects</field>
      <field name="Commands" type="struct AudioCommand *">Array of buffered commands</field>
      <field name="TaskVolume" type="DOUBLE"></field>
      <field name="UpdateRate" type="LONG">Update rate, measured in milliseconds</field>
      <field name="MixLeft" type="LONG">Amount of mix elements left before the next command-update occurs</field>
      <field name="Total" type="WORD">Total number of base channels</field>
      <field name="Actual" type="WORD">Total number of channels, including oversampling channels</field>
      <field name="TotalCommands" type="WORD">Size of the command buffer</field>
      <field name="Position" type="WORD">Index to write the next command to</field>
    </struct>

    <struct name="VolumeCtl">
      <field name="Size" type="WORD">The size of the Channels array.</field>
      <field name="Name" type="char" size="32">Name of the mixer</field>
      <field name="Flags" type="LONG" lookup="VCF">Special flags identifying the mixer's attributes.</field>
      <field name="Channels" type="FLOAT" size="1">A variable length array of channel volumes.</field>
    </struct>

  </structs>
</book>
