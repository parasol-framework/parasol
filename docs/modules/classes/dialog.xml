<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Dialog</name>
    <type>class</type>
    <module>Widget</module>
    <comment>The Dialog class is used to pose a question and retrieve an answer from the user.</comment>
    <version>1</version>
    <id>f8c5fb75</id>
    <idstring>ID_DIALOG</idstring>
    <category>Tool</category>
    <include>modules/dialog.h</include>
    <copyright>Paul Manias 2003-2017</copyright>
    <description>
<p>The Dialog class provides the means for the creation of simple dialog windows, typically for the purpose of posing a question to the user and then waiting for a response before continuing.  You will need to specify the text to be printed inside the dialog box and the options for the user to click on. Optionally you may also specify an image to accompany the text for the purposes of enhancing the message.</p>
<p>This example creates a basic dialog box to elicit a Yes/No response from the user:</p>
<pre>obj.new('dialog', {
   image   = 'icons:items/question(48)',
   options = 'yes;no',
   title   = 'Confirmation Required',
   flags   = 'wait'
})
</pre>
<p>A simple input box can be created inside the dialog window if you need the user to type in a one-line string as part of the dialog response.  To do this, set the INPUT flag and write a string to the <field>UserInput</field> field if you wish to set a pre-defined response.  On successful completion, the UserInput field will be updated to reflect the user's string entry.</p>
<p>If a dialog box needs to be used multiple times, create it as static and then use the Show action to display the dialog window as required.  This effectively caches the window so that it does not need to be recreated from scratch each time that the dialog window needs to be displayed.</p>
<p>Any child objects that are initialised to a dialog will be activated in the event that a successful response is given by the user.  Failure to respond, or a response of 'cancel', 'quit' or 'none' will prevent the activation of the child objects.</p>
<p>The expected methodology for receiving a user's response to a dialog box is to set the <field>Feedback</field> field with a callback function.</p>
<header>Custom Dialogs</header>
<p>It is possible to create complex dialogs that use your own GUI controls and scripted functionality, all within the document that is presented by the dialog object.  This is done by injecting content into the dialog document.  Content is injected by setting the <field>Template</field> and <field>Inject</field> fields, or by using the <action>DataFeed</action> action.  Please refer to the documentation for the aforementioned areas for further information.</p></description>
    <source>
      <file>class_dialog.c</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Performs the native action of the object.</comment>
    </action>

    <action>
      <name>DataFeed</name>
      <comment>Refer to long description for supported feed types.</comment>
      <description>
<p>XML data is supported for setting the <field>Inject</field> and <field>Template</field> fields with XML definitions.  This is achieved by encapsulating the XML data with a tag name of either 'inject' or 'template' to match the target field.  This is recommended when customising a dialog, for example:</p>
<pre>dlg = obj.new('dialog')
dlg.acDataFeed(0, DATA_XML, [[
&lt;template&gt;
  ...
&lt;/template&gt;

&lt;inject&gt;
  ...
&lt;/inject&gt;
]])
</pre>
      </description>
    </action>

    <action>
      <name>GetVar</name>
      <comment>Retrieves named variables.</comment>
      <description>
<p>Supported variable templates are:</p>
<p>
<code>Option(Index, Response)</code> Returns the response value (an integer) of an option.  The Index is a number that indicates a option in the Options field.</p>
<p>
<code>Option(Index, Text)</code> Returns the text value of an option.  The Index is a number that indicates an option in the Options field.</p>
<p>
<code>Option(Index, Icon)</code> Returns the recommended icon for an option, e.g. "icons:items/checkmark".  The Index is a number that indicates an option in the Options field.</p>
      </description>
    </action>

    <action>
      <name>Refresh</name>
      <comment>Refreshes the state of the dialog box that is on display.</comment>
      <description>
<p>This action is typically called from custom dialogs that need to refresh the dialog due to a change in content.  The dialog's document object will be refreshed and then the window size will be automatically adjusted and repositioned to match the new size of the document (if necessary).</p>
      </description>
    </action>

    <action>
      <name>SetVar</name>
      <comment>Sets named variables that are relevant to the developer only.</comment>
    </action>

    <action>
      <name>Show</name>
      <comment>Displays the dialog window.</comment>
      <description>
<p>Call the Show action to display the dialog window.  If you have set the WAIT option in the <field>Flags</field> field, the process will be put to sleep in a message processing loop while it waits for the user to respond to the dialog box.  After the Show action returns, you will be able to read the <field>Response</field> field for the user's response to the dialog box.</p>
      </description>
    </action>

  </actions>

  <fields>
    <field>
      <name>Feedback</name>
      <comment>A callback for receiving the user's response to the dialog.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>Set this field with a reference to a callback function to receive notifications when the user responds to a dialog. The synopsis for the callback function is <code>ERROR Function(objDialog *Dialog, LONG Response)</code>.</p>
<p>Please refer to the <field>Response</field> field to view the available values that can be returned in the Response parameter.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags may be defined here.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="DF">INT</type>
      <description>
<types lookup="DF"/>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>The internal height of the dialog window.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>Icon</name>
      <comment>The icon that appears in the window title bar may be set here.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>A question-mark icon is set in the dialog window by default, however you may change to a different icon image if you wish.  If you would like to refer to a stock icon, use the file format, <code>icons:category/name</code>.</p>
      </description>
    </field>

    <field>
      <name>Image</name>
      <comment>An icon file may be specified here in order to visually enhance the dialog message.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Images may be used inside a dialog window to enhance the message that is presented to the user.  A number of icons are available in Parasol's icon library that are suitable for display in dialog boxes (the icons:items/ directory contains most of these).  The image should be no larger than 48x48 pixels and no less than 32x32 pixels in size.</p>
      </description>
    </field>

    <field>
      <name>Inject</name>
      <comment>Allows formatted text to be injected into the dialog window's document.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The Inject field allows customised formatted text to be inserted into the dialog (for example images, GUI controls and other presentation concepts).  The injected content must be in the RIPPLE document format.  As no restrictions are applied to the injected content, you may use all of the available RIPPLE tags.</p>
<p>The injected content is inserted immediately after the dialog's content - for example the <field>Message</field> - and before the <field>Options</field>.</p>
<p>We recommend that you keep the styling of your content to a minimum, or your content may contrast poorly with the dialog theme that is active.  Please use the <field>Template</field> field if you would like to redefine the presentation of the dialog.</p>
      </description>
    </field>

    <field>
      <name>Message</name>
      <comment>A message to print inside the dialog box must be declared here.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The message to display in the dialog box is declared in this field. The string must be in UTF-8 format and may contain line feeds if the text needs to be separated.</p>
      </description>
    </field>

    <field>
      <name>Option</name>
      <comment>Enables a user option box in the dialog when set.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>A dialog box can contain a single user option by setting this field on initialisation.  The option is typically presented as a checkbox and has a state of either 1 (on) or 0 (off).</p>
<p>The string value set in this field is used to present the option to the user.</p>
      </description>
    </field>

    <field>
      <name>Options</name>
      <comment>Options for the dialog box are defined through this field.</comment>
      <access write="S">Set</access>
      <type>STRING</type>
      <description>
<p>Use the Options field to define a series of options that will appear in the dialog box.  Setting this field is compulsory in order for a dialog object to initialise.  This field is set using the following field format: <code>"response:text; response:text; ..."</code>.</p>
<p>Each option definition is separated by a semi-colon and the order that you use reflects the option creation, scanning from left to right in the dialog window. You must define a response type for each option, which may be one of Cancel, Yes, YesAll, No, NoAll, Quit and Okay.  A special response type of None is also allowed if you want to create a dummy option that only closes the dialog window.  The response definition may be followed with a colon and then a text description to be displayed inside the option area.  If you do not wish to declare a text description, you can follow-up with a semi-colon and then the next option's description.</p>
<p>When an option is selected, the matching response value will be written to the <field>Response</field> field and then the dialog window will be closed.</p>
      </description>
    </field>

    <field>
      <name>PopOver</name>
      <comment>Open the dialog window at a position relative to the surface specified here.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>OBJECTID</type>
      <description>
<p>Specifying the PopOver option will open the dialog window at a position relative to the surface specified here.  Please refer to the <class name="Window" index="PopOver">Window:PopOver</class> field for further information.</p>
      </description>
    </field>

    <field>
      <name>Response</name>
      <comment>Holds the response value when an option is selected.</comment>
      <access read="R" write="S">Read/Set</access>
      <type lookup="RSF">INT</type>
      <description>
<p>This field holds the response value when an option is selected by the user.  If no response was returned (for example, the user closed the dialog window rather than clicking an option) then the value will be zero.</p>
<p>Please use <field>Feedback</field> to pro-actively receive the user's response to the dialog.</p>
<types lookup="RSF"/>
      </description>
    </field>

    <field>
      <name>StickToFront</name>
      <comment>If TRUE, the dialog window will stick to the front of the display.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>Target</name>
      <comment>The target for the dialog box window is specified here.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>OBJECTID</type>
      <description>
<p>The window for a dialog box will normally be created on the desktop.  On occasion it may be useful to have the window appear in a different area, such as inside another window or screen.  To do this, point the Target field to the unique ID of the surface that you want to open the window on.</p>
<p>The target may not be changed after initialisation.</p>
      </description>
    </field>

    <field>
      <name>Template</name>
      <comment>Injects style information into the dialog's document object.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The presentation of the dialog window is controlled by an internal document object.  A default style is set for the document which you may override by defining your own template and referring io it here.  The template can be referenced as a path to a file that contains the template information, or you may use the <code>STRING:file content...</code> format to store the template data in memory.</p>
<p>Alternatively a default dialog template can be stored at the location "templates:dialog.rpl".  Please store your template here if you are designing a system-wide template for an environment.</p>
<p>To alter the document style, use the body tag in your template to redefine attributes such as the default font face, background colour and the colour of links.  GUI controls can be re-styled by using class templates.  The header and footer tags may also be used to add content to the top and bottom of the dialog.</p>
<p>Two special arguments are available to use in the document - dialog translates to an object ID referring to the dialog object; window translates to an object ID referring to the dialog window.</p>
<p>To intercept responses when the user clicks on a dialog option, create a script in your template with the name 'dlgCustom'.  Declare a procedure called 'DialogResponse' that accepts a parameter that will receive the response value.  The dialog object will call this function whenever the user selects an option.  The following example illustrates:</p>
<pre>dlg = obj.new('dialog', { @arg="hello" })
dlg.acDataFeed(0, DATA_XML, [[
&lt;template&gt;
  &lt;script type="fluid" name="dlgCustom"&gt;
    &lt;![NDATA[
   local self   = obj.find("self")
   local dialog = obj.find(arg("dialog"))

function dlgResponse(Dialog, Response)
   Response = tonumber(Response)

   local doc = obj.find(self.owner)
   if (doc) then
      if (Response == RSF_OKAY) then
         // User clicked the OK option
      else
         dialog.response = Response
      end
   end
end
    ]]&gt;
  &lt;/script&gt;
&lt;/template&gt;
]])
</pre>
<p>If you wish to ignore the response so that it is handled in the normal manner (this will result in the dialog window closing) then set the dialog's <field>Response</field> field from your code.  If you would like to refresh the dialog to display new custom content, use your script to call the <action>Refresh</action> action on the dialog.</p>
      </description>
    </field>

    <field>
      <name>Title</name>
      <comment>The window title for the dialog box.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
    </field>

    <field>
      <name>TotalOptions</name>
      <comment>Indicates the total number of options declared in the Options field.</comment>
      <access read="R">Read</access>
      <type>INT</type>
    </field>

    <field>
      <name>Type</name>
      <comment>Indicates the type of dialog presented to the user.</comment>
      <access read="R" write="S">Read/Set</access>
      <type lookup="DT">INT</type>
      <description>
<p>The type of the dialog that is being presented to the user can be indicated here.  Defining the Type is recommended as it can enhance the presentation of the dialog in certain situations.  Enhanced user feedback, such as the inclusion of an appropriate image and audio playback may also be presented to the user as a result of setting the Type.</p>
<types lookup="DT"/>
      </description>
    </field>

    <field>
      <name>UserInput</name>
      <comment>Text for the dialog input box may be retrieved or defined here.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>If you are creating a dialog box with a user input area, you may optionally specify an input string to be displayed inside the input box.  The user will be able to edit the string as he sees fit.  Once the user has responded to the dialog window, you can read this field to discover what the user has entered.</p>
<p>Note: When the user responds to an input entry field by pressing the enter key, the dialog object will set a <field>Response</field> of OKAY.  To simplify the interpretation of dialog responses, we recommend that an 'okay' <field>Option</field> setting accompanies the dialog (as opposed to a 'yes' option for example).</p>
      </description>
    </field>

    <field>
      <name>Value</name>
      <comment>Indicates the user state of the dialog's option box, if enabled.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>This field has meaning if the <field>Option</field> field has been set in the creation of the dialog box.  When the dialog box is closed following presentation, the Value will be set to 1 if the option box was checked or 0 if unchecked.</p>
      </description>
    </field>

    <field>
      <name>Width</name>
      <comment>The internal width of the dialog window.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>Window</name>
      <comment>Refers to the ID of the window created by the dialog object.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>OBJECTID</type>
      <description>
<p>This readable field references the ID of the dialog box's window.  It is only usable on successful initialisation of a dialog box.  It is recommended that you avoid tampering with the generated window, but direct access may be useful for actions such as altering the window position.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="VWF" comment="View flags.">
      <const name="WIDTH_RESET">Always reset column widths when the Columns field is set.</const>
      <const name="NO_SORTING">No user sorting, e.g. in column mode.</const>
      <const name="SENSITIVE">Sensitive mode will activate child objects when the user single-clicks with the mouse (by default, child activation only occurs with double-clicks).</const>
      <const name="NO_ICONS">Do not load or show any icons.</const>
      <const name="NOTIFY_ON_CLEAR">If the view should activate itself when cleared, set this flag. By default, activation normally only occurs when an item is double-clicked or when sensitive mode is enabled.</const>
      <const name="DRAG_DROP">Enables drag and drop for items in the view. In this mode, multi-select is only possible if the shift or ctrl keys are held while using the mouse.</const>
      <const name="NO_SELECT">Stop the user from selecting items.</const>
      <const name="NO_SELECT_JMP">When a new item is selected, the view will jump to that item if it is not completely visible to the user. Setting this flag will turn off this behaviour.</const>
      <const name="USER_DRAG">Enable drag and drop only if the user prefers it.</const>
      <const name="AUTO_DESELECT">Deselects a highlighted item when it is activated by mouse click or enter key.</const>
      <const name="MULTI_SELECT">Allow multiple item selections without having to hold the shift key.</const>
    </constants>

    <constants lookup="MHG" comment="Menubar highlighting flags.">
      <const name="LIGHT_BKGD">Lightens the background behind the menu item.</const>
      <const name="DARK_BKGD">Darkens the background behind the menu item.</const>
      <const name="SUNKEN">Draws a sunken border around the item using the highlight and shadow colours.</const>
      <const name="RAISED">Draws a raised border around the item using the highlight and shadow colours.</const>
      <const name="BORDER">Draws a border around the menu item using the default highlight colour.</const>
      <const name="TEXT">Highlights the menu item text using the highlight colour.</const>
    </constants>

    <constants lookup="MNF" comment="Flags for the Menu class.">
      <const name="SHOW_KEYS">Print key controls on the right.</const>
      <const name="POINTER_XY">Synonym for POINTER_PLACEMENT</const>
      <const name="SHOW_ICONS">Synonym for SHOW_IMAGES</const>
      <const name="SHOW_IMAGES">Allow for an image column on the left.</const>
      <const name="POINTER_PLACEMENT">Menu is placed at the position of the mouse pointer when shown.</const>
      <const name="REVERSE_Y">Menu's open in reverse vertical order.</const>
      <const name="CACHE">Cache menu surface once created.</const>
      <const name="IGNORE_FOCUS">Do not hide the menu if it loses the focus.</const>
      <const name="SORT">Sort all items by name.</const>
      <const name="EXT_COLUMN">Allow for an extension indicator column on the right.</const>
      <const name="PRESERVE_BKGD">Preserve background when scrolling.</const>
      <const name="REVERSE_X">Menu's open in reverse horizontal order.</const>
      <const name="NO_HIDE">Activate() is prevented from hiding the menu.</const>
      <const name="POPUP">Locks the position of the menu to the mouse pointer.</const>
      <const name="NO_TRANSLATION">Do not translate menu text to the user's native language.</const>
    </constants>

    <constants lookup="INF" comment="Flags for the Input class.">
      <const name="RAISED">Draw the input box with a raised (3D) border edge.  Read-only.</const>
      <const name="NO_GFX">Do not generate any text or image graphics using internal routines (use the Template graphics definition).</const>
      <const name="SELECT_TEXT">Select all text when the input box is shown for the first time.</const>
      <const name="SUNKEN">Reverses the highlight and shadow definitions to create a sunken effect.  Read-only.</const>
      <const name="HIDE">Hide on creation, or input is currently hidden.</const>
      <const name="ENTER_TAB">Press enter results in a virtual tab-keypress being sent.</const>
      <const name="SECRET">Used for secret user entry (passwords).</const>
      <const name="DISABLED">Disable on creation.</const>
      <const name="NO_BKGD">Do not draw background graphics (automatically set if Template graphics are used).</const>
      <const name="ACTIVE_DRAW">Pro-actively redraw the object when graphics alterations are made.</const>
      <const name="COMMANDLINE">Function as a command-line.  Typically used when the input box needs to remain persistent and is linked to an output system, such as a shell.</const>
    </constants>

    <constants lookup="BTF" comment="Button flags.">
      <const name="NO_GFX">Turns off the button's foreground graphics (text and images).</const>
      <const name="PULSE">Send repeated clicks when the mouse button is held down.</const>
      <const name="SUNKEN">Reverses the highlight and shadow definitions to create a sunken effect.</const>
      <const name="HIDE">Hide on creation, or button is currently hidden.</const>
      <const name="NO_FOCUS_GFX">Do not draw any graphics when the button has the focus.</const>
      <const name="DISABLED">Disable on creation, or button is currently disabled.  Read-only.</const>
      <const name="NO_BKGD">Do not draw background graphics (automatically set if styles are used).</const>
      <const name="FADE_BORDER">Fade the border edges into the button colour (requires thickness &gt; 1).</const>
      <const name="NO_FOCUS">Never draw lines around the button to indicate that it has the focus.</const>
    </constants>

    <constants lookup="MIF" comment="Flags for MenuItems.">
      <const name="SELECTED">The menu item has been selected (checked).</const>
      <const name="EXTENSION">Menu item is an extension.</const>
      <const name="NO_KEY_RESPONSE">Display the key, but do not respond to its equivalent key press.</const>
      <const name="SORT">Sort all content under the menuitem (applies only to extensions).</const>
      <const name="TOGGLE">Enables toggled menu items (checking state of on and off).</const>
      <const name="OPTION">Item is a clickable option (clicking the item's icon will turn the option on/off).</const>
      <const name="DISABLED">Set if the menu item is disabled (ghosted).</const>
      <const name="CATEGORISE">Categorise the attached config file.</const>
      <const name="BREAK">Menu item is acting as a break.</const>
      <const name="KEY_REPEAT">Respond to repeated key presses.</const>
    </constants>

    <constants lookup="CBF" comment="CheckBox flags.">
      <const name="DISABLED">Disable on creation, or object is currently disabled.</const>
      <const name="HIDE">Hide on creation, or object is currently hidden.</const>
      <const name="FADE_BORDER">Fade the border edges into the checkbox colour (requires thickness greater than 1).</const>
      <const name="NO_BKGD">Do not draw background graphics (automatically set if Template graphics are used).</const>
    </constants>

    <constants lookup="FVA" comment="Options for the Auto field.">
      <const name="OPEN">Open the file with the user's preferred program for this file type.</const>
      <const name="EDIT">Edit the file in a program suitable for editing this file type.</const>
      <const name="VIEW">View the file in a program suitable for read-only viewing.</const>
    </constants>

    <constants lookup="FVF" comment="Flags for the FileView.">
      <const name="SHOW_PARENT">The file view will display an item in the file list that reverts to the parent folder when activated.</const>
      <const name="NO_FILES">Do not display files in the file list.</const>
      <const name="SYS_KEYS">System key monitoring and relevant default behaviours are active when this option is enabled.  Cut, Copy, Paste and Select-All key combinations are provided to the user in this mode.</const>
      <const name="NO_EXTENSIONS">File extensions are not displayed when this option is active.</const>
      <const name="TOTAL_REFRESH">Force a total refresh of the files listed in the monitored folder whenever a change is detected.</const>
    </constants>

    <constants lookup="DF" comment="Dialog flags.">
      <const name="SECRET">User input needs to be secret (e.g. password entry).</const>
      <const name="QUIT">A quit message will be sent to the running application once the dialog window is closed.</const>
      <const name="MODAL">Makes the dialog window modal, this prevents the user from interacting with other windows that belong to the program.  For batch scripts, the WAIT flag should be used instead.</const>
      <const name="REVERSE">Reverse the activation process (respond to negatives, not positives).</const>
      <const name="WAIT">This option halts the program flow when the dialog box is activated.  Normal service will resume once the user responds to the dialog window.  Note that it is still possible to interact with other windows during this time, so the use of the MODAL flag may also be beneficial.</const>
      <const name="INPUT">An input box can be created inside the dialog window by setting this flag.  In this mode, the dialog box will return a user input string in the UserInput field after the user has responded to the dialog window.</const>
      <const name="OPTION_ON">Turn the checkbox option on by default.</const>
      <const name="INPUT_REQUIRED">This flag can be used in conjunction with the INPUT option.  It forces the user to input at least one character in the input box, otherwise the dialog window will automatically cancel itself.</const>
    </constants>

    <constants lookup="DT" comment="Types of dialog box">
      <const name="MESSAGE">The default setting.</const>
      <const name="CRITICAL">A highly critical error is being reported to the user.</const>
      <const name="ERROR">An error is being reported to the user.</const>
      <const name="WARNING">A warning message is being reported to the user.</const>
      <const name="ATTENTION">The dialog requests the user's immediate attention.</const>
      <const name="ALARM">The dialog is presented as a response to a preset alarm.</const>
      <const name="HELP">Help text is being presented in the dialog.</const>
      <const name="INFO">The dialog is providing the user with specific information on a topic.</const>
      <const name="QUESTION">A question is being asked of the user.</const>
      <const name="REQUEST">A request is being made (e.g. dialog requires user to type in input).</const>
      <const name="TEMPORARY">The dialog box will disappear after a short time-out period has expired.</const>
    </constants>

    <constants lookup="IMF" comment="Image flags">
      <const name="NO_DRAW">Stops automatic drawing of the target surface if the image is being animated or a special effect is active.</const>
      <const name="FIXED">Synonym for FIXED_SIZE</const>
      <const name="ENLARGE">If the dimensions of the original picture are smaller than the destination surface, the image will be stretched to fit.  Enlargement is dynamic, so if the surface changes in size then the size of the picture will be recalculated to fit.</const>
      <const name="NO_FAIL">If the source image file does not exist or an error occurs during loading, the image object will still pass the initialisation process successfully.  When the image object is drawn, it will clear the target surface to the colour specified in the Background field.</const>
      <const name="SHRINK">If the dimensions of the original picture are larger than the destination surface, the image will be stretched to fit.  Shrinking is dynamic, so if the surface changes in size then the size of the picture will be recalculated to fit.</const>
      <const name="SOLID_BLEND">Synonym for NO_BLEND</const>
      <const name="FIT">This flag applies to image resizing.  When set, the calculated width and height will be limited so that the image cannot be stretched beyond the edges of the target surface.  This flag is commonly set in conjunction with the 11RATIO flag.</const>
      <const name="NO_BLEND">Turns off alpha-blending if the target surface has the COMPOSITE flag set and the source image has an alpha channel.</const>
      <const name="FIXED_SIZE">Image data will normally be stored at its original size and resized on the fly when the STRETCH flag is used.  Setting the FIXED_SIZE flag will pre-scale the image and permanently store it at that size.</const>
      <const name="STRETCH">This flag conveniently combines the ENLARGE and SHRINK flags to ensure that the image always covers the dimensions of the destination surface.</const>
      <const name="SCALABLE">The image source is scalable (e.g. vector graphic).</const>
      <const name="STICKY">All calls to Move and MoveToPoint are ignored if this flag is set.</const>
      <const name="11_RATIO">When resizing the image, the calculated width and height will always be in correct proportion relative to the source image's original width and height.</const>
    </constants>

    <constants lookup="CMF" comment="ComboBox flags.">
      <const name="AUTO_COMPLETE">When in edit mode, this option helps the user by auto-completing text.</const>
      <const name="EDIT">Enable edit mode, which allows the user to write free-text in the combobox.</const>
      <const name="SUNKEN">Reverses the highlight and shadow definitions to create a sunken effect.</const>
      <const name="HIDE">Hide on creation, or combobox is currently hidden.</const>
      <const name="SHOW_ICONS">Show icons in the dropdown list.</const>
      <const name="LIMIT_TO_LIST">When in edit mode, limit-to-list prevents the user from entering text that isn't in the combobox list.</const>
      <const name="NO_BKGD">Do not draw background graphics (automatically set if Template graphics are used).</const>
      <const name="DISABLED">Disable on creation; or combobox is currently disabled.</const>
      <const name="NO_TRANSLATION">Do not attempt to translate combobox strings or the drop-down menu to the user's native language.</const>
    </constants>

    <constants lookup="TIF" comment="MenuBar item flags.">
      <const name="DISABLED">Item is disabled.</const>
      <const name="STATEMENT">The script reference is a statement string.</const>
      <const name="FOCUS">Item has the user focus.</const>
    </constants>

    <constants lookup="CLF" comment="Clipboard flags">
      <const name="WAIT">The clipboard will wait for the user to respond to user dialogs rather than return immediately from clipboard operations.</const>
      <const name="HOST"/>
    </constants>

    <constants lookup="SD" comment="Scroll directions.">
      <const name="NEGATIVE"/>
      <const name="POSITIVE"/>
    </constants>

    <constants lookup="TXF" comment="Flags for the Text class.">
      <const name="SECRET">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="PRESERVE_BKGD">Preserve-background disables fast scrolling for background preservation.</const>
      <const name="AREA_SELECTED">This read-only flag is set automatically when the user has selected an area of text.</const>
      <const name="GLOBAL_EDITING">Keeps the text object in edit mode regardless of user focus.</const>
      <const name="SINGLE_SELECT">Enables text selection (with or without edit mode).  If in line mode, a single click will allow the user to highlight any line.</const>
      <const name="DISABLED">This read-only flag is set if the object has been disabled through the Disable action.</const>
      <const name="OVERWRITE">Turns on overwrite mode (if off, insert mode is enabled).</const>
      <const name="SELECT">Synonym for MULTI_SELECT | SINGLE_SELECT</const>
      <const name="ENTER_TAB">Convert enter-key presses to the tab-key.</const>
      <const name="FORCE_CAPS">This flag forces the capitalisation of all text that is entered into the object.</const>
      <const name="AUTO_CLEAR">Clears the text string when the enter key is pressed.</const>
      <const name="EDIT">This flag must be enabled if the user is permitted to change the text string with the keyboard.</const>
      <const name="STRETCH">If the font is scalable, the text string will be resized to fit inside the surface that contains it (i.e. no characters will be clipped).  This is acheived by recalculating the font's point size.</const>
      <const name="WORDWRAP">Enables word wrapping.</const>
      <const name="AUTO_SELECT">Automatically select all text if the text object receives the focus.</const>
      <const name="TAB_KEY">If the tab key is pressed, print the tab character.</const>
      <const name="PASSWORD">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="MULTI_SELECT">Allow the user to select/highlight multiple lines by holding the Ctrl key.</const>
      <const name="VARIABLE">This flag forces a text object to recalculate any variable references in its string data whenever a redraw occurs.  Such references are indicated through square brackets, e.g. [desktop.width].  Refer to the StrEvaluate() function in the Strings module for more information.</const>
      <const name="STR_TRANSLATE">Translate strings to the user's native language.</const>
      <const name="HISTORY">Enables historical browsing when the up/down cursor keys are used.  The number of historical lines stored can be set in the HistorySize field.</const>
      <const name="NO_SYS_KEYS">This flag is set by default to enable system key support.  System-keys provide support for common key combinations such as Ctrl-C, Ctrl-X etc.</const>
      <const name="BACKGROUND">Enables a colour background behind the text.</const>
      <const name="TAB_ENTRY">Pressing the tab key is treated the same as pressing enter.</const>
      <const name="COMMANDLINE">Synonym for AUTO_CLEAR | EDIT | HISTORY</const>
    </constants>

    <constants lookup="SO" comment="Direction options">
      <const name="HORIZONTAL"/>
      <const name="VERTICAL"/>
    </constants>

    <constants lookup="SBF" comment="Scrollbar flags.">
      <const name="CONSTANT">Ensures that the scrollbar is always on display.</const>
      <const name="RELATIVE">Enables relative scrolling (movement is reported relative to the current slider position rather than in absolute coordinates).</const>
      <const name="HIDE">Hide on creation, or scrollbar is currently hidden.</const>
      <const name="SLIDER">If set, the scrollbar behaves as a slider.  In this mode, the size of the draggable slider has a fixed size (by default the slider is proportional).</const>
      <const name="NO_INTERSECT">Do not attempt to intersect with adjacent scrollbars.</const>
    </constants>

    <constants lookup="CLIPTYPE" comment="Clipboard types">
      <const name="DATA">Raw information that is uncategorised can be defined as a data clip.</const>
      <const name="FILE">Pure file references are stored as file clips.  This type is typically used by file managers for moving and copying files.</const>
      <const name="TEXT">Plain text files such as ASCII and UTF-8 must be identified through this clip type.</const>
      <const name="AUDIO">An audio clip that is recognised by the Sound class (such as wav's and mp3's).</const>
      <const name="IMAGE">Images that are recognised by the Picture class may be stored as this type (such as jpeg's and png files).</const>
      <const name="OBJECT">An object that has been deserialised into binary form.</const>
    </constants>

    <constants lookup="SLF" comment="Flags for SelectCallback">
      <const name="ACTIVE">The most recently active tag has changed.</const>
      <const name="MANUAL">Item was manually selected (by the program, not the user).</const>
      <const name="SELECTED">A tag has been selected and is now highlighted.</const>
      <const name="INVERTED">Change is due to an inverted selection.</const>
      <const name="KEYPRESS">Item was selected by a keypress.</const>
      <const name="CLICK">Item was clicked - see ClickX and ClickY for coordinates.</const>
      <const name="MULTIPLE">Multiple items were selected.</const>
      <const name="MOVED">Change is due to the item being moved.</const>
    </constants>

    <constants lookup="TF" comment="Flags for the TabFocus class.">
      <const name="LOCAL_FOCUS">In this mode, the user's point of focus must match the monitored Surface for the tabfocus to function.</const>
      <const name="CHILD_FOCUS">In this mode, the user's point of focus must match the monitored Surface or one of its immediate children for the tabfocus to function.</const>
      <const name="LIMIT_TO_LIST">In limit-to-list mode, the tabfocus only functions if the user's point of focus is on the monitored Surface or one of objects in the tab list.</const>
    </constants>

    <constants lookup="VGF" comment="Graphics options (normally defined by the template)">
      <const name="OUTLINE_TITLE">Draw black outline around title text.</const>
      <const name="NO_BORDER">Do not draw a border around column headers when in table mode.</const>
      <const name="DRAW_TABLE">Draw the view as a table (the basic format is the same, graphics are different).</const>
      <const name="GROUP_SHADOW">Draw a shadow underneath the group graphics headers.</const>
      <const name="STRIPES">Draw stripes in group titles.</const>
      <const name="HAIRLINES">Draw a hairline between each column.</const>
      <const name="BRANCHES">Draw grey tree branches.</const>
      <const name="ALT_GROUP">Alternate the group header graphics.</const>
      <const name="LINE_BREAKS">Draw a line break between each view item.</const>
    </constants>

    <constants lookup="VIEW" comment="List options">
      <const name="LIST">Standard list view with small icons, arranged from top to bottom.</const>
      <const name="ICON">Similar to list-view but with large icons, arranged from left to right.</const>
      <const name="TREE">Tree mode can be used if the items are arranged in a hierarchy, where items can be embedded within items.  The tree view provides small buttons that the user can click to expand the tree and view hidden items.</const>
      <const name="COLUMN">Long list with detail columns.</const>
      <const name="LONG_LIST">This type is the same as the LIST view but the items will not wrap back to the top of the view when the bottom edge of the surface is encountered.</const>
      <const name="GROUP_TREE">Similar to tree view, but root level nodes are drawn as a headline.</const>
      <const name="DOCUMENT">Document mode allows view data to be passed to a document object for display.  You are required to provide a document object that is pre-loaded with a template capable of processing input from the view object.  Refer to the Document field for more information.</const>
      <const name="COLUMN_TREE">This mode combines the column and tree modes.  The view displays the layout and style of normal column mode, but the first column is used to display and manage a tree hierarchy.  The tree can be expanded and collapsed just as in the standard tree mode.</const>
    </constants>

    <constants lookup="RSP">
      <const name="CANCEL"/>
      <const name="YES"/>
      <const name="YES_ALL"/>
      <const name="NO"/>
    </constants>

    <constants lookup="RSF" comment="Dialog response flags">
      <const name="NO">Negative response.</const>
      <const name="CUSTOM_2">Developer customised option 2 - neutral response.</const>
      <const name="YES">Positive response.</const>
      <const name="CUSTOM_4">Developer customised option 4 - neutral response.</const>
      <const name="NO_ALL">Negative response.</const>
      <const name="OKAY">Positive response.</const>
      <const name="CANCEL">Negative response.</const>
      <const name="YES_ALL">Positive response.</const>
      <const name="CLOSED">Window closed without response.</const>
      <const name="OK">Positive response.</const>
      <const name="CUSTOM_3">Developer customised option 3 - neutral response.</const>
      <const name="NEGATIVE">Synonym for CANCEL | NO | QUIT | NO_ALL | CLOSED</const>
      <const name="POSITIVE">Synonym for YES | YES_ALL | OKAY | CUSTOM_1 | CUSTOM_2 | CUSTOM_3 | CUSTOM_4</const>
      <const name="QUIT">Negative response.</const>
      <const name="NONE">Do nothing dummy flag.</const>
      <const name="OPTION">Combobox option ticked.</const>
      <const name="CUSTOM_1">Developer customised option 1 - neutral response.</const>
      <const name="RETRY"/>
    </constants>

    <constants lookup="AXIS" comment="Axis options.  This determines the axis that is signalled when the slider is moved (note that it is feasible for a horizontal scrollbar to signal the Y axis, if this is desired by the client)">
      <const name="X"/>
      <const name="Y"/>
      <const name="Z"/>
    </constants>

    <constants lookup="MBF" comment="Menubar flags.">
      <const name="DISABLED">Disable on creation.  Automatically switched by the Disable and Enable actions.</const>
      <const name="HIDE">Hide on creation, or menubar is currently hidden.</const>
      <const name="BREAK">Draw a break-line at the bottom of the menubar.</const>
    </constants>

    <constants lookup="CEF">
      <const name="DELETE">Requests that the original file source is deleted if a successful paste operation takes place.</const>
      <const name="EXTEND">Instead of replacing existing clipboard data, add the new data to the group.</const>
    </constants>

    <constants lookup="FEF" comment="Event flags.">
      <const name="LOCATION">The location has been changed (user has moved to a different folder).</const>
    </constants>

    <constants lookup="SCF" comment="Scroll flags.">
      <const name="FIXED">Fixes the scroll slider to a specific size (non-proportional mode of operation).</const>
      <const name="REVERSE">When reporting the position of the slider, the value will always be reversed - so positive values will be negative and vice versa.  Reporting for relative position changes are also affected.</const>
      <const name="VERTICAL">The scrollbar is oriented vertically.</const>
      <const name="RELATIVE">Forces relative scrolling through the Scroll action rather than the default ScrollToPoint.</const>
      <const name="AUTO_ACTIVATE">The scroll object automatically activates itself whenever the position of the slider is changed.</const>
      <const name="AUTO_HIDE">Automatically hide the scrollbar when possible.</const>
      <const name="INVISIBLE">Keep scrollbar invisible.</const>
      <const name="HORIZONTAL">The scrollbar is oriented horizontally.</const>
      <const name="SLIDER">Changes the mode of operation so that the slider is non-proportional.  The size of the view is also set to a fixed value and resizing of the parent surface no longer affects the scroll values.</const>
      <const name="MESSAGE">Use used delay messages for activation of children.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
