<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>MenuItem</name>
    <type>class</type>
    <module>Widget</module>
    <comment>Manages the data of menu items.</comment>
    <version>1</version>
    <id>7b8d1cc9</id>
    <idstring>ID_MENUITEM</idstring>
    <category>GUI</category>
    <include>modules/menuitem.h</include>
    <copyright>Paul Manias 2003-2020</copyright>
    <description>
<p>The MenuItem is an integral part of the <class name="Menu">Menu</class> class.  It is used to represent the individual items that are listed in a menu.  Following initialisation, any MenuItem can be modified at run-time to make simple changes to the menu.  For complex or extensive changes, it may be more efficient to recreate the menu from scratch.</p>
<p>It is not possible for a MenuItem to be owned by any object other than a <class name="Menu">Menu</class>.</p></description>
    <source>
      <file path="class_menu/">menuitem.cpp</file>
    </source>
  </info>

  <fields>
    <field>
      <name>Background</name>
      <comment>Background colour for the item.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>The background colour for the item is defined here.</p>
      </description>
    </field>

    <field>
      <name>Bitmap</name>
      <comment>A <class name="Bitmap">Bitmap</class> icon to display next to item text.</comment>
      <access read="R" write="W">Read/Write</access>
      <type class="Bitmap">*Bitmap</type>
      <description>
<p>If the configuration of a menu item refers to a valid picture file, this field will be set to a rendered Bitmap icon after initialisation.</p>
      </description>
    </field>

    <field>
      <name>Colour</name>
      <comment>The colour to use when rendering text for this item.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>This field defines the colour that will be used for rendering the item's text.  The alpha component is supported for blending with the background.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="MIF">INT</type>
      <description>
<p>Optional flags are are defined here.</p>
<types lookup="MIF"/>
      </description>
    </field>

    <field>
      <name>Group</name>
      <comment>Group identifier, relevant for checkmark items.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>Grouping can be used on checkmark items that need to behave in a way that is functionally identical to radio buttons. When multiple checkmark items are the same group ID, activating any one of the items will cause the others to become unmarked.</p>
<p>This field is set to zero by default, which turns off the grouping feature.</p>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>The pixel height of the item.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>The current pixel height of the menu item is reflected in this field.  This field is calculated as required and cannot be customised.</p>
      </description>
    </field>

    <field>
      <name>ID</name>
      <comment>User-defined unique identifier.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>It is recommended that all MenuItem's are given a unique, custom ID so that they can be easily referenced by methods that support ID lookups.</p>
      </description>
    </field>

    <field>
      <name>Index</name>
      <comment>Item index.  Follows the order of the items as listed in the menu.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>The Index value reflects the position of this item within the menu.</p>
      </description>
    </field>

    <field>
      <name>Key</name>
      <comment>Shortcut key for this item.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>If a MenuItem is to be accessible via a keyboard shortcut, a valid key-code must be referenced here in conjunction with a <field>Qualifiers</field> value.</p>
      </description>
    </field>

    <field>
      <name>Name</name>
      <comment>The menu item can be given a name here.  It is not necessary for the string to be unique.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>This field allows non-unique names to be assigned to menu items.</p>
      </description>
    </field>

    <field>
      <name>Next</name>
      <comment>The next MenuItem in the list.</comment>
      <access read="R">Read</access>
      <type class="MenuItem">*MenuItem</type>
      <description>
<p>Refers to the next MenuItem in the linked list, or NULL if this is the last entry.</p>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>The path of a menu configuration file, if this item links to a sub-menu.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>If the MenuItem opens a sub-menu, the path of the configuration file can be specified here.  If using an external file is undesirable, consider passing the configuration through the XML <action>DataFeed</action> instead.</p>
      </description>
    </field>

    <field>
      <name>Prev</name>
      <comment>The previous item in the list.</comment>
      <access read="R">Read</access>
      <type class="MenuItem">*MenuItem</type>
      <description>
<p>Refers to the previous MenuItem in the linked list, or NULL if this is the first entry.</p>
      </description>
    </field>

    <field>
      <name>Qualifiers</name>
      <comment>Key qualifiers for this item's keyboard shortcut.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="KQ">INT</type>
      <description>
<p>If a MenuItem is to be accessible via a keyboard shortcut, at least one valid qualifier must be referenced here in conjunction with a <field>Key</field> value.  Valid qualifier flags are as follows:</p>
<types lookup="KQ"/>
      </description>
    </field>

    <field>
      <name>SubMenu</name>
      <comment>Refers to a sub-menu if this item is a menu extension.</comment>
      <access read="G" write="W">Get/Write</access>
      <type class="Menu">*Menu</type>
      <description>
<p>If an item refers to a sub-menu, the generated <class name="Menu">Menu</class> can be read from this field.</p>
      </description>
    </field>

    <field>
      <name>Text</name>
      <comment>The text string to display for this item.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>The text string that is rendered in the item is declared here.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

  </fields>
  <types>
    <constants lookup="MIF" comment="Flags for MenuItems.">
      <const name="BREAK">Menu item is acting as a break.</const>
      <const name="CATEGORISE">Categorise the attached config file.</const>
      <const name="DISABLED">Set if the menu item is disabled (ghosted).</const>
      <const name="EXTENSION">Menu item is an extension.</const>
      <const name="KEY_REPEAT">Respond to repeated key presses.</const>
      <const name="NO_KEY_RESPONSE">Display the key, but do not respond to its equivalent key press.</const>
      <const name="OPTION">Item is a clickable option (clicking the item's icon will turn the option on/off).</const>
      <const name="SELECTED">The menu item has been selected (checked).</const>
      <const name="SORT">Sort all content under the menuitem (applies only to extensions).</const>
      <const name="TOGGLE">Enables toggled menu items (checking state of on and off).</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
