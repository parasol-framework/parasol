<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>MenuItem</name>
    <type>class</type>
    <module>Widget</module>
    <comment>Manages the data of menu items.</comment>
    <version>1</version>
    <id>7b8d1cc9</id>
    <idstring>ID_MENUITEM</idstring>
    <category>GUI</category>
    <include>modules/menuitem.h</include>
    <copyright>Paul Manias 2003-2020</copyright>
    <description>
<p>The MenuItem is an integral part of the <class name="Menu">Menu</class> class.  It is used to represent the individual items that are listed in a menu.  Following initialisation, any MenuItem can be modified at run-time to make simple changes to the menu.  For complex or extensive changes, it may be more efficient to recreate the menu from scratch.</p>
<p>It is not possible for a MenuItem to be owned by any object other than a <class name="Menu">Menu</class>.</p></description>
    <source>
      <file path="class_menu/">menuitem.cpp</file>
    </source>
  </info>

  <fields>
    <field>
      <name>Background</name>
      <comment>Background colour for the item.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>The background colour for the item is defined here.</p>
      </description>
    </field>

    <field>
      <name>Bitmap</name>
      <comment>A <class name="Bitmap">Bitmap</class> icon to display next to item text.</comment>
      <access read="R" write="W">Read/Write</access>
      <type class="Bitmap">*Bitmap</type>
      <description>
<p>If the configuration of a menu item refers to a valid picture file, this field will be set to a rendered Bitmap icon after initialisation.</p>
      </description>
    </field>

    <field>
      <name>Colour</name>
      <comment>The colour to use when rendering text for this item.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>This field defines the colour that will be used for rendering the item's text.  The alpha component is supported for blending with the background.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="MIF">INT</type>
      <description>
<p>Optional flags are are defined here.</p>
<types lookup="MIF"/>
      </description>
    </field>

    <field>
      <name>Group</name>
      <comment>Group identifier, relevant for checkmark items.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>Grouping can be used on checkmark items that need to behave in a way that is functionally identical to radio buttons. When multiple checkmark items are the same group ID, activating any one of the items will cause the others to become unmarked.</p>
<p>This field is set to zero by default, which turns off the grouping feature.</p>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>The pixel height of the item.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>The current pixel height of the menu item is reflected in this field.  This field is calculated as required and cannot be customised.</p>
      </description>
    </field>

    <field>
      <name>ID</name>
      <comment>User-defined unique identifier.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>It is recommended that all MenuItem's are given a unique, custom ID so that they can be easily referenced by methods that support ID lookups.</p>
      </description>
    </field>

    <field>
      <name>Index</name>
      <comment>Item index.  Follows the order of the items as listed in the menu.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>The Index value reflects the position of this item within the menu.</p>
      </description>
    </field>

    <field>
      <name>Key</name>
      <comment>Shortcut key for this item.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>If a MenuItem is to be accessible via a keyboard shortcut, a valid key-code must be referenced here in conjunction with a <field>Qualifiers</field> value.</p>
      </description>
    </field>

    <field>
      <name>Name</name>
      <comment>The menu item can be given a name here.  It is not necessary for the string to be unique.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>This field allows non-unique names to be assigned to menu items.</p>
      </description>
    </field>

    <field>
      <name>Next</name>
      <comment>The next MenuItem in the list.</comment>
      <access read="R">Read</access>
      <type class="MenuItem">*MenuItem</type>
      <description>
<p>Refers to the next MenuItem in the linked list, or NULL if this is the last entry.</p>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>The path of a menu configuration file, if this item links to a sub-menu.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>If the MenuItem opens a sub-menu, the path of the configuration file can be specified here.  If using an external file is undesirable, consider passing the configuration through the XML <action>DataFeed</action> instead.</p>
      </description>
    </field>

    <field>
      <name>Prev</name>
      <comment>The previous item in the list.</comment>
      <access read="R">Read</access>
      <type class="MenuItem">*MenuItem</type>
      <description>
<p>Refers to the previous MenuItem in the linked list, or NULL if this is the first entry.</p>
      </description>
    </field>

    <field>
      <name>Qualifiers</name>
      <comment>Key qualifiers for this item's keyboard shortcut.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="KQ">INT</type>
      <description>
<p>If a MenuItem is to be accessible via a keyboard shortcut, at least one valid qualifier must be referenced here in conjunction with a <field>Key</field> value.  Valid qualifier flags are as follows:</p>
<types lookup="KQ"/>
      </description>
    </field>

    <field>
      <name>SubMenu</name>
      <comment>Refers to a sub-menu if this item is a menu extension.</comment>
      <access read="G" write="W">Get/Write</access>
      <type class="Menu">*Menu</type>
      <description>
<p>If an item refers to a sub-menu, the generated <class name="Menu">Menu</class> can be read from this field.</p>
      </description>
    </field>

    <field>
      <name>Text</name>
      <comment>The text string to display for this item.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>The text string that is rendered in the item is declared here.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

  </fields>
  <types>
    <constants lookup="MIF" comment="Flags for MenuItems.">
      <const name="SELECTED">The menu item has been selected (checked).</const>
      <const name="EXTENSION">Menu item is an extension.</const>
      <const name="NO_KEY_RESPONSE">Display the key, but do not respond to its equivalent key press.</const>
      <const name="SORT">Sort all content under the menuitem (applies only to extensions).</const>
      <const name="TOGGLE">Enables toggled menu items (checking state of on and off).</const>
      <const name="OPTION">Item is a clickable option (clicking the item's icon will turn the option on/off).</const>
      <const name="DISABLED">Set if the menu item is disabled (ghosted).</const>
      <const name="CATEGORISE">Categorise the attached config file.</const>
      <const name="BREAK">Menu item is acting as a break.</const>
      <const name="KEY_REPEAT">Respond to repeated key presses.</const>
    </constants>

    <constants lookup="INF" comment="Flags for the Input class.">
      <const name="SECRET">Used for secret user entry (passwords).</const>
      <const name="ENTER_TAB">Press enter results in a virtual tab-keypress being sent.</const>
      <const name="SELECT_TEXT">Select all text when the input box is shown for the first time.</const>
      <const name="DISABLED">Disable on creation.</const>
      <const name="FIXED_INPUT_WIDTH">Indicates that the InputWidth field was defined by the client.</const>
      <const name="FIXED_LABEL_WIDTH">Indicates that the LabelWidth field was defined by the client.</const>
      <const name="COMMANDLINE">Function as a command-line.  Typically used when the input box needs to remain persistent and is linked to an output system, such as a shell.</const>
    </constants>

    <constants lookup="BTF" comment="Button flags.">
      <const name="DISABLED">Disable on creation, or button is currently disabled.  Read-only.</const>
      <const name="HIDE">Hide on creation, or button is currently hidden.</const>
      <const name="PULSE">Send repeated clicks when the mouse button is held down.</const>
      <const name="NO_GFX">Turns off the button's foreground graphics (text and images).</const>
    </constants>

    <constants lookup="CBF" comment="CheckBox flags.">
      <const name="DISABLED">Disable on creation, or object is currently disabled.</const>
      <const name="HIDE">Hide on creation, or object is currently hidden.</const>
    </constants>

    <constants lookup="CMF" comment="ComboBox flags.">
      <const name="AUTO_COMPLETE">When in edit mode, this option helps the user by auto-completing text.</const>
      <const name="EDIT">Enable edit mode, which allows the user to write free-text in the combobox.</const>
      <const name="SHOW_ICONS">Show icons in the dropdown list.</const>
      <const name="DISABLED">Disable on creation; or combobox is currently disabled.</const>
      <const name="HIDE">Hide on creation, or combobox is currently hidden.</const>
      <const name="LIMIT_TO_LIST">When in edit mode, limit-to-list prevents the user from entering text that isn't in the combobox list.</const>
      <const name="NO_TRANSLATION">Do not translate combobox strings or the drop-down menu to the user's native language.</const>
    </constants>

    <constants lookup="CLIPTYPE" comment="Clipboard types">
      <const name="DATA">Raw information that is uncategorised can be defined as a data clip.</const>
      <const name="FILE">Pure file references are stored as file clips.  This type is typically used by file managers for moving and copying files.</const>
      <const name="TEXT">Plain text files such as ASCII and UTF-8 must be identified through this clip type.</const>
      <const name="AUDIO">An audio clip that is recognised by the Sound class (such as wav's and mp3's).</const>
      <const name="IMAGE">Images that are recognised by the Picture class may be stored as this type (such as jpeg's and png files).</const>
      <const name="OBJECT">An object that has been deserialised into binary form.</const>
    </constants>

    <constants lookup="TXF" comment="Flags for the Text class.">
      <const name="SECRET">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="PRESERVE_BKGD">Preserve-background disables fast scrolling for background preservation.</const>
      <const name="AREA_SELECTED">This read-only flag is set automatically when the user has selected an area of text.</const>
      <const name="GLOBAL_EDITING">Keeps the text object in edit mode regardless of user focus.</const>
      <const name="SINGLE_SELECT">Enables text selection (with or without edit mode).  If in line mode, a single click will allow the user to highlight any line.</const>
      <const name="DISABLED">This read-only flag is set if the object has been disabled through the Disable action.</const>
      <const name="OVERWRITE">Turns on overwrite mode (if off, insert mode is enabled).</const>
      <const name="SELECT">Synonym for MULTI_SELECT | SINGLE_SELECT</const>
      <const name="ENTER_TAB">Convert enter-key presses to the tab-key.</const>
      <const name="FORCE_CAPS">This flag forces the capitalisation of all text that is entered into the object.</const>
      <const name="AUTO_CLEAR">Clears the text string when the enter key is pressed.</const>
      <const name="EDIT">This flag must be enabled if the user is permitted to change the text string with the keyboard.</const>
      <const name="STRETCH">If the font is scalable, the text string will be resized to fit inside the surface that contains it (i.e. no characters will be clipped).  This is acheived by recalculating the font's point size.</const>
      <const name="WORDWRAP">Enables word wrapping.</const>
      <const name="AUTO_SELECT">Automatically select all text if the text object receives the focus.</const>
      <const name="TAB_KEY">If the tab key is pressed, print the tab character.</const>
      <const name="PASSWORD">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="MULTI_SELECT">Allow the user to select/highlight multiple lines by holding the Ctrl key.</const>
      <const name="VARIABLE">This flag forces a text object to recalculate any variable references in its string data whenever a redraw occurs.  Such references are indicated through square brackets, e.g. [desktop.width].  Refer to the StrEvaluate() function in the Strings module for more information.</const>
      <const name="STR_TRANSLATE">Translate strings to the user's native language.</const>
      <const name="HISTORY">Enables historical browsing when the up/down cursor keys are used.  The number of historical lines stored can be set in the HistorySize field.</const>
      <const name="NO_SYS_KEYS">Disables system-keys that provide support for common key combinations such as Ctrl-C, Ctrl-X etc.</const>
      <const name="BACKGROUND">Enables a colour background behind the text.</const>
      <const name="TAB_ENTRY">Pressing the tab key is treated the same as pressing enter.</const>
      <const name="COMMANDLINE">Synonym for AUTO_CLEAR | EDIT | HISTORY</const>
    </constants>

    <constants lookup="TF" comment="Flags for the TabFocus class.">
      <const name="LOCAL_FOCUS">In this mode, the user's point of focus must match the monitored Surface for the tabfocus to function.</const>
      <const name="CHILD_FOCUS">In this mode, the user's point of focus must match the monitored Surface or one of its immediate children for the tabfocus to function.</const>
      <const name="LIMIT_TO_LIST">In limit-to-list mode, the tabfocus only functions if the user's point of focus is on the monitored Surface or one of objects in the tab list.</const>
    </constants>

    <constants lookup="BHS">
      <const name="OUTSIDE">The cursor is outside of the button's area</const>
      <const name="ENTERED">The cursor has just entered the button's area</const>
      <const name="INSIDE">The cursor is inside the button's area</const>
    </constants>

    <constants lookup="CLF" comment="Clipboard flags">
      <const name="DRAG_DROP">Enables drag and drop mode.  The clipboard content will be private and not share data with the host system in this mode.</const>
      <const name="HOST">This indicator is automatically set when a clipboard was created due to incoming content from the host system.</const>
    </constants>

    <constants lookup="CEF">
      <const name="DELETE">Requests that the original file source is deleted if a successful paste operation takes place.</const>
      <const name="EXTEND">Instead of replacing existing clipboard data, add the new data to the group.</const>
    </constants>

    <constants lookup="MNF" comment="Flags for the Menu class.">
      <const name="SHOW_KEYS">Print key controls on the right.</const>
      <const name="POINTER_XY">Synonym for POINTER_PLACEMENT</const>
      <const name="SHOW_ICONS">Synonym for SHOW_IMAGES</const>
      <const name="SHOW_IMAGES">Allow for an image column on the left.</const>
      <const name="POINTER_PLACEMENT">Menu is placed at the position of the mouse pointer when shown.</const>
      <const name="REVERSE_Y">Menu's open in reverse vertical order.</const>
      <const name="CACHE">Cache menu surface once created.</const>
      <const name="IGNORE_FOCUS">Do not hide the menu if it loses the focus.</const>
      <const name="SORT">Sort all items by name.</const>
      <const name="EXT_COLUMN">Allow for an extension indicator column on the right.</const>
      <const name="PRESERVE_BKGD">Preserve background when scrolling.</const>
      <const name="REVERSE_X">Menu's open in reverse horizontal order.</const>
      <const name="NO_HIDE">Activate() is prevented from hiding the menu.</const>
      <const name="POPUP">Locks the position of the menu to the mouse pointer.</const>
      <const name="NO_TRANSLATION">Do not translate menu text to the user's native language.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
