<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Run</name>
    <type>class</type>
    <module>Utility</module>
    <comment>This class runs native binary programs.</comment>
    <version>1</version>
    <id>0b88a75a</id>
    <idstring>ID_RUN</idstring>
    <category>Command</category>
    <include>modules/run.h</include>
    <copyright>Paul Manias Â© 2000-2017</copyright>
    <description>
<p>The Run class launches executable programs that are stored on the host system.  Programs must be in the executable file format of the host system - for example on a Linux host the Run class is limited to launching ELF executables.</p>
<p>The Run class is also capable of inferring the correct executable to use by analysing any targeted data file.  For instance, it can launch picture, text and custom file types.  The exact behaviour that occurs when launching a data file is dependent on the settings found in the user's "user:config/associations.cfg" file, which holds the launch settings for each registered class and file type.  In most cases a script will be run that can handle the file data.</p>
<p>The Run class is designed for use in basic scripts.  In more powerful languages such as Fluid, we recommend that the <class name="Task">Task</class> class is used.  The Task class offers more low-level features and can handle message pipes such as stdout more effectively.</p>
<p>Typical usage of the Run class in a Fluid script is demonstrated in the following examples:</p>
<pre>obj.new('run', { src='parasol' })
obj.new('run', { mode='view', src='pictures:screenshot.png' })
</pre>
<p>To pass command-line parameters to an executable file, use the <field>Args</field> field as in this example:</p>
<pre>obj.new('run', { src='myprogram', args='arg1 arg2 arg3' })</pre></description>
    <source>
      <file>class_run.c</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Activates the object.</comment>
    </action>

  </actions>

  <fields>
    <field>
      <name>Args</name>
      <comment>Set this field to send the executable program a list of arguments.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The Args field is used to pass arguments to the executable program.  The arguments should be separated from each other with whitespace.  Individual arguments must be enclosed with double quotes if they contain whitespace.</p>
      </description>
    </field>

    <field>
      <name>Command</name>
      <comment>Accepts a command-line style string for program execution.</comment>
      <access write="S">Set</access>
      <type>STRING</type>
      <description>
<p>This field accepts a string in command-line format for program execution.  The string must follow the format "ExecPath Args [...]" where ExecPath refers to the location of the executable and is followed by a series of arguments to be passed to the program.</p>
<p>It is recommended that the executable path and each individual argument is encapsulated with double quotes.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Defines special options to use when running programs.</comment>
      <access read="R" write="I">Read/Init</access>
      <type lookup="RNF">INT</type>
      <description>
<p>Optional flags that affect the behaviour of the Run class may be specified in this field.</p>
<types lookup="RNF"/>
      </description>
    </field>

    <field>
      <name>Mode</name>
      <comment>The type of launch mode to use when launching data files.</comment>
      <access read="R" write="S">Read/Set</access>
      <type lookup="RNL">INT</type>
      <description>
<p>The Mode field determines the type of action that will be performed when targeting a data file rather than an executable.  The default mode is OPEN, which will open the data file in the preferred user mode (in most cases a viewing application will be loaded for this purpose).</p>
<types lookup="RNL"/>
      </description>
    </field>

    <field>
      <name>Output</name>
      <comment>Nominate an object for receiving program output.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>OBJECTID</type>
      <description>
<p>The Output field can refer to an object that will capture the target executable's output.  All stdout and stderr data will be captured and passed to the Output object via the text data feed.</p>
<p>This feature is not supported on all available platforms.</p>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>Defines the location/name of the executable program.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Sets the location of the target executable, or alternatively the location of one or more data files to be opened by user-installed programs.  To specify multiple files for execution, separate the paths using the CSV data format.</p>
<p>If Parasol is running on a Unix system, the PATH variable will be used to determine the file location when no path is indicated in the location string.</p>
<p>If targeting an executable, do not include command-line parameters with the Path string.  Set the <field>Command</field> field (which accepts arguments) or set the <field>Args</field> field.</p>
      </description>
    </field>

    <field>
      <name>ProcessID</name>
      <comment>The ID of the executable process, following activation.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>If a run object successfully launches an executable, the ID of the executable's process will be stored in this field. At all other times the field will have a value of zero.</p>
      </description>
    </field>

    <field>
      <name>RestartLimit</name>
      <comment>Limits the number of continuous restarts when in restart mode.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>If the RESTART flag has been set in the <field>Flags</field> field, the RestartLimit value will limit the maximum number of restarts that can occur in any given 30 second period.  This feature is designed to prevent situations where the target program may run and immediately exit over an infinite period of time.</p>
<p>If the limit is exceeded then all restarts are halted and the RESTART flag is switched off.</p>
      </description>
    </field>

    <field>
      <name>ReturnCode</name>
      <comment>The code returned from the running process is stored here.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>Following execution of the target program, the ReturnCode can be read to learn its return code.</p>
<p>If the return code value is unobtainable because the process is still running, this field returns a failure error code. Use of the WAIT flag is recommended prior to execution for this reason.</p>
      </description>
    </field>

    <field>
      <name>Task</name>
      <comment>Reference to the task object used for process execution.</comment>
      <access read="R">Read</access>
      <type>OBJECTPTR</type>
      <description>
<p>When a run object executes a process, a <class name="Task">Task</class> object will be created and can be referenced from this field. The task object is exposed in the class definition for read-only usage and must be used with caution.</p>
      </description>
    </field>

    <field>
      <name>TimeOut</name>
      <comment>The maximum amount of time to wait for a process to return.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>DOUBLE</type>
      <description>
<p>Setting the TimeOut field to a value greater than zero will enable waiting on the target executable when it is launched. If the executable does not return in the allotted period, the host program will wake and return the ERR_TimeOut code. The <field>ReturnCode</field> field will also be set to ERR_TimeOut.</p>
<p>The target executable will continue running in the background if it does not complete within the timeout period.</p>
<p>The timeout value is measured in seconds and is cast as floating point so that sub-second precision is achievable. By setting the TimeOut to any value other than zero, the WAIT flag is automatically set.</p>
      </description>
    </field>

    <field>
      <name>Type</name>
      <comment>The class or filetype association to use for running the target file.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>When launching data files as opposed to executable programs, the Run class will examine the target to determine its data type and launch it using the correct program.  However this is not always a viable method of execution - for instance a path of http://localhost/ would fail.  In some instances it may also be necessary to force the file type and avoid analysis of the target.</p>
<p>Set the Type field to either the name of the class or file association that handles the desired file type (for a list of preconfigured file associations please check the config:software/associations.cfg file).  In the aforementioned browser example, the correct Type setting would be "HTML".</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="RNF" comment="Run flags.">
      <const name="DETACHED">This option will detach the new process from the current process.  This means that the child process will not be destroyed when the parent process exits.</const>
      <const name="DETACH">This option will detach the new process from the current process.  This means that the child process will not be destroyed when the parent process exits.</const>
      <const name="SHELL">This flag enables shell mode.  On Unix systems, this means that a shell (usually BASH) will be used to launch the process.</const>
      <const name="VIEW_OUTPUT">This option allows the user to see output from the process' stdout handle.  The run object will wait until output is received before the output window is displayed.</const>
      <const name="WAIT">On activation, the host will stop and wait for the target executable to finish before it returns.  This can be very useful when running batch scripts.  Use in conjunction with &lt;field&gt;TimeOut&lt;/&gt; to avoid the potential for permanent sleeping.</const>
      <const name="ATTACH">If set, the new process will be attached to the current process.  This ensures that the new process is destroyed when the parent process exits normally or crashes.</const>
      <const name="PRIVILEGED">This option allows the new process to run with administration privileges, if the parent process has them.</const>
      <const name="ATTACHED">If set, the new process will be attached to the current process.  This ensures that the new process is destroyed when the parent process exits normally or crashes.</const>
      <const name="ADMIN">Run process with admin rights.</const>
      <const name="RESTART">This option will force the executed task to be automatically restarted when it exits or crashes.  This feature remains active only for as long as the run object exists.</const>
      <const name="RESET_PATH">Start the target executable with its current directory set to its own path.</const>
      <const name="FOREIGN">If the target program is not compiled with Parasol, set the FOREIGN flag so that the system does not attempt to treat it as a native program.</const>
      <const name="TRANSLATE">If the arguments passed to the executed task need to be translated prior to execution, set this flag.</const>
      <const name="QUIET">This option will silence stdout and stderr by consuming them quietly.</const>
      <const name="VIEW_QUIT">If enabled in conjunction with the VIEW_OUTPUT flag, it will be possible for the user to terminate the new process by closing the output window.</const>
      <const name="NO_DIALOG">This flag will suppress any user dialogs that the run object would normally display when attempting to run a process.  This includes both error messages and user queries.</const>
    </constants>

    <constants lookup="RNL" comment="Run modes.">
      <const name="OPEN">Open mode will open the file in a way that is appropriate for the data in question (for instance, opening an audio file will play the audio data).</const>
      <const name="EDIT">Edit mode is used for running an application that can edit the data file.</const>
      <const name="PRINT">Print mode is used to instantly print a data file to the default printer.  Printing can only be used on data files that have some form of visual representation.</const>
      <const name="VIEW">View mode is used to view the file data in the user display.  This mode can only be used on data files that have some form of visual representation.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
