<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>FileView</name>
    <type>class</type>
    <module>Widget</module>
    <comment>The FileView class provides a GUI-based gateway into the file system.</comment>
    <version>1</version>
    <id>33e45680</id>
    <idstring>ID_FILEVIEW</idstring>
    <category>Tool</category>
    <include>modules/fileview.h</include>
    <copyright>Paul Manias 2003-2018</copyright>
    <description>
<p>The FileView class is designed for developing graphical interfaces that require user interactive file lists.  This makes the FileView particularly useful for creating file dialog boxes and file managers.  The class supports a number of features including the filtering of file names using wildcards (for example, '*.fluid') and you may preset the initial directory path.</p>
<p>The FileView class does not draw its own graphics.  In order to display the file-list, it must be linked to a <class name="View">View</class> object via the <field>View</field> field.</p>
<p>For an existing example of accepted usage, please refer to the FileDialog Fluid script.</p></description>
    <source>
      <file path="class_fileview/">fileview.c</file>
      <file path="class_fileview/">fileview_fields.c</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Opens the currently selected file or directory.</comment>
      <description>
<p>If the user has selected a file or a directory, calling this method will 'open' the selection accordingly.  For directories, this means that the FileView object will go to the selected path and read the directory contents, consequently updating the FileView.  If the selection is a file, the FileView will send an Activate message to each child that you have initialised to the FileView object.</p>
<p>If no selection has been made in the <field>View</field> object, the Activate action will do nothing.</p>
      </description>
      <result>
        <error code="AllocMemory">A call to AllocMemory() failed to create a new memory block.</error>
        <error code="ExclusiveDenied">Access to the View object was denied.</error>
        <error code="GetField">The View does not support a Selection field, or no selection has been made by the user.</error>
        <error code="ListChildren">An error occurred in a call to ListChildren().</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </action>

    <action>
      <name>Clear</name>
      <comment>Clears the View.</comment>
    </action>

    <action>
      <name>Refresh</name>
      <comment>Refreshes a FileView's directory list.</comment>
      <description>
<p>When the Refresh action is called on a FileView object, the directory that the FileView is monitoring will be read from scratch, and the list of directories and files will be subsequently refreshed.</p>
      </description>
      <result>
        <error code="CreateObject">An error occurred while creating a File object.</error>
        <error code="FieldNotSet">The View field is not set.</error>
        <error code="Okay">The refresh was successful.</error>
      </result>
    </action>

  </actions>

  <methods>
    <method>
      <name>CopyFiles</name>
      <comment>Posts all currently selected files to the clipboard as a 'copy' operation.</comment>
      <prototype>ERROR fvCopyFiles(OBJECTPTR Object)</prototype>
      <description>
<p>The CopyFiles method will copy all user-selected files and directories from the view to the clipboard.  If there are no files selected, the method does nothing.</p>
      </description>
      <result>
        <error code="NoSupport">No clipboard is present in the system to support the copy operation.</error>
        <error code="Okay">The cut operation was processed.</error>
        <error code="AccessObject">Failed to access either the clipboard or the view object.</error>
        <error code="NothingDone">The user has not selected any files to copy.</error>
      </result>
    </method>

    <method>
      <name>CopyFilesTo</name>
      <comment>Copies selected files to a destination path.</comment>
      <prototype>ERROR fvCopyFilesTo(OBJECTPTR Object, CSTRING Dest)</prototype>
      <input>
        <param type="CSTRING" name="Dest">The folder to target for the copy operation.</param>
      </input>
      <description>
<p>This method copies all selected files in the fileview to a destination directory of your choosing.  If no files are selected in the fileview, this method does nothing.  The CopyFilesTo method may return immediately following the initial call and then copy the files in the background.  If a failure occurs, the user will be notified with an error dialog.</p>
      </description>
      <result>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>CreateDir</name>
      <comment>Creates a new directory in the current path of the file view.</comment>
      <prototype>ERROR fvCreateDir(OBJECTPTR Object)</prototype>
      <description>
<p>This method creates a dialog box that prompts the user for a directory name.  If the user types in a valid directory name then the directory will be created in the current path of the file view.  The user may cancel the process by closing the dialog window at any time.</p>
      </description>
      <result>
        <error code="CreateObject">A call to CreateObject() failed.</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>CreateShortcut</name>
      <comment>Prompts the user with a dialog to create a new shortcut.</comment>
      <prototype>ERROR fvCreateShortcut(OBJECTPTR Object, CSTRING Message, CSTRING Shortcut, CSTRING Path)</prototype>
      <input>
        <param type="CSTRING" name="Message">A message to display in the user dialog (overrides the default message - optional).</param>
        <param type="CSTRING" name="Shortcut">Name of the shortcut (optional).</param>
        <param type="CSTRING" name="Path">Path to the folder that the shortcut connects to (optional).</param>
      </input>
      <description>
<p>This method creates a dialog box that allows the user to create a new shortcut. The user will be required to name the shortcut and specify the path to which the shortcut is connected to.</p>
<p>The user may cancel the process by closing the dialog window at any time.</p>
      </description>
      <result>
        <error code="AllocMemory">A call to AllocMemory() failed to create a new memory block.</error>
        <error code="Okay">Operation successful.</error>
        <error code="CreateObject">A call to CreateObject() failed.</error>
      </result>
    </method>

    <method>
      <name>CutFiles</name>
      <comment>Posts all currently selected files to the clipboard as a 'cut' operation.</comment>
      <prototype>ERROR fvCutFiles(OBJECTPTR Object)</prototype>
      <description>
<p>The CutFiles method will post all selected files and directories from the view to the clipboard.  If there are no files selected, the method does nothing.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>DeleteFiles</name>
      <comment>Deletes all currently selected files, following user confirmation.</comment>
      <prototype>ERROR fvDeleteFiles(OBJECTPTR Object)</prototype>
      <description>
<p>This method simplifies the process of deleting selected files for the user.  The method will pop-up a dialog box to ask the user if the selected files should be deleted.  If the user responds positively, the method will proceed to delete all of the requested files.  Error dialogs may pop-up if any problems occur during the deletion process.</p>
<p>If no files are selected, this method does nothing.</p>
<p>This method will return a failure code if the creation of the initial dialog box fails.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="AccessObject">Failed to access the referenced View object.</error>
        <error code="CreateObject">Failed to create the dialog box.</error>
      </result>
    </method>

    <method>
      <name>EditFiles</name>
      <comment>Runs the edit command for all currently selected files.</comment>
      <prototype>ERROR fvEditFiles(OBJECTPTR Object)</prototype>
      <description>
<p>This method simplifies the process of editing selected files for the user. The routine utilises the Run class with the EDIT mode option to launch the files in their respected editors.</p>
<p>If no files are selected, this method does nothing.</p>
      </description>
      <result>
        <error code="AccessObject">Failed to access the referenced View object.</error>
        <error code="Okay">The process executed successfully.</error>
      </result>
    </method>

    <method>
      <name>MoveFilesTo</name>
      <comment>Moves selected files to a destination path.</comment>
      <prototype>ERROR fvMoveFilesTo(OBJECTPTR Object, CSTRING Dest)</prototype>
      <input>
        <param type="CSTRING" name="Dest">The directory that you want to copy the selected files to.</param>
      </input>
      <description>
<p>This method moves all selected files in the fileview to a destination directory of your choosing.  If no files are selected in the fileview, this method does nothing.  The MoveFilesTo method may return immediately following the initial call and then move the files in the background.  If a failure occurs, the user will be notified with an error dialog.</p>
      </description>
      <result>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>OpenFiles</name>
      <comment>Runs the open command for all currently selected files.</comment>
      <prototype>ERROR fvOpenFiles(OBJECTPTR Object)</prototype>
      <description>
<p>This method simplifies the process of opening selected files for the user.  The routine utilises the Run class with the OPEN mode option to launch the files in their respected editors.</p>
<p>If no files are selected, this method does nothing.</p>
      </description>
      <result>
        <error code="AccessObject">Failed to access the referenced View object.</error>
        <error code="Okay">The process executed successfully.</error>
      </result>
    </method>

    <method>
      <name>ParentDir</name>
      <comment>Jumps to the parent directory of a FileView's current path.</comment>
      <prototype>ERROR fvParentDir(OBJECTPTR Object)</prototype>
      <description>
<p>When this method is called, the FileView will jump to the parent directory of the current path.  For instance, if the user is currently analysing the 'system:classes/' directory, the view will change to the 'system:' path.</p>
<p>If the current path is already at the root level ':', then this method will return immediately as there is nothing above root.</p>
      </description>
      <result>
        <error code="Memory">The method ran out of memory during normal processing.</error>
        <error code="Okay">The method executed successfully, or the path is already set to root level.</error>
      </result>
    </method>

    <method>
      <name>PasteFiles</name>
      <comment>Pastes files from the clipboard to the current path of the file view.</comment>
      <prototype>ERROR fvPasteFiles(OBJECTPTR Object)</prototype>
      <description>
<p>Call the PasteFiles method to copy files from the clipboard into the current path of the file view.  The file view will automatically refresh itself so that pasted files are immediately displayed.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>RenameFile</name>
      <comment>Renames the most recently selected item in the file view.</comment>
      <prototype>ERROR fvRenameFile(OBJECTPTR Object)</prototype>
      <description>
<p>This method simplifies the process of renaming the most recently selected file for the user.  The method will pop-up an input box to ask the user for the new file name.  If the user responds positively, the method will proceed to rename the file.</p>
<p>If no file is selected, this method does nothing.</p>
      </description>
      <result>
        <error code="AccessObject">Failed to access the referenced View object.</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>ViewFiles</name>
      <comment>Runs the view command for all currently selected files.</comment>
      <prototype>ERROR fvViewFiles(OBJECTPTR Object)</prototype>
      <description>
<p>This method simplifies the process of viewing selected files for the user.  The routine utilises the Run class with the VIEW mode option to launch the files in their respected viewers.</p>
<p>If no files are selected, this method does nothing.</p>
      </description>
      <result>
        <error code="AccessObject">Failed to access the referenced View object.</error>
        <error code="Okay">The process executed successfully.</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>Auto</name>
      <comment>Defines a default operation to use on activated file items.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="FVA">INT</type>
      <description>
<p>When the user activates a file item in the <field>View</field>, you can choose to automatically execute a default operation on that file.</p>
<types lookup="FVA"/>
      </description>
    </field>

    <field>
      <name>ByteSize</name>
      <comment>Indicates the byte size of the file system being viewed.</comment>
      <access read="G">Get</access>
      <type>BIGINT</type>
      <description>
<p>This field reflects the total number of bytes available for storage in the file system that the user is currently viewing.  It is set to zero when the user is at the top level view.</p>
      </description>
    </field>

    <field>
      <name>BytesFree</name>
      <comment>Indicates the number of free bytes on the file system being viewed.</comment>
      <access read="G">Get</access>
      <type>BIGINT</type>
      <description>
<p>This field reflects the total number of free bytes on the file system that the user is currently viewing.  It is set to zero when the user is at the top level view.</p>
      </description>
    </field>

    <field>
      <name>BytesUsed</name>
      <comment>Indicates the number of used bytes on the file system being viewed.</comment>
      <access read="G">Get</access>
      <type>BIGINT</type>
      <description>
<p>This field reflects the total number of bytes used by the file system that the user is currently viewing.  It is set to zero when the user is at the top level view.</p>
      </description>
    </field>

    <field>
      <name>EventCallback</name>
      <comment>Provides callbacks for global state changes.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>Set this field with a function reference to receive event notifications.  It must be set in conjunction with <field>EventMask</field> so that you can select the type of notifications that will be received.</p>
<p>The callback function prototype is <code>Function(*FileView, LONG EventFlag)</code>.</p>
<p>The EventFlag value will indicate the event that occurred.  Please see the <field>EventMask</field> field for a list of supported events and additional details.</p>
      </description>
    </field>

    <field>
      <name>EventMask</name>
      <comment>Specifies events that need to be reported from the Document object.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="FEF">INT</type>
      <description>
<p>To receive event notifications, set EventCallback with a function reference and the EventMask field with a mask that indicates the events that need to be received.</p>
<types lookup="FEF"/>
      </description>
    </field>

    <field>
      <name>Feedback</name>
      <comment>Provides instant feedback when a user interacts with the view.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>Set the Feedback field with a callback function in order to receive instant feedback when user interaction occurs.  The function prototype is <code>Function(*FileView)</code>.</p>
      </description>
    </field>

    <field>
      <name>Filter</name>
      <comment>Apply a file filter using wildcards.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>To define a file filter, set this field using standard wild-card values.  Both the asterisk and question-mark characters are accepted as wild-wards, while the OR operator is reserved for use in a future update.  Here are some filter examples:</p>
<types type="Filter">
<type name="*.fluid">Show Fluid files.</type>
<type name="*.*">Show files with extensions.</type>
<type name="???.fluid">Show Fluid files with three letter names.</type>
<type name="?b*">Show files where 'b' is a second character.</type>
<type name="a*b">Show files starting with a, ending in b.</type>
</types>
<p>File filters are not case sensitive.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags are defined here.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="FVF">INT</type>
      <description>
<p>Optional flags can be defined here for object initialisation.</p>
<types lookup="FVF"/>
      </description>
    </field>

    <field>
      <name>Focus</name>
      <comment>Defines the surface to monitor for key presses.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>OBJECTID</type>
      <description>
<p>The surface that the fileview monitors for key presses can be defined in this field.  If not defined on initialisation, the surface ID that is referenced in the <field>View</field> is automatically copied to this field.</p>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>The path of the current folder presented in the view.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>If you want a fileview to analyse a specific directory, writing to this field will force the object to switch to the new location and refresh the file list.</p>
<p>To change to the root directory, set the Path to a zero length string, or write the field with a NULL pointer.</p>
      </description>
    </field>

    <field>
      <name>RefreshRate</name>
      <comment>Defines the rate of refresh, in seconds.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>DOUBLE</type>
      <description>
<p>The frequency at which the file view will check the file system for changes can be modified through this field.  It is relevant only when automated reporting of file system changes is unavailable.  The refresh rate interval is measured in seconds.</p>
<p>As the default refresh rate can be defined by the user, we recommended that you do not set this field under normal conditions.</p>
      </description>
    </field>

    <field>
      <name>RootPath</name>
      <comment>Sets a custom root path for the file view.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>The root path for the file view can be defined here.  By default the root path is undefined, which ensures that the user has access to all drives and file systems.  By setting this field to a valid folder location, the user will be restricted to viewing that folder and all content within it.</p>
      </description>
    </field>

    <field>
      <name>Selection</name>
      <comment>Readable field that indicates the name of the currently selected item.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
      <description>
<p>Read the Selection field to retrieve a string for the currently selected file or directory.  If no selection is active then this function will return a value of NULL.  The path leading to the file <i>will not</i> be included in the resulting string.  If the current selection is a directory or volume, any trailing symbols will be stripped from the end of the directory name.</p>
<p>The Selection is returned exactly as it appears to the user - so if you have opted to strip all extensions from file names, you will not get the 'exact' filename as it is described on the filesystem.</p>
      </description>
    </field>

    <field>
      <name>SelectionFile</name>
      <comment>The currently selected file or directory (fully-qualified).</comment>
      <access read="G">Get</access>
      <type>STRING</type>
      <description>
<p>Read the SelectionFile field for the fully-qualified name of the currently selected file or directory.  If no selection is active then this function will return a value of NULL.  The path leading to the file <i>will not</i> be included in the resulting string.  If the current selection is a directory or volume, the correct trailing symbol will be appended to the end of the string to indicate the file type.</p>
      </description>
    </field>

    <field>
      <name>SelectionPath</name>
      <comment>The complete file-path of the current selection.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
      <description>
<p>Read the SelectionFile field for the path of the currently selected file or directory.  If no selection is active then this function will return a value of NULL.  The path leading to the file will be included in the resulting string.  The path is fully-qualified, so a trailing slash or colon will be present in the event that the selection is a directory or volume.</p>
<p>The resulting string will remain valid until the fileview object is freed or the SelectionPath is used a consecutive time.</p>
      </description>
    </field>

    <field>
      <name>ShowDocs</name>
      <comment>Allows automated document viewing when set to TRUE.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>If set to TRUE (the default), the file view will allow for the automatic display of documents within the <field>View</field>.  Documents can be displayed when the user views a file path that has been associated with a document (the <function module="Core">SetDocView</function> function manages this behaviour).</p>
<p>This option is managed as a user preference - we recommend that you avoid setting it manually.</p>
      </description>
    </field>

    <field>
      <name>ShowHidden</name>
      <comment>Shows hidden files if set to TRUE.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>ShowSystem</name>
      <comment>Shows system files if set to TRUE.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>View</name>
      <comment>Must refer to a <class name="View">View</class> object that will represent the content of the fileview.</comment>
      <access read="R" write="S">Read/Set</access>
      <type class="View">*View</type>
    </field>

    <field>
      <name>Window</name>
      <comment>The window related to the file view is referenced here.</comment>
      <access read="R">Read</access>
      <type>OBJECTID</type>
      <description>
<p>This field is automatically set on initialisation.  It refers to the window object that contains the fileview object. If the fileview is not contained by a window then this field will be set to zero.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="VWF" comment="View flags.">
      <const name="WIDTH_RESET">Always reset column widths when the Columns field is set.</const>
      <const name="NO_SORTING">No user sorting, e.g. in column mode.</const>
      <const name="SENSITIVE">Sensitive mode will activate child objects when the user single-clicks with the mouse (by default, child activation only occurs with double-clicks).</const>
      <const name="NO_ICONS">Do not load or show any icons.</const>
      <const name="NOTIFY_ON_CLEAR">If the view should activate itself when cleared, set this flag. By default, activation normally only occurs when an item is double-clicked or when sensitive mode is enabled.</const>
      <const name="DRAG_DROP">Enables drag and drop for items in the view. In this mode, multi-select is only possible if the shift or ctrl keys are held while using the mouse.</const>
      <const name="NO_SELECT">Stop the user from selecting items.</const>
      <const name="NO_SELECT_JMP">When a new item is selected, the view will jump to that item if it is not completely visible to the user. Setting this flag will turn off this behaviour.</const>
      <const name="USER_DRAG">Enable drag and drop only if the user prefers it.</const>
      <const name="AUTO_DESELECT">Deselects a highlighted item when it is activated by mouse click or enter key.</const>
      <const name="MULTI_SELECT">Allow multiple item selections without having to hold the shift key.</const>
    </constants>

    <constants lookup="MIF" comment="Flags for MenuItems.">
      <const name="SELECTED">The menu item has been selected (checked).</const>
      <const name="EXTENSION">Menu item is an extension.</const>
      <const name="NO_KEY_RESPONSE">Display the key, but do not respond to its equivalent key press.</const>
      <const name="SORT">Sort all content under the menuitem (applies only to extensions).</const>
      <const name="TOGGLE">Enables toggled menu items (checking state of on and off).</const>
      <const name="OPTION">Item is a clickable option (clicking the item's icon will turn the option on/off).</const>
      <const name="DISABLED">Set if the menu item is disabled (ghosted).</const>
      <const name="CATEGORISE">Categorise the attached config file.</const>
      <const name="BREAK">Menu item is acting as a break.</const>
      <const name="KEY_REPEAT">Respond to repeated key presses.</const>
    </constants>

    <constants lookup="INF" comment="Flags for the Input class.">
      <const name="RAISED">Draw the input box with a raised (3D) border edge.  Read-only.</const>
      <const name="NO_GFX">Do not generate any text or image graphics using internal routines (use the Template graphics definition).</const>
      <const name="SELECT_TEXT">Select all text when the input box is shown for the first time.</const>
      <const name="SUNKEN">Reverses the highlight and shadow definitions to create a sunken effect.  Read-only.</const>
      <const name="HIDE">Hide on creation, or input is currently hidden.</const>
      <const name="ENTER_TAB">Press enter results in a virtual tab-keypress being sent.</const>
      <const name="SECRET">Used for secret user entry (passwords).</const>
      <const name="DISABLED">Disable on creation.</const>
      <const name="NO_BKGD">Do not draw background graphics (automatically set if Template graphics are used).</const>
      <const name="ACTIVE_DRAW">Pro-actively redraw the object when graphics alterations are made.</const>
      <const name="COMMANDLINE">Function as a command-line.  Typically used when the input box needs to remain persistent and is linked to an output system, such as a shell.</const>
    </constants>

    <constants lookup="BTF" comment="Button flags.">
      <const name="DISABLED">Disable on creation, or button is currently disabled.  Read-only.</const>
      <const name="HIDE">Hide on creation, or button is currently hidden.</const>
      <const name="PULSE">Send repeated clicks when the mouse button is held down.</const>
      <const name="NO_GFX">Turns off the button's foreground graphics (text and images).</const>
    </constants>

    <constants lookup="CBF" comment="CheckBox flags.">
      <const name="DISABLED">Disable on creation, or object is currently disabled.</const>
      <const name="HIDE">Hide on creation, or object is currently hidden.</const>
      <const name="FADE_BORDER">Fade the border edges into the checkbox colour (requires thickness greater than 1).</const>
    </constants>

    <constants lookup="DT" comment="Types of dialog box">
      <const name="MESSAGE">The default setting.</const>
      <const name="CRITICAL">A highly critical error is being reported to the user.</const>
      <const name="ERROR">An error is being reported to the user.</const>
      <const name="WARNING">A warning message is being reported to the user.</const>
      <const name="ATTENTION">The dialog requests the user's immediate attention.</const>
      <const name="ALARM">The dialog is presented as a response to a preset alarm.</const>
      <const name="HELP">Help text is being presented in the dialog.</const>
      <const name="INFO">The dialog is providing the user with specific information on a topic.</const>
      <const name="QUESTION">A question is being asked of the user.</const>
      <const name="REQUEST">A request is being made (e.g. dialog requires user to type in input).</const>
      <const name="TEMPORARY">The dialog box will disappear after a short time-out period has expired.</const>
    </constants>

    <constants lookup="FVA" comment="Options for the Auto field.">
      <const name="OPEN">Open the file with the user's preferred program for this file type.</const>
      <const name="EDIT">Edit the file in a program suitable for editing this file type.</const>
      <const name="VIEW">View the file in a program suitable for read-only viewing.</const>
    </constants>

    <constants lookup="DF" comment="Dialog flags.">
      <const name="SECRET">User input needs to be secret (e.g. password entry).</const>
      <const name="QUIT">A quit message will be sent to the running application once the dialog window is closed.</const>
      <const name="MODAL">Makes the dialog window modal, this prevents the user from interacting with other windows that belong to the program.  For batch scripts, the WAIT flag should be used instead.</const>
      <const name="REVERSE">Reverse the activation process (respond to negatives, not positives).</const>
      <const name="WAIT">This option halts the program flow when the dialog box is activated.  Normal service will resume once the user responds to the dialog window.  Note that it is still possible to interact with other windows during this time, so the use of the MODAL flag may also be beneficial.</const>
      <const name="INPUT">An input box can be created inside the dialog window by setting this flag.  In this mode, the dialog box will return a user input string in the UserInput field after the user has responded to the dialog window.</const>
      <const name="OPTION_ON">Turn the checkbox option on by default.</const>
      <const name="INPUT_REQUIRED">This flag can be used in conjunction with the INPUT option.  It forces the user to input at least one character in the input box, otherwise the dialog window will automatically cancel itself.</const>
    </constants>

    <constants lookup="FVF" comment="Flags for the FileView.">
      <const name="SHOW_PARENT">The file view will display an item in the file list that reverts to the parent folder when activated.</const>
      <const name="NO_FILES">Do not display files in the file list.</const>
      <const name="SYS_KEYS">System key monitoring and relevant default behaviours are active when this option is enabled.  Cut, Copy, Paste and Select-All key combinations are provided to the user in this mode.</const>
      <const name="NO_EXTENSIONS">File extensions are not displayed when this option is active.</const>
      <const name="TOTAL_REFRESH">Force a total refresh of the files listed in the monitored folder whenever a change is detected.</const>
    </constants>

    <constants lookup="IMF" comment="Image flags">
      <const name="NO_DRAW">Stops automatic drawing of the target surface if the image is being animated or a special effect is active.</const>
      <const name="FIXED">Synonym for FIXED_SIZE</const>
      <const name="ENLARGE">If the dimensions of the original picture are smaller than the destination surface, the image will be stretched to fit.  Enlargement is dynamic, so if the surface changes in size then the size of the picture will be recalculated to fit.</const>
      <const name="NO_FAIL">If the source image file does not exist or an error occurs during loading, the image object will still pass the initialisation process successfully.  When the image object is drawn, it will clear the target surface to the colour specified in the Background field.</const>
      <const name="SHRINK">If the dimensions of the original picture are larger than the destination surface, the image will be stretched to fit.  Shrinking is dynamic, so if the surface changes in size then the size of the picture will be recalculated to fit.</const>
      <const name="SOLID_BLEND">Synonym for NO_BLEND</const>
      <const name="FIT">This flag applies to image resizing.  When set, the calculated width and height will be limited so that the image cannot be stretched beyond the edges of the target surface.  This flag is commonly set in conjunction with the 11RATIO flag.</const>
      <const name="NO_BLEND">Turns off alpha-blending if the target surface has the COMPOSITE flag set and the source image has an alpha channel.</const>
      <const name="FIXED_SIZE">Image data will normally be stored at its original size and resized on the fly when the STRETCH flag is used.  Setting the FIXED_SIZE flag will pre-scale the image and permanently store it at that size.</const>
      <const name="STRETCH">This flag conveniently combines the ENLARGE and SHRINK flags to ensure that the image always covers the dimensions of the destination surface.</const>
      <const name="SCALABLE">The image source is scalable (e.g. vector graphic).</const>
      <const name="STICKY">All calls to Move and MoveToPoint are ignored if this flag is set.</const>
      <const name="11_RATIO">When resizing the image, the calculated width and height will always be in correct proportion relative to the source image's original width and height.</const>
    </constants>

    <constants lookup="CMF" comment="ComboBox flags.">
      <const name="AUTO_COMPLETE">When in edit mode, this option helps the user by auto-completing text.</const>
      <const name="EDIT">Enable edit mode, which allows the user to write free-text in the combobox.</const>
      <const name="SHOW_ICONS">Show icons in the dropdown list.</const>
      <const name="DISABLED">Disable on creation; or combobox is currently disabled.</const>
      <const name="HIDE">Hide on creation, or combobox is currently hidden.</const>
      <const name="LIMIT_TO_LIST">When in edit mode, limit-to-list prevents the user from entering text that isn't in the combobox list.</const>
      <const name="NO_TRANSLATION">Do not translate combobox strings or the drop-down menu to the user's native language.</const>
    </constants>

    <constants lookup="CLIPTYPE" comment="Clipboard types">
      <const name="DATA">Raw information that is uncategorised can be defined as a data clip.</const>
      <const name="FILE">Pure file references are stored as file clips.  This type is typically used by file managers for moving and copying files.</const>
      <const name="TEXT">Plain text files such as ASCII and UTF-8 must be identified through this clip type.</const>
      <const name="AUDIO">An audio clip that is recognised by the Sound class (such as wav's and mp3's).</const>
      <const name="IMAGE">Images that are recognised by the Picture class may be stored as this type (such as jpeg's and png files).</const>
      <const name="OBJECT">An object that has been deserialised into binary form.</const>
    </constants>

    <constants lookup="MNF" comment="Flags for the Menu class.">
      <const name="SHOW_KEYS">Print key controls on the right.</const>
      <const name="POINTER_XY">Synonym for POINTER_PLACEMENT</const>
      <const name="SHOW_ICONS">Synonym for SHOW_IMAGES</const>
      <const name="SHOW_IMAGES">Allow for an image column on the left.</const>
      <const name="POINTER_PLACEMENT">Menu is placed at the position of the mouse pointer when shown.</const>
      <const name="REVERSE_Y">Menu's open in reverse vertical order.</const>
      <const name="CACHE">Cache menu surface once created.</const>
      <const name="IGNORE_FOCUS">Do not hide the menu if it loses the focus.</const>
      <const name="SORT">Sort all items by name.</const>
      <const name="EXT_COLUMN">Allow for an extension indicator column on the right.</const>
      <const name="PRESERVE_BKGD">Preserve background when scrolling.</const>
      <const name="REVERSE_X">Menu's open in reverse horizontal order.</const>
      <const name="NO_HIDE">Activate() is prevented from hiding the menu.</const>
      <const name="POPUP">Locks the position of the menu to the mouse pointer.</const>
      <const name="NO_TRANSLATION">Do not translate menu text to the user's native language.</const>
    </constants>

    <constants lookup="SD" comment="Scroll directions.">
      <const name="NEGATIVE"/>
      <const name="POSITIVE"/>
    </constants>

    <constants lookup="TXF" comment="Flags for the Text class.">
      <const name="SECRET">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="PRESERVE_BKGD">Preserve-background disables fast scrolling for background preservation.</const>
      <const name="AREA_SELECTED">This read-only flag is set automatically when the user has selected an area of text.</const>
      <const name="GLOBAL_EDITING">Keeps the text object in edit mode regardless of user focus.</const>
      <const name="SINGLE_SELECT">Enables text selection (with or without edit mode).  If in line mode, a single click will allow the user to highlight any line.</const>
      <const name="DISABLED">This read-only flag is set if the object has been disabled through the Disable action.</const>
      <const name="OVERWRITE">Turns on overwrite mode (if off, insert mode is enabled).</const>
      <const name="SELECT">Synonym for MULTI_SELECT | SINGLE_SELECT</const>
      <const name="ENTER_TAB">Convert enter-key presses to the tab-key.</const>
      <const name="FORCE_CAPS">This flag forces the capitalisation of all text that is entered into the object.</const>
      <const name="AUTO_CLEAR">Clears the text string when the enter key is pressed.</const>
      <const name="EDIT">This flag must be enabled if the user is permitted to change the text string with the keyboard.</const>
      <const name="STRETCH">If the font is scalable, the text string will be resized to fit inside the surface that contains it (i.e. no characters will be clipped).  This is acheived by recalculating the font's point size.</const>
      <const name="WORDWRAP">Enables word wrapping.</const>
      <const name="AUTO_SELECT">Automatically select all text if the text object receives the focus.</const>
      <const name="TAB_KEY">If the tab key is pressed, print the tab character.</const>
      <const name="PASSWORD">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="MULTI_SELECT">Allow the user to select/highlight multiple lines by holding the Ctrl key.</const>
      <const name="VARIABLE">This flag forces a text object to recalculate any variable references in its string data whenever a redraw occurs.  Such references are indicated through square brackets, e.g. [desktop.width].  Refer to the StrEvaluate() function in the Strings module for more information.</const>
      <const name="STR_TRANSLATE">Translate strings to the user's native language.</const>
      <const name="HISTORY">Enables historical browsing when the up/down cursor keys are used.  The number of historical lines stored can be set in the HistorySize field.</const>
      <const name="NO_SYS_KEYS">This flag is set by default to enable system key support.  System-keys provide support for common key combinations such as Ctrl-C, Ctrl-X etc.</const>
      <const name="BACKGROUND">Enables a colour background behind the text.</const>
      <const name="TAB_ENTRY">Pressing the tab key is treated the same as pressing enter.</const>
      <const name="COMMANDLINE">Synonym for AUTO_CLEAR | EDIT | HISTORY</const>
    </constants>

    <constants lookup="CLF" comment="Clipboard flags">
      <const name="WAIT">The clipboard will wait for the user to respond to user dialogs rather than return immediately from clipboard operations.</const>
      <const name="HOST"/>
    </constants>

    <constants lookup="SBF" comment="Scrollbar flags.">
      <const name="CONSTANT">Ensures that the scrollbar is always on display.</const>
      <const name="RELATIVE">Enables relative scrolling (movement is reported relative to the current slider position rather than in absolute coordinates).</const>
      <const name="HIDE">Hide on creation, or scrollbar is currently hidden.</const>
      <const name="SLIDER">If set, the scrollbar behaves as a slider.  In this mode, the size of the draggable slider has a fixed size (by default the slider is proportional).</const>
      <const name="NO_INTERSECT">Do not attempt to intersect with adjacent scrollbars.</const>
    </constants>

    <constants lookup="VIEW" comment="List options">
      <const name="LIST">Standard list view with small icons, arranged from top to bottom.</const>
      <const name="ICON">Similar to list-view but with large icons, arranged from left to right.</const>
      <const name="TREE">Tree mode can be used if the items are arranged in a hierarchy, where items can be embedded within items.  The tree view provides small buttons that the user can click to expand the tree and view hidden items.</const>
      <const name="COLUMN">Long list with detail columns.</const>
      <const name="LONG_LIST">This type is the same as the LIST view but the items will not wrap back to the top of the view when the bottom edge of the surface is encountered.</const>
      <const name="GROUP_TREE">Similar to tree view, but root level nodes are drawn as a headline.</const>
      <const name="DOCUMENT">Document mode allows view data to be passed to a document object for display.  You are required to provide a document object that is pre-loaded with a template capable of processing input from the view object.  Refer to the Document field for more information.</const>
      <const name="COLUMN_TREE">This mode combines the column and tree modes.  The view displays the layout and style of normal column mode, but the first column is used to display and manage a tree hierarchy.  The tree can be expanded and collapsed just as in the standard tree mode.</const>
    </constants>

    <constants lookup="SLF" comment="Flags for SelectCallback">
      <const name="ACTIVE">The most recently active tag has changed.</const>
      <const name="MANUAL">Item was manually selected (by the program, not the user).</const>
      <const name="SELECTED">A tag has been selected and is now highlighted.</const>
      <const name="INVERTED">Change is due to an inverted selection.</const>
      <const name="KEYPRESS">Item was selected by a keypress.</const>
      <const name="CLICK">Item was clicked - see ClickX and ClickY for coordinates.</const>
      <const name="MULTIPLE">Multiple items were selected.</const>
      <const name="MOVED">Change is due to the item being moved.</const>
    </constants>

    <constants lookup="TF" comment="Flags for the TabFocus class.">
      <const name="LOCAL_FOCUS">In this mode, the user's point of focus must match the monitored Surface for the tabfocus to function.</const>
      <const name="CHILD_FOCUS">In this mode, the user's point of focus must match the monitored Surface or one of its immediate children for the tabfocus to function.</const>
      <const name="LIMIT_TO_LIST">In limit-to-list mode, the tabfocus only functions if the user's point of focus is on the monitored Surface or one of objects in the tab list.</const>
    </constants>

    <constants lookup="BHS">
      <const name="OUTSIDE">The cursor is outside of the button's area</const>
      <const name="ENTERED">The cursor has just entered the button's area</const>
      <const name="INSIDE">The cursor is inside the button's area</const>
    </constants>

    <constants lookup="VGF" comment="Graphics options (normally defined by the template)">
      <const name="OUTLINE_TITLE">Draw black outline around title text.</const>
      <const name="NO_BORDER">Do not draw a border around column headers when in table mode.</const>
      <const name="DRAW_TABLE">Draw the view as a table (the basic format is the same, graphics are different).</const>
      <const name="GROUP_SHADOW">Draw a shadow underneath the group graphics headers.</const>
      <const name="STRIPES">Draw stripes in group titles.</const>
      <const name="HAIRLINES">Draw a hairline between each column.</const>
      <const name="BRANCHES">Draw grey tree branches.</const>
      <const name="ALT_GROUP">Alternate the group header graphics.</const>
      <const name="LINE_BREAKS">Draw a line break between each view item.</const>
    </constants>

    <constants lookup="RSP">
      <const name="CANCEL"/>
      <const name="YES"/>
      <const name="YES_ALL"/>
      <const name="NO"/>
    </constants>

    <constants lookup="RSF" comment="Dialog response flags">
      <const name="NO">Negative response.</const>
      <const name="CUSTOM_2">Developer customised option 2 - neutral response.</const>
      <const name="YES">Positive response.</const>
      <const name="CUSTOM_4">Developer customised option 4 - neutral response.</const>
      <const name="NO_ALL">Negative response.</const>
      <const name="OKAY">Positive response.</const>
      <const name="CANCEL">Negative response.</const>
      <const name="YES_ALL">Positive response.</const>
      <const name="CLOSED">Window closed without response.</const>
      <const name="OK">Positive response.</const>
      <const name="CUSTOM_3">Developer customised option 3 - neutral response.</const>
      <const name="NEGATIVE">Synonym for CANCEL | NO | QUIT | NO_ALL | CLOSED</const>
      <const name="POSITIVE">Synonym for YES | YES_ALL | OKAY | CUSTOM_1 | CUSTOM_2 | CUSTOM_3 | CUSTOM_4</const>
      <const name="QUIT">Negative response.</const>
      <const name="NONE">Do nothing dummy flag.</const>
      <const name="OPTION">Combobox option ticked.</const>
      <const name="CUSTOM_1">Developer customised option 1 - neutral response.</const>
      <const name="RETRY"/>
    </constants>

    <constants lookup="SO" comment="Direction options">
      <const name="HORIZONTAL"/>
      <const name="VERTICAL"/>
    </constants>

    <constants lookup="AXIS" comment="Axis options.  This determines the axis that is signalled when the slider is moved (note that it is feasible for a horizontal scrollbar to signal the Y axis, if this is desired by the client)">
      <const name="X"/>
      <const name="Y"/>
      <const name="Z"/>
    </constants>

    <constants lookup="CEF">
      <const name="DELETE">Requests that the original file source is deleted if a successful paste operation takes place.</const>
      <const name="EXTEND">Instead of replacing existing clipboard data, add the new data to the group.</const>
    </constants>

    <constants lookup="FEF" comment="Event flags.">
      <const name="LOCATION">The location has been changed (user has moved to a different folder).</const>
    </constants>

    <constants lookup="SCF" comment="Scroll flags.">
      <const name="FIXED">Fixes the scroll slider to a specific size (non-proportional mode of operation).</const>
      <const name="REVERSE">When reporting the position of the slider, the value will always be reversed - so positive values will be negative and vice versa.  Reporting for relative position changes are also affected.</const>
      <const name="VERTICAL">The scrollbar is oriented vertically.</const>
      <const name="RELATIVE">Forces relative scrolling through the Scroll action rather than the default ScrollToPoint.</const>
      <const name="AUTO_ACTIVATE">The scroll object automatically activates itself whenever the position of the slider is changed.</const>
      <const name="AUTO_HIDE">Automatically hide the scrollbar when possible.</const>
      <const name="INVISIBLE">Keep scrollbar invisible.</const>
      <const name="HORIZONTAL">The scrollbar is oriented horizontally.</const>
      <const name="SLIDER">Changes the mode of operation so that the slider is non-proportional.  The size of the view is also set to a fixed value and resizing of the parent surface no longer affects the scroll values.</const>
      <const name="MESSAGE">Use used delay messages for activation of children.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
