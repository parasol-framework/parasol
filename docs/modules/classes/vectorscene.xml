<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>VectorScene</name>
    <type>class</type>
    <module>Vector</module>
    <comment>Manages the scene graph for a collection of vectors.</comment>
    <version>1</version>
    <id>890a3646</id>
    <idstring>ID_VECTORSCENE</idstring>
    <category>Graphics</category>
    <include>modules/vectorscene.h</include>
    <copyright>Paul Manias Â© 2010-2022</copyright>
    <description>
<p>The VectorScene class acts as a container and control point for the management of vector definitions.  Its main purpose is to draw the scene to a target <class name="Bitmap">Bitmap</class> or <class name="Surface">Surface</class> provided by the client.</p>
<p>Vector scenes are created by initialising multiple Vector objects such as <class name="VectorPath">VectorPath</class> and <class name="VectorViewport">VectorViewport</class> and positioning them within a vector tree.  The VectorScene must lie at the root.</p>
<p>The default mode of operation is for scenes to be manually drawn, for which the client must set the target <field>Bitmap</field> and call the <action>Draw</action> action as required.  Automated drawing can be enabled by setting the target <field>Surface</field> prior to initialisation.  In automated mode the <field>PageWidth</field> and <field>PageHeight</field> will reflect the dimensions of the target surface at all times.</p>
<p>Vector definitions can be saved and loaded from permanent storage by using the <class name="SVG">SVG</class> class.</p></description>
    <source>
      <file path="scene/">scene.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Draw</name>
      <comment>Renders the scene to a bitmap.</comment>
      <description>
<p>The Draw action will render the scene to the target <field>Bitmap</field>.  If <field>Bitmap</field> is NULL, an error will be returned.</p>
<p>In addition, the <field>RenderTime</field> field will be updated if the <code>RENDER_TIME</code> flag is defined.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="FieldNotSet">The Bitmap field is NULL.</error>
      </result>
    </action>

    <action>
      <name>Redimension</name>
      <comment>Redefines the size of the page.</comment>
    </action>

    <action>
      <name>Reset</name>
      <comment>Clears all registered definitions and resets field values.  Child vectors are untouched.</comment>
    </action>

    <action>
      <name>Resize</name>
      <comment>Redefines the size of the page.</comment>
    </action>

  </actions>

  <methods>
    <method>
      <name>AddDef</name>
      <comment>Adds a new definition to a vector tree.</comment>
      <prototype>ERROR scAddDef(OBJECTPTR Object, CSTRING Name, OBJECTPTR Def)</prototype>
      <input>
        <param type="CSTRING" name="Name">The unique name to associate with the definition.</param>
        <param type="OBJECTPTR" name="Def">Reference to the definition object.</param>
      </input>
      <description>
<p>This method will add a new definition to the root of a vector tree.  This feature is provided with the intention of supporting SVG style references to definitions such as gradients, images and other vectors.  By providing a name with the definition object, the object can then be referenced in strings that support definition referencing.</p>
<p>For instance, creating a gradient and associating it with the definition "redGradient" it would be possible to reference it with the string "url(#redGradient)" from common graphics attributes such as "fill".</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="InvalidObject">The definition is not an accepted object class.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="ResourceExists">The given name is already in use as a definition.</error>
        <error code="UnsupportedOwner">The definition is not owned by the scene.</error>
      </result>
    </method>

    <method>
      <name>FindDef</name>
      <comment>Search for a vector definition by name.</comment>
      <prototype>ERROR scFindDef(OBJECTPTR Object, CSTRING Name, OBJECTPTR * Def)</prototype>
      <input>
        <param type="CSTRING" name="Name">The name of the definition.</param>
        <param type="OBJECTPTR *" name="Def">A pointer to the definition is returned here if discovered.</param>
      </input>
      <description>
<p>Use the FindDef method to search for a vector definition by name.  A reference to the definition will be returned if the search is successful.</p>
<p>Definitions are created with the <method>AddDef</method> method.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Search">A definition with the given Name was not found.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>SearchByID</name>
      <comment>Search for a vector by numeric ID.</comment>
      <prototype>ERROR scSearchByID(OBJECTPTR Object, LONG ID, OBJECTPTR * Result)</prototype>
      <input>
        <param type="LONG" name="ID">The ID to search for.</param>
        <param type="OBJECTPTR *" name="Result">This parameter will be updated with the discovered vector, or NULL if not found.</param>
      </input>
      <description>
<p>This method will search a scene for an object that matches a given ID (vector ID's can be set with the NumericID and ID fields).  If multiple vectors are using the same ID, repeated calls can be made to this method to find all of them. This is achieved by calling this method on the vector that was last returned as a result.</p>
<p>Please note that searching for string-based ID's is achieved by converting the string to a case-sensitive hash with StrHash() and using that as the ID.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Search">A vector with a matching ID was not found.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>Bitmap</name>
      <comment>Target bitmap for drawing vectors.</comment>
      <access read="R" write="S">Read/Set</access>
      <type class="Bitmap">*Bitmap</type>
      <description>
<p>The target bitmap to use when drawing the vectors must be specified here.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="VPF">INT</type>
      <description>
<types lookup="VPF"/>
      </description>
    </field>

    <field>
      <name>PageHeight</name>
      <comment>The height of the page that contains the vector.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>This value defines the pixel height of the page that contains the vector scene graph.  If the <code>RESIZE</code> <field>Flags</field> option is used then the viewport will be scaled to fit within the page.</p>
      </description>
    </field>

    <field>
      <name>PageWidth</name>
      <comment>The width of the page that contains the vector.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>This value defines the pixel width of the page that contains the vector scene graph.  If the <code>RESIZE</code> <field>Flags</field> option is used then the viewport will be scaled to fit within the page.</p>
      </description>
    </field>

    <field>
      <name>RenderTime</name>
      <comment>Returns the rendering time of the last scene.</comment>
      <access read="G">Get</access>
      <type>BIGINT</type>
      <description>
<p>RenderTime returns the rendering time of the last scene that was drawn, measured in microseconds.  This value can also be used to compute frames-per-second with <code>1000000 / RenderTime</code>.</p>
<p>The RENDER_TIME flag should also be set before fetching this value, as it is required to enable the timing feature.  If RENDER_TIME is not set, it will be set automatically so that subsequent calls succeed correctly.</p>
      </description>
    </field>

    <field>
      <name>SampleMethod</name>
      <comment>The sampling method to use when interpolating images and patterns.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="VSM">INT</type>
      <description>
<p>The SampleMethod controls the sampling algorithm that is used when images and patterns in the vector definition are affected by rotate, skew and scale transforms.  The choice of method will have a significant impact on the speed and quality of the images that are displayed in the rendered scene.  The recommended default is <code>BILINEAR</code>, which provides a comparatively average result and execution speed.  The most advanced method is <code>BLACKMAN8</code>, which produces an excellent level of quality at the cost of very poor execution speed.</p>
<types lookup="VSM"/>
      </description>
    </field>

    <field>
      <name>Surface</name>
      <comment>May refer to a Surface object for enabling automatic rendering.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>OBJECTID</type>
      <description>
<p>Setting the Surface field will enable automatic rendering to a display surface.  The use of features such as input event handling and user focus management will also require an associated surface as a pre-requisite.</p>
      </description>
    </field>

    <field>
      <name>Viewport</name>
      <comment>References the first object in the scene, which must be a VectorViewport object.</comment>
      <access read="R">Read</access>
      <type class="Vector">*Vector</type>
      <description>
<p>The first object in the vector scene is referenced here.  It must belong to the <class name="VectorViewport">VectorViewport</class> class, because it will be used to define the size and location of the area rendered by the scene.</p>
<p>The Viewport field must not be set by the client.  The VectorViewport object will configure its ownership to the VectorScene prior to initialisation.  The Viewport field value will then be set automatically when the VectorViewport object is initialised.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="ARC" comment="Options for drawing arcs.">
      <const name="LARGE"/>
      <const name="SWEEP"/>
    </constants>

    <constants lookup="ARF" comment="Aspect ratios control alignment, scaling and clipping.">
      <const name="MEET">Aspect ratio is preserved. The entire viewbox will be visible in the viewport.  The viewbox is scaled up as much as possible.</const>
      <const name="NONE">Scale the viewbox to match the size of the viewport.  Aspect ratio is not preserved.</const>
      <const name="SLICE">Aspect ratio is preserved. The viewbox can extend beyond the viewport's edges on one axis.  The viewbox is scaled up as much as possible.</const>
      <const name="X_MAX">Align to the right.</const>
      <const name="X_MID">Align to the horizontal center.</const>
      <const name="X_MIN">Align to the left.</const>
      <const name="Y_MAX">Align to the bottom.</const>
      <const name="Y_MID">Align to the vertical center.</const>
      <const name="Y_MIN">Align to the top.</const>
    </constants>

    <constants lookup="CS" comment="Colour space options.">
      <const name="INHERIT">Inherit the colour space option from the parent vector.</const>
      <const name="LINEAR_RGB">Linear RGB is the default colour space for SVG and produces the best results.</const>
      <const name="SRGB">The default colour-space is sRGB, recommended for its speed.</const>
    </constants>

    <constants lookup="FM" comment="Mask for controlling feedback events that are received.">
      <const name="PATH_CHANGED">The vector path has been modified or affected by a transform.</const>
    </constants>

    <constants lookup="VBF" comment="Options for vecGetBoundary().">
      <const name="INCLUSIVE">The result will be inclusive of all paths that belong to children of the queried vector.</const>
      <const name="NO_TRANSFORM">The transformation step will not be applied to the vector's path.</const>
    </constants>

    <constants lookup="VF" comment="Optional flags and indicators for the Vector class.">
      <const name="DISABLED">The vector is disabled and user input should be ignored.</const>
      <const name="HAS_FOCUS">The vector holds the user's input focus.</const>
    </constants>

    <constants lookup="VFR" comment="Vector fill rules for the FillRule field in the Vector class.">
      <const name="EVEN_ODD">This rule determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.</const>
      <const name="INHERIT">The rule is inherited from the parent vector(s).</const>
      <const name="NON_ZERO">This is the default.  This rule determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a path segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside the path. Otherwise, it is inside.</const>
    </constants>

    <constants lookup="VGF" comment="Gradient flags">
      <const name="FIXED_CX">CX is fixed</const>
      <const name="FIXED_CY">CY is fixed</const>
      <const name="FIXED_FX">FX is fixed</const>
      <const name="FIXED_FY">FY is fixed</const>
      <const name="FIXED_RADIUS">is fixed</const>
      <const name="FIXED_X1">X1 is fixed</const>
      <const name="FIXED_X2">X2 is fixed</const>
      <const name="FIXED_Y1">Y1 is fixed</const>
      <const name="FIXED_Y2">Y2 is fixed</const>
      <const name="RELATIVE_CX">CX is relative</const>
      <const name="RELATIVE_CY">CY is relative</const>
      <const name="RELATIVE_FX">FX is relative</const>
      <const name="RELATIVE_FY">FY is relative</const>
      <const name="RELATIVE_RADIUS">Radius is relative</const>
      <const name="RELATIVE_X1">X1 is relative</const>
      <const name="RELATIVE_X2">X2 is relative</const>
      <const name="RELATIVE_Y1">Y1 is relative</const>
      <const name="RELATIVE_Y2">Y2 is relative</const>
    </constants>

    <constants lookup="VGT" comment="VectorGradient options.">
      <const name="CONIC">The conic gradient is a variant on the radial type, whereby the colour values are drawn as a line that revolves around the cone's center point.</const>
      <const name="CONTOUR">Contoured gradients follow the contours of the vector path in which they are rendered.</const>
      <const name="DIAMOND">A diamond gradient is drawn as a square emanating from the center point.</const>
      <const name="LINEAR">A linear gradient is drawn from (X1,Y1) to (X2,Y2).</const>
      <const name="RADIAL">A radial gradient is drawn from CenterX,CenterY to Radius.  An optional focal point can be expressed with FX and FY.</const>
    </constants>

    <constants lookup="VIJ" comment="Inner join options for angled lines.">
      <const name="BEVEL">Blunts the edge of the join.</const>
      <const name="INHERIT">Inherit the parent's join value.</const>
      <const name="JAG">A special non-SVG option.</const>
      <const name="MITER">Forms a sharp point at the join.  Typically not the best looking option.</const>
      <const name="ROUND">Rounds the edge of the join to produce the best looking results.</const>
    </constants>

    <constants lookup="VIS" comment="Options for the Vector class' Visibility field.">
      <const name="COLLAPSE">Hide the vector and its children.  Do not use - provided for SVG compatibility only.</const>
      <const name="HIDDEN">Hide the vector and its children.</const>
      <const name="INHERIT">Inherit the visibility state from the parent.</const>
      <const name="VISIBLE">The default.  Ensures that the vector is visible.</const>
    </constants>

    <constants lookup="VLC" comment="Line-cap options.">
      <const name="BUTT">The default.  The line is sharply squared off at its exact end point.</const>
      <const name="INHERIT">The cap type is inherited from the parent (defaults to butt if unspecified).</const>
      <const name="ROUND">The line cap is a half-circle and the line's end-point forms the center point.</const>
      <const name="SQUARE">Similar to butt, the line is sharply squared off but will extend past the end point by 'StrokeWidth / 2'.</const>
    </constants>

    <constants lookup="VLJ" comment="Options for the look of line joins.">
      <const name="BEVEL">The join is blunted, eliminating overly sharp edges.</const>
      <const name="INHERIT">Inherit the join option from the parent.</const>
      <const name="MITER">The default.  The join will form a pointed edge.</const>
      <const name="MITER_REVERT"/>
      <const name="MITER_ROUND">Default to MITER, but switch to ROUND if the miter limit is exceeded.</const>
      <const name="ROUND">The join is rounded.</const>
    </constants>

    <constants lookup="VPF" comment="Optional flags for the VectorScene object.">
      <const name="BITMAP_SIZED">Automatically adjust the PageWidth and PageHeight to match the target Bitmap width and height.</const>
      <const name="RENDER_TIME">Compute the drawing frame-rate for the RenderTime field.</const>
      <const name="RESIZE">The vector will be stretched to fit the PageWidth and PageHeight values, if defined by the client.</const>
    </constants>

    <constants lookup="VSM">
      <const name="AUTO">The default option is chosen by the system.  This will typically be bilinear, but slow machines may switch to nearest neighbour and high speed machines could use more advanced methods.</const>
      <const name="BESSEL"/>
      <const name="BICUBIC">Produces a similar result to bilinear with a marginally sharper after-effect.</const>
      <const name="BILINEAR">Bilinear is a common algorithm that produces a reasonable quality image.</const>
      <const name="BLACKMAN3">Five times slower than bilinear, the final result will lack sharpness when compared to SINC3.</const>
      <const name="BLACKMAN8">15 times slower than bilinear, the final result is of excellent quality and sharpness is well balanced.</const>
      <const name="GAUSSIAN"/>
      <const name="KAISER"/>
      <const name="LANCZOS3">This well known algorithm may serve as a point of comparison for evaluating the results of other methods.  It shares characteristics with SINC and BLACKMAN.</const>
      <const name="LANCZOS8"/>
      <const name="MITCHELL"/>
      <const name="NEIGHBOUR">Nearest neighbour is the fastest sampler at the cost of poor quality.</const>
      <const name="QUADRIC"/>
      <const name="SINC3">Five times slower than bilinear, the final result is of very good quality.</const>
      <const name="SINC8">15 times slower than bilinear, the final result is of excellent quality but may be marginally over-sharpened.</const>
      <const name="SPLINE16">About 1/2 the speed of bilinear, this method produces a considerably better result.</const>
    </constants>

    <constants lookup="VSPREAD" comment="Spread method options define the method to use for tiling filled graphics.">
      <const name="CLIP">Do not scale the graphic.  Clip it if it extends past imposed boundaries.</const>
      <const name="PAD">Scale the graphic to the object bounds.</const>
      <const name="REFLECT">Tile the graphic, reflecting the image alternately on the X and Y axis.</const>
      <const name="REFLECT_X">Tile the graphic, reflecting the image alternately on the X axis only.</const>
      <const name="REFLECT_Y">Tile the graphic, reflecting the image alternately on the Y axis only.</const>
      <const name="REPEAT">Tile the graphic repeatedly.</const>
      <const name="UNDEFINED">Either the default setting will be applied or the setting will be inherited from a parent object.</const>
    </constants>

    <constants lookup="VUNIT">
      <const name="BOUNDING_BOX">Coordinates are relative to the object's bounding box.</const>
      <const name="UNDEFINED"/>
      <const name="USERSPACE">Coordinates are relative to the current viewport.</const>
    </constants>

  </types>
  <structs>
    <struct name="PathCommand" comment="Base structure for path commands.">
      <field name="Type" type="UBYTE">The command type (PE value)</field>
      <field name="Curved" type="UBYTE">Private</field>
      <field name="LargeArc" type="UBYTE">Equivalent to the large-arc-flag in SVG, it ensures that the arc follows the longest drawing path when TRUE.</field>
      <field name="Sweep" type="UBYTE">Equivalent to the sweep-flag in SVG, it inverts the default behaviour in generating arc paths.</field>
      <field name="Pad" type="LONG">Private</field>
      <field name="X" type="DOUBLE">The targeted X coordinate (absolute or relative) for the command</field>
      <field name="Y" type="DOUBLE">The targeted Y coordinate (absolute or relative) for the command</field>
      <field name="AbsX" type="DOUBLE">Private</field>
      <field name="AbsY" type="DOUBLE">Private</field>
      <field name="X2" type="DOUBLE">The X2 coordinate for curve commands, or RX for arcs</field>
      <field name="Y2" type="DOUBLE">The Y2 coordinate for curve commands, or RY for arcs</field>
      <field name="X3" type="DOUBLE">The X3 coordinate for curve-to or smooth-curve-to</field>
      <field name="Y3" type="DOUBLE">The Y3 coordinate for curve-to or smooth-curve-to</field>
      <field name="Angle" type="DOUBLE">Arc angle</field>
    </struct>

    <struct name="VectorMatrix" comment="Vector transformation matrix.">
      <field name="Next" type="struct VectorMatrix *">The next transform in the list.</field>
      <field name="Vector" type="struct rkVector *">The vector associated with the transform.</field>
      <field name="ScaleX" type="DOUBLE">Matrix value A</field>
      <field name="ShearY" type="DOUBLE">Matrix value B</field>
      <field name="ShearX" type="DOUBLE">Matrix value C</field>
      <field name="ScaleY" type="DOUBLE">Matrix value D</field>
      <field name="TranslateX" type="DOUBLE">Matrix value E</field>
      <field name="TranslateY" type="DOUBLE">Matrix value F</field>
    </struct>

  </structs>
</book>
