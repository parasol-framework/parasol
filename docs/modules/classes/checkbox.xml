<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>CheckBox</name>
    <type>class</type>
    <module>Widget</module>
    <comment>The CheckBox class displays a checkbox widget in the UI.</comment>
    <version>1</version>
    <id>11a6290c</id>
    <idstring>ID_CHECKBOX</idstring>
    <category>GUI</category>
    <include>modules/checkbox.h</include>
    <copyright>Paul Manias 2003-2020</copyright>
    <description>
<p>The CheckBox class simplifies the creation and management of checkbox widgets in the user interface.  Check boxes are simple widgets that are limited to exhibiting an on/off state.  The CheckBox class allows for its graphics to be customised, so it is possible to redefine how the on/off states are displayed.</p>
<p>To respond to user interaction with the Checkbox, set the <field>Feedback</field> field with a callback function.</p></description>
    <source>
      <file>class_checkbox.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Disable</name>
      <comment>Disables the checkbox.</comment>
    </action>

    <action>
      <name>Enable</name>
      <comment>Turns the checkbox on if it has been disabled.</comment>
    </action>

    <action>
      <name>Focus</name>
      <comment>Sets the focus on the checkbox and activates keyboard monitoring.</comment>
    </action>

    <action>
      <name>Hide</name>
      <comment>Removes the checkbox from the display.</comment>
    </action>

    <action>
      <name>MoveToBack</name>
      <comment>Moves the checkbox to the back of the display area.</comment>
    </action>

    <action>
      <name>MoveToFront</name>
      <comment>Moves the checkbox to the front of the display area.</comment>
    </action>

    <action>
      <name>Redimension</name>
      <comment>Changes the size and position of the checkbox.</comment>
    </action>

    <action>
      <name>Resize</name>
      <comment>Alters the size of the checkbox.</comment>
    </action>

    <action>
      <name>Show</name>
      <comment>Make the checkbox visible.</comment>
    </action>

  </actions>

  <fields>
    <field>
      <name>Align</name>
      <comment>Affects the alignment of the checkbox widget within its target surface.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="ALIGN">INT</type>
      <description>
<p>By default the checkbox widget will be aligned to the top left of its target surface.  The checkbox can be aligned to the right by setting the ALIGN_RIGHT flag.</p>
<types lookup="ALIGN"/>
      </description>
    </field>

    <field>
      <name>Bottom</name>
      <comment>The bottom coordinate of the checkbox (Y + Height).</comment>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

    <field>
      <name>Disable</name>
      <comment>Disables the checkbox on initialisation.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The checkbox can be disabled on initialisation by setting this field to TRUE.  If you need to disable the combobox after it has been activated, it is preferred that you use the <action>Disable</action> action.</p>
<p>To enable the combobox after it has been disabled, use the <action>Enable</action> action.</p>
      </description>
    </field>

    <field>
      <name>Feedback</name>
      <comment>Provides instant feedback when a user interacts with the checkbox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>Set the Feedback field with a callback function in order to receive instant feedback when user interaction occurs.  The function prototype is <code>routine(*CheckBox, LONG Status)</code></p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="CBF">INT</type>
      <description>
<types lookup="CBF"/>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>Defines the height of a checkbox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>A checkbox can be given a fixed or relative height by setting this field to the desired value.  To set a relative height, use the FD_PERCENT flag when setting the field.</p>
      </description>
    </field>

    <field>
      <name>Label</name>
      <comment>The label is a string displayed to the left of the input area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>A label can be drawn next to the input area by setting the Label field.  The label should be a short, descriptive string of one or two words.  It is common practice for the label to be followed with a colon character.</p>
      </description>
    </field>

    <field>
      <name>LabelWidth</name>
      <comment>The fixed pixel width allocated for drawing the label string.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>If a label is assigned to a checkbox, the width of the label will be calculated on initialisation and the value will be readable from this field.  It is also possible to set the LabelWidth prior to initialisation, in which case the label string will be restricted to the space available.</p>
      </description>
    </field>

    <field>
      <name>ParentViewport</name>
      <comment>The parent container for the Viewport</comment>
      <access read="R" write="I">Read/Init</access>
      <type class="Vector">*Vector</type>
    </field>

    <field>
      <name>Right</name>
      <comment>The right coordinate of the checkbox (X + Width).</comment>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

    <field>
      <name>Status</name>
      <comment>Indicates the current on/off state of the checkbox.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>To get the on/off state of the checkbox, read this field.  It can also be set at run-time to change the checkbox to an on or off state.  Only values of 0 (off) and 1 (on) are valid.</p>
<p>If the state is altered post-initialisation, the UI will be updated and the <field>Feedback</field> function will be called with the new state value.</p>
      </description>
    </field>

    <field>
      <name>StyleTrigger</name>
      <comment>Requires a callback for reporting changes that can affect graphics styling.</comment>
      <access write="S">Set</access>
      <type>FUNCTION</type>
      <description>
<p>This field is reserved for use by the style code that is managing the widget graphics.</p>
      </description>
    </field>

    <field>
      <name>TabFocus</name>
      <comment>Set this field to a TabFocus object to register the checkbox in a tab-list.</comment>
      <access write="S">Set</access>
      <type>OBJECTID</type>
      <description>
<p>The TabFocus field provides a convenient way of adding the checkbox to a TabFocus object, so that it can be focussed on via the tab key.  Simply set this field to the ID of the TabFocus object that is managing the tab-list for the application window.</p>
      </description>
    </field>

    <field>
      <name>Viewport</name>
      <comment>Viewport region created by the checkbox object</comment>
      <access read="R">Read</access>
      <type class="Vector">*Vector</type>
    </field>

    <field>
      <name>Width</name>
      <comment>Defines the width of a checkbox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>A checkbox can be given a fixed or relative width by setting this field to the desired value.  To set a relative width, use the FD_PERCENT flag when setting the field.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>The horizontal position of a checkbox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The horizontal position of a checkbox can be set to an absolute or relative coordinate by writing a value to the X field.  To set a relative/percentage based value, you must use the FD_PERCENT flag or the value will be interpreted as fixed.  Negative values are permitted.</p>
      </description>
    </field>

    <field>
      <name>XOffset</name>
      <comment>The horizontal offset of a checkbox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The XOffset has a dual purpose depending on whether or not it is set in conjunction with an X coordinate or a Width based field.</p>
<p>If set in conjunction with an X coordinate then the checkbox will be drawn from that X coordinate up to the width of the container, minus the value given in the XOffset.  This means that the width of the CheckBox is dynamically calculated in relation to the width of the container.</p>
<p>If the XOffset field is set in conjunction with a fixed or relative width then the checkbox will be drawn at an X coordinate calculated from the formula <code>X = ContainerWidth - CheckBoxWidth - XOffset</code>.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>The vertical position of a checkbox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The vertical position of a CheckBox can be set to an absolute or relative coordinate by writing a value to the Y field.  To set a relative/percentage based value, you must use the FD_PERCENT flag or the value will be interpreted as fixed.  Negative values are permitted.</p>
      </description>
    </field>

    <field>
      <name>YOffset</name>
      <comment>The vertical offset of a checkbox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The YOffset has a dual purpose depending on whether or not it is set in conjunction with a Y coordinate or a Height based field.</p>
<p>If set in conjunction with a Y coordinate then the checkbox will be drawn from that Y coordinate up to the height of the container, minus the value given in the YOffset.  This means that the height of the checkbox is dynamically calculated in relation to the height of the container.</p>
<p>If the YOffset field is set in conjunction with a fixed or relative height then the checkbox will be drawn at a Y coordinate calculated from the formula <code>Y = ContainerHeight - CheckBoxHeight - YOffset</code>.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="CBF" comment="CheckBox flags.">
      <const name="DISABLED">Disable on creation, or object is currently disabled.</const>
      <const name="HIDE">Hide on creation, or object is currently hidden.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
