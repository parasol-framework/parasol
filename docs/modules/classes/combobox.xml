<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>ComboBox</name>
    <type>class</type>
    <module>Widget</module>
    <comment>The ComboBox class manages the display and interaction of user combo boxes.</comment>
    <version>1</version>
    <id>3f17305e</id>
    <idstring>ID_COMBOBOX</idstring>
    <category>GUI</category>
    <include>modules/combobox.h</include>
    <copyright>Paul Manias 2003-2020</copyright>
    <description>
<p>The ComboBox class is used to create combo boxes, also known as 'drop-down menus' in application interfaces.  A combobox typically looks like a text entry area, but features a button positioned to the right-hand side of the gadget. Clicking on the button will pop-up a menu that the user can use to select a pre-defined menu item.  Clicking on one of those items will paste the item text into the combobox.</p></description>
    <source>
      <file>class_combobox.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Clear</name>
      <comment>Clears the content of the combobox list box.</comment>
    </action>

    <action>
      <name>Disable</name>
      <comment>Turns the combobox off.</comment>
    </action>

    <action>
      <name>Enable</name>
      <comment>Turns the combobox back on if it has previously been disabled.</comment>
    </action>

    <action>
      <name>Focus</name>
      <comment>Sets the focus on the combobox.</comment>
    </action>

    <action>
      <name>Hide</name>
      <comment>Removes the combobox from the display.</comment>
    </action>

    <action>
      <name>MoveToBack</name>
      <comment>Moves the combobox behind its siblings.</comment>
    </action>

    <action>
      <name>MoveToFront</name>
      <comment>Moves the combobox in front of its siblings.</comment>
    </action>

    <action>
      <name>Redimension</name>
      <comment>Changes the size and position of the combobox.</comment>
    </action>

    <action>
      <name>Resize</name>
      <comment>Alters the size of the combobox.</comment>
    </action>

    <action>
      <name>SetVar</name>
      <comment>Arguments can be passed through to the combobox menu via unlisted fields.</comment>
    </action>

    <action>
      <name>Show</name>
      <comment>Puts the combobox on display.</comment>
    </action>

  </actions>

  <fields>
    <field>
      <name>Align</name>
      <comment>Manages the alignment of a combobox surface within its container.</comment>
      <access write="S">Set</access>
      <type>INT</type>
      <description>
<p>The position of a combobox object can be abstractly defined with alignment instructions by setting this field.  The alignment feature takes precedence over values in coordinate fields such as <field>X</field> and <field>Y</field>.</p>
      </description>
    </field>

    <field>
      <name>Bottom</name>
      <comment>The bottom coordinate of the combobox (Y + Height).</comment>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

    <field>
      <name>Disable</name>
      <comment>Disables the combobox on initialisation.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The combobox can be disabled on initialisation by setting this field to TRUE.  If you need to disable the combobox after it has been activated, it is preferred that you use the Disable action.</p>
<p>To enable the combobox after it has been disabled, use the Enable action.</p>
      </description>
    </field>

    <field>
      <name>Feedback</name>
      <comment>Provides instant feedback when a user interacts with the Combobox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>Set the Feedback field with a callback function in order to receive instant feedback when user interaction occurs.  The function prototype is <code>routine(*ComboBox)</code></p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags may be defined here.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="CMF">INT</type>
      <description>
<types lookup="CMF"/>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>Defines the height of the combobox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>An combobox can be given a fixed or relative height by setting this field to the desired value.  To set a relative height, use the FD_PERCENT flag when setting the field.</p>
      </description>
    </field>

    <field>
      <name>Label</name>
      <comment>The label is a string displayed to the left of the combobox area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>A label can be drawn next to the combobox area by setting the Label field.  The label should be a short, descriptive string of one or two words.  It is common practice for the label to be followed with a colon character.</p>
      </description>
    </field>

    <field>
      <name>LabelWidth</name>
      <comment>A set-width for the label area of the combobox may be defined here.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>If you set a label for the combobox, the width of the label area is automatically calculated according to the width of the label string.  You may override this behaviour by setting a value in the LabelWidth field.</p>
      </description>
    </field>

    <field>
      <name>Menu</name>
      <comment>Menu control object</comment>
      <access read="R">Read</access>
      <type class="Menu">*Menu</type>
    </field>

    <field>
      <name>ParentViewport</name>
      <comment>The parent container for the Viewport</comment>
      <access read="R" write="I">Read/Init</access>
      <type class="Vector">*Vector</type>
    </field>

    <field>
      <name>Right</name>
      <comment>The right-most coordinate of the combobox (X + Width).</comment>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

    <field>
      <name>SelectedID</name>
      <comment>Returns the menu ID of the selected combobox item.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>This field returns the menu ID of the selected combobox item.  This requires that an id is set for each configured menu item (the 'id' attribute).</p>
<p>Menu ID's are not guaranteed to be unique.  It is your responsibility to assign ID's and ensure that they are unique to prevent an ID from matching multiple items.</p>
<p>If the combobox text does not reflect one of the available menu items, then the returned value will be -1.  If the selected menu item has no identifier, the default return value is 0.</p>
      </description>
    </field>

    <field>
      <name>String</name>
      <comment>The text that is to be printed inside the combobox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The text string to display in the combobox is declared in this field.  The string must be in UTF-8 format and may not contain line feeds.  This field can be read field at any time to determine what the user has entered in the combobox.</p>
<p>If the string is changed after initialisation, the combobox will be redrawn to show the updated text.  No feedback notification will be sent as a result of updating this field manually.</p>
      </description>
    </field>

    <field>
      <name>StyleTrigger</name>
      <comment>Requires a callback for reporting changes that can affect graphics styling.</comment>
      <access write="S">Set</access>
      <type>FUNCTION</type>
      <description>
<p>This field is reserved for use by the style code that is managing the widget graphics.</p>
      </description>
    </field>

    <field>
      <name>TabFocus</name>
      <comment>Set this field to a TabFocus object to register the combobox in a tab-list.</comment>
      <access write="S">Set</access>
      <type>OBJECTPTR</type>
      <description>
<p>The TabFocus field provides a convenient way of adding the combobox to a <class name="TabFocus">TabFocus</class> object, so that it can be focussed on via the tab key.  Simply set this field to the ID of the <class name="TabFocus">TabFocus</class> object that is managing the tab-list for the application window.</p>
      </description>
    </field>

    <field>
      <name>TextInput</name>
      <comment>The text control object created for the combobox is referenced here.</comment>
      <access read="R">Read</access>
      <type class="Text">*Text</type>
      <description>
<p>The text object that is referenced here manages the display and editing of text inside the combobox area. Characteristics of the text object can be defined prior to initialisation, although we recommend that this be done from the combobox style definition.</p>
<p>The face and point size of the text is set by the widget styling code and therefore cannot be changed through the TextInput object directly.</p>
      </description>
    </field>

    <field>
      <name>Viewport</name>
      <comment>Viewport region created by the input object</comment>
      <access read="R">Read</access>
      <type class="Vector">*Vector</type>
    </field>

    <field>
      <name>Width</name>
      <comment>Defines the width of a combobox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>A combobox can be given a fixed or relative width by setting this field to the desired value.  To set a relative width, use the FD_PERCENT flag when setting the field.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>The horizontal position of a combobox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The horizontal position of a combobox can be set to an absolute or relative coordinate by writing a value to the X field.  To set a relative/percentage based value, you must use the FD_PERCENT flag or the value will be interpreted as fixed.  Negative values are permitted.</p>
      </description>
    </field>

    <field>
      <name>XOffset</name>
      <comment>The horizontal offset of a combobox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The XOffset has a dual purpose depending on whether or not it is set in conjunction with an X coordinate or a Width based field.</p>
<p>If set in conjunction with an X coordinate then the combobox will be drawn from that X coordinate up to the width of the container, minus the value given in the XOffset.  This means that the width of the ComboBox is dynamically calculated in relation to the width of the container.</p>
<p>If the XOffset field is set in conjunction with a fixed or relative width then the combobox will be drawn at an X coordinate calculated from the formula <code>X = ContainerWidth - ComboBoxWidth - XOffset</code>.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>The vertical position of a combobox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The vertical position of a ComboBox can be set to an absolute or relative coordinate by writing a value to the Y field.  To set a relative/percentage based value, you must use the FD_PERCENT flag or the value will be interpreted as fixed.  Negative values are permitted.</p>
      </description>
    </field>

    <field>
      <name>YOffset</name>
      <comment>The vertical offset of a combobox.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The YOffset has a dual purpose depending on whether or not it is set in conjunction with a Y coordinate or a Height based field.</p>
<p>If set in conjunction with a Y coordinate then the combobox will be drawn from that Y coordinate up to the height of the container, minus the value given in the YOffset.  This means that the height of the combobox is dynamically calculated in relation to the height of the container.</p>
<p>If the YOffset field is set in conjunction with a fixed or relative height then the combobox will be drawn at a Y coordinate calculated from the formula <code>Y = ContainerHeight - ComboBoxHeight - YOffset</code>.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="CMF" comment="ComboBox flags.">
      <const name="AUTO_COMPLETE">When in edit mode, this option helps the user by auto-completing text.</const>
      <const name="DISABLED">Disable on creation; or combobox is currently disabled.</const>
      <const name="EDIT">Enable edit mode, which allows the user to write free-text in the combobox.</const>
      <const name="HIDE">Hide on creation, or combobox is currently hidden.</const>
      <const name="LIMIT_TO_LIST">When in edit mode, limit-to-list prevents the user from entering text that isn't in the combobox list.</const>
      <const name="NO_TRANSLATION">Do not translate combobox strings or the drop-down menu to the user's native language.</const>
      <const name="SHOW_ICONS">Show icons in the dropdown list.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
