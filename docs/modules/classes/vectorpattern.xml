<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>VectorPattern</name>
    <type>class</type>
    <module>Vector</module>
    <comment>Provides support for the filling and stroking of vectors with patterns.</comment>
    <version>1</version>
    <id>09eaa136</id>
    <idstring>ID_VECTORPATTERN</idstring>
    <category>Graphics</category>
    <include>modules/vectorpattern.h</include>
    <copyright>Paul Manias Â© 2010-2022</copyright>
    <description>
<p>The VectorPattern class is used by Vector painting algorithms to fill and stroke vectors with pre-rendered patterns. This is achieved by initialising a VectorPattern object with the desired settings and then registering it with a <class name="VectorScene">VectorScene</class> via the <method class="VectorScene">AddDef</method> method.</p>
<p>Any vector within the target scene will be able to utilise the pattern for filling or stroking by referencing its name through the <class name="Vector" index="Fill">Vector:Fill</class> and <class name="Vector" index="Stroke">Vector:Stroke</class> fields.  For instance 'url(#dots)'.</p>
<p>It is strongly recommended that the VectorPattern is owned by the <class name="VectorScene">VectorScene</class> that is handling the definition.  This will ensure that the VectorPattern is deallocated when the scene is destroyed.</p></description>
    <source>
      <file path="defs/">pattern.cpp</file>
    </source>
  </info>

  <fields>
    <field>
      <name>Dimensions</name>
      <comment>Dimension flags are stored here.</comment>
      <access read="R">Read</access>
      <type lookup="DMF">INT</type>
      <description>
<types lookup="DMF"/>
      </description>
    </field>

    <field>
      <name>Inherit</name>
      <comment>Inherit attributes from a VectorPattern referenced here.</comment>
      <access read="R" write="S">Read/Set</access>
      <type class="VectorPattern">*VectorPattern</type>
      <description>
<p>Attributes can be inherited from another pattern by referencing it in this field.  This feature is provided primarily for the purpose of simplifying SVG compatibility and its use may result in an unnecessary performance penalty.</p>
      </description>
    </field>

    <field>
      <name>Opacity</name>
      <comment>The opacity of the pattern.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The opacity of the pattern is defined as a value between 0.0 and 1.0, with 1.0 being fully opaque.  The default value is 1.0.</p>
      </description>
    </field>

    <field>
      <name>Scene</name>
      <comment>Refers to the internal <class name="VectorScene">VectorScene</class> that will contain the rendered pattern.</comment>
      <access read="R">Read</access>
      <type class="VectorScene">*VectorScene</type>
      <description>
<p>The VectorPattern class allocates a <class name="VectorScene">VectorScene</class> in this field and inherits its functionality.  In addition, a <class name="VectorViewport">VectorViewport</class> class will be assigned to the scene and is referenced in the <field>Viewport</field> field for managing the vectors that will be rendered.</p>
<p>The PageWidth and PageHeight fields in the VectorScene object will define the size of the generated pattern.  It is essential that they are set prior to initialisation.</p>
      </description>
    </field>

    <field>
      <name>SpreadMethod</name>
      <comment>The behaviour to use when the pattern bounds do not match the vector path.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="VSPREAD">INT</type>
      <description>
<p>Indicates what happens if the pattern starts or ends inside the bounds of the target vector.  The default value is PAD.</p>
<types lookup="VSPREAD"/>
      </description>
    </field>

    <field>
      <name>Transform</name>
      <comment>Applies a transform to the pattern during the render process.</comment>
      <access write="S">Set</access>
      <type>STRING</type>
      <description>
<p>A transform can be applied to the pattern by setting this field with an SVG compliant transform string.</p>
      </description>
    </field>

    <field>
      <name>Units</name>
      <comment>Defines the coordinate system for fields X, Y, Width and Height.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="VUNIT">INT</type>
      <description>
<p>This field declares the coordinate system that is used for values in the <field>X</field> and <field>Y</field> fields.  The default setting is BOUNDING_BOX.</p>
<types lookup="VUNIT"/>
      </description>
    </field>

    <field>
      <name>Viewport</name>
      <comment>Refers to the viewport that contains the pattern.</comment>
      <access read="R">Read</access>
      <type class="VectorViewport">*VectorViewport</type>
      <description>
<p>The Viewport refers to a <class name="VectorViewport">VectorViewport</class> object that is created to host the vectors for the rendered pattern.  If the Viewport does not contain at least one vector that renders an image, the pattern will be ineffective.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>X coordinate for the pattern.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The (X,Y) field values define the starting coordinate for mapping patterns.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>Y coordinate for the pattern.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The (X,Y) field values define the starting coordinate for mapping patterns.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="ARC" comment="Options for drawing arcs.">
      <const name="LARGE"/>
      <const name="SWEEP"/>
    </constants>

    <constants lookup="ARF" comment="Aspect ratios control alignment, scaling and clipping.">
      <const name="MEET">Aspect ratio is preserved. The entire viewbox will be visible in the viewport.  The viewbox is scaled up as much as possible.</const>
      <const name="NONE">Scale the viewbox to match the size of the viewport.  Aspect ratio is not preserved.</const>
      <const name="SLICE">Aspect ratio is preserved. The viewbox can extend beyond the viewport's edges on one axis.  The viewbox is scaled up as much as possible.</const>
      <const name="X_MAX">Align to the right.</const>
      <const name="X_MID">Align to the horizontal center.</const>
      <const name="X_MIN">Align to the left.</const>
      <const name="Y_MAX">Align to the bottom.</const>
      <const name="Y_MID">Align to the vertical center.</const>
      <const name="Y_MIN">Align to the top.</const>
    </constants>

    <constants lookup="CS" comment="Colour space options.">
      <const name="INHERIT">Inherit the colour space option from the parent vector.</const>
      <const name="LINEAR_RGB">Linear RGB is the default colour space for SVG and produces the best results.</const>
      <const name="SRGB">The default colour-space is sRGB, recommended for its speed.</const>
    </constants>

    <constants lookup="FM" comment="Mask for controlling feedback events that are received.">
      <const name="PATH_CHANGED">The vector path has been modified or affected by a transform.</const>
    </constants>

    <constants lookup="VBF" comment="Options for vecGetBoundary().">
      <const name="INCLUSIVE">The result will be inclusive of all paths that belong to children of the queried vector.</const>
      <const name="NO_TRANSFORM">The transformation step will not be applied to the vector's path.</const>
    </constants>

    <constants lookup="VF" comment="Optional flags and indicators for the Vector class.">
      <const name="DISABLED">The vector is disabled and user input should be ignored.</const>
      <const name="HAS_FOCUS">The vector holds the user's input focus.</const>
    </constants>

    <constants lookup="VFR" comment="Vector fill rules for the FillRule field in the Vector class.">
      <const name="EVEN_ODD">This rule determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.</const>
      <const name="INHERIT">The rule is inherited from the parent vector(s).</const>
      <const name="NON_ZERO">This is the default.  This rule determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a path segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside the path. Otherwise, it is inside.</const>
    </constants>

    <constants lookup="VGF" comment="Gradient flags">
      <const name="FIXED_CX">CX is fixed</const>
      <const name="FIXED_CY">CY is fixed</const>
      <const name="FIXED_FX">FX is fixed</const>
      <const name="FIXED_FY">FY is fixed</const>
      <const name="FIXED_RADIUS">is fixed</const>
      <const name="FIXED_X1">X1 is fixed</const>
      <const name="FIXED_X2">X2 is fixed</const>
      <const name="FIXED_Y1">Y1 is fixed</const>
      <const name="FIXED_Y2">Y2 is fixed</const>
      <const name="RELATIVE_CX">CX is relative</const>
      <const name="RELATIVE_CY">CY is relative</const>
      <const name="RELATIVE_FX">FX is relative</const>
      <const name="RELATIVE_FY">FY is relative</const>
      <const name="RELATIVE_RADIUS">Radius is relative</const>
      <const name="RELATIVE_X1">X1 is relative</const>
      <const name="RELATIVE_X2">X2 is relative</const>
      <const name="RELATIVE_Y1">Y1 is relative</const>
      <const name="RELATIVE_Y2">Y2 is relative</const>
    </constants>

    <constants lookup="VGT" comment="VectorGradient options.">
      <const name="CONIC">The conic gradient is a variant on the radial type, whereby the colour values are drawn as a line that revolves around the cone's center point.</const>
      <const name="CONTOUR">Contoured gradients follow the contours of the vector path in which they are rendered.</const>
      <const name="DIAMOND">A diamond gradient is drawn as a square emanating from the center point.</const>
      <const name="LINEAR">A linear gradient is drawn from (X1,Y1) to (X2,Y2).</const>
      <const name="RADIAL">A radial gradient is drawn from CenterX,CenterY to Radius.  An optional focal point can be expressed with FX and FY.</const>
    </constants>

    <constants lookup="VIJ" comment="Inner join options for angled lines.">
      <const name="BEVEL">Blunts the edge of the join.</const>
      <const name="INHERIT">Inherit the parent's join value.</const>
      <const name="JAG">A special non-SVG option.</const>
      <const name="MITER">Forms a sharp point at the join.  Typically not the best looking option.</const>
      <const name="ROUND">Rounds the edge of the join to produce the best looking results.</const>
    </constants>

    <constants lookup="VIS" comment="Options for the Vector class' Visibility field.">
      <const name="COLLAPSE">Hide the vector and its children.  Do not use - provided for SVG compatibility only.</const>
      <const name="HIDDEN">Hide the vector and its children.</const>
      <const name="INHERIT">Inherit the visibility state from the parent.</const>
      <const name="VISIBLE">The default.  Ensures that the vector is visible.</const>
    </constants>

    <constants lookup="VLC" comment="Line-cap options.">
      <const name="BUTT">The default.  The line is sharply squared off at its exact end point.</const>
      <const name="INHERIT">The cap type is inherited from the parent (defaults to butt if unspecified).</const>
      <const name="ROUND">The line cap is a half-circle and the line's end-point forms the center point.</const>
      <const name="SQUARE">Similar to butt, the line is sharply squared off but will extend past the end point by 'StrokeWidth / 2'.</const>
    </constants>

    <constants lookup="VLJ" comment="Options for the look of line joins.">
      <const name="BEVEL">The join is blunted, eliminating overly sharp edges.</const>
      <const name="INHERIT">Inherit the join option from the parent.</const>
      <const name="MITER">The default.  The join will form a pointed edge.</const>
      <const name="MITER_REVERT"/>
      <const name="MITER_ROUND">Default to MITER, but switch to ROUND if the miter limit is exceeded.</const>
      <const name="ROUND">The join is rounded.</const>
    </constants>

    <constants lookup="VPF" comment="Optional flags for the VectorScene object.">
      <const name="BITMAP_SIZED">Automatically adjust the PageWidth and PageHeight to match the target Bitmap width and height.</const>
      <const name="RENDER_TIME">Compute the drawing frame-rate for the RenderTime field.</const>
      <const name="RESIZE">The vector will be stretched to fit the PageWidth and PageHeight values, if defined by the client.</const>
    </constants>

    <constants lookup="VSM">
      <const name="AUTO">The default option is chosen by the system.  This will typically be bilinear, but slow machines may switch to nearest neighbour and high speed machines could use more advanced methods.</const>
      <const name="BESSEL"/>
      <const name="BICUBIC">Produces a similar result to bilinear with a marginally sharper after-effect.</const>
      <const name="BILINEAR">Bilinear is a common algorithm that produces a reasonable quality image.</const>
      <const name="BLACKMAN3">Five times slower than bilinear, the final result will lack sharpness when compared to SINC3.</const>
      <const name="BLACKMAN8">15 times slower than bilinear, the final result is of excellent quality and sharpness is well balanced.</const>
      <const name="GAUSSIAN"/>
      <const name="KAISER"/>
      <const name="LANCZOS3">This well known algorithm may serve as a point of comparison for evaluating the results of other methods.  It shares characteristics with SINC and BLACKMAN.</const>
      <const name="LANCZOS8"/>
      <const name="MITCHELL"/>
      <const name="NEIGHBOUR">Nearest neighbour is the fastest sampler at the cost of poor quality.</const>
      <const name="QUADRIC"/>
      <const name="SINC3">Five times slower than bilinear, the final result is of very good quality.</const>
      <const name="SINC8">15 times slower than bilinear, the final result is of excellent quality but may be marginally over-sharpened.</const>
      <const name="SPLINE16">About 1/2 the speed of bilinear, this method produces a considerably better result.</const>
    </constants>

    <constants lookup="VSPREAD" comment="Spread method options define the method to use for tiling filled graphics.">
      <const name="CLIP">Do not scale the graphic.  Clip it if it extends past imposed boundaries.</const>
      <const name="PAD">Scale the graphic to the object bounds.</const>
      <const name="REFLECT">Tile the graphic, reflecting the image alternately on the X and Y axis.</const>
      <const name="REFLECT_X">Tile the graphic, reflecting the image alternately on the X axis only.</const>
      <const name="REFLECT_Y">Tile the graphic, reflecting the image alternately on the Y axis only.</const>
      <const name="REPEAT">Tile the graphic repeatedly.</const>
      <const name="UNDEFINED">Either the default setting will be applied or the setting will be inherited from a parent object.</const>
    </constants>

    <constants lookup="VUNIT">
      <const name="BOUNDING_BOX">Coordinates are relative to the object's bounding box.</const>
      <const name="UNDEFINED"/>
      <const name="USERSPACE">Coordinates are relative to the current viewport.</const>
    </constants>

  </types>
  <structs>
    <struct name="PathCommand" comment="Base structure for path commands.">
      <field name="Type" type="UBYTE">The command type (PE value)</field>
      <field name="Curved" type="UBYTE">Private</field>
      <field name="LargeArc" type="UBYTE">Equivalent to the large-arc-flag in SVG, it ensures that the arc follows the longest drawing path when TRUE.</field>
      <field name="Sweep" type="UBYTE">Equivalent to the sweep-flag in SVG, it inverts the default behaviour in generating arc paths.</field>
      <field name="Pad" type="LONG">Private</field>
      <field name="X" type="DOUBLE">The targeted X coordinate (absolute or relative) for the command</field>
      <field name="Y" type="DOUBLE">The targeted Y coordinate (absolute or relative) for the command</field>
      <field name="AbsX" type="DOUBLE">Private</field>
      <field name="AbsY" type="DOUBLE">Private</field>
      <field name="X2" type="DOUBLE">The X2 coordinate for curve commands, or RX for arcs</field>
      <field name="Y2" type="DOUBLE">The Y2 coordinate for curve commands, or RY for arcs</field>
      <field name="X3" type="DOUBLE">The X3 coordinate for curve-to or smooth-curve-to</field>
      <field name="Y3" type="DOUBLE">The Y3 coordinate for curve-to or smooth-curve-to</field>
      <field name="Angle" type="DOUBLE">Arc angle</field>
    </struct>

    <struct name="VectorMatrix" comment="Vector transformation matrix.">
      <field name="Next" type="struct VectorMatrix *">The next transform in the list.</field>
      <field name="Vector" type="struct rkVector *">The vector associated with the transform.</field>
      <field name="ScaleX" type="DOUBLE">Matrix value A</field>
      <field name="ShearY" type="DOUBLE">Matrix value B</field>
      <field name="ShearX" type="DOUBLE">Matrix value C</field>
      <field name="ScaleY" type="DOUBLE">Matrix value D</field>
      <field name="TranslateX" type="DOUBLE">Matrix value E</field>
      <field name="TranslateY" type="DOUBLE">Matrix value F</field>
    </struct>

    <struct name="VectorPoint" comment="Structure for the VectorPolygon PointsArray field.">
      <field name="X" type="DOUBLE">The X coordinate of this point.</field>
      <field name="Y" type="DOUBLE">The Y coordinate of this point.</field>
      <field name="XRelative" type="UBYTE">TRUE if the X value is relative to its viewport (between 0 and 1.0).</field>
      <field name="YRelative" type="UBYTE">TRUE if the Y value is relative to its viewport (between 0 and 1.0).</field>
    </struct>

  </structs>
</book>
