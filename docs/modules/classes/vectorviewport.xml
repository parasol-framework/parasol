<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>VectorViewport</name>
    <type>class</type>
    <module>Vector</module>
    <comment>Provides support for viewport definitions within a vector tree.</comment>
    <version>1</version>
    <id>15da8fb8</id>
    <idstring>ID_VECTORVIEWPORT</idstring>
    <category>Graphics</category>
    <include>modules/vectorviewport.h</include>
    <copyright>Paul Manias Â© 2010-2022</copyright>
    <description>
<p>This class is used to declare a viewport within a vector scene graph.  A master viewport is required as the first object in a <class name="VectorScene">VectorScene</class> and it must contain all vector graphics content.</p>
<p>The size of the viewport is initially set to (0,0,100%,100%) so as to be all inclusive.  Setting the <field>X</field>, <field>Y</field>, <field>Width</field> and <field>Height</field> fields will determine the position and clipping of the displayed content (the 'target area').  The <field>ViewX</field>, <field>ViewY</field>, <field>ViewWidth</field> and <field>ViewHeight</field> fields declare the viewbox ('source area') that will be sampled for the target.</p>
<p>To configure the scaling and alignment method that is applied to the viewport content, set the <field>AspectRatio</field> field.</p></description>
    <source>
      <file path="vectors/">viewport.cpp</file>
    </source>
  </info>

  <fields>
    <field>
      <name>AbsX</name>
      <comment>The horizontal position of the viewport, relative to (0,0).</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>This field will return the left-most boundary of the viewport, relative to point (0,0) of the scene graph.  Transforms are taken into consideration when calculating this value.</p>
      </description>
    </field>

    <field>
      <name>AbsY</name>
      <comment>The vertical position of the viewport, relative to (0,0).</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>This field will return the top-most boundary of the viewport, relative to point (0,0) of the scene graph.  Transforms are taken into consideration when calculating this value.</p>
      </description>
    </field>

    <field>
      <name>AspectRatio</name>
      <comment>Flags that affect the aspect ratio of vectors within the viewport.</comment>
      <access read="G" write="S">Get/Set</access>
      <type lookup="ARF">INT</type>
      <description>
<p>Defining an aspect ratio allows finer control over the position and scale of the viewport's content within its target area.</p>
<types lookup="ARF"/>
      </description>
    </field>

    <field>
      <name>BottomLimit</name>
      <comment>Prevents a viewport from moving into an area at the bottom side of its parent.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>A viewport can be prevented from moving into the bottom area of its parent by setting a bottom limit.  The value is expressed in fixed pixel units.</p>
<p>Limits only apply to movement from a call to the Move() action.  The limit is ignored if a coordinate field is set directly.</p>
      </description>
    </field>

    <field>
      <name>BottomMargin</name>
      <comment>Defines the top margin of a viewport.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Viewport margins hint at the desired amount of whitespace at the edges of the viewport.  Margin values do not have an internal use, but become useful when honoured by code that computes the layout of a user interface.</p>
<p>By default, all margins are set to zero when a new viewport object is created.</p>
      </description>
    </field>

    <field>
      <name>Dimensions</name>
      <comment>Dimension flags define whether individual dimension fields contain fixed or relative values.</comment>
      <access read="G" write="S">Get/Set</access>
      <type lookup="DMF">INT</type>
      <description>
<types lookup="DMF"/>
      </description>
    </field>

    <field>
      <name>Drag</name>
      <comment>This object-based field is used to control the dragging of viewports around the display.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>OBJECTPTR</type>
      <description>
<p>Click-dragging of viewports is enabled by utilising the Drag field.</p>
<p>To use, set this field with reference to a Viewport that is to be dragged when the user starts a click-drag operation. For instance, if you create a window with a title-bar at the top, you would set the Drag field of the title-bar to point to the window's viewport.  If necessary, the Drag field can point back to your viewport object (this can be useful for creating icons and other small widgets).</p>
<p>Set the field to zero to turn off dragging.</p>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>The height of the viewport's target area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The height of the viewport's target area is defined here as a fixed or relative value.  The default value is 100% for full coverage.</p>
      </description>
    </field>

    <field>
      <name>LeftLimit</name>
      <comment>Prevents a viewport from moving into an area at the left side of its parent.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>A viewport can be prevented from moving into the left area of its parent by setting a left limit.  The value is expressed in fixed pixel units.</p>
<p>Limits only apply to movement from a call to the Move() action.  The limit is ignored if a coordinate field is set directly.</p>
      </description>
    </field>

    <field>
      <name>LeftMargin</name>
      <comment>Defines the top margin of a viewport.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Viewport margins hint at the desired amount of whitespace at the edges of the viewport.  Margin values do not have an internal use, but become useful when honoured by code that computes the layout of a user interface.</p>
<p>By default, all margins are set to zero when a new viewport object is created.</p>
      </description>
    </field>

    <field>
      <name>Overflow</name>
      <comment>Clipping options for the viewport's boundary.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Choose an overflow option to enforce or disable clipping of the viewport's content.  The default state is <code>VISIBLE</code>. Altering the overflow state affects both the X and Y axis.  To set either axis independently, set <field>OverflowX</field> and <field>OverflowY</field>.</p>
<p>If the viewport's <field>AspectRatio</field> is set to <code>SLICE</code> then it will have priority over the overflow setting.</p>
      </description>
    </field>

    <field>
      <name>OverflowX</name>
      <comment>Clipping options for the viewport's boundary on the x axis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Choose an overflow option to enforce or disable clipping of the viewport's content.  The default state is <code>VISIBLE</code>. If the viewport's <field>AspectRatio</field> is set to <code>SLICE</code> then it will have priority over the overflow setting.</p>
<p>This option controls the x axis only.</p>
      </description>
    </field>

    <field>
      <name>OverflowY</name>
      <comment>Clipping options for the viewport's boundary on the y axis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Choose an overflow option to enforce or disable clipping of the viewport's content.  The default state is <code>VISIBLE</code>. If the viewport's <field>AspectRatio</field> is set to <code>SLICE</code> then it will have priority over the overflow setting.</p>
<p>This option controls the y axis only.</p>
      </description>
    </field>

    <field>
      <name>RightLimit</name>
      <comment>Prevents a viewport from moving into an area at the right side of its parent.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>A viewport can be prevented from moving into the right area of its parent by setting a right limit.  The value is expressed in fixed pixel units.</p>
<p>Limits only apply to movement from a call to the Move() action.  The limit is ignored if a coordinate field is set directly.</p>
      </description>
    </field>

    <field>
      <name>RightMargin</name>
      <comment>Defines the right margin of a viewport.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Viewport margins hint at the desired amount of whitespace at the edges of the viewport.  Margin values do not have an internal use, but become useful when honoured by code that computes the layout of a user interface.</p>
<p>By default, all margins are set to zero when a new viewport object is created.</p>
      </description>
    </field>

    <field>
      <name>TopLimit</name>
      <comment>Prevents a viewport from moving into an area at the top side of its parent.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>A viewport can be prevented from moving into the top area of its parent by setting a top limit.  The value is expressed in fixed pixel units.</p>
<p>Limits only apply to movement from a call to the Move() action.  The limit is ignored if a coordinate field is set directly.</p>
      </description>
    </field>

    <field>
      <name>TopMargin</name>
      <comment>Defines the top margin of a viewport.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Viewport margins hint at the desired amount of whitespace at the edges of the viewport.  Margin values do not have an internal use, but become useful when honoured by code that computes the layout of a user interface.</p>
<p>By default, all margins are set to zero when a new viewport object is created.</p>
      </description>
    </field>

    <field>
      <name>ViewHeight</name>
      <comment>The height of the viewport's source area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The area defined by (<field>ViewX</field>,<field>ViewY</field>) and (<field>ViewWidth</field>,<field>ViewHeight</field>) declare the source area covered by the viewport.  The rendered graphics in the source area will be repositioned and scaled to the area defined by (X,Y) and (Width,Height).</p>
      </description>
    </field>

    <field>
      <name>ViewWidth</name>
      <comment>The width of the viewport's source area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The area defined by (<field>ViewX</field>,<field>ViewY</field>) and (<field>ViewWidth</field>,<field>ViewHeight</field>) declare the source area covered by the viewport.  The rendered graphics in the source area will be repositioned and scaled to the area defined by (<field>X</field>,<field>Y</field>) and (<field>Width</field>,<field>Height</field>).</p>
      </description>
    </field>

    <field>
      <name>ViewX</name>
      <comment>The horizontal position of the viewport's source area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The area defined by (<field>ViewX</field>,<field>ViewY</field>) and (<field>ViewWidth</field>,<field>ViewHeight</field>) declare the source area covered by the viewport.  The rendered graphics in the source area will be repositioned and scaled to the area defined by (<field>X</field>,<field>Y</field>) and (<field>Width</field>,<field>Height</field>).</p>
      </description>
    </field>

    <field>
      <name>ViewY</name>
      <comment>The vertical position of the viewport's source area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The area defined by (<field>ViewX</field>,<field>ViewY</field>) and (<field>ViewWidth</field>,<field>ViewHeight</field>) declare the source area covered by the viewport.  The rendered graphics in the source area will be repositioned and scaled to the area defined by (<field>X</field>,<field>Y</field>) and (<field>Width</field>,<field>Height</field>).</p>
      </description>
    </field>

    <field>
      <name>Width</name>
      <comment>The width of the viewport's target area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The width of the viewport's target area is defined here as a fixed or relative value.  The default value is 100% for full coverage.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>Positions the viewport on the x-axis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The display position targeted by the viewport is declared by the (X,Y) field values.  Coordinates can be expressed as fixed or relative pixel units.</p>
<p>If an offset from the edge of the parent is desired, the <field>XOffset</field> field must be defined.  If a X and XOffset value are defined together, the width of the viewport is computed on-the-fly and will change in response to the parent's width.</p>
      </description>
    </field>

    <field>
      <name>XOffset</name>
      <comment>Positions the viewport on the x-axis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The display position targeted by the viewport is declared by the (X,Y) field values.  Coordinates can be expressed as fixed or relative pixel units.</p>
<p>If an offset from the edge of the parent is desired, the <field>XOffset</field> field must be defined.  If a X and XOffset value are defined together, the width of the viewport is computed on-the-fly and will change in response to the parent's width.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>Positions the viewport on the y-axis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The display position targeted by the viewport is declared by the (X,Y) field values.  Coordinates can be expressed as fixed or relative pixel units.</p>
<p>If an offset from the edge of the parent is desired, the <field>YOffset</field> must be defined.  If a Y and YOffset value are defined together, the height of the viewport is computed on-the-fly and will change in response to the parent's height.</p>
      </description>
    </field>

    <field>
      <name>YOffset</name>
      <comment>Positions the viewport on the y-axis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The display position targeted by the viewport is declared by the (X,Y) field values.  Coordinates can be expressed as fixed or relative pixel units.</p>
<p>If an offset from the edge of the parent is desired, the <field>YOffset</field> must be defined.  If a Y and YOffset value are defined together, the height of the viewport is computed on-the-fly and will change in response to the parent's height.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="ARC" comment="Options for drawing arcs.">
      <const name="LARGE"/>
      <const name="SWEEP"/>
    </constants>

    <constants lookup="FM" comment="Mask for controlling feedback events that are received.">
      <const name="PATH_CHANGED">The vector path has been modified or affected by a transform.</const>
    </constants>

    <constants lookup="CS" comment="Colour space options.">
      <const name="SRGB">The default colour-space is sRGB, recommended for its speed.</const>
      <const name="LINEAR_RGB">Linear RGB is the default colour space for SVG and produces the best results.</const>
      <const name="INHERIT">Inherit the colour space option from the parent vector.</const>
    </constants>

    <constants lookup="VIJ" comment="Inner join options for angled lines.">
      <const name="BEVEL">Blunts the edge of the join.</const>
      <const name="MITER">Forms a sharp point at the join.  Typically not the best looking option.</const>
      <const name="JAG">A special non-SVG option.</const>
      <const name="ROUND">Rounds the edge of the join to produce the best looking results.</const>
      <const name="INHERIT">Inherit the parent's join value.</const>
    </constants>

    <constants lookup="VBF" comment="Options for vecGetBoundary().">
      <const name="INCLUSIVE">The result will be inclusive of all paths that belong to children of the queried vector.</const>
      <const name="NO_TRANSFORM">The transformation step will not be applied to the vector's path.</const>
    </constants>

    <constants lookup="VSM">
      <const name="AUTO">The default option is chosen by the system.  This will typically be bilinear, but slow machines may switch to nearest neighbour and high speed machines could use more advanced methods.</const>
      <const name="NEIGHBOUR">Nearest neighbour is the fastest sampler at the cost of poor quality.</const>
      <const name="BILINEAR">Bilinear is a common algorithm that produces a reasonable quality image.</const>
      <const name="BICUBIC">Produces a similar result to bilinear with a marginally sharper after-effect.</const>
      <const name="SPLINE16">About 1/2 the speed of bilinear, this method produces a considerably better result.</const>
      <const name="KAISER"/>
      <const name="QUADRIC"/>
      <const name="GAUSSIAN"/>
      <const name="BESSEL"/>
      <const name="MITCHELL"/>
      <const name="SINC3">Five times slower than bilinear, the final result is of very good quality.</const>
      <const name="LANCZOS3">This well known algorithm may serve as a point of comparison for evaluating the results of other methods.  It shares characteristics with SINC and BLACKMAN.</const>
      <const name="BLACKMAN3">Five times slower than bilinear, the final result will lack sharpness when compared to SINC3.</const>
      <const name="SINC8">15 times slower than bilinear, the final result is of excellent quality but may be marginally over-sharpened.</const>
      <const name="LANCZOS8"/>
      <const name="BLACKMAN8">15 times slower than bilinear, the final result is of excellent quality and sharpness is well balanced.</const>
    </constants>

    <constants lookup="VF" comment="Optional flags and indicators for the Vector class.">
      <const name="DISABLED">The vector is disabled and user input should be ignored.</const>
      <const name="HAS_FOCUS">The vector holds the user's input focus.</const>
    </constants>

    <constants lookup="VPF" comment="Optional flags for the VectorScene object.">
      <const name="RENDER_TIME">Compute the drawing frame-rate for the RenderTime field.</const>
      <const name="BITMAP_SIZED">Automatically adjust the PageWidth and PageHeight to match the target Bitmap width and height.</const>
      <const name="RESIZE">The vector will be stretched to fit the PageWidth and PageHeight values, if defined by the client.</const>
    </constants>

    <constants lookup="VGF" comment="Gradient flags">
      <const name="FIXED_FY">FY is fixed</const>
      <const name="RELATIVE_X2">X2 is relative</const>
      <const name="RELATIVE_X1">X1 is relative</const>
      <const name="FIXED_X1">X1 is fixed</const>
      <const name="FIXED_Y2">Y2 is fixed</const>
      <const name="RELATIVE_CX">CX is relative</const>
      <const name="FIXED_RADIUS">is fixed</const>
      <const name="RELATIVE_RADIUS">Radius is relative</const>
      <const name="RELATIVE_FX">FX is relative</const>
      <const name="FIXED_CX">CX is fixed</const>
      <const name="RELATIVE_Y2">Y2 is relative</const>
      <const name="RELATIVE_CY">CY is relative</const>
      <const name="FIXED_FX">FX is fixed</const>
      <const name="RELATIVE_FY">FY is relative</const>
      <const name="FIXED_Y1">Y1 is fixed</const>
      <const name="FIXED_CY">CY is fixed</const>
      <const name="RELATIVE_Y1">Y1 is relative</const>
      <const name="FIXED_X2">X2 is fixed</const>
    </constants>

    <constants lookup="VLC" comment="Line-cap options.">
      <const name="BUTT">The default.  The line is sharply squared off at its exact end point.</const>
      <const name="SQUARE">Similar to butt, the line is sharply squared off but will extend past the end point by 'StrokeWidth / 2'.</const>
      <const name="ROUND">The line cap is a half-circle and the line's end-point forms the center point.</const>
      <const name="INHERIT">The cap type is inherited from the parent (defaults to butt if unspecified).</const>
    </constants>

    <constants lookup="ARF" comment="Aspect ratios control alignment, scaling and clipping.">
      <const name="NONE">Scale the viewbox to match the size of the viewport.  Aspect ratio is not preserved.</const>
      <const name="Y_MIN">Align to the top.</const>
      <const name="Y_MAX">Align to the bottom.</const>
      <const name="X_MID">Align to the horizontal center.</const>
      <const name="X_MIN">Align to the left.</const>
      <const name="X_MAX">Align to the right.</const>
      <const name="SLICE">Aspect ratio is preserved. The viewbox can extend beyond the viewport's edges on one axis.  The viewbox is scaled up as much as possible.</const>
      <const name="Y_MID">Align to the vertical center.</const>
      <const name="MEET">Aspect ratio is preserved. The entire viewbox will be visible in the viewport.  The viewbox is scaled up as much as possible.</const>
    </constants>

    <constants lookup="VUNIT">
      <const name="UNDEFINED"/>
      <const name="BOUNDING_BOX">Coordinates are relative to the object's bounding box.</const>
      <const name="USERSPACE">Coordinates are relative to the current viewport.</const>
    </constants>

    <constants lookup="VIS" comment="Options for the Vector class' Visibility field.">
      <const name="HIDDEN">Hide the vector and its children.</const>
      <const name="VISIBLE">The default.  Ensures that the vector is visible.</const>
      <const name="COLLAPSE">Hide the vector and its children.  Do not use - provided for SVG compatibility only.</const>
      <const name="INHERIT">Inherit the visibility state from the parent.</const>
    </constants>

    <constants lookup="VGT" comment="VectorGradient options.">
      <const name="LINEAR">A linear gradient is drawn from (X1,Y1) to (X2,Y2).</const>
      <const name="RADIAL">A radial gradient is drawn from CenterX,CenterY to Radius.  An optional focal point can be expressed with FX and FY.</const>
      <const name="CONIC">The conic gradient is a variant on the radial type, whereby the colour values are drawn as a line that revolves around the cone's center point.</const>
      <const name="DIAMOND">A diamond gradient is drawn as a square emanating from the center point.</const>
      <const name="CONTOUR">Contoured gradients follow the contours of the vector path in which they are rendered.</const>
    </constants>

    <constants lookup="VSPREAD" comment="Spread method options define the method to use for tiling filled graphics.">
      <const name="UNDEFINED">Either the default setting will be applied or the setting will be inherited from a parent object.</const>
      <const name="PAD">Scale the graphic to the object bounds.</const>
      <const name="REFLECT">Tile the graphic, reflecting the image alternately on the X and Y axis.</const>
      <const name="REPEAT">Tile the graphic repeatedly.</const>
      <const name="REFLECT_X">Tile the graphic, reflecting the image alternately on the X axis only.</const>
      <const name="REFLECT_Y">Tile the graphic, reflecting the image alternately on the Y axis only.</const>
      <const name="CLIP">Do not scale the graphic.  Clip it if it extends past imposed boundaries.</const>
    </constants>

    <constants lookup="VFR" comment="Vector fill rules for the FillRule field in the Vector class.">
      <const name="NON_ZERO">This is the default.  This rule determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a path segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside the path. Otherwise, it is inside.</const>
      <const name="EVEN_ODD">This rule determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.</const>
      <const name="INHERIT">The rule is inherited from the parent vector(s).</const>
    </constants>

    <constants lookup="VLJ" comment="Options for the look of line joins.">
      <const name="MITER">The default.  The join will form a pointed edge.</const>
      <const name="MITER_REVERT"/>
      <const name="ROUND">The join is rounded.</const>
      <const name="BEVEL">The join is blunted, eliminating overly sharp edges.</const>
      <const name="MITER_ROUND">Default to MITER, but switch to ROUND if the miter limit is exceeded.</const>
      <const name="INHERIT">Inherit the join option from the parent.</const>
    </constants>

  </types>
  <structs>
    <struct name="PathCommand" comment="Base structure for path commands.">
      <field name="Type" type="UBYTE">The command type (PE value)</field>
      <field name="Curved" type="UBYTE">Private</field>
      <field name="LargeArc" type="UBYTE">Equivalent to the large-arc-flag in SVG, it ensures that the arc follows the longest drawing path when TRUE.</field>
      <field name="Sweep" type="UBYTE">Equivalent to the sweep-flag in SVG, it inverts the default behaviour in generating arc paths.</field>
      <field name="Pad" type="LONG">Private</field>
      <field name="X" type="DOUBLE">The targeted X coordinate (absolute or relative) for the command</field>
      <field name="Y" type="DOUBLE">The targeted Y coordinate (absolute or relative) for the command</field>
      <field name="AbsX" type="DOUBLE">Private</field>
      <field name="AbsY" type="DOUBLE">Private</field>
      <field name="X2" type="DOUBLE">The X2 coordinate for curve commands, or RX for arcs</field>
      <field name="Y2" type="DOUBLE">The Y2 coordinate for curve commands, or RY for arcs</field>
      <field name="X3" type="DOUBLE">The X3 coordinate for curve-to or smooth-curve-to</field>
      <field name="Y3" type="DOUBLE">The Y3 coordinate for curve-to or smooth-curve-to</field>
      <field name="Angle" type="DOUBLE">Arc angle</field>
    </struct>

    <struct name="VectorMatrix" comment="Vector transformation matrix.">
      <field name="Next" type="struct VectorMatrix *">The next transform in the list.</field>
      <field name="Vector" type="struct rkVector *">The vector associated with the transform.</field>
      <field name="ScaleX" type="DOUBLE">Matrix value A</field>
      <field name="ShearY" type="DOUBLE">Matrix value B</field>
      <field name="ShearX" type="DOUBLE">Matrix value C</field>
      <field name="ScaleY" type="DOUBLE">Matrix value D</field>
      <field name="TranslateX" type="DOUBLE">Matrix value E</field>
      <field name="TranslateY" type="DOUBLE">Matrix value F</field>
    </struct>

    <struct name="VectorPoint" comment="Structure for the VectorPolygon PointsArray field.">
      <field name="X" type="DOUBLE">The X coordinate of this point.</field>
      <field name="Y" type="DOUBLE">The Y coordinate of this point.</field>
      <field name="XRelative" type="UBYTE">TRUE if the X value is relative to its viewport (between 0 and 1.0).</field>
      <field name="YRelative" type="UBYTE">TRUE if the Y value is relative to its viewport (between 0 and 1.0).</field>
    </struct>

  </structs>
</book>
