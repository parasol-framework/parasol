<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Input</name>
    <type>class</type>
    <module>Widget</module>
    <comment>Manages the display and interactivity of user input boxes.</comment>
    <version>1</version>
    <id>0fa94ab5</id>
    <idstring>ID_INPUT</idstring>
    <category>GUI</category>
    <include>modules/input.h</include>
    <copyright>Paul Manias 2003-2020</copyright>
    <description>
<p>The Input class simplifies the creation and management of input boxes as part of the user interface.</p>
<p>When the user clicks or tabs away from the input box, your program may need to perform an action.  Set the <field>Feedback</field> field in order to receive a notification and formulate a response.</p></description>
    <source>
      <file>class_input.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Performs the native action of the object.</comment>
    </action>

    <action>
      <name>Disable</name>
      <comment>Turns the input box off.</comment>
    </action>

    <action>
      <name>Enable</name>
      <comment>Turns the input box back on if it has previously been disabled.</comment>
    </action>

    <action>
      <name>Focus</name>
      <comment>Sets the focus on the input box.</comment>
    </action>

    <action>
      <name>Hide</name>
      <comment>Removes the input box from the display.</comment>
    </action>

    <action>
      <name>MoveToBack</name>
      <comment>Moves the input box to the back of the display area.</comment>
    </action>

    <action>
      <name>MoveToFront</name>
      <comment>Moves the input box to the front of the display area.</comment>
    </action>

    <action>
      <name>Redimension</name>
      <comment>Changes the size and position of the input box.</comment>
    </action>

    <action>
      <name>Resize</name>
      <comment>Alters the size of the input box.</comment>
    </action>

    <action>
      <name>Show</name>
      <comment>Display the input box.</comment>
    </action>

  </actions>

  <fields>
    <field>
      <name>Bottom</name>
      <comment>The bottom coordinate of the input box (Y + Height).</comment>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

    <field>
      <name>Disable</name>
      <comment>If TRUE, the input box is disabled.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The Disable field can be used to disable the input box in advance of being initialised, by setting the field value to TRUE.  It can also be read at any time to determine the current interactive state of the input box.</p>
<p>Post-initialisation, it is recommended that only the <action>Disable</action> and <action>Enable</action> actions are used to change the interactive state of the input box.</p>
      </description>
    </field>

    <field>
      <name>Feedback</name>
      <comment>Provides instant feedback when a user interacts with the object.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>Set a callback function here to receive instant feedback when user interaction occurs.  The function prototype is <code>Function(*Input, CSTRING Value, LONG Activated)</code></p>
<p>The Activated parameter is a boolean value that will be set to TRUE if the user has affirmed the input by pressing the enter key or its equivalent.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags can be defined here.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="INF">INT</type>
      <description>
<types lookup="INF"/>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>Defines the height of an input box.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>An input box can be given a fixed or relative height by setting this field to the desired value.  To set a relative height, use the FD_PERCENT flag when setting the field.</p>
      </description>
    </field>

    <field>
      <name>InputMask</name>
      <comment>Restricts user input with a validation filter.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>User input can be automatically validated by defining an InputMask.  The pattern matching format that is used for the mask must be compliant with Lua 5.1 specifications.  As an example <code>%d%d/%d%d/%d%d%d%d</code> could be used to match to a valid date entry.</p>
<p>If the user inputs a string that does not match the InputMask filter, the string automatically reverts to its most recent and valid value.</p>
      </description>
    </field>

    <field>
      <name>InputWidth</name>
      <comment>The width of the input area.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>A fixed width for the input area can be defined in this field (note that this does not include the width of the label, which is handled separately by <field>LabelWidth</field>.</p>
      </description>
    </field>

    <field>
      <name>Label</name>
      <comment>The label is a string displayed to the left of the input area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>A label can be drawn next to the input area by setting the Label field.  The label should be a short, descriptive string of one or two words.  It is common practice for the label to be followed with a colon character.</p>
      </description>
    </field>

    <field>
      <name>LabelWidth</name>
      <comment>The width of the input label.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>If a label has been set for an input box, its width may be read and adjusted at any time via the LabelWidth field.  The input area will be arranged so that it immediately follows the width defined for the text label.  If you define a width that is too short for the text that is to be printed in the label, the text will be trimmed to fit the defined area.</p>
<p>If you specify a label without setting the label width, the correct width will be automatically calculated for you on initialisation.</p>
      </description>
    </field>

    <field>
      <name>ParentViewport</name>
      <comment>The viewport that will contain the input graphic.</comment>
      <access read="R" write="I">Read/Init</access>
      <type class="Vector">*Vector</type>
      <description>
<p>The <class name="VectorViewport">VectorViewport</class> that will contain the input graphic is defined here.  If this field is not set prior to initialisation, the input object will scan its parent branch to find a suitable candidate.</p>
      </description>
    </field>

    <field>
      <name>PostLabel</name>
      <comment>The post-label is a string displayed to the right of the input area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>A label can be drawn after the input area by setting the PostLabel field.  The PostLabel is commonly linked with the Label field for constructing sentences around the input box, for example "Disable account after X days." where X represents the input box, we would set a PostLabel string of "days.".</p>
      </description>
    </field>

    <field>
      <name>Right</name>
      <comment>The right-most coordinate of the input box (X + Width).</comment>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

    <field>
      <name>String</name>
      <comment>The string that is to be printed inside the input box is declared here.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The string that you would like to be displayed in the input box is specified in this field.  The string must be in UTF-8 format and may not contain line feeds.  The client can read this field at any time to determine what the user has entered in the input box.</p>
<p>If the string is changed after initialisation, the input box will be redrawn to show the updated text.</p>
      </description>
    </field>

    <field>
      <name>StyleTrigger</name>
      <comment>Requires a callback for reporting changes that can affect graphics styling.</comment>
      <access write="S">Set</access>
      <type>FUNCTION</type>
      <description>
<p>This field is reserved for use by the style code that is managing the input graphics.</p>
      </description>
    </field>

    <field>
      <name>TabFocus</name>
      <comment>Setting this field to a valid TabFocus object will cause the input to add itself to the tab list.</comment>
      <access write="S">Set</access>
      <type>OBJECTID</type>
      <description>
<p>The TabFocus field provides a convenient way of adding the input to a TabFocus object, so that it can be focussed on via the tab key.  Simply set this field to the ID of the TabFocus object that is managing the tab-list for the application window.</p>
      </description>
    </field>

    <field>
      <name>TextInput</name>
      <comment>Refers to a Text object that handles the text inside the input area.</comment>
      <access read="R">Read</access>
      <type class="Text">*Text</type>
      <description>
<p>This field refers to a <class name="Text">Text</class> object that handles the text inside the input area.  Please exercise caution if interacting with this object directly, as doing so may interfere with the expected behaviour of the input class.</p>
      </description>
    </field>

    <field>
      <name>Viewport</name>
      <comment>The VectorViewport that represents the input box.</comment>
      <access read="R" write="I">Read/Init</access>
      <type class="Vector">*Vector</type>
      <description>
<p>The viewport area that represents the input display can be accessed through this field.  For further information, refer to the <class name="VectorViewport">VectorViewport</class> class.  Note that interfacing with the viewport directly can have adverse effects on the input control system.  Where possible, all communication should be limited to the input object itself.</p>
      </description>
    </field>

    <field>
      <name>Width</name>
      <comment>Defines the width of an input box.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>An input box can be given a fixed or relative width by setting this field to the desired value.  To set a relative width, use the FD_PERCENT flag when setting the field.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>The horizontal position of an input box.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The horizontal position of an input box can be set to an absolute or relative coordinate by writing a value to the X field.  To set a relative/percentage based value, you must use the FD_PERCENT flag or the value will be interpreted as fixed.  Negative values are permitted.</p>
      </description>
    </field>

    <field>
      <name>XOffset</name>
      <comment>The horizontal offset of an input box.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The XOffset has a dual purpose depending on whether or not it is set in conjunction with an X coordinate or a Width based field.</p>
<p>If set in conjunction with an X coordinate then the input will be drawn from that X coordinate up to the width of the container, minus the value given in the XOffset.  This means that the width of the widget is dynamically calculated in relation to the width of the container.</p>
<p>If the XOffset field is set in conjunction with a fixed or relative width then the input will be drawn at an X coordinate calculated from the formula <code>X = ContainerWidth - InputWidth - XOffset</code>.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>The vertical position of an input box.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The vertical position of an input box can be set to an absolute or relative coordinate by writing a value to the Y field.  To set a relative/percentage based value, you must use the FD_PERCENT flag or the value will be interpreted as fixed.  Negative values are permitted.</p>
      </description>
    </field>

    <field>
      <name>YOffset</name>
      <comment>The vertical offset of an input box.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The YOffset has a dual purpose depending on whether or not it is set in conjunction with a Y coordinate or a Height based field.</p>
<p>If set in conjunction with a Y coordinate then the input will be drawn from that Y coordinate up to the height of the container, minus the value given in the YOffset.  This means that the height of the widget is dynamically calculated in relation to the height of the container.</p>
<p>If the YOffset field is set in conjunction with a fixed or relative height then the input will be drawn at a Y coordinate calculated from the formula <code>Y = ContainerHeight - InputHeight - YOffset</code>.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="BHS">
      <const name="ENTERED">The cursor has just entered the button's area</const>
      <const name="INSIDE">The cursor is inside the button's area</const>
      <const name="OUTSIDE">The cursor is outside of the button's area</const>
    </constants>

    <constants lookup="BTF" comment="Button flags.">
      <const name="DISABLED">Disable on creation, or button is currently disabled.  Read-only.</const>
      <const name="HIDE">Hide on creation, or button is currently hidden.</const>
      <const name="NO_GFX">Turns off the button's foreground graphics (text and images).</const>
      <const name="PULSE">Send repeated clicks when the mouse button is held down.</const>
    </constants>

    <constants lookup="CBF" comment="CheckBox flags.">
      <const name="DISABLED">Disable on creation, or object is currently disabled.</const>
      <const name="HIDE">Hide on creation, or object is currently hidden.</const>
    </constants>

    <constants lookup="CEF">
      <const name="DELETE">Requests that the original file source is deleted if a successful paste operation takes place.</const>
      <const name="EXTEND">Instead of replacing existing clipboard data, add the new data to the group.</const>
    </constants>

    <constants lookup="CLF" comment="Clipboard flags">
      <const name="DRAG_DROP">Enables drag and drop mode.  The clipboard content will be private and not share data with the host system in this mode.</const>
      <const name="HOST">This indicator is automatically set when a clipboard was created due to incoming content from the host system.</const>
    </constants>

    <constants lookup="CLIPTYPE" comment="Clipboard types">
      <const name="AUDIO">An audio clip that is recognised by the Sound class (such as wav's and mp3's).</const>
      <const name="DATA">Raw information that is uncategorised can be defined as a data clip.</const>
      <const name="FILE">Pure file references are stored as file clips.  This type is typically used by file managers for moving and copying files.</const>
      <const name="IMAGE">Images that are recognised by the Picture class may be stored as this type (such as jpeg's and png files).</const>
      <const name="OBJECT">An object that has been deserialised into binary form.</const>
      <const name="TEXT">Plain text files such as ASCII and UTF-8 must be identified through this clip type.</const>
    </constants>

    <constants lookup="CMF" comment="ComboBox flags.">
      <const name="AUTO_COMPLETE">When in edit mode, this option helps the user by auto-completing text.</const>
      <const name="DISABLED">Disable on creation; or combobox is currently disabled.</const>
      <const name="EDIT">Enable edit mode, which allows the user to write free-text in the combobox.</const>
      <const name="HIDE">Hide on creation, or combobox is currently hidden.</const>
      <const name="LIMIT_TO_LIST">When in edit mode, limit-to-list prevents the user from entering text that isn't in the combobox list.</const>
      <const name="NO_TRANSLATION">Do not translate combobox strings or the drop-down menu to the user's native language.</const>
      <const name="SHOW_ICONS">Show icons in the dropdown list.</const>
    </constants>

    <constants lookup="INF" comment="Flags for the Input class.">
      <const name="COMMANDLINE">Function as a command-line.  Typically used when the input box needs to remain persistent and is linked to an output system, such as a shell.</const>
      <const name="DISABLED">Disable on creation.</const>
      <const name="ENTER_TAB">Press enter results in a virtual tab-keypress being sent.</const>
      <const name="FIXED_INPUT_WIDTH">Indicates that the InputWidth field was defined by the client.</const>
      <const name="FIXED_LABEL_WIDTH">Indicates that the LabelWidth field was defined by the client.</const>
      <const name="SECRET">Used for secret user entry (passwords).</const>
      <const name="SELECT_TEXT">Select all text when the input box is shown for the first time.</const>
    </constants>

    <constants lookup="MIF" comment="Flags for MenuItems.">
      <const name="BREAK">Menu item is acting as a break.</const>
      <const name="CATEGORISE">Categorise the attached config file.</const>
      <const name="DISABLED">Set if the menu item is disabled (ghosted).</const>
      <const name="EXTENSION">Menu item is an extension.</const>
      <const name="KEY_REPEAT">Respond to repeated key presses.</const>
      <const name="NO_KEY_RESPONSE">Display the key, but do not respond to its equivalent key press.</const>
      <const name="OPTION">Item is a clickable option (clicking the item's icon will turn the option on/off).</const>
      <const name="SELECTED">The menu item has been selected (checked).</const>
      <const name="SORT">Sort all content under the menuitem (applies only to extensions).</const>
      <const name="TOGGLE">Enables toggled menu items (checking state of on and off).</const>
    </constants>

    <constants lookup="MNF" comment="Flags for the Menu class.">
      <const name="CACHE">Cache menu surface once created.</const>
      <const name="EXT_COLUMN">Allow for an extension indicator column on the right.</const>
      <const name="IGNORE_FOCUS">Do not hide the menu if it loses the focus.</const>
      <const name="NO_HIDE">Activate() is prevented from hiding the menu.</const>
      <const name="NO_TRANSLATION">Do not translate menu text to the user's native language.</const>
      <const name="POINTER_PLACEMENT">Menu is placed at the position of the mouse pointer when shown.</const>
      <const name="POINTER_XY">Synonym for POINTER_PLACEMENT</const>
      <const name="POPUP">Locks the position of the menu to the mouse pointer.</const>
      <const name="PRESERVE_BKGD">Preserve background when scrolling.</const>
      <const name="REVERSE_X">Menu's open in reverse horizontal order.</const>
      <const name="REVERSE_Y">Menu's open in reverse vertical order.</const>
      <const name="SHOW_ICONS">Synonym for SHOW_IMAGES</const>
      <const name="SHOW_IMAGES">Allow for an image column on the left.</const>
      <const name="SHOW_KEYS">Print key controls on the right.</const>
      <const name="SORT">Sort all items by name.</const>
    </constants>

    <constants lookup="TF" comment="Flags for the TabFocus class.">
      <const name="CHILD_FOCUS">In this mode, the user's point of focus must match the monitored Surface or one of its immediate children for the tabfocus to function.</const>
      <const name="LIMIT_TO_LIST">In limit-to-list mode, the tabfocus only functions if the user's point of focus is on the monitored Surface or one of objects in the tab list.</const>
      <const name="LOCAL_FOCUS">In this mode, the user's point of focus must match the monitored Surface for the tabfocus to function.</const>
    </constants>

    <constants lookup="TXF" comment="Flags for the Text class.">
      <const name="AREA_SELECTED">This read-only flag is set automatically when the user has selected an area of text.</const>
      <const name="AUTO_CLEAR">Clears the text string when the enter key is pressed.</const>
      <const name="AUTO_SELECT">Automatically select all text if the text object receives the focus.</const>
      <const name="BACKGROUND">Enables a colour background behind the text.</const>
      <const name="COMMANDLINE">Synonym for AUTO_CLEAR | EDIT | HISTORY</const>
      <const name="DISABLED">This read-only flag is set if the object has been disabled through the Disable action.</const>
      <const name="EDIT">This flag must be enabled if the user is permitted to change the text string with the keyboard.</const>
      <const name="ENTER_TAB">Convert enter-key presses to the tab-key.</const>
      <const name="FORCE_CAPS">This flag forces the capitalisation of all text that is entered into the object.</const>
      <const name="GLOBAL_EDITING">Keeps the text object in edit mode regardless of user focus.</const>
      <const name="HISTORY">Enables historical browsing when the up/down cursor keys are used.  The number of historical lines stored can be set in the HistorySize field.</const>
      <const name="MULTI_SELECT">Allow the user to select/highlight multiple lines by holding the Ctrl key.</const>
      <const name="NO_SYS_KEYS">Disables system-keys that provide support for common key combinations such as Ctrl-C, Ctrl-X etc.</const>
      <const name="OVERWRITE">Turns on overwrite mode (if off, insert mode is enabled).</const>
      <const name="PASSWORD">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="PRESERVE_BKGD">Preserve-background disables fast scrolling for background preservation.</const>
      <const name="SECRET">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="SELECT">Synonym for MULTI_SELECT | SINGLE_SELECT</const>
      <const name="SINGLE_SELECT">Enables text selection (with or without edit mode).  If in line mode, a single click will allow the user to highlight any line.</const>
      <const name="STRETCH">If the font is scalable, the text string will be resized to fit inside the surface that contains it (i.e. no characters will be clipped).  This is acheived by recalculating the font's point size.</const>
      <const name="STR_TRANSLATE">Translate strings to the user's native language.</const>
      <const name="TAB_ENTRY">Pressing the tab key is treated the same as pressing enter.</const>
      <const name="TAB_KEY">If the tab key is pressed, print the tab character.</const>
      <const name="VARIABLE">This flag forces a text object to recalculate any variable references in its string data whenever a redraw occurs.  Such references are indicated through square brackets, e.g. [desktop.width].  Refer to the StrEvaluate() function in the Strings module for more information.</const>
      <const name="WORDWRAP">Enables word wrapping.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
