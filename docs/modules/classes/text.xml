<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Text</name>
    <type>class</type>
    <module>Widget</module>
    <comment>Provides text display and editing functionality.</comment>
    <version>1</version>
    <id>7c9e690a</id>
    <idstring>ID_TEXT</idstring>
    <category>GUI</category>
    <include>modules/text.h</include>
    <copyright>Paul Manias 2003-2020</copyright>
    <description>
<p>The Text class provides a complete text display and editing service that is suitable for almost any situation that requires effective text management.  The class is most effective when applied to general text display, text editing services, command-lines and input boxes.</p>
<p>The Text class is closely linked to the Font class, which provides all of the code necessary for font management.  If you require information on how to set font definitions such as the face and colour of the font, please refer to the documentation for the Font class.  All fields in the <class name="Font">Font</class> class are inherited, and you will find that the Face, Colour, Bold, Point and Align fields are particularly helpful for setting font attributes.</p>
<p>The graphical area of a text object is defined using the standard dimension conventions (x, y, width and height). Margins (left, right, top and bottom) also allow you to offset the text from the edges of the surface area.  The Text class draws its graphics to the foreground only, so you have the choice of defining your own background to be placed behind the text.  If you wish to forgo that in favour of a clear background, set the Background field to your preferred colour.</p>
<p>The following example shows how to create a simple string display within a <class name="Surface">Surface</class>:</p>
<pre>surface.new('text', { string='Hello World', x=5, y=10, colour='#303030' })</pre>
<p>If you intend to create a text object that accepts user input, there are a number of flags available to you that decide how the object will behave as the user enters text information.  You may also attach child objects that can be activated when the user presses the enter key after typing in some information.  This can be useful for creating a custom-built reaction to user input.  Here is an example of a text object that runs a script when the enter key is pressed:</p>
<pre>surface.new('text', x=3, y=4,
   activated = function(Text)
      print(Text.string)
   end
})
</pre>
<p>For long text lists, scrollbars can be attached via the HScroll and VScroll fields.  For hints on how to use a text object to build a full featured text editing application, refer to the script file located at <code>programs:apps/textviewer/main.dml</code>.</p>
<p>By default the Text class supports text highlighting for cut, copy and paste operations.  This support is backed by system keypresses such as CTRL-C, CTRL-V and CTRL-X.</p></description>
    <source>
      <file path="class_text/">fields.c</file>
      <file path="class_text/">text.c</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Clear</name>
      <comment>Clears all content from the object.</comment>
      <description>
<p>You can delete all of the text information from a text object by calling the Clear action.  All of the text data will be deleted from the object and the graphics will be automatically updated as a result of calling this action.</p>
      </description>
    </action>

    <action>
      <name>Clipboard</name>
      <comment>Full support for clipboard activity is provided through this action.</comment>
    </action>

    <action>
      <name>DataFeed</name>
      <comment>Text data can be sent to a text object via data feeds.</comment>
      <description>
<p>A convenient method for appending data to a text object is via data feeds.  The Text class currently supports the DATA_TEXT and DATA_XML types for this purpose.  If the text contains return codes, the data will be split into multiple lines.</p>
<p>The surface that is associated with the Text object will be redrawn as a result of calling this action.</p>
      </description>
      <result>
        <error code="AllocMemory">A call to AllocMemory() failed to create a new memory block.</error>
        <error code="Okay">Operation successful.</error>
        <error code="Mismatch">The data type that was passed to the action is not supported by the Text class.</error>
        <error code="Args">Invalid arguments passed to function.</error>
      </result>
    </action>

    <action>
      <name>Disable</name>
      <comment>Disables object functionality.</comment>
    </action>

    <action>
      <name>Draw</name>
      <comment>Draws object graphics to drawable areas.</comment>
    </action>

    <action>
      <name>Enable</name>
      <comment>Enables object functionality.</comment>
    </action>

    <action>
      <name>Focus</name>
      <comment>Calling this action will activate keyboard input.</comment>
    </action>

    <action>
      <name>Hide</name>
      <comment>Hides a visible object from the view of the user.</comment>
    </action>

    <action>
      <name>SaveToObject</name>
      <comment>Use this action to save edited information as a text file.</comment>
    </action>

    <action>
      <name>ScrollToPoint</name>
      <comment>Scrolls a text object's graphical content.</comment>
    </action>

    <action>
      <name>Show</name>
      <comment>Makes an object visible to the user.</comment>
    </action>

  </actions>

  <methods>
    <method>
      <name>AddLine</name>
      <comment>Adds a new line to any row position in a text object.</comment>
      <prototype>ERROR txtAddLine(OBJECTPTR Object, LONG Line, CSTRING String, LONG Length)</prototype>
      <input>
        <param type="LONG" name="Line">The number of the line at which the text should be inserted.</param>
        <param type="CSTRING" name="String">The text that you want to add.</param>
        <param type="LONG" name="Length">The length of the string in bytes.</param>
      </input>
      <description>
<p>Lines can be added or inserted into a text object by using the AddLine() method.  You need to provide the text string that you wish to use, the line number that the text will be inserted into, and the length of the text string.</p>
<p>If you set the Text argument to NULL, then an empty string will be inserted into the line number.  If the Line argument is less than zero, then the string will be added to the end of the Text.  If the Length is set to -1, then the length will be calculated by counting the amount of characters in the Text argument.</p>
<p>If the new line is visible within the text object's associated surface, that region of the surface will be redrawn so that the new line is displayed.</p>
      </description>
      <result>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="AllocMemory">A call to AllocMemory() failed to create a new memory block.</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>DeleteLine</name>
      <comment>Deletes any line number.</comment>
      <prototype>ERROR txtDeleteLine(OBJECTPTR Object, LONG Line)</prototype>
      <input>
        <param type="LONG" name="Line">The line number that you want to delete.  If negative, the last line will be deleted.</param>
      </input>
      <description>
<p>This method deletes lines from a text object.  You only need to specify the line number to have it deleted.  If the line number does not exist, then the call will fail.  The text graphic will be updated as a result of calling this method.</p>
      </description>
      <result>
        <error code="Args">The Line value was out of the valid range.</error>
        <error code="Okay">The line was deleted.</error>
      </result>
    </method>

    <method>
      <name>GetLine</name>
      <comment>Returns the string content of any given line.</comment>
      <prototype>ERROR txtGetLine(OBJECTPTR Object, LONG Line, STRING Buffer, LONG Length)</prototype>
      <input>
        <param type="LONG" name="Line">The line number that you want to retrieve.  Must be zero or greater.</param>
        <param type="STRING" name="Buffer">Point this argument to a buffer space for the string result, or set to NULL if a buffer should be allocated by the method.</param>
        <param type="LONG" name="Length">Set this argument to the length of the buffer that you have provided, or set to NULL if a buffer is to be allocated.</param>
      </input>
      <description>
<p>This method can be used to get the string associated with any given line number.  You may choose to provide a buffer space for the method to output the string data to, or you may set the Buffer argument to NULL to have the method allocate a memory block containing the string.  If you are providing a buffer, make sure that the Length argument is set to the correct buffer size.  In the case of allocated buffers, the Length argument will be updated to reflect the length of the allocation (including the NULL byte).</p>
      </description>
      <result>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="AllocMemory">The necessary amount of buffer space could not be allocated.</error>
        <error code="OutOfRange">The line number that you specified was outside of the valid range of line numbers.</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>ReplaceLine</name>
      <comment>Replaces the content of any text line.</comment>
      <prototype>ERROR txtReplaceLine(OBJECTPTR Object, LONG Line, CSTRING String, LONG Length)</prototype>
      <input>
        <param type="LONG" name="Line">The line number that will be replaced.</param>
        <param type="CSTRING" name="String">The text data that you want to use in replacing the line.</param>
        <param type="LONG" name="Length">The length of the String in bytes.</param>
      </input>
      <description>
<p>Any line within a text object can be replaced with new information by using the ReplaceLine() method.  You need to provide the text string that you wish to use, the number of the line that will be replaced, and the length of the text string.</p>
<p>If you set the String argument to NULL, then an empty string will replace the line number.  If the Length is set to -1, then the length of the new string will be calculated by counting the amount of characters in the String argument.</p>
<p>If the new line content is visible within the text object's associated surface, that region of the surface will be redrawn so that the new line content is displayed.</p>
      </description>
      <result>
        <error code="AllocMemory">The memory required to add the text string to the list was unavailable.</error>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
      </result>
    </method>

    <method>
      <name>SelectArea</name>
      <comment>Forces a user selection over a specific text area.</comment>
      <prototype>ERROR txtSelectArea(OBJECTPTR Object, LONG Row, LONG Column, LONG EndRow, LONG EndColumn)</prototype>
      <input>
        <param type="LONG" name="Row">The row from which the selection will start.</param>
        <param type="LONG" name="Column">The column from which the selection will start.</param>
        <param type="LONG" name="EndRow">The number of the row that will terminate the selection.</param>
        <param type="LONG" name="EndColumn">The number of the column that will terminate the selection.</param>
      </input>
      <description>
<p>If you would like to force a user selection over a specific text area, use this method.  Normally, user selections occur when the user moves a pointing device over a Text object to highlight an area of text.  By using this method, you will bypass that procedure by highlighting an area manually.</p>
<p>The area that you specify will be highlighted as if the user had selected that area him or herself.  The selection can be cancelled if the user performs an activity that causes the selection to be removed.</p>
      </description>
      <result>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>SetFont</name>
      <comment>Makes changes to the font face, style and size after initialisation.</comment>
      <prototype>ERROR txtSetFont(OBJECTPTR Object, CSTRING Face)</prototype>
      <input>
        <param type="CSTRING" name="Face">The name and specifications for the font face.</param>
      </input>
      <description>
<p>Call SetFont() to change the font face that is used for displaying text.  The string format follows the standard for font requests, e.g. <code>Open Sans:12:Bold Italic:#ff0000</code>.  Refer to the <class name="Font" index="Face">Font:Face</class> field for more details.</p>
<p>If the new face is invalid or fails to load, the current font will remain unchanged.</p>
      </description>
      <result>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="CreateObject">A call to CreateObject() failed.</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>Activated</name>
      <comment>Callback function for validating user input.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The Activated callback informs the client that the user wishes to activate the text widget, having pressed the enter key or its functional equivalent.  The function prototype is <code>Function(*Text)</code>.</p>
<p>If the callback rejects the current <field>String</field>, it is the client's choice as to how the user is informed.  This could involve resetting the string to its former value; displaying a passive warning; or using a dialog box. Where possible, it is recommended that passive warnings are displayed and more intrusive errors are only imposed after submission of the content.</p>
      </description>
    </field>

    <field>
      <name>AmtLines</name>
      <comment>The total number of lines stored in the object.</comment>
      <access read="R">Read</access>
      <type>INT</type>
    </field>

    <field>
      <name>Background</name>
      <comment>Optional background colour for text.  Set to NULL for no background.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>CharLimit</name>
      <comment>Limits the amount of characters allowed in a text object's string.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>Set the CharLimit field if you wish to limit the amount of characters that can appear in a text object's string.  The minimum possible value is 0 for no characters.</p>
<p>The CharLimit field is most useful for restricting the amount of characters that a user can enter in an editable text object.</p>
      </description>
    </field>

    <field>
      <name>CursorColour</name>
      <comment>The colour used for the text cursor.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>CursorColumn</name>
      <comment>The current column position of the cursor.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>CursorRow</name>
      <comment>The current line position of the cursor.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>Flags</name>
      <comment>Special flags that affect object behaviour.</comment>
      <access read="R" write="I">Read/Init</access>
      <type lookup="TXF">INT</type>
      <description>
<types lookup="TXF"/>
      </description>
    </field>

    <field>
      <name>Focus</name>
      <comment>Refers to the object that will be monitored for user focussing.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>OBJECTID</type>
      <description>
<p>By default, a text object will become active (i.e. capable of receiving keyboard input) when its surface container receives the focus.  If you would like to change this so that a Text becomes active when some other object receives the focus, refer to that object by writing its ID to this field.</p>
      </description>
    </field>

    <field>
      <name>Font</name>
      <comment>Points to a <class name="Font">Font</class> object that controls the drawing of text.</comment>
      <access read="R">Read</access>
      <type class="Font">*Font</type>
      <description>
<p>To set the face, colour and other attributes of a text object's graphics, you need to read the Font field and write your settings to the font object prior to initialisation.  For a list of all the fields that can be set, please refer to the documentation for the <class name="Font">Font</class> class.</p>
      </description>
    </field>

    <field>
      <name>Frame</name>
      <comment>Forces a text object's graphic to be drawn to a specific frame.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>If this field is set to a valid frame number, the text graphic will only be drawn when the frame of the container matches the Frame number in this field.  When set to 0 (the default), the text graphic will be drawn regardless of the container's frame number.</p>
      </description>
    </field>

    <field>
      <name>HScroll</name>
      <comment>If scrolling is required, use this field to refer to a horizontal scroll bar.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>OBJECTID</type>
      <description>
<p>To attach a horizontal scrollbar to a text object, set the HScroll field to an object belonging to the <class name="Scroll">Scroll</class> class.  If the Scroll object is configured to provide full scrollbar functionality, the user will be able to scroll the text display along the horizontal axis.</p>
      </description>
    </field>

    <field>
      <name>Highlight</name>
      <comment>Defines the colour used to highlight text.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>HistorySize</name>
      <comment>Defines the maximum number of records stored in the history buffer.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>If the history buffer is enabled, the HistorySize will indicate the maximum number of string records that can be stored in the text object for retrieval by the user.</p>
<p>The history buffer is enabled with the HISTORY option in the <field>Flags</field> field.</p>
      </description>
    </field>

    <field>
      <name>LineLimit</name>
      <comment>Restricts the total number of lines allowed in a text object.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>Set the LineLimit field to restrict the maximum number of lines permitted in a text object.  It is common to set this field to a value of 1 for input boxes that have a limited amount of space available.</p>
      </description>
    </field>

    <field>
      <name>Location</name>
      <comment>Identifies the location of a text file to load.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>To load a text file into a text object, set the Location field.  If this field is set after initialisation, the object will automatically clear its content and reload data from the location that you specify.</p>
<p>Viable alternatives to setting the Location involve loading the data manually and then setting the String field with a data pointer, or using the DataFeed action.</p>
      </description>
    </field>

    <field>
      <name>Origin</name>
      <comment>Similar to the Location field, but does not automatically load content if set.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>This field is identical to the Location field, with the exception that it does not update the content of a text object if it is set after initialisation.  This may be useful if the origin of the text data needs to be changed without causing a load operation.</p>
      </description>
    </field>

    <field>
      <name>SelectColumn</name>
      <comment>Indicates the column position of a selection's beginning.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>If the user has selected an area of text, the starting column of that area will be indicated by this field.  If an area has not been selected, the value of the SelectColumn field is undefined.</p>
<p>To check whether or not an area has been selected, test the AREASELECTED bit in the <field>Flags</field> field.</p>
      </description>
    </field>

    <field>
      <name>SelectRow</name>
      <comment>Indicates the line position of a selection's beginning.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>If the user has selected an area of text, the starting row of that area will be indicated by this field.  If an area has not been selected, the value of the SelectRow field is undefined.</p>
<p>To check whether or not an area has been selected, test the AREASELECTED bit in the <field>Flags</field> field.</p>
      </description>
    </field>

    <field>
      <name>String</name>
      <comment>Text information can be written directly to a text object through this field.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>To write a string to a text object, set this field.  Updating a text object in this fashion causes it to analyse the string information for return codes, which means the string data can be split into lines.  Any data that is in the text object when you set this field will be deleted automatically.  The graphics will also be redrawn and any attached Scroll objects will be recalculated.</p>
      </description>
    </field>

    <field>
      <name>TabFocus</name>
      <comment>Allows the user to hit the tab key to focus on other GUI objects.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>OBJECTID</type>
      <description>
<p>If this field points to another GUI object, the user will be able to use the tab key to move to that object when entering information into the text object. (Technically this causes the focus to be set to that object, and the text object will thus lose the focus.)</p>
<p>When a series of objects are 'chained' via tab focussing, the user will have an easier time moving between objects through use of the keyboard.</p>
      </description>
    </field>

    <field>
      <name>TextHeight</name>
      <comment>Indicator for the pixel height of all lines in a text object.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>The total height of all lines in a text object can be measured by reading the TextHeight.  The returned value compensates for vertical and gutter spacing.  Wordwrap will be taken into account if the WORDWRAP bit has been set in the Flags field.</p>
      </description>
    </field>

    <field>
      <name>TextWidth</name>
      <comment>Measures the pixel width of the text string.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>The width of the longest text line can be retrieved from this field. The result includes the LeftMargin and RightMargin field values if they have been defined.</p>
      </description>
    </field>

    <field>
      <name>TextX</name>
      <comment>The horizontal position for all text strings.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>TextY</name>
      <comment>The vertical position of the first text string.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>VScroll</name>
      <comment>If scrolling is required, use this field to refer to a vertical scroll bar.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>OBJECTID</type>
      <description>
<p>To attach a vertical scrollbar to a text object, set the VScroll field to an object belonging to the <class name="Scroll">Scroll</class> class.  If the Scroll object is configured to provide full scrollbar functionality, the user will be able to scroll the text display along the vertical axis.</p>
      </description>
    </field>

    <field>
      <name>ValidateInput</name>
      <comment>Callback function for validating user input.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The ValidateInput callback allows the client to check that the current text string is valid.  It is called when the <action>Activate</action> action is used, which will typically occur when the enter key being pressed, or the text object loses the focus.</p>
<p>The function prototype is <code>Function(*Text)</code>.</p>
<p>If the callback rejects the current <field>String</field>, it is the client's choice as to how the user is informed.  This could involve resetting the string to its former value; displaying a passive warning; or using a dialog box. Where possible, it is recommended that passive warnings are displayed and more intrusive errors are only imposed after submission of the content.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="VWF" comment="View flags.">
      <const name="WIDTH_RESET">Always reset column widths when the Columns field is set.</const>
      <const name="NO_SORTING">No user sorting, e.g. in column mode.</const>
      <const name="SENSITIVE">Sensitive mode will activate child objects when the user single-clicks with the mouse (by default, child activation only occurs with double-clicks).</const>
      <const name="NO_ICONS">Do not load or show any icons.</const>
      <const name="NOTIFY_ON_CLEAR">If the view should activate itself when cleared, set this flag. By default, activation normally only occurs when an item is double-clicked or when sensitive mode is enabled.</const>
      <const name="DRAG_DROP">Enables drag and drop for items in the view. In this mode, multi-select is only possible if the shift or ctrl keys are held while using the mouse.</const>
      <const name="NO_SELECT">Stop the user from selecting items.</const>
      <const name="NO_SELECT_JMP">When a new item is selected, the view will jump to that item if it is not completely visible to the user. Setting this flag will turn off this behaviour.</const>
      <const name="USER_DRAG">Enable drag and drop only if the user prefers it.</const>
      <const name="AUTO_DESELECT">Deselects a highlighted item when it is activated by mouse click or enter key.</const>
      <const name="MULTI_SELECT">Allow multiple item selections without having to hold the shift key.</const>
    </constants>

    <constants lookup="MIF" comment="Flags for MenuItems.">
      <const name="SELECTED">The menu item has been selected (checked).</const>
      <const name="EXTENSION">Menu item is an extension.</const>
      <const name="NO_KEY_RESPONSE">Display the key, but do not respond to its equivalent key press.</const>
      <const name="SORT">Sort all content under the menuitem (applies only to extensions).</const>
      <const name="TOGGLE">Enables toggled menu items (checking state of on and off).</const>
      <const name="OPTION">Item is a clickable option (clicking the item's icon will turn the option on/off).</const>
      <const name="DISABLED">Set if the menu item is disabled (ghosted).</const>
      <const name="CATEGORISE">Categorise the attached config file.</const>
      <const name="BREAK">Menu item is acting as a break.</const>
      <const name="KEY_REPEAT">Respond to repeated key presses.</const>
    </constants>

    <constants lookup="INF" comment="Flags for the Input class.">
      <const name="SECRET">Used for secret user entry (passwords).</const>
      <const name="SELECT_TEXT">Select all text when the input box is shown for the first time.</const>
      <const name="DISABLED">Disable on creation.</const>
      <const name="HIDE">Hide on creation, or input is currently hidden.</const>
      <const name="ENTER_TAB">Press enter results in a virtual tab-keypress being sent.</const>
      <const name="COMMANDLINE">Function as a command-line.  Typically used when the input box needs to remain persistent and is linked to an output system, such as a shell.</const>
    </constants>

    <constants lookup="BTF" comment="Button flags.">
      <const name="DISABLED">Disable on creation, or button is currently disabled.  Read-only.</const>
      <const name="HIDE">Hide on creation, or button is currently hidden.</const>
      <const name="PULSE">Send repeated clicks when the mouse button is held down.</const>
      <const name="NO_GFX">Turns off the button's foreground graphics (text and images).</const>
    </constants>

    <constants lookup="CBF" comment="CheckBox flags.">
      <const name="DISABLED">Disable on creation, or object is currently disabled.</const>
      <const name="HIDE">Hide on creation, or object is currently hidden.</const>
    </constants>

    <constants lookup="IMF" comment="Image flags">
      <const name="NO_DRAW">Stops automatic drawing of the target surface if the image is being animated or a special effect is active.</const>
      <const name="FIXED">Synonym for FIXED_SIZE</const>
      <const name="ENLARGE">If the dimensions of the original picture are smaller than the destination surface, the image will be stretched to fit.  Enlargement is dynamic, so if the surface changes in size then the size of the picture will be recalculated to fit.</const>
      <const name="NO_FAIL">If the source image file does not exist or an error occurs during loading, the image object will still pass the initialisation process successfully.  When the image object is drawn, it will clear the target surface to the colour specified in the Background field.</const>
      <const name="SHRINK">If the dimensions of the original picture are larger than the destination surface, the image will be stretched to fit.  Shrinking is dynamic, so if the surface changes in size then the size of the picture will be recalculated to fit.</const>
      <const name="SOLID_BLEND">Synonym for NO_BLEND</const>
      <const name="FIT">This flag applies to image resizing.  When set, the calculated width and height will be limited so that the image cannot be stretched beyond the edges of the target surface.  This flag is commonly set in conjunction with the 11RATIO flag.</const>
      <const name="NO_BLEND">Turns off alpha-blending if the target surface has the COMPOSITE flag set and the source image has an alpha channel.</const>
      <const name="FIXED_SIZE">Image data will normally be stored at its original size and resized on the fly when the STRETCH flag is used.  Setting the FIXED_SIZE flag will pre-scale the image and permanently store it at that size.</const>
      <const name="STRETCH">This flag conveniently combines the ENLARGE and SHRINK flags to ensure that the image always covers the dimensions of the destination surface.</const>
      <const name="SCALABLE">The image source is scalable (e.g. vector graphic).</const>
      <const name="STICKY">All calls to Move and MoveToPoint are ignored if this flag is set.</const>
      <const name="11_RATIO">When resizing the image, the calculated width and height will always be in correct proportion relative to the source image's original width and height.</const>
    </constants>

    <constants lookup="CMF" comment="ComboBox flags.">
      <const name="AUTO_COMPLETE">When in edit mode, this option helps the user by auto-completing text.</const>
      <const name="EDIT">Enable edit mode, which allows the user to write free-text in the combobox.</const>
      <const name="SHOW_ICONS">Show icons in the dropdown list.</const>
      <const name="DISABLED">Disable on creation; or combobox is currently disabled.</const>
      <const name="HIDE">Hide on creation, or combobox is currently hidden.</const>
      <const name="LIMIT_TO_LIST">When in edit mode, limit-to-list prevents the user from entering text that isn't in the combobox list.</const>
      <const name="NO_TRANSLATION">Do not translate combobox strings or the drop-down menu to the user's native language.</const>
    </constants>

    <constants lookup="CLIPTYPE" comment="Clipboard types">
      <const name="DATA">Raw information that is uncategorised can be defined as a data clip.</const>
      <const name="FILE">Pure file references are stored as file clips.  This type is typically used by file managers for moving and copying files.</const>
      <const name="TEXT">Plain text files such as ASCII and UTF-8 must be identified through this clip type.</const>
      <const name="AUDIO">An audio clip that is recognised by the Sound class (such as wav's and mp3's).</const>
      <const name="IMAGE">Images that are recognised by the Picture class may be stored as this type (such as jpeg's and png files).</const>
      <const name="OBJECT">An object that has been deserialised into binary form.</const>
    </constants>

    <constants lookup="SD" comment="Scroll directions.">
      <const name="NEGATIVE"/>
      <const name="POSITIVE"/>
    </constants>

    <constants lookup="TXF" comment="Flags for the Text class.">
      <const name="SECRET">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="PRESERVE_BKGD">Preserve-background disables fast scrolling for background preservation.</const>
      <const name="AREA_SELECTED">This read-only flag is set automatically when the user has selected an area of text.</const>
      <const name="GLOBAL_EDITING">Keeps the text object in edit mode regardless of user focus.</const>
      <const name="SINGLE_SELECT">Enables text selection (with or without edit mode).  If in line mode, a single click will allow the user to highlight any line.</const>
      <const name="DISABLED">This read-only flag is set if the object has been disabled through the Disable action.</const>
      <const name="OVERWRITE">Turns on overwrite mode (if off, insert mode is enabled).</const>
      <const name="SELECT">Synonym for MULTI_SELECT | SINGLE_SELECT</const>
      <const name="ENTER_TAB">Convert enter-key presses to the tab-key.</const>
      <const name="FORCE_CAPS">This flag forces the capitalisation of all text that is entered into the object.</const>
      <const name="AUTO_CLEAR">Clears the text string when the enter key is pressed.</const>
      <const name="EDIT">This flag must be enabled if the user is permitted to change the text string with the keyboard.</const>
      <const name="STRETCH">If the font is scalable, the text string will be resized to fit inside the surface that contains it (i.e. no characters will be clipped).  This is acheived by recalculating the font's point size.</const>
      <const name="WORDWRAP">Enables word wrapping.</const>
      <const name="AUTO_SELECT">Automatically select all text if the text object receives the focus.</const>
      <const name="TAB_KEY">If the tab key is pressed, print the tab character.</const>
      <const name="PASSWORD">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="MULTI_SELECT">Allow the user to select/highlight multiple lines by holding the Ctrl key.</const>
      <const name="VARIABLE">This flag forces a text object to recalculate any variable references in its string data whenever a redraw occurs.  Such references are indicated through square brackets, e.g. [desktop.width].  Refer to the StrEvaluate() function in the Strings module for more information.</const>
      <const name="STR_TRANSLATE">Translate strings to the user's native language.</const>
      <const name="HISTORY">Enables historical browsing when the up/down cursor keys are used.  The number of historical lines stored can be set in the HistorySize field.</const>
      <const name="NO_SYS_KEYS">This flag is set by default to enable system key support.  System-keys provide support for common key combinations such as Ctrl-C, Ctrl-X etc.</const>
      <const name="BACKGROUND">Enables a colour background behind the text.</const>
      <const name="TAB_ENTRY">Pressing the tab key is treated the same as pressing enter.</const>
      <const name="COMMANDLINE">Synonym for AUTO_CLEAR | EDIT | HISTORY</const>
    </constants>

    <constants lookup="SBF" comment="Scrollbar flags.">
      <const name="CONSTANT">Ensures that the scrollbar is always on display.</const>
      <const name="RELATIVE">Enables relative scrolling (movement is reported relative to the current slider position rather than in absolute coordinates).</const>
      <const name="HIDE">Hide on creation, or scrollbar is currently hidden.</const>
      <const name="SLIDER">If set, the scrollbar behaves as a slider.  In this mode, the size of the draggable slider has a fixed size (by default the slider is proportional).</const>
      <const name="NO_INTERSECT">Do not attempt to intersect with adjacent scrollbars.</const>
    </constants>

    <constants lookup="AXIS" comment="Axis options.  This determines the axis that is signalled when the slider is moved (note that it is feasible for a horizontal scrollbar to signal the Y axis, if this is desired by the client)">
      <const name="X"/>
      <const name="Y"/>
      <const name="Z"/>
    </constants>

    <constants lookup="VGF" comment="Graphics options (normally defined by the template)">
      <const name="OUTLINE_TITLE">Draw black outline around title text.</const>
      <const name="NO_BORDER">Do not draw a border around column headers when in table mode.</const>
      <const name="DRAW_TABLE">Draw the view as a table (the basic format is the same, graphics are different).</const>
      <const name="GROUP_SHADOW">Draw a shadow underneath the group graphics headers.</const>
      <const name="STRIPES">Draw stripes in group titles.</const>
      <const name="HAIRLINES">Draw a hairline between each column.</const>
      <const name="BRANCHES">Draw grey tree branches.</const>
      <const name="ALT_GROUP">Alternate the group header graphics.</const>
      <const name="LINE_BREAKS">Draw a line break between each view item.</const>
    </constants>

    <constants lookup="TF" comment="Flags for the TabFocus class.">
      <const name="LOCAL_FOCUS">In this mode, the user's point of focus must match the monitored Surface for the tabfocus to function.</const>
      <const name="CHILD_FOCUS">In this mode, the user's point of focus must match the monitored Surface or one of its immediate children for the tabfocus to function.</const>
      <const name="LIMIT_TO_LIST">In limit-to-list mode, the tabfocus only functions if the user's point of focus is on the monitored Surface or one of objects in the tab list.</const>
    </constants>

    <constants lookup="BHS">
      <const name="OUTSIDE">The cursor is outside of the button's area</const>
      <const name="ENTERED">The cursor has just entered the button's area</const>
      <const name="INSIDE">The cursor is inside the button's area</const>
    </constants>

    <constants lookup="SLF" comment="Flags for SelectCallback">
      <const name="ACTIVE">The most recently active tag has changed.</const>
      <const name="MANUAL">Item was manually selected (by the program, not the user).</const>
      <const name="SELECTED">A tag has been selected and is now highlighted.</const>
      <const name="INVERTED">Change is due to an inverted selection.</const>
      <const name="KEYPRESS">Item was selected by a keypress.</const>
      <const name="CLICK">Item was clicked - see ClickX and ClickY for coordinates.</const>
      <const name="MULTIPLE">Multiple items were selected.</const>
      <const name="MOVED">Change is due to the item being moved.</const>
    </constants>

    <constants lookup="CLF" comment="Clipboard flags">
      <const name="DRAG_DROP">Enables drag and drop mode.  The clipboard content will be private and not share data with the host system in this mode.</const>
      <const name="HOST">This indicator is automatically set when a clipboard was created due to incoming content from the host system.</const>
    </constants>

    <constants lookup="VIEW" comment="List options">
      <const name="LIST">Standard list view with small icons, arranged from top to bottom.</const>
      <const name="ICON">Similar to list-view but with large icons, arranged from left to right.</const>
      <const name="TREE">Tree mode can be used if the items are arranged in a hierarchy, where items can be embedded within items.  The tree view provides small buttons that the user can click to expand the tree and view hidden items.</const>
      <const name="COLUMN">Long list with detail columns.</const>
      <const name="LONG_LIST">This type is the same as the LIST view but the items will not wrap back to the top of the view when the bottom edge of the surface is encountered.</const>
      <const name="GROUP_TREE">Similar to tree view, but root level nodes are drawn as a headline.</const>
      <const name="DOCUMENT">Document mode allows view data to be passed to a document object for display.  You are required to provide a document object that is pre-loaded with a template capable of processing input from the view object.  Refer to the Document field for more information.</const>
      <const name="COLUMN_TREE">This mode combines the column and tree modes.  The view displays the layout and style of normal column mode, but the first column is used to display and manage a tree hierarchy.  The tree can be expanded and collapsed just as in the standard tree mode.</const>
    </constants>

    <constants lookup="SO" comment="Direction options">
      <const name="HORIZONTAL"/>
      <const name="VERTICAL"/>
    </constants>

    <constants lookup="CEF">
      <const name="DELETE">Requests that the original file source is deleted if a successful paste operation takes place.</const>
      <const name="EXTEND">Instead of replacing existing clipboard data, add the new data to the group.</const>
    </constants>

    <constants lookup="MNF" comment="Flags for the Menu class.">
      <const name="SHOW_KEYS">Print key controls on the right.</const>
      <const name="POINTER_XY">Synonym for POINTER_PLACEMENT</const>
      <const name="SHOW_ICONS">Synonym for SHOW_IMAGES</const>
      <const name="SHOW_IMAGES">Allow for an image column on the left.</const>
      <const name="POINTER_PLACEMENT">Menu is placed at the position of the mouse pointer when shown.</const>
      <const name="REVERSE_Y">Menu's open in reverse vertical order.</const>
      <const name="CACHE">Cache menu surface once created.</const>
      <const name="IGNORE_FOCUS">Do not hide the menu if it loses the focus.</const>
      <const name="SORT">Sort all items by name.</const>
      <const name="EXT_COLUMN">Allow for an extension indicator column on the right.</const>
      <const name="PRESERVE_BKGD">Preserve background when scrolling.</const>
      <const name="REVERSE_X">Menu's open in reverse horizontal order.</const>
      <const name="NO_HIDE">Activate() is prevented from hiding the menu.</const>
      <const name="POPUP">Locks the position of the menu to the mouse pointer.</const>
      <const name="NO_TRANSLATION">Do not translate menu text to the user's native language.</const>
    </constants>

    <constants lookup="SCF" comment="Scroll flags.">
      <const name="FIXED">Fixes the scroll slider to a specific size (non-proportional mode of operation).</const>
      <const name="REVERSE">When reporting the position of the slider, the value will always be reversed - so positive values will be negative and vice versa.  Reporting for relative position changes are also affected.</const>
      <const name="VERTICAL">The scrollbar is oriented vertically.</const>
      <const name="RELATIVE">Forces relative scrolling through the Scroll action rather than the default ScrollToPoint.</const>
      <const name="AUTO_ACTIVATE">The scroll object automatically activates itself whenever the position of the slider is changed.</const>
      <const name="AUTO_HIDE">Automatically hide the scrollbar when possible.</const>
      <const name="INVISIBLE">Keep scrollbar invisible.</const>
      <const name="HORIZONTAL">The scrollbar is oriented horizontally.</const>
      <const name="SLIDER">Changes the mode of operation so that the slider is non-proportional.  The size of the view is also set to a fixed value and resizing of the parent surface no longer affects the scroll values.</const>
      <const name="MESSAGE">Use used delay messages for activation of children.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
