<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Text</name>
    <type>class</type>
    <module>Widget</module>
    <comment>Provides text display and editing functionality.</comment>
    <version>1</version>
    <id>7c9e690a</id>
    <idstring>ID_TEXT</idstring>
    <category>GUI</category>
    <include>modules/text.h</include>
    <copyright>Paul Manias 2003-2020</copyright>
    <description>
<p>The Text class provides a complete text display and editing service that is suitable for almost any situation that requires effective text management.  The class is most effective when applied to general text display, text editing services, command-lines and input boxes.</p>
<p>The Text class is closely linked to the Font class, which provides all of the code necessary for font management.  If you require information on how to set font definitions such as the face and colour of the font, please refer to the documentation for the Font class.  All fields in the <class name="Font">Font</class> class are inherited, and you will find that the Face, Colour, Bold, Point and Align fields are particularly helpful for setting font attributes.</p>
<p>The graphical area of a text object is defined using the standard dimension conventions (x, y, width and height). Margins (left, right, top and bottom) also allow you to offset the text from the edges of the surface area.  The Text class draws its graphics to the foreground only, so you have the choice of defining your own background to be placed behind the text.  If you wish to forgo that in favour of a clear background, set the Background field to your preferred colour.</p>
<p>The following example shows how to create a simple string display within a <class name="Surface">Surface</class>:</p>
<pre>surface.new('text', { string='Hello World', x=5, y=10, colour='#303030' })</pre>
<p>If you intend to create a text object that accepts user input, there are a number of flags available to you that decide how the object will behave as the user enters text information.  You may also attach child objects that can be activated when the user presses the enter key after typing in some information.  This can be useful for creating a custom-built reaction to user input.  Here is an example of a text object that runs a script when the enter key is pressed:</p>
<pre>surface.new('text', x=3, y=4,
   activated = function(Text)
      print(Text.string)
   end
})
</pre>
<p>By default the Text class supports text highlighting for cut, copy and paste operations.  This support is backed by system keypresses such as CTRL-C, CTRL-V and CTRL-X.</p></description>
    <source>
      <file path="class_text/">fields.cpp</file>
      <file path="class_text/">text.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Clear</name>
      <comment>Clears all content from the object.</comment>
      <description>
<p>You can delete all of the text information from a text object by calling the Clear action.  All of the text data will be deleted from the object and the graphics will be automatically updated as a result of calling this action.</p>
      </description>
    </action>

    <action>
      <name>Clipboard</name>
      <comment>Full support for clipboard activity is provided through this action.</comment>
    </action>

    <action>
      <name>DataFeed</name>
      <comment>Text data can be sent to a text object via data feeds.</comment>
      <description>
<p>A convenient method for appending data to a text object is via data feeds.  The Text class currently supports the DATA_TEXT and DATA_XML types for this purpose.  If the text contains return codes, the data will be split into multiple lines.</p>
<p>The surface that is associated with the Text object will be redrawn as a result of calling this action.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="AllocMemory">A call to AllocMemory() failed to create a new memory block.</error>
        <error code="Mismatch">The data type that was passed to the action is not supported by the Text class.</error>
      </result>
    </action>

    <action>
      <name>Disable</name>
      <comment>Disables object functionality.</comment>
    </action>

    <action>
      <name>Draw</name>
      <comment>Draws object graphics to drawable areas.</comment>
    </action>

    <action>
      <name>Enable</name>
      <comment>Enables object functionality.</comment>
    </action>

    <action>
      <name>Focus</name>
      <comment>Calling this action will activate keyboard input.</comment>
    </action>

    <action>
      <name>Hide</name>
      <comment>Hides a visible object from the view of the user.</comment>
    </action>

    <action>
      <name>SaveToObject</name>
      <comment>Use this action to save edited information as a text file.</comment>
    </action>

    <action>
      <name>ScrollToPoint</name>
      <comment>Scrolls a text object's graphical content.</comment>
    </action>

    <action>
      <name>Show</name>
      <comment>Makes an object visible to the user.</comment>
    </action>

  </actions>

  <methods>
    <method>
      <name>AddLine</name>
      <comment>Adds a new line to any row position in a text object.</comment>
      <prototype>ERROR txtAddLine(OBJECTPTR Object, LONG Line, CSTRING String, LONG Length)</prototype>
      <input>
        <param type="LONG" name="Line">The number of the line at which the text should be inserted.</param>
        <param type="CSTRING" name="String">The text that you want to add.</param>
        <param type="LONG" name="Length">The length of the string in bytes.</param>
      </input>
      <description>
<p>Lines can be added or inserted into a text object by using the AddLine() method.  You need to provide the text string that you wish to use, the line number that the text will be inserted into, and the length of the text string.</p>
<p>If you set the Text argument to NULL, then an empty string will be inserted into the line number.  If the Line argument is less than zero, then the string will be added to the end of the Text.  If the Length is set to -1, then the length will be calculated by counting the amount of characters in the Text argument.</p>
<p>If the new line is visible within the text object's associated surface, that region of the surface will be redrawn so that the new line is displayed.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="AllocMemory">A call to AllocMemory() failed to create a new memory block.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>DeleteLine</name>
      <comment>Deletes any line number.</comment>
      <prototype>ERROR txtDeleteLine(OBJECTPTR Object, LONG Line)</prototype>
      <input>
        <param type="LONG" name="Line">The line number that you want to delete.  If negative, the last line will be deleted.</param>
      </input>
      <description>
<p>This method deletes lines from a text object.  You only need to specify the line number to have it deleted.  If the line number does not exist, then the call will fail.  The text graphic will be updated as a result of calling this method.</p>
      </description>
      <result>
        <error code="Okay">The line was deleted.</error>
        <error code="Args">The Line value was out of the valid range.</error>
      </result>
    </method>

    <method>
      <name>GetLine</name>
      <comment>Returns the string content of any given line.</comment>
      <prototype>ERROR txtGetLine(OBJECTPTR Object, LONG Line, STRING Buffer, LONG Length)</prototype>
      <input>
        <param type="LONG" name="Line">The line number that you want to retrieve.  Must be zero or greater.</param>
        <param type="STRING" name="Buffer">Point this argument to a buffer space for the string result, or set to NULL if a buffer should be allocated by the method.</param>
        <param type="LONG" name="Length">Set this argument to the length of the buffer that you have provided, or set to NULL if a buffer is to be allocated.</param>
      </input>
      <description>
<p>This method can be used to get the string associated with any given line number.  You may choose to provide a buffer space for the method to output the string data to, or you may set the Buffer argument to NULL to have the method allocate a memory block containing the string.  If you are providing a buffer, make sure that the Length argument is set to the correct buffer size.  In the case of allocated buffers, the Length argument will be updated to reflect the length of the allocation (including the NULL byte).</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="OutOfRange">The line number that you specified was outside of the valid range of line numbers.</error>
        <error code="AllocMemory">The necessary amount of buffer space could not be allocated.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>ReplaceLine</name>
      <comment>Replaces the content of any text line.</comment>
      <prototype>ERROR txtReplaceLine(OBJECTPTR Object, LONG Line, CSTRING String, LONG Length)</prototype>
      <input>
        <param type="LONG" name="Line">The line number that will be replaced.</param>
        <param type="CSTRING" name="String">The text data that you want to use in replacing the line.</param>
        <param type="LONG" name="Length">The length of the String in bytes.</param>
      </input>
      <description>
<p>Any line within a text object can be replaced with new information by using the ReplaceLine() method.  You need to provide the text string that you wish to use, the number of the line that will be replaced, and the length of the text string.</p>
<p>If you set the String argument to NULL, then an empty string will replace the line number.  If the Length is set to -1, then the length of the new string will be calculated by counting the amount of characters in the String argument.</p>
<p>If the new line content is visible within the text object's associated surface, that region of the surface will be redrawn so that the new line content is displayed.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="AllocMemory">The memory required to add the text string to the list was unavailable.</error>
      </result>
    </method>

    <method>
      <name>SelectArea</name>
      <comment>Forces a user selection over a specific text area.</comment>
      <prototype>ERROR txtSelectArea(OBJECTPTR Object, LONG Row, LONG Column, LONG EndRow, LONG EndColumn)</prototype>
      <input>
        <param type="LONG" name="Row">The row from which the selection will start.</param>
        <param type="LONG" name="Column">The column from which the selection will start.</param>
        <param type="LONG" name="EndRow">The number of the row that will terminate the selection.</param>
        <param type="LONG" name="EndColumn">The number of the column that will terminate the selection.</param>
      </input>
      <description>
<p>If you would like to force a user selection over a specific text area, use this method.  Normally, user selections occur when the user moves a pointing device over a Text object to highlight an area of text.  By using this method, you will bypass that procedure by highlighting an area manually.</p>
<p>The area that you specify will be highlighted as if the user had selected that area him or herself.  The selection can be cancelled if the user performs an activity that causes the selection to be removed.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
      </result>
    </method>

    <method>
      <name>SetFont</name>
      <comment>Makes changes to the font face, style and size after initialisation.</comment>
      <prototype>ERROR txtSetFont(OBJECTPTR Object, CSTRING Face)</prototype>
      <input>
        <param type="CSTRING" name="Face">The name and specifications for the font face.</param>
      </input>
      <description>
<p>Call SetFont() to change the font face that is used for displaying text.  The string format follows the standard for font requests, e.g. <code>Open Sans:12:Bold Italic:#ff0000</code>.  Refer to the <class name="Font" index="Face">Font:Face</class> field for more details.</p>
<p>If the new face is invalid or fails to load, the current font will remain unchanged.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="CreateObject">A call to CreateObject() failed.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>Activated</name>
      <comment>Callback function for validating user input.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The Activated callback informs the client that the user wishes to activate the text widget, having pressed the enter key or its functional equivalent.  The function prototype is <code>Function(*Text)</code>.</p>
<p>If the callback rejects the current <field>String</field>, it is the client's choice as to how the user is informed.  This could involve resetting the string to its former value; displaying a passive warning; or using a dialog box. Where possible, it is recommended that passive warnings are displayed and more intrusive errors are only imposed after submission of the content.</p>
      </description>
    </field>

    <field>
      <name>AmtLines</name>
      <comment>The total number of lines stored in the object.</comment>
      <access read="R">Read</access>
      <type>INT</type>
    </field>

    <field>
      <name>Background</name>
      <comment>Optional background colour for text.  Set to NULL for no background.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>CharLimit</name>
      <comment>Limits the amount of characters allowed in a text object's string.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>Set the CharLimit field if you wish to limit the amount of characters that can appear in a text object's string.  The minimum possible value is 0 for no characters.</p>
<p>The CharLimit field is most useful for restricting the amount of characters that a user can enter in an editable text object.</p>
      </description>
    </field>

    <field>
      <name>CursorColour</name>
      <comment>The colour used for the text cursor.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>CursorColumn</name>
      <comment>The current column position of the cursor.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>CursorRow</name>
      <comment>The current line position of the cursor.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>Flags</name>
      <comment>Special flags that affect object behaviour.</comment>
      <access read="R" write="I">Read/Init</access>
      <type lookup="TXF">INT</type>
      <description>
<types lookup="TXF"/>
      </description>
    </field>

    <field>
      <name>Focus</name>
      <comment>Refers to the object that will be monitored for user focussing.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>OBJECTID</type>
      <description>
<p>By default, a text object will become active (i.e. capable of receiving keyboard input) when its surface container receives the focus.  If you would like to change this so that a Text becomes active when some other object receives the focus, refer to that object by writing its ID to this field.</p>
      </description>
    </field>

    <field>
      <name>Font</name>
      <comment>Points to a <class name="Font">Font</class> object that controls the drawing of text.</comment>
      <access read="R">Read</access>
      <type class="Font">*Font</type>
      <description>
<p>To set the face, colour and other attributes of a text object's graphics, you need to read the Font field and write your settings to the font object prior to initialisation.  For a list of all the fields that can be set, please refer to the documentation for the <class name="Font">Font</class> class.</p>
      </description>
    </field>

    <field>
      <name>Frame</name>
      <comment>Forces a text object's graphic to be drawn to a specific frame.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>If this field is set to a valid frame number, the text graphic will only be drawn when the frame of the container matches the Frame number in this field.  When set to 0 (the default), the text graphic will be drawn regardless of the container's frame number.</p>
      </description>
    </field>

    <field>
      <name>Highlight</name>
      <comment>Defines the colour used to highlight text.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>HistorySize</name>
      <comment>Defines the maximum number of records stored in the history buffer.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>If the history buffer is enabled, the HistorySize will indicate the maximum number of string records that can be stored in the text object for retrieval by the user.</p>
<p>The history buffer is enabled with the HISTORY option in the <field>Flags</field> field.</p>
      </description>
    </field>

    <field>
      <name>LineLimit</name>
      <comment>Restricts the total number of lines allowed in a text object.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>Set the LineLimit field to restrict the maximum number of lines permitted in a text object.  It is common to set this field to a value of 1 for input boxes that have a limited amount of space available.</p>
      </description>
    </field>

    <field>
      <name>Location</name>
      <comment>Identifies the location of a text file to load.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>To load a text file into a text object, set the Location field.  If this field is set after initialisation, the object will automatically clear its content and reload data from the location that you specify.</p>
<p>Viable alternatives to setting the Location involve loading the data manually and then setting the String field with a data pointer, or using the DataFeed action.</p>
      </description>
    </field>

    <field>
      <name>Origin</name>
      <comment>Similar to the Location field, but does not automatically load content if set.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>This field is identical to the Location field, with the exception that it does not update the content of a text object if it is set after initialisation.  This may be useful if the origin of the text data needs to be changed without causing a load operation.</p>
      </description>
    </field>

    <field>
      <name>SelectColumn</name>
      <comment>Indicates the column position of a selection's beginning.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>If the user has selected an area of text, the starting column of that area will be indicated by this field.  If an area has not been selected, the value of the SelectColumn field is undefined.</p>
<p>To check whether or not an area has been selected, test the AREASELECTED bit in the <field>Flags</field> field.</p>
      </description>
    </field>

    <field>
      <name>SelectRow</name>
      <comment>Indicates the line position of a selection's beginning.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>If the user has selected an area of text, the starting row of that area will be indicated by this field.  If an area has not been selected, the value of the SelectRow field is undefined.</p>
<p>To check whether or not an area has been selected, test the AREASELECTED bit in the <field>Flags</field> field.</p>
      </description>
    </field>

    <field>
      <name>String</name>
      <comment>Text information can be written directly to a text object through this field.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>To write a string to a text object, set this field.  Updating a text object in this fashion causes it to analyse the string information for return codes, which means the string data can be split into lines.  Any data that is in the text object when you set this field will be deleted automatically.  The graphics will also be redrawn accordingly.</p>
      </description>
    </field>

    <field>
      <name>TabFocus</name>
      <comment>Allows the user to hit the tab key to focus on other GUI objects.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>OBJECTID</type>
      <description>
<p>If this field points to another GUI object, the user will be able to use the tab key to move to that object when entering information into the text object. (Technically this causes the focus to be set to that object, and the text object will thus lose the focus.)</p>
<p>When a series of objects are 'chained' via tab focussing, the user will have an easier time moving between objects through use of the keyboard.</p>
      </description>
    </field>

    <field>
      <name>TextHeight</name>
      <comment>Indicator for the pixel height of all lines in a text object.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>The total height of all lines in a text object can be measured by reading the TextHeight.  The returned value compensates for vertical and gutter spacing.  Wordwrap will be taken into account if the WORDWRAP bit has been set in the Flags field.</p>
      </description>
    </field>

    <field>
      <name>TextWidth</name>
      <comment>Measures the pixel width of the text string.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>The width of the longest text line can be retrieved from this field. The result includes the LeftMargin and RightMargin field values if they have been defined.</p>
      </description>
    </field>

    <field>
      <name>TextX</name>
      <comment>The horizontal position for all text strings.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>TextY</name>
      <comment>The vertical position of the first text string.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>ValidateInput</name>
      <comment>Callback function for validating user input.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The ValidateInput callback allows the client to check that the current text string is valid.  It is called when the <action>Activate</action> action is used, which will typically occur when the enter key being pressed, or the text object loses the focus.</p>
<p>The function prototype is <code>Function(*Text)</code>.</p>
<p>If the callback rejects the current <field>String</field>, it is the client's choice as to how the user is informed.  This could involve resetting the string to its former value; displaying a passive warning; or using a dialog box. Where possible, it is recommended that passive warnings are displayed and more intrusive errors are only imposed after submission of the content.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="TXF" comment="Flags for the Text class.">
      <const name="AREA_SELECTED">This read-only flag is set automatically when the user has selected an area of text.</const>
      <const name="AUTO_CLEAR">Clears the text string when the enter key is pressed.</const>
      <const name="AUTO_SELECT">Automatically select all text if the text object receives the focus.</const>
      <const name="BACKGROUND">Enables a colour background behind the text.</const>
      <const name="COMMANDLINE">Synonym for AUTO_CLEAR | EDIT | HISTORY</const>
      <const name="DISABLED">This read-only flag is set if the object has been disabled through the Disable action.</const>
      <const name="EDIT">This flag must be enabled if the user is permitted to change the text string with the keyboard.</const>
      <const name="ENTER_TAB">Convert enter-key presses to the tab-key.</const>
      <const name="FORCE_CAPS">This flag forces the capitalisation of all text that is entered into the object.</const>
      <const name="GLOBAL_EDITING">Keeps the text object in edit mode regardless of user focus.</const>
      <const name="HISTORY">Enables historical browsing when the up/down cursor keys are used.  The number of historical lines stored can be set in the HistorySize field.</const>
      <const name="MULTI_SELECT">Allow the user to select/highlight multiple lines by holding the Ctrl key.</const>
      <const name="NO_SYS_KEYS">Disables system-keys that provide support for common key combinations such as Ctrl-C, Ctrl-X etc.</const>
      <const name="OVERWRITE">Turns on overwrite mode (if off, insert mode is enabled).</const>
      <const name="PASSWORD">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="PRESERVE_BKGD">Preserve-background disables fast scrolling for background preservation.</const>
      <const name="SECRET">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="SELECT">Synonym for MULTI_SELECT | SINGLE_SELECT</const>
      <const name="SINGLE_SELECT">Enables text selection (with or without edit mode).  If in line mode, a single click will allow the user to highlight any line.</const>
      <const name="STRETCH">If the font is scalable, the text string will be resized to fit inside the surface that contains it (i.e. no characters will be clipped).  This is acheived by recalculating the font's point size.</const>
      <const name="STR_TRANSLATE">Translate strings to the user's native language.</const>
      <const name="TAB_ENTRY">Pressing the tab key is treated the same as pressing enter.</const>
      <const name="TAB_KEY">If the tab key is pressed, print the tab character.</const>
      <const name="VARIABLE">This flag forces a text object to recalculate any variable references in its string data whenever a redraw occurs.  Such references are indicated through square brackets, e.g. [desktop.width].  Refer to the StrEvaluate() function in the Strings module for more information.</const>
      <const name="WORDWRAP">Enables word wrapping.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
