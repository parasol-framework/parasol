<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>View</name>
    <type>class</type>
    <module>Widget</module>
    <comment>The View class is used to display XML data in a number of possible formats to the user.</comment>
    <version>1</version>
    <id>7c9f9060</id>
    <idstring>ID_VIEW</idstring>
    <category>GUI</category>
    <include>modules/view.h</include>
    <copyright>Paul Manias 2003-2018</copyright>
    <description>
<p>The View is an interface class that facilitates the display and management of multiple items within a surface.  It is capable of displaying items in a number of formats, including a simple list, tree view and column view. The ability to sort data and handle different types of data such as date and time information is provided.  The View class is commonly used for file displays. Certain classes such as the <class name="FileView">FileView</class> are dependent on the functionality that it provides.</p>
<p>Items are created and stored within each view as a large XML statement and are managed via the <class name="XML">XML</class> class. This simplifies the creation and retrieval of item data and also allows you to develop hierarchies and tree structures for complex item arrangement.  The View class inherits the fields and functionality of the <class name="XML">XML</class> class, which you can use for scanning view items after they have been added.  The <class name="Font">Font</class> class is also inherited, allowing you to set details such as the default font face through the view.</p>
<p>When the user double-clicks on a view item, the object will activate itself.  Once activated, the view object will send Activate actions on to any children that have been initialised to the view.  This allows you to develop a response for user interaction with the view.  If the sensitive option has been enabled as one of the <field>Flags</field> attributes, activation will occur whenever the user selects an item (thus single clicks will be enough to cause object activation).</p>
<p>To respond to the user's selection of view items at run time, it is recommended that you monitor the <field>SelectedTag</field> field for changes.</p></description>
    <source>
      <file path="class_view/">view.c</file>
      <file path="class_view/">view_fields.c</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Performs the native action of the object.</comment>
    </action>

    <action>
      <name>Clear</name>
      <comment>Clears a view of all internal content and updates the display.</comment>
    </action>

    <action>
      <name>DataFeed</name>
      <comment>Items can be added to the view using data channels.</comment>
      <description>
<p>To add new items to a view, it is recommended that you use the data feed features.  New items can be added as raw text or as a series of XML statements.</p>
<p>When DATA_TEXT data is sent to a view, it will be added as a single item to the view list.  The client will need to send multiple fragments of text data if you need to more than one item using this method.</p>
<p>DATA_XML information is supported in an abstract fashion.  By default, each tag with a name of 'item' will be parsed as an independent element for display in the view.  Here is a simple example from the FileView class that represents a file:</p>
<pre>&lt;item icon="filetypes/audio"&gt;audio.wav
  &lt;size sort="0002106"&gt;2106&lt;/size&gt;
  &lt;date&gt;20031118 14:10:32&lt;/date&gt;
&lt;/item&gt;
</pre>
<p>In COLUMN and COLUMN_TREE modes, child items within each element (such as the size and date in the example) can be used to display content in the view columns.  Please refer to the <field>Columns</field> field for further information on this feature.</p>
<p>Special attributes may be set in item elements for interpretation by the view object.  The "icon" attribute defines the icon that should be displayed against the item when icon graphics are enabled in the view.  The "iconopen" attribute defines the icon for display when the element branch is open (applies to tree mode only).  The "custom" attribute is used in tree mode to indicate that there may be children in the element if the user wishes to expand it. It is normally used in conjunction with the <field>ExpandCallback</field> field.</p>
<p>The content of the item tag, in this case "audio.wav" is used as the item text.  An icon has been specified to accompany the item.  The size and date tags are special tag types that are specific to column mode and will be ignored when not in use.</p>
<p>By default, the name of an item will be pulled from the content in its tag (in the example, 'audio.wav').  You can change this behaviour and pull the name from an attribute if you set the <field>TextAttrib</field> field.</p>
<p>Finally, if item identification via the 'item' naming convention is too limiting or conflicts with your source data, set the <field>ItemNames</field> field to declare your own valid item names.</p>
      </description>
    </action>

    <action>
      <name>Disable</name>
      <comment>Disables the view.</comment>
    </action>

    <action>
      <name>Draw</name>
      <comment>Redraws the surfaces that hosts the view.</comment>
    </action>

    <action>
      <name>Enable</name>
      <comment>Enables a view that has been disabled.</comment>
    </action>

    <action>
      <name>GetVar</name>
      <comment>Special field types are available via variable field support.</comment>
      <description>
<p>The following variables are supported:</p>
<p>
<code>Selection(Index, Attrib)</code> Returns the content of the selection at the requested Index (the Index value may not exceed the value in the TotalSelected field).  The Attrib parameter is optional.  It should be specified if there is a certain XML attribute that needs to be read instead of the default item content.</p>
<p>
<code>Active(Attrib)</code> Returns the content of the most recently active item.  The most recently active item is defined as the one that the user has most recently clicked on or activated.  The item does not necessarily have to be selected.</p>
<p>For direct item retrieval, searching or other complex lookups, the <field>XML</field> object supports XPath lookups through the GetVar action.</p>
      </description>
    </action>

    <action>
      <name>Hide</name>
      <comment>Hides the view from the display.</comment>
    </action>

    <action>
      <name>Refresh</name>
      <comment>Refreshes the display.</comment>
      <description>
<p>The Refresh action updates the view so that its display surface reflects the data in the <field>XML</field> definition.  A delayed draw message will be posted to the surface as a result of calling this action.</p>
<p>The Refresh action is typically called following manual changes to <field>XML</field> content.</p>
      </description>
    </action>

    <action>
      <name>ScrollToPoint</name>
      <comment>Scrolls the graphical content of a view.</comment>
    </action>

    <action>
      <name>Show</name>
      <comment>Redisplays the view if it has been hidden.</comment>
    </action>

    <action>
      <name>Sort</name>
      <comment>Re-sorts XML data in the view when it has been manually altered.</comment>
    </action>

  </actions>

  <methods>
    <method>
      <name>CloseBranch</name>
      <comment>Closes open tree branches.</comment>
      <prototype>ERROR viewCloseBranch(OBJECTPTR Object, CSTRING XPath, LONG TagIndex)</prototype>
      <input>
        <param type="CSTRING" name="XPath">An XPath that targets the item to be collapsed.  Can be NULL if TagIndex is defined.</param>
        <param type="LONG" name="TagIndex">The tag index of the XML item that needs to be collapsed (XPath must be NULL or this parameter is ignored).  If XPath is NULL and TagIndex is -1, the currently selected tag will be targeted.</param>
      </input>
      <description>
<p>This method can be used when a view is using the TREE, GROUPTREE or COLUMNTREE <field>Style</field>.  It will close the open branch referred to in the XPath or TagIndex parameters.  The view is then redrawn.</p>
<p>If the branch is already closed, this method does nothing.</p>
      </description>
      <result>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="Search">A search routine in this function failed.</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>InsertItem</name>
      <comment>Inserts new items into the view's XML tree structure.</comment>
      <prototype>ERROR viewInsertItem(OBJECTPTR Object, CSTRING XPath, LONG TagIndex, LONG Insert, CSTRING XML)</prototype>
      <input>
        <param type="CSTRING" name="XPath">An XML path to the item that will be targeted as the insertion point.  Set to NULL to use a TagIndex instead of an XPath.</param>
        <param type="LONG" name="TagIndex">The tag index of the XML item that will be targeted as the insertion point (XPath must be NULL or this parameter is ignored).</param>
        <param type="LONG" name="Insert">The insertion mode - one of XMI_CHILD, XMI_PREV or XMI_NEXT.</param>
        <param type="CSTRING" name="XML">The XML string to be inserted.</param>
      </input>
      <description>
<p>The InsertItem method parses a new XML string and inserts the data at a specific point in the existing XML tree.  The tags can be inserted at a position indicated by an XPath, or through a TagIndex.</p>
<p>If XPath is NULL and the TagIndex is -1, the insertion point is the user's currently selected tag (if there is one). If the TagIndex is -2, the insertion point is the end of the tag list.</p>
<p>The view will be redrawn as a result of calling this method.</p>
      </description>
      <result>
        <error code="InvalidReference">The XPath was matched to a tag that was not a valid item.</error>
        <error code="OutOfRange">The TagIndex is invalid.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="Okay">Operation successful.</error>
        <error code="Search">The XPath did not match a valid tag.</error>
      </result>
    </method>

    <method>
      <name>InvertSelection</name>
      <comment>Inverts all currently selected items in the view.</comment>
      <prototype>ERROR viewInvertSelection(OBJECTPTR Object)</prototype>
      <description>
<p>This method will invert the selections in the view, so that selected items become deselected and all other items are selected.  The view will be redrawn as a result of calling this method.</p>
      </description>
      <result>
        <error code="Failed">Invert is not possible (e.g. if the SENSITIVE flag is set in the view).</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>ItemDimensions</name>
      <comment>Returns the graphical dimensions of an item in the view.</comment>
      <prototype>ERROR viewItemDimensions(OBJECTPTR Object, LONG TagIndex, LONG * X, LONG * Y, LONG * Width, LONG * Height)</prototype>
      <input>
        <param type="LONG" name="TagIndex">The index of the XML tag that will be analysed.</param>
        <param type="LONG *" name="X">The X coordinate of the item is returned here.</param>
        <param type="LONG *" name="Y">The Y coordinate of the item is returned here.</param>
        <param type="LONG *" name="Width">The width of the item is returned here.</param>
        <param type="LONG *" name="Height">The height of the item is returned here.</param>
      </input>
      <description>
<p>Retrieves the dimensions of an item that is in the view.  The coordinates are relative to the parent surface.</p>
      </description>
      <result>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>LowerItem</name>
      <comment>Moves an item towards the bottom of the view.</comment>
      <prototype>ERROR viewLowerItem(OBJECTPTR Object, CSTRING XPath, LONG TagIndex)</prototype>
      <input>
        <param type="CSTRING" name="XPath">An XPath that targets the item to be lowered.  Can be NULL if TagIndex is defined.</param>
        <param type="LONG" name="TagIndex">The tag index of the XML item that needs to be lowered (XPath must be NULL or this parameter is ignored).  If XPath is NULL and TagIndex is -1, the currently selected tag will be targeted.</param>
      </input>
      <description>
<p>Moves an item down past the next item in the list.  The view will be redrawn using a delayed redraw.</p>
      </description>
      <result>
        <error code="Search">A search routine in this function failed.</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>OpenBranch</name>
      <comment>Automates the expansion of closed tree branches.</comment>
      <prototype>ERROR viewOpenBranch(OBJECTPTR Object, CSTRING XPath, LONG TagIndex, LONG Parents)</prototype>
      <input>
        <param type="CSTRING" name="XPath">The XML path of the item to expand, or NULL if expanding by TagIndex.</param>
        <param type="LONG" name="TagIndex">The tag index of the XML item to expand (XPath must be NULL, as TagIndex is ignored if XPath is set).  If XPath is NULL and TagIndex is &amp;lt; 0, the currently selected tag will be expanded.</param>
        <param type="LONG" name="Parents">Set to TRUE if parent branches should be expanded.</param>
      </input>
      <description>
<p>If a view is in tree mode, individual tree branches can be manually expanded by calling this method.  The XPath or TagIndex parameter must indicate the branch that needs to be opened.  If the branch is already open, this method does nothing.</p>
<p>Parent branches will not be expanded unless the Parents parameter is set to TRUE.</p>
      </description>
      <result>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="Search">A search routine in this function failed.</error>
        <error code="Okay">The tag was found and expanded (if already expanded, ERR_Okay is still returned).</error>
        <error code="Args">Invalid arguments passed to function.</error>
      </result>
    </method>

    <method>
      <name>RaiseItem</name>
      <comment>Moves an item towards the top of the view.</comment>
      <prototype>ERROR viewRaiseItem(OBJECTPTR Object, CSTRING XPath, LONG TagIndex)</prototype>
      <input>
        <param type="CSTRING" name="XPath">An XPath that targets the item to be raised.  Can be NULL if TagIndex is defined.</param>
        <param type="LONG" name="TagIndex">The tag index of the XML item that needs to be raised (XPath must be NULL or this parameter is ignored).  If XPath is NULL and TagIndex is -1, the currently selected tag will be targeted.</param>
      </input>
      <description>
<p>Moves an item up past the previous item in the list.  The view will be redrawn using a delayed redraw.</p>
      </description>
      <result>
        <error code="Search">A search routine in this function failed.</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>RemoveItem</name>
      <comment>Removes an item from the view.</comment>
      <prototype>ERROR viewRemoveItem(OBJECTPTR Object, CSTRING XPath, LONG TagIndex)</prototype>
      <input>
        <param type="CSTRING" name="XPath">An XML path that targets an item to be removed, or NULL if TagIndex is defined.</param>
        <param type="LONG" name="TagIndex">The tag index of an XML item to remove (XPath must be NULL or this parameter is ignored).  If XPath is NULL and TagIndex is -1, the currently selected tag will be removed.</param>
      </input>
      <description>
<p>Use the RemoveItem() method to remove an item from the view.  The view will be redrawn as a result of calling this method.</p>
      </description>
      <result>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>RemoveTag</name>
      <comment>Removes an XML tag without updating the view (for optimisation only).</comment>
      <prototype>ERROR viewRemoveTag(OBJECTPTR Object, LONG TagIndex, LONG Total)</prototype>
      <input>
        <param type="LONG" name="TagIndex">The tag index of the XML item that must be removed.</param>
        <param type="LONG" name="Total">The total number of sibling items to remove.  The minimum value is 1.</param>
      </input>
      <description>
<p>Use the RemoveTag() method to delete an XML tag without updating the view display.  This method is provided as a means of optimising the deletion of multiple view items followed by a <action>Refresh</action>.  It replaces the XML version of this method, RemoveXMLTag(). By using this method, XML tags can be correctly deleted without having an adverse affect on the view (e.g. if the tag is associated with an icon, the icon will be de-allocated from the system).</p>
      </description>
      <result>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>RevealItem</name>
      <comment>Checks the visibility of an item, scrolling it into view if it is partially or fully hidden.</comment>
      <prototype>ERROR viewRevealItem(OBJECTPTR Object, LONG TagIndex)</prototype>
      <input>
        <param type="LONG" name="TagIndex">The tag index of the item that needs to be viewable.</param>
      </input>
      <description>
<p>Use the RevealItem method to ensure that an item within the view is fully visible.  If the item is partially or fully hidden, the item will be scrolled into view so that the user can see it without restriction.</p>
<p>If TagIndex is -1, the user's currently selected tag will be chosen.  If TagIndex is -2, the last item in the list is targeted.  All other TagIndex values must be a valid lookup within the XML tag list.</p>
      </description>
      <result>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="InvalidReference">The TagIndex does not refer to a valid XML item.</error>
        <error code="OutOfRange">The TagIndex is not within the valid range.</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>SelectAll</name>
      <comment>Selects all items in the view for the user.</comment>
      <prototype>ERROR viewSelectAll(OBJECTPTR Object)</prototype>
      <description>
<p>This method will select all items in the view, as if the user had selected them himself.  The view will be redrawn as a result of calling this method.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>SelectItem</name>
      <comment>Manually select items for the user.</comment>
      <prototype>ERROR viewSelectItem(OBJECTPTR Object, CSTRING XPath)</prototype>
      <input>
        <param type="CSTRING" name="XPath">The XPath query that will be used to select the item.</param>
      </input>
      <description>
<p>The SelectItem method is used to manually select items in the view, highlighting them for the user.  An XPath is used to select the desired item (see the <class name="XML">XML</class> class for more information).</p>
<p>In the event that multiple tags could match the given parameters, only the first tag will be selected by the selection routine.  If there is a high probability that the data strings are repeated, you should implement a unique ID for each tag and use that for the selection of specific tags.</p>
<p>Note that selections are inclusive with other selections when in MULTISELECT mode. Use the <method>SelectNone</method> method first if you want the selection to be the only selected item in the list.</p>
      </description>
      <result>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="Okay">The item was selected successfully.</error>
      </result>
    </method>

    <method>
      <name>SelectNone</name>
      <comment>Deselects all currently selected items.</comment>
      <prototype>ERROR viewSelectNone(OBJECTPTR Object)</prototype>
      <description>
<p>This method will deselect all items in the view, as if the user had deselected them himself.  The view will be redrawn as a result of calling this method.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>SetItem</name>
      <comment>Changes the attributes of any item in the view.</comment>
      <prototype>ERROR viewSetItem(OBJECTPTR Object, CSTRING XPath, LONG TagIndex, CSTRING Tag, CSTRING Attrib, CSTRING Value)</prototype>
      <input>
        <param type="CSTRING" name="XPath">An XML path to the item that is to be set.  Set this value to NULL if TagIndex is defined.</param>
        <param type="LONG" name="TagIndex">The index of the XML tag that is to be set.  The XPath must be set to NULL.  Ignored if the XPath is set to any other value.</param>
        <param type="CSTRING" name="Tag">The name of the child tag that is to be set within the item.  Set to NULL for the default tag.</param>
        <param type="CSTRING" name="Attrib">The name of the attribute that is to be set in the XML tag.  May be NULL to set the tag's content.</param>
        <param type="CSTRING" name="Value">The value to set against the attribute.</param>
      </input>
      <description>
<p>Use the SetItem() method to change the attributes of items that are in the view.  This method is primarily for script usage, as it can be faster to manipulate the XML object directly and use the Refresh action than to make multiple calls to this method.</p>
<p>In order to call SetItem() successfully, you should have an awareness of the XML tag structure that you have used for creating the view items. You will need to pass the ID of the item that you want to update (thus you must have used the 'id' parameter when constructing the original XML tags), the name of tag to change (NULL is acceptable for the default) and the attribute to set (NULL is acceptable to change the XML content that represents the item data). The new string to be set is defined in the Value parameter.</p>
<p>If you update the content of an item by passing a NULL Attrib value, then a completely redraw of the view will occur so that the display accurately reflects the view data.</p>
      </description>
      <result>
        <error code="Search">The index, tag and/or attrib values did not lead to a match.</error>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
      </result>
    </method>

    <method>
      <name>SortColumn</name>
      <comment>Sorts the view by column.</comment>
      <prototype>ERROR viewSortColumn(OBJECTPTR Object, CSTRING Column, LONG Descending)</prototype>
      <input>
        <param type="CSTRING" name="Column">The name of the column to sort by.</param>
        <param type="LONG" name="Descending">Set to TRUE if the sort should be descending.</param>
      </input>
      <description>
<p>The SortColumn routine will sort the View on the column name that is indicated.  The sort will be ascending by default, which can be reversed by setting the Descending parameter to TRUE.  The View will automatically redraw itself to reflect the newly sorted content.</p>
<p>This method will fail if the referenced column does not exist.  Use a Column value of NULL to sort on item content by default (useful if no columns have been defined for the view).</p>
<p>Sorting can be disabled if the NOSORTING flag is defined in the <field>Flags</field> field.</p>
      </description>
      <result>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="Search">The referenced column could not be found.</error>
        <error code="Okay">The column was sorted successfully.</error>
        <error code="Args">Invalid arguments passed to function.</error>
      </result>
    </method>

    <method>
      <name>SortColumnIndex</name>
      <comment>Sorts the view by column (index).</comment>
      <prototype>ERROR viewSortColumnIndex(OBJECTPTR Object, LONG Column, LONG Descending)</prototype>
      <input>
        <param type="LONG" name="Column">The index of the column to sort by (indexes start from zero).</param>
        <param type="LONG" name="Descending">Set to TRUE if the sort should be descending.</param>
      </input>
      <description>
<p>The SortColumnIndex() method will sort the view by the column index that is indicated.  The sort will be ascending by default.  This can be reversed by setting the Descending parameter to TRUE.  The view will automatically redraw itself to reflect the newly sorted content.</p>
<p>This method will fail if the referenced index is invalid.  Both hidden and visible columns are taken into account when determining the column that the index refers to.</p>
      </description>
      <result>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>ActiveTag</name>
      <comment>Indicates the tag index of the last item to have its state altered.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The ActiveTag field provides a method for retrieving the tag index of the last item to have its state altered.  A view item is deemed to have had its state altered when it has been selected or de-selected.  This field can return a value of -1 if no items have had their state altered, or if the view has been cleared.  The index can be used to lookup the tag structure in the view's XML Tags list.</p>
      </description>
    </field>

    <field>
      <name>BorderOffset</name>
      <comment>Sets the X, Y, XOffset and YOffset to a single value.</comment>
      <access write="S">Set</access>
      <type>INT</type>
      <description>
<p>This field is provided for the convenience of setting the X, Y, XOffset and YOffset fields in one hit.  The value that is specified will be written to all of the aforementioned fields as a fixed pixel-width value.</p>
      </description>
    </field>

    <field>
      <name>ButtonBackground</name>
      <comment>The background colour to use for buttons.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>This field defines the background colour to use for buttons within the view (such as for column headers).  Blending is supported if the alpha component is used.  This field is complemented by the <field>ButtonHighlight</field>, <field>ButtonShadow</field> and <field>ButtonThickness</field> fields.</p>
      </description>
    </field>

    <field>
      <name>ButtonHighlight</name>
      <comment>Defines the highlight colour of buttons.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>When drawing buttons within the view (such as for column headers), the ButtonHighlight will define the colour at the top and left edges of the border, with a pixel width of <field>ButtonThickness</field>.  If highlighting is not desired, set the alpha component of this colour to zero.</p>
      </description>
    </field>

    <field>
      <name>ButtonShadow</name>
      <comment>Defines the shadow colour of buttons.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>When drawing buttons within the view (such as for column headers), the ButtonShadow will define the colour at the right and bottom edges of the border, with a pixel width of <field>ButtonThickness</field>.  If a shadow is not desired, set the alpha component of this colour to zero.</p>
      </description>
    </field>

    <field>
      <name>ButtonThickness</name>
      <comment>Defines the pixel thickness of button borders.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The pixel thickness of button borders is defined here, in conjunction with the colours <field>ButtonHighlight</field> and <field>ButtonShadow</field>.  If a border is not desired, this field must be set to zero.</p>
      </description>
    </field>

    <field>
      <name>CellClick</name>
      <comment>A callback for receiving notifications of clicks in column cells.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>This callback can be used when a View is using the COLUMN or COLUMNTREE style modes.  It allows the client to receive a notification when the user clicks on a column cell.  The synopsis for the callback function is <code>ERROR Callback(objView *View, LONG TagIndex, LONG Column, LONG Button, LONG X, LONG Y)</code></p>
<p>The clicked cell is converted to the relevant tag and referenced in the TagIndex parameter.  The Column is the index of the column that was clicked; Button is the type associated with the click (e.g. JET_LMB); X and Y are the position of the click relative to the cell's top-left position.</p>
<p>The tag and any associated children can be modified by the callback function.  On return, the view will check if the tag was modified and may refresh the item with your changes.  Do not modify the XML object or any other tags, as this is likely to result in unexpected errors.</p>
<p>If the clicked cell is a checkbox, the relevant tag value will be flipped between 0 and 1 to change the state of the checkbox.  Be aware that this process occurs after the CellClick function has been called and not before. If the tag is altered however, the value flip does not occur at all (it is assumed that the client is controlling the tag values manually).</p>
      </description>
    </field>

    <field>
      <name>ColAltBackground</name>
      <comment>Enables alternative colour switching with <field>ColBackground</field>.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>This field is used when the <field>Style</field> is either COLUMN, COLUMNTREE, LIST or LONG_LIST.</p>
<p>When a colour is defined in this field, alternative colour switching will be enabled in conjunction with <field>ColBackground</field>.  For every uneven item (line) number, ColAltBackground will be used instead of <field>ColBackground</field> for that item.</p>
      </description>
    </field>

    <field>
      <name>ColBackground</name>
      <comment>Defines the colour of the background.  Alpha blending is supported.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>ColBkgdHighlight</name>
      <comment>Defines the background colour to use when an item is highlighted.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>If defined, this field changes the background colour of items that are marked as highlighted.  If an item is also marked as selected, then the final colour is interpolated with <field>ColSelect</field>.</p>
      </description>
    </field>

    <field>
      <name>ColBorder</name>
      <comment>If defined, this colour is drawn around the edge of the view.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>This colour is not set by default.  If it is defined, the colour will be drawn around the edge of the view, as a rectangle of 1 pixel width in size.</p>
      </description>
    </field>

    <field>
      <name>ColBranch</name>
      <comment>Defines the colour of tree branch lines when the tree style is enabled.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>ColButtonFont</name>
      <comment>This colour is used for fonts drawn in column buttons in the top row.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>ColGroupShade</name>
      <comment>Applicable to the GROUP_TREE <field>Style</field> only, draw this colour in the unused area of the tree.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>When using the GROUP_TREE <field>Style</field>, there will often be an area at the bottom of the tree that contains no items. If a colour is defined in ColGroupShade, then the empty area will be filled with this colour.  This makes it clear to the user that the area is unused.</p>
      </description>
    </field>

    <field>
      <name>ColHairline</name>
      <comment>This colour will be used when drawing table and column hairlines.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>This colour is used when drawing table and column hairlines.  It is strongly recommended that a light colour is used that is barely visible against the background.</p>
      </description>
    </field>

    <field>
      <name>ColHighlight</name>
      <comment>Defines the colour when an item is selected via mouse-over or user focus.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>The ColHighlight field defines the colour that is used when the user rolls the mouse pointer over an item, or uses the cursor keys to change the item focus.  The colour must be in hexadecimal or CSV format - for example to create a pure red colour, a setting of "#ff0000" or "255,0,0" would be valid.</p>
      </description>
    </field>

    <field>
      <name>ColItem</name>
      <comment>The default font colour to use for view items.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>The ColItem field defines the font colour that is applied to new items.  The default is black.  Items may override the default by using the colour attribute in their XML definition.</p>
<p>The colour string must be in hexadecimal or CSV format - for example to create a pure red colour, a setting of "#ff0000" or "255,0,0" would be valid.</p>
      </description>
    </field>

    <field>
      <name>ColSelect</name>
      <comment>Defines the background colour for selected items.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>ColSelectFont</name>
      <comment>The colour to use for the font in a selected item.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>ColSelectHairline</name>
      <comment>The colour to use for hairlines when an item is selected.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>The ColSelectHairline field defines the colour that is used for hairlines when an item is selected.  The colour must be in hexadecimal or CSV format - for example to create a pure red colour, a setting of "#ff0000" or "255,0,0" would be valid.</p>
      </description>
    </field>

    <field>
      <name>ColTitleFont</name>
      <comment>This colour value will apply to title bar fonts when the view is using the group-tree <field>Style</field>.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>ColumnString</name>
      <comment>String defining the column headers</comment>
      <access>-/-</access>
      <type>STRING</type>
    </field>

    <field>
      <name>Columns</name>
      <comment>Active columns for 'column mode' may be set via this field.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>When a view object is in column or tree mode (as defined in the <field>Style</field> field), you must specify the XML tags that should be represented as columns.  Failure to register any column names means that only the default column will be displayed.  Consider the following XML structure:</p>
<pre>&lt;file&gt;
  readme.txt
  &lt;size&gt;19431&lt;/size&gt;
  &lt;date&gt;20030503 11:53:19&lt;/date&gt;
&lt;/file&gt;
</pre>
<p>The size and date tags will need to be registered as columns in order for the view object to display them.  To show them in the order specified, we can pass the string "size(text:'File Size', width:140, type:bytesize); date(text:Date, width:180, type:date)" to the Columns field. The optional information that we've specified in the brackets tells the view object the column name, the default pixel width of the column and the display type.</p>
<p>Currently recognised data types are as follows:</p>
<types>
<type name="bytesize">The value is a number that can be represented in bytes, kilobytes, megabytes or gigabytes.</type>
<type name="numeric">Can be used for any type of number (integer or floating point).</type>
<type name="checkbox">The value must be expressed as '1' or 'Y' to draw a checkmark (on).  Any other value will draw a faded checkmark (off).  Note that if the relevant tag is not present in the item, it is not considered markable and therefore no checkmark indicator will be drawn.</type>
<type name="colour">Assign a colour to the column.  The colour can be specified in CSV 'red,green,blue' or hex '#RRGGBB' format.</type>
<type name="date">The date type can be used if the values are stored in the date format "YYYYMMDD HH:MM:SS".</type>
<type name="rightalign">Align all text to the right of the column.</type>
<type name="seconds">The value is given in seconds.  The result will be formatted depending on the size of the value - anything over 60 seconds will be formatted as digital time, split into minutes or hours as necessary.</type>
<type name="showicons">Icons are to be shown in this column, to the left of each item name.  The 'icon' attribute will need to be declared in each tag assigned to this column.</type>
<type name="variant">The default type - the value is treated as a string.</type>
</types>
<p>If you would like to change the settings of the default column, e.g. to move it to a different position, you may refer to it using a column name of 'default'.</p>
<p>By default, the width of a column will never be adjusted if it already exists in the view when you set the Columns field.  You can override this to ensure that the width is reset by adding the 'reset' parameter to the column(s) in question.  Alternatively, use the WIDTH_RESET flag to always reset column sizes.</p>
      </description>
    </field>

    <field>
      <name>ContextMenu</name>
      <comment>Reference to a menu that will be displayed for contextual actions.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>OBJECTPTR</type>
      <description>
<p>This field can be set to a <class name="Menu">Menu</class> or <class name="Surface">Surface</class> that will be automatically displayed when the user clicks the alternative mouse button while over the view.  The menu will be positioned to appear immediately under the clicked coordinates.</p>
      </description>
    </field>

    <field>
      <name>DateFormat</name>
      <comment>Sets the format to use when displaying date types.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Use the DateFormat field to define how dates should be displayed when they are used in columns.  For information on how to set valid date formats, refer to the StrFormatDate() function in the Strings module.</p>
<p>If you do not set this field then the user's preferred date format will be used.</p>
      </description>
    </field>

    <field>
      <name>Document</name>
      <comment>If document mode is enabled, this field must refer to a Document object for data processing and display.</comment>
      <access read="R" write="S">Read/Set</access>
      <type class="Document">*Document</type>
      <description>
<p>If document mode has been enabled in the <field>Style</field> field, a Document object must be referenced in this field for the processing and display of data from the view object.  The Document object must be configured to use a template that will process data from the view.  The Surface field of the document must also refer to the Surface field of the view, or an error will be returned.</p>
<p>It is recommended that you do not initialise the document object as the view may need to perform its own pre-initialisation procedures on it. The view will automatically initialise the document object when it is ready to do so.</p>
      </description>
    </field>

    <field>
      <name>DragItemCount</name>
      <comment>Reflects the number of items being dragged from the view.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>When the user initiates a drag and drop operation from the view, the DragItemCount field will indicate the total number of items that are being dragged.  An array of tag ID's for the dragged items can be extracted from the <field>DragItems</field> field.</p>
<p>The view retains the DragItems array until the next drag and drop operation occurs.  You can manually clear the item array by setting the DragItemCount field with a zero value.</p>
      </description>
    </field>

    <field>
      <name>DragItems</name>
      <comment>Array of tag ID's representing dragged items.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>LONG []</type>
      <description>
<p>When the user initiates a drag and drop operation from the view, the DragItems field will contain an array of tag ID's that represent each item that is being dragged. The array remains valid up until the completion of the drag and drop operation.  The <field>DragItemCount</field> field reflects the number of items held in the array.</p>
<p>The view retains the DragItems array until the next drag and drop operation occurs.  You can manually clear the item array by setting the DragItemCount field with a zero value.</p>
      </description>
    </field>

    <field>
      <name>DragSource</name>
      <comment>Refers to the source object that is used during for drag and drop operations.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>OBJECTID</type>
      <description>
<p>When initiating new drag and drop operations, the DragSource value will be used as the Source parameter when calling <function module="Display">StartCursorDrag</function>.  If this field is set to zero then the view will reference itself in the Source parameter.</p>
      </description>
    </field>

    <field>
      <name>ExpandCallback</name>
      <comment>A callback for receiving notifications when tree branches are expanded.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>Set this field with a function reference to receive notifications when tree branches are expanded in the view.  This will only work when in TREE and GROUP_TREE style modes.  The synopsis for the callback function is <code>ERROR Callback(objView *View, LONG TagIndex)</code>.</p>
<p>The index of the expanded tag is given in the TagIndex parameter, which you may use to add more items to the XML tree. On return, the view will refresh the tree and redraw the display to reflect your changes.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="S">Read/Set</access>
      <type lookup="VWF">INT</type>
      <description>
<types lookup="VWF"/>
      </description>
    </field>

    <field>
      <name>Focus</name>
      <comment>References the surface that must be used for user focus monitoring.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>OBJECTID</type>
      <description>
<p>By default, the view will determine its user focus state by monitoring its own surface for user interaction.  If another surface should be monitored (such as the application window) then it must be referenced here prior to initialisation.  It is strongly recommended that the monitored surface is a parent of the view object.</p>
<p>Focus monitoring has a direct impact on keyboard input handling and the look and feel of the view - for example, clicking the view area enables the arrow and enter keys for keyboard interaction.</p>
      </description>
    </field>

    <field>
      <name>Font</name>
      <comment>Refers to the default font that renders text within the view.</comment>
      <access read="R">Read</access>
      <type class="Font">*Font</type>
      <description>
<p>The default font object that is used to draw text throughout the view is referenced via this field.  Configuring the font prior to initialisation is encouraged, however making changes post-initialisation is likely to cause issues. If the font settings need to be modified at run-time then consider recreating the view from scratch to eliminate the odds of conflict.</p>
      </description>
    </field>

    <field>
      <name>GfxFlags</name>
      <comment>Optional graphics flags.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="VGF">INT</type>
      <description>
<p>This field provides special options that affect the look of the view when it is rendered.  It is strongly recommended that these options are defined in the style template rather than set by the client directly.</p>
<types lookup="VGF"/>
      </description>
    </field>

    <field>
      <name>GroupFace</name>
      <comment>The font to use for group headers when the GROUP_TREE style is enabled.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>The GroupFace field defines the font face that is used for group headers when the GROUP_TREE style is enabled.  If this field is not set, the default font face is used for the group headers.</p>
      </description>
    </field>

    <field>
      <name>GroupHeight</name>
      <comment>Defines the height of group headers, in pixels.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>This field applies when the view is using the GROUP_TREE <field>Style</field>  It defines the pixel height of the group headers.</p>
      </description>
    </field>

    <field>
      <name>HScroll</name>
      <comment>If scrolling is required, this field must refer to a horizontal scroll bar.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>OBJECTPTR</type>
      <description>
<p>If you want to attach a horizontal scrollbar to a view object, set this field to an object belonging to the Scroll class.  So long as the Scroll object is set up to provide full scrollbar functionality, the user will be able to scroll the text display along the horizontal axis.</p>
      </description>
    </field>

    <field>
      <name>HSpacing</name>
      <comment>Specifies the minimum amount of horizontal white-space that will distance each item within the view.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>Specifies the minimum amount of horizontal white-space that will distance each item within the view.  The value is measured in pixels.</p>
      </description>
    </field>

    <field>
      <name>HighlightTag</name>
      <comment>Refers to the current item that the user has highlighted.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>The HighlightTag field refers to the tag index of the currently highlighted item.  An item is 'highlighted' if the user's pointer is hovering over it.  If no item is highlighted then this field defaults to -1.</p>
<p>The index value can be used to lookup the item in the view's <field>XML</field> Tags array.</p>
      </description>
    </field>

    <field>
      <name>IconFilter</name>
      <comment>Sets the preferred icon filter.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Setting the IconFilter will change the default graphics filter used for loading all future icons.  Existing loaded icons are not affected by the change.</p>
      </description>
    </field>

    <field>
      <name>IconSize</name>
      <comment>Indicates the default icon size in each item.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>The default pixel size of the icons that are rendered within items is defined here.  The default size is 16, and the size cannot be reduced below this value for legibility reasons.  If icons are not required, please set NO_ICONS in <field>Flags</field>.</p>
      </description>
    </field>

    <field>
      <name>IconTheme</name>
      <comment>Sets the preferred icon theme.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Setting the IconTheme will define the default theme used for loading all future icons.  Existing loaded icons are not affected by the change.</p>
      </description>
    </field>

    <field>
      <name>ItemNames</name>
      <comment>Identifies the names of tags in the XML tree that must be treated as items.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>Tag names that need to be recognised as items in the view's XML data must be declared in this field.  This is done by supplying a wildcard string that OR's all possible item names together.  For example <code>folder|file</code>.</p>
<p>The default setting is 'item'.  Use of wildcard parameters such as the asterisk and question mark are permitted, as in the StrCompare() function.</p>
      </description>
    </field>

    <field>
      <name>MaxItemWidth</name>
      <comment>Limits item width when using the LIST or LONG_LIST <field>Style</field>.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>If this field is set when using the LIST or LONG_LIST <field>Style</field>, the width of each item will not exceed the indicated value.</p>
      </description>
    </field>

    <field>
      <name>SelectCallback</name>
      <comment>A callback for receiving notifications when tree branches are expanded.</comment>
      <access read="G" write="S">Get/Set</access>
      <type lookup="SLF">FUNCTION</type>
      <description>
<p>Set this field with a reference to a callback function to receive notifications related to item selection.  The synopsis for the callback function is <code>ERROR SelectCallback(objView *View, LONG Flags, LONG TagIndex)</code>.</p>
<p>The index of the changed item is given in the TagIndex parameter.  If the index is -1, then no tags are selected (i.e. a deselection has occurred).  Flags provide additional information as to the type of selection that has occurred, as in the following table:</p>
<types lookup="SLF"/>
      </description>
    </field>

    <field>
      <name>SelectedTag</name>
      <comment>Indicates the tag index of the most recently selected item.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The SelectedTag field provides a method for retrieving the tag index of the most recently selected item.  If no selection is active then this field will return a value of -1.  The resulting index can be used to lookup the tag structure in the view's XML Tags list.</p>
      </description>
    </field>

    <field>
      <name>SelectedTags</name>
      <comment>Returns an array of tag indexes for all currently selected items.</comment>
      <access read="G">Get</access>
      <type>LONG []</type>
      <description>
<p>A complete list of currently selected items can be retrieved by reading the SelectedTags field.  The data is returned as an array of 32-bit tag indexes, terminated with a value of -1.  An error code will be returned if there are no currently selected items.</p>
<p>The array remains valid up until the next time that the SelectedTags field is read.</p>
      </description>
    </field>

    <field>
      <name>Selection</name>
      <comment>Reflects the string content of the currently selected item.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The Selection field provides a method for retrieving the content of the currently selected item.  If no selection is active then this field will return an error code and a NULL pointer.</p>
<p>An item can be selected manually by writing a valid item string to this field.  The string must refer to the name of an item in the default column of the view.</p>
      </description>
    </field>

    <field>
      <name>SelectionIndex</name>
      <comment>Indicates the index number of the currently selected item.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The SelectionIndex field provides a method for retrieving the index of the most recently selected item.  If no selection is active then this field will return a value of -1.</p>
<p>You can also manually select an item by writing a valid index number to this field.  Changing the index will cause the item to become highlighting and the view's children will be activated automatically to inform them of the change.  An error will be returned if the index number is outside of the available range.  An index of -1 will deselect any currently selected items.</p>
<p>Note that the index cannot be used as a lookup in the XML TagList array (use the <field>SelectedTag</field> field instead).</p>
      </description>
    </field>

    <field>
      <name>Style</name>
      <comment>The style of view that is displayed to the user is configured here.</comment>
      <access read="R" write="S">Read/Set</access>
      <type lookup="VIEW">INT</type>
      <description>
<p>The style of the view display can be configured by writing this field. You should set this field on initialisation, and may change it at any time if the user wishes to switch to a different style.</p>
<types lookup="VIEW"/>
      </description>
    </field>

    <field>
      <name>Template</name>
      <comment>Specify an alternative graphics style by name.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>The Template can be set prior to initialisation to request a look and feel other than the default.  The style name must be declared in the system installed style file, otherwise setting this field does nothing.  No error is returned in the event that a problem occurs with the requested style.</p>
      </description>
    </field>

    <field>
      <name>TextAttrib</name>
      <comment>Declares the XML attribute to use when drawing the text for an item.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>By default, the text drawn for each item in a view's XML tree is pulled from the content that is present within each item's XML tag.  This condition is upheld so long as TextAttrib is set to NULL.</p>
<p>If the TextAttrib field is set to a string value, that string will identify the name of a tag attribute that must be used when drawing item text.  If the named attribute is not declared in the tag for a given item, the content of that tag will be used instead (if content is present).</p>
      </description>
    </field>

    <field>
      <name>TotalItems</name>
      <comment>The total number of items listed in the view.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>This read-only field reflects the total number of items listed in the view.  It is automatically updated to remain in sync with the <field>XML</field> data at all times.</p>
      </description>
    </field>

    <field>
      <name>TotalSelected</name>
      <comment>The total number of currently selected items.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>This readable field will tell you the total number of items that are currently selected by the user.</p>
      </description>
    </field>

    <field>
      <name>VScroll</name>
      <comment>If scrolling is required, use this field to refer to a vertical scroll bar.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>OBJECTPTR</type>
      <description>
<p>If you want to attach a vertical scrollbar to a view object, set this field to an object belonging to the Scroll class. So long as the Scroll object is configured to provide full scrollbar functionality, the user will be able to scroll the text display along the vertical axis.</p>
      </description>
    </field>

    <field>
      <name>VSpacing</name>
      <comment>Specifies the minimum amount of vertical whitespace that will distance each item within the view.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>Specifies the minimum amount of vertical whitespace that will distance each item within the view.  The value is measured in pixels.</p>
      </description>
    </field>

    <field>
      <name>VarDefault</name>
      <comment>Defines the default value to return when GetVar() fails.</comment>
      <access write="S">Set</access>
      <type>STRING</type>
      <description>
<p>VarDefault defines the default string value that will be returned when GetVar() fails to find a requested item.</p>
      </description>
    </field>

    <field>
      <name>XML</name>
      <comment>View items are stored and managed in this <class name="XML">XML</class> object.</comment>
      <access read="R">Read</access>
      <type class="XML">*XML</type>
      <description>
<p>The content of the view is managed by the <class name="XML">XML</class> object referenced by this field.  It is conceivable that any element in the XML object can be displayed as an item if its name matches the <field>ItemNames</field> field.  By default, elements with a name of 'item' will be identified as such unless <field>ItemNames</field> is modified.</p>
<p>The XML content of each matching item will be used for rendering the item name.  If this is undesirable, the <field>TextAttrib</field> field can be specified for extracting the name from one of the item's attributes.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="VWF" comment="View flags.">
      <const name="WIDTH_RESET">Always reset column widths when the Columns field is set.</const>
      <const name="NO_SORTING">No user sorting, e.g. in column mode.</const>
      <const name="SENSITIVE">Sensitive mode will activate child objects when the user single-clicks with the mouse (by default, child activation only occurs with double-clicks).</const>
      <const name="NO_ICONS">Do not load or show any icons.</const>
      <const name="NOTIFY_ON_CLEAR">If the view should activate itself when cleared, set this flag. By default, activation normally only occurs when an item is double-clicked or when sensitive mode is enabled.</const>
      <const name="DRAG_DROP">Enables drag and drop for items in the view. In this mode, multi-select is only possible if the shift or ctrl keys are held while using the mouse.</const>
      <const name="NO_SELECT">Stop the user from selecting items.</const>
      <const name="NO_SELECT_JMP">When a new item is selected, the view will jump to that item if it is not completely visible to the user. Setting this flag will turn off this behaviour.</const>
      <const name="USER_DRAG">Enable drag and drop only if the user prefers it.</const>
      <const name="AUTO_DESELECT">Deselects a highlighted item when it is activated by mouse click or enter key.</const>
      <const name="MULTI_SELECT">Allow multiple item selections without having to hold the shift key.</const>
    </constants>

    <constants lookup="MHG" comment="Menubar highlighting flags.">
      <const name="LIGHT_BKGD">Lightens the background behind the menu item.</const>
      <const name="DARK_BKGD">Darkens the background behind the menu item.</const>
      <const name="SUNKEN">Draws a sunken border around the item using the highlight and shadow colours.</const>
      <const name="RAISED">Draws a raised border around the item using the highlight and shadow colours.</const>
      <const name="BORDER">Draws a border around the menu item using the default highlight colour.</const>
      <const name="TEXT">Highlights the menu item text using the highlight colour.</const>
    </constants>

    <constants lookup="MNF" comment="Flags for the Menu class.">
      <const name="SHOW_KEYS">Print key controls on the right.</const>
      <const name="POINTER_XY">Synonym for POINTER_PLACEMENT</const>
      <const name="SHOW_ICONS">Synonym for SHOW_IMAGES</const>
      <const name="SHOW_IMAGES">Allow for an image column on the left.</const>
      <const name="POINTER_PLACEMENT">Menu is placed at the position of the mouse pointer when shown.</const>
      <const name="REVERSE_Y">Menu's open in reverse vertical order.</const>
      <const name="CACHE">Cache menu surface once created.</const>
      <const name="IGNORE_FOCUS">Do not hide the menu if it loses the focus.</const>
      <const name="SORT">Sort all items by name.</const>
      <const name="EXT_COLUMN">Allow for an extension indicator column on the right.</const>
      <const name="PRESERVE_BKGD">Preserve background when scrolling.</const>
      <const name="REVERSE_X">Menu's open in reverse horizontal order.</const>
      <const name="NO_HIDE">Activate() is prevented from hiding the menu.</const>
      <const name="POPUP">Locks the position of the menu to the mouse pointer.</const>
      <const name="NO_TRANSLATION">Do not translate menu text to the user's native language.</const>
    </constants>

    <constants lookup="INF" comment="Flags for the Input class.">
      <const name="RAISED">Draw the input box with a raised (3D) border edge.  Read-only.</const>
      <const name="NO_GFX">Do not generate any text or image graphics using internal routines (use the Template graphics definition).</const>
      <const name="SELECT_TEXT">Select all text when the input box is shown for the first time.</const>
      <const name="SUNKEN">Reverses the highlight and shadow definitions to create a sunken effect.  Read-only.</const>
      <const name="HIDE">Hide on creation, or input is currently hidden.</const>
      <const name="ENTER_TAB">Press enter results in a virtual tab-keypress being sent.</const>
      <const name="SECRET">Used for secret user entry (passwords).</const>
      <const name="DISABLED">Disable on creation.</const>
      <const name="NO_BKGD">Do not draw background graphics (automatically set if Template graphics are used).</const>
      <const name="ACTIVE_DRAW">Pro-actively redraw the object when graphics alterations are made.</const>
      <const name="COMMANDLINE">Function as a command-line.  Typically used when the input box needs to remain persistent and is linked to an output system, such as a shell.</const>
    </constants>

    <constants lookup="MIF" comment="Flags for MenuItems.">
      <const name="SELECTED">The menu item has been selected (checked).</const>
      <const name="EXTENSION">Menu item is an extension.</const>
      <const name="NO_KEY_RESPONSE">Display the key, but do not respond to its equivalent key press.</const>
      <const name="SORT">Sort all content under the menuitem (applies only to extensions).</const>
      <const name="TOGGLE">Enables toggled menu items (checking state of on and off).</const>
      <const name="OPTION">Item is a clickable option (clicking the item's icon will turn the option on/off).</const>
      <const name="DISABLED">Set if the menu item is disabled (ghosted).</const>
      <const name="CATEGORISE">Categorise the attached config file.</const>
      <const name="BREAK">Menu item is acting as a break.</const>
      <const name="KEY_REPEAT">Respond to repeated key presses.</const>
    </constants>

    <constants lookup="BTF" comment="Button flags.">
      <const name="DISABLED">Disable on creation, or button is currently disabled.  Read-only.</const>
      <const name="HIDE">Hide on creation, or button is currently hidden.</const>
      <const name="PULSE">Send repeated clicks when the mouse button is held down.</const>
      <const name="NO_GFX">Turns off the button's foreground graphics (text and images).</const>
    </constants>

    <constants lookup="FVA" comment="Options for the Auto field.">
      <const name="OPEN">Open the file with the user's preferred program for this file type.</const>
      <const name="EDIT">Edit the file in a program suitable for editing this file type.</const>
      <const name="VIEW">View the file in a program suitable for read-only viewing.</const>
    </constants>

    <constants lookup="CBF" comment="CheckBox flags.">
      <const name="DISABLED">Disable on creation, or object is currently disabled.</const>
      <const name="HIDE">Hide on creation, or object is currently hidden.</const>
      <const name="FADE_BORDER">Fade the border edges into the checkbox colour (requires thickness greater than 1).</const>
    </constants>

    <constants lookup="FVF" comment="Flags for the FileView.">
      <const name="SHOW_PARENT">The file view will display an item in the file list that reverts to the parent folder when activated.</const>
      <const name="NO_FILES">Do not display files in the file list.</const>
      <const name="SYS_KEYS">System key monitoring and relevant default behaviours are active when this option is enabled.  Cut, Copy, Paste and Select-All key combinations are provided to the user in this mode.</const>
      <const name="NO_EXTENSIONS">File extensions are not displayed when this option is active.</const>
      <const name="TOTAL_REFRESH">Force a total refresh of the files listed in the monitored folder whenever a change is detected.</const>
    </constants>

    <constants lookup="DT" comment="Types of dialog box">
      <const name="MESSAGE">The default setting.</const>
      <const name="CRITICAL">A highly critical error is being reported to the user.</const>
      <const name="ERROR">An error is being reported to the user.</const>
      <const name="WARNING">A warning message is being reported to the user.</const>
      <const name="ATTENTION">The dialog requests the user's immediate attention.</const>
      <const name="ALARM">The dialog is presented as a response to a preset alarm.</const>
      <const name="HELP">Help text is being presented in the dialog.</const>
      <const name="INFO">The dialog is providing the user with specific information on a topic.</const>
      <const name="QUESTION">A question is being asked of the user.</const>
      <const name="REQUEST">A request is being made (e.g. dialog requires user to type in input).</const>
      <const name="TEMPORARY">The dialog box will disappear after a short time-out period has expired.</const>
    </constants>

    <constants lookup="DF" comment="Dialog flags.">
      <const name="SECRET">User input needs to be secret (e.g. password entry).</const>
      <const name="QUIT">A quit message will be sent to the running application once the dialog window is closed.</const>
      <const name="MODAL">Makes the dialog window modal, this prevents the user from interacting with other windows that belong to the program.  For batch scripts, the WAIT flag should be used instead.</const>
      <const name="REVERSE">Reverse the activation process (respond to negatives, not positives).</const>
      <const name="WAIT">This option halts the program flow when the dialog box is activated.  Normal service will resume once the user responds to the dialog window.  Note that it is still possible to interact with other windows during this time, so the use of the MODAL flag may also be beneficial.</const>
      <const name="INPUT">An input box can be created inside the dialog window by setting this flag.  In this mode, the dialog box will return a user input string in the UserInput field after the user has responded to the dialog window.</const>
      <const name="OPTION_ON">Turn the checkbox option on by default.</const>
      <const name="INPUT_REQUIRED">This flag can be used in conjunction with the INPUT option.  It forces the user to input at least one character in the input box, otherwise the dialog window will automatically cancel itself.</const>
    </constants>

    <constants lookup="CLF" comment="Clipboard flags">
      <const name="WAIT">The clipboard will wait for the user to respond to user dialogs rather than return immediately from clipboard operations.</const>
      <const name="HOST"/>
    </constants>

    <constants lookup="IMF" comment="Image flags">
      <const name="NO_DRAW">Stops automatic drawing of the target surface if the image is being animated or a special effect is active.</const>
      <const name="FIXED">Synonym for FIXED_SIZE</const>
      <const name="ENLARGE">If the dimensions of the original picture are smaller than the destination surface, the image will be stretched to fit.  Enlargement is dynamic, so if the surface changes in size then the size of the picture will be recalculated to fit.</const>
      <const name="NO_FAIL">If the source image file does not exist or an error occurs during loading, the image object will still pass the initialisation process successfully.  When the image object is drawn, it will clear the target surface to the colour specified in the Background field.</const>
      <const name="SHRINK">If the dimensions of the original picture are larger than the destination surface, the image will be stretched to fit.  Shrinking is dynamic, so if the surface changes in size then the size of the picture will be recalculated to fit.</const>
      <const name="SOLID_BLEND">Synonym for NO_BLEND</const>
      <const name="FIT">This flag applies to image resizing.  When set, the calculated width and height will be limited so that the image cannot be stretched beyond the edges of the target surface.  This flag is commonly set in conjunction with the 11RATIO flag.</const>
      <const name="NO_BLEND">Turns off alpha-blending if the target surface has the COMPOSITE flag set and the source image has an alpha channel.</const>
      <const name="FIXED_SIZE">Image data will normally be stored at its original size and resized on the fly when the STRETCH flag is used.  Setting the FIXED_SIZE flag will pre-scale the image and permanently store it at that size.</const>
      <const name="STRETCH">This flag conveniently combines the ENLARGE and SHRINK flags to ensure that the image always covers the dimensions of the destination surface.</const>
      <const name="SCALABLE">The image source is scalable (e.g. vector graphic).</const>
      <const name="STICKY">All calls to Move and MoveToPoint are ignored if this flag is set.</const>
      <const name="11_RATIO">When resizing the image, the calculated width and height will always be in correct proportion relative to the source image's original width and height.</const>
    </constants>

    <constants lookup="CMF" comment="ComboBox flags.">
      <const name="AUTO_COMPLETE">When in edit mode, this option helps the user by auto-completing text.</const>
      <const name="EDIT">Enable edit mode, which allows the user to write free-text in the combobox.</const>
      <const name="SHOW_ICONS">Show icons in the dropdown list.</const>
      <const name="DISABLED">Disable on creation; or combobox is currently disabled.</const>
      <const name="HIDE">Hide on creation, or combobox is currently hidden.</const>
      <const name="LIMIT_TO_LIST">When in edit mode, limit-to-list prevents the user from entering text that isn't in the combobox list.</const>
      <const name="NO_TRANSLATION">Do not translate combobox strings or the drop-down menu to the user's native language.</const>
    </constants>

    <constants lookup="TIF" comment="MenuBar item flags.">
      <const name="DISABLED">Item is disabled.</const>
      <const name="STATEMENT">The script reference is a statement string.</const>
      <const name="FOCUS">Item has the user focus.</const>
    </constants>

    <constants lookup="SO" comment="Direction options">
      <const name="HORIZONTAL"/>
      <const name="VERTICAL"/>
    </constants>

    <constants lookup="SD" comment="Scroll directions.">
      <const name="NEGATIVE"/>
      <const name="POSITIVE"/>
    </constants>

    <constants lookup="TXF" comment="Flags for the Text class.">
      <const name="SECRET">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="PRESERVE_BKGD">Preserve-background disables fast scrolling for background preservation.</const>
      <const name="AREA_SELECTED">This read-only flag is set automatically when the user has selected an area of text.</const>
      <const name="GLOBAL_EDITING">Keeps the text object in edit mode regardless of user focus.</const>
      <const name="SINGLE_SELECT">Enables text selection (with or without edit mode).  If in line mode, a single click will allow the user to highlight any line.</const>
      <const name="DISABLED">This read-only flag is set if the object has been disabled through the Disable action.</const>
      <const name="OVERWRITE">Turns on overwrite mode (if off, insert mode is enabled).</const>
      <const name="SELECT">Synonym for MULTI_SELECT | SINGLE_SELECT</const>
      <const name="ENTER_TAB">Convert enter-key presses to the tab-key.</const>
      <const name="FORCE_CAPS">This flag forces the capitalisation of all text that is entered into the object.</const>
      <const name="AUTO_CLEAR">Clears the text string when the enter key is pressed.</const>
      <const name="EDIT">This flag must be enabled if the user is permitted to change the text string with the keyboard.</const>
      <const name="STRETCH">If the font is scalable, the text string will be resized to fit inside the surface that contains it (i.e. no characters will be clipped).  This is acheived by recalculating the font's point size.</const>
      <const name="WORDWRAP">Enables word wrapping.</const>
      <const name="AUTO_SELECT">Automatically select all text if the text object receives the focus.</const>
      <const name="TAB_KEY">If the tab key is pressed, print the tab character.</const>
      <const name="PASSWORD">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="MULTI_SELECT">Allow the user to select/highlight multiple lines by holding the Ctrl key.</const>
      <const name="VARIABLE">This flag forces a text object to recalculate any variable references in its string data whenever a redraw occurs.  Such references are indicated through square brackets, e.g. [desktop.width].  Refer to the StrEvaluate() function in the Strings module for more information.</const>
      <const name="STR_TRANSLATE">Translate strings to the user's native language.</const>
      <const name="HISTORY">Enables historical browsing when the up/down cursor keys are used.  The number of historical lines stored can be set in the HistorySize field.</const>
      <const name="NO_SYS_KEYS">This flag is set by default to enable system key support.  System-keys provide support for common key combinations such as Ctrl-C, Ctrl-X etc.</const>
      <const name="BACKGROUND">Enables a colour background behind the text.</const>
      <const name="TAB_ENTRY">Pressing the tab key is treated the same as pressing enter.</const>
      <const name="COMMANDLINE">Synonym for AUTO_CLEAR | EDIT | HISTORY</const>
    </constants>

    <constants lookup="CLIPTYPE" comment="Clipboard types">
      <const name="DATA">Raw information that is uncategorised can be defined as a data clip.</const>
      <const name="FILE">Pure file references are stored as file clips.  This type is typically used by file managers for moving and copying files.</const>
      <const name="TEXT">Plain text files such as ASCII and UTF-8 must be identified through this clip type.</const>
      <const name="AUDIO">An audio clip that is recognised by the Sound class (such as wav's and mp3's).</const>
      <const name="IMAGE">Images that are recognised by the Picture class may be stored as this type (such as jpeg's and png files).</const>
      <const name="OBJECT">An object that has been deserialised into binary form.</const>
    </constants>

    <constants lookup="SBF" comment="Scrollbar flags.">
      <const name="CONSTANT">Ensures that the scrollbar is always on display.</const>
      <const name="RELATIVE">Enables relative scrolling (movement is reported relative to the current slider position rather than in absolute coordinates).</const>
      <const name="HIDE">Hide on creation, or scrollbar is currently hidden.</const>
      <const name="SLIDER">If set, the scrollbar behaves as a slider.  In this mode, the size of the draggable slider has a fixed size (by default the slider is proportional).</const>
      <const name="NO_INTERSECT">Do not attempt to intersect with adjacent scrollbars.</const>
    </constants>

    <constants lookup="SLF" comment="Flags for SelectCallback">
      <const name="ACTIVE">The most recently active tag has changed.</const>
      <const name="MANUAL">Item was manually selected (by the program, not the user).</const>
      <const name="SELECTED">A tag has been selected and is now highlighted.</const>
      <const name="INVERTED">Change is due to an inverted selection.</const>
      <const name="KEYPRESS">Item was selected by a keypress.</const>
      <const name="CLICK">Item was clicked - see ClickX and ClickY for coordinates.</const>
      <const name="MULTIPLE">Multiple items were selected.</const>
      <const name="MOVED">Change is due to the item being moved.</const>
    </constants>

    <constants lookup="VGF" comment="Graphics options (normally defined by the template)">
      <const name="OUTLINE_TITLE">Draw black outline around title text.</const>
      <const name="NO_BORDER">Do not draw a border around column headers when in table mode.</const>
      <const name="DRAW_TABLE">Draw the view as a table (the basic format is the same, graphics are different).</const>
      <const name="GROUP_SHADOW">Draw a shadow underneath the group graphics headers.</const>
      <const name="STRIPES">Draw stripes in group titles.</const>
      <const name="HAIRLINES">Draw a hairline between each column.</const>
      <const name="BRANCHES">Draw grey tree branches.</const>
      <const name="ALT_GROUP">Alternate the group header graphics.</const>
      <const name="LINE_BREAKS">Draw a line break between each view item.</const>
    </constants>

    <constants lookup="TF" comment="Flags for the TabFocus class.">
      <const name="LOCAL_FOCUS">In this mode, the user's point of focus must match the monitored Surface for the tabfocus to function.</const>
      <const name="CHILD_FOCUS">In this mode, the user's point of focus must match the monitored Surface or one of its immediate children for the tabfocus to function.</const>
      <const name="LIMIT_TO_LIST">In limit-to-list mode, the tabfocus only functions if the user's point of focus is on the monitored Surface or one of objects in the tab list.</const>
    </constants>

    <constants lookup="BHS">
      <const name="OUTSIDE">The cursor is outside of the button's area</const>
      <const name="ENTERED">The cursor has just entered the button's area</const>
      <const name="INSIDE">The cursor is inside the button's area</const>
    </constants>

    <constants lookup="VIEW" comment="List options">
      <const name="LIST">Standard list view with small icons, arranged from top to bottom.</const>
      <const name="ICON">Similar to list-view but with large icons, arranged from left to right.</const>
      <const name="TREE">Tree mode can be used if the items are arranged in a hierarchy, where items can be embedded within items.  The tree view provides small buttons that the user can click to expand the tree and view hidden items.</const>
      <const name="COLUMN">Long list with detail columns.</const>
      <const name="LONG_LIST">This type is the same as the LIST view but the items will not wrap back to the top of the view when the bottom edge of the surface is encountered.</const>
      <const name="GROUP_TREE">Similar to tree view, but root level nodes are drawn as a headline.</const>
      <const name="DOCUMENT">Document mode allows view data to be passed to a document object for display.  You are required to provide a document object that is pre-loaded with a template capable of processing input from the view object.  Refer to the Document field for more information.</const>
      <const name="COLUMN_TREE">This mode combines the column and tree modes.  The view displays the layout and style of normal column mode, but the first column is used to display and manage a tree hierarchy.  The tree can be expanded and collapsed just as in the standard tree mode.</const>
    </constants>

    <constants lookup="RSP">
      <const name="CANCEL"/>
      <const name="YES"/>
      <const name="YES_ALL"/>
      <const name="NO"/>
    </constants>

    <constants lookup="RSF" comment="Dialog response flags">
      <const name="NO">Negative response.</const>
      <const name="CUSTOM_2">Developer customised option 2 - neutral response.</const>
      <const name="YES">Positive response.</const>
      <const name="CUSTOM_4">Developer customised option 4 - neutral response.</const>
      <const name="NO_ALL">Negative response.</const>
      <const name="OKAY">Positive response.</const>
      <const name="CANCEL">Negative response.</const>
      <const name="YES_ALL">Positive response.</const>
      <const name="CLOSED">Window closed without response.</const>
      <const name="OK">Positive response.</const>
      <const name="CUSTOM_3">Developer customised option 3 - neutral response.</const>
      <const name="NEGATIVE">Synonym for CANCEL | NO | QUIT | NO_ALL | CLOSED</const>
      <const name="POSITIVE">Synonym for YES | YES_ALL | OKAY | CUSTOM_1 | CUSTOM_2 | CUSTOM_3 | CUSTOM_4</const>
      <const name="QUIT">Negative response.</const>
      <const name="NONE">Do nothing dummy flag.</const>
      <const name="OPTION">Combobox option ticked.</const>
      <const name="CUSTOM_1">Developer customised option 1 - neutral response.</const>
      <const name="RETRY"/>
    </constants>

    <constants lookup="AXIS" comment="Axis options.  This determines the axis that is signalled when the slider is moved (note that it is feasible for a horizontal scrollbar to signal the Y axis, if this is desired by the client)">
      <const name="X"/>
      <const name="Y"/>
      <const name="Z"/>
    </constants>

    <constants lookup="MBF" comment="Menubar flags.">
      <const name="DISABLED">Disable on creation.  Automatically switched by the Disable and Enable actions.</const>
      <const name="HIDE">Hide on creation, or menubar is currently hidden.</const>
      <const name="BREAK">Draw a break-line at the bottom of the menubar.</const>
    </constants>

    <constants lookup="CEF">
      <const name="DELETE">Requests that the original file source is deleted if a successful paste operation takes place.</const>
      <const name="EXTEND">Instead of replacing existing clipboard data, add the new data to the group.</const>
    </constants>

    <constants lookup="FEF" comment="Event flags.">
      <const name="LOCATION">The location has been changed (user has moved to a different folder).</const>
    </constants>

    <constants lookup="SCF" comment="Scroll flags.">
      <const name="FIXED">Fixes the scroll slider to a specific size (non-proportional mode of operation).</const>
      <const name="REVERSE">When reporting the position of the slider, the value will always be reversed - so positive values will be negative and vice versa.  Reporting for relative position changes are also affected.</const>
      <const name="VERTICAL">The scrollbar is oriented vertically.</const>
      <const name="RELATIVE">Forces relative scrolling through the Scroll action rather than the default ScrollToPoint.</const>
      <const name="AUTO_ACTIVATE">The scroll object automatically activates itself whenever the position of the slider is changed.</const>
      <const name="AUTO_HIDE">Automatically hide the scrollbar when possible.</const>
      <const name="INVISIBLE">Keep scrollbar invisible.</const>
      <const name="HORIZONTAL">The scrollbar is oriented horizontally.</const>
      <const name="SLIDER">Changes the mode of operation so that the slider is non-proportional.  The size of the view is also set to a fixed value and resizing of the parent surface no longer affects the scroll values.</const>
      <const name="MESSAGE">Use used delay messages for activation of children.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
