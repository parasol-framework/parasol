<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>TabFocus</name>
    <type>class</type>
    <module>Widget</module>
    <comment>Manages the 'user focus' via the tab key.</comment>
    <version>1</version>
    <id>a066a8dc</id>
    <idstring>ID_TABFOCUS</idstring>
    <category>GUI</category>
    <include>modules/tabfocus.h</include>
    <copyright>Paul Manias 2003-2020</copyright>
    <description>
<p>The TabFocus class manages the use of the tab key and its relationship to the user-focus in the GUI of each application.  To create a tab-list, you only need to pass a list of focus-able objects that are in the application window.  As the user presses the tab-key, the focus will switch to each surface in the list, following the order that you have specified.</p>
<p>Objects can be added to the tabfocus using the <method>AddObject</method> method for individual objects, or you can set the Objects field for a mass addition.  Some GUI classes such as the <class name="Button">Button</class> support a TabFocus field that you can set and this will cause it to automatically add itself to the referenced tabfocus object.</p></description>
    <source>
      <file>class_tabfocus.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Moves the focus to the next object in the focus list.</comment>
    </action>

    <action>
      <name>Clear</name>
      <comment>Flushes the tab list.</comment>
    </action>

  </actions>

  <methods>
    <method>
      <name>AddObject</name>
      <comment>Adds a new object to the tab list.</comment>
      <prototype>ERROR tabAddObject(OBJECTPTR Object, OBJECTID Object)</prototype>
      <input>
        <param type="OBJECTID" name="Object">Reference to the object to be inserted.</param>
      </input>
      <description>
<p>New objects can be added to the tab list by calling this method.  The object can be of any class type, but it must support the Focus action or it will not be able to respond when the tab list attempts to use it.</p>
<p>Once the object is added, the user will be able to focus on it by using the tab-key.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Failed">General failure.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>InsertObject</name>
      <comment>Inserts a new object in the tab list.</comment>
      <prototype>ERROR tabInsertObject(OBJECTPTR Object, LONG Index, OBJECTID Object)</prototype>
      <input>
        <param type="LONG" name="Index">The index at which the object should be inserted.</param>
        <param type="OBJECTID" name="Object">The ID of the object that you want to insert.</param>
      </input>
      <description>
<p>New objects can be inserted into the tab list by calling this method.  You need to provide the unique ID for a surface object, or the routine may fail. Some intelligence is used when non-surface objects are passed to this method, whereby the routine will check for Region and Surface fields to discover valid surface objects.</p>
<p>Once the object is inserted, the user will be able to focus on it by using the tab-key.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="OutOfRange">The index is out of range.</error>
      </result>
    </method>

    <method>
      <name>RemoveObject</name>
      <comment>Removes an object from the tab list.</comment>
      <prototype>ERROR tabRemoveObject(OBJECTPTR Object, OBJECTID Object)</prototype>
      <input>
        <param type="OBJECTID" name="Object">A reference to the object that you want to remove.</param>
      </input>
      <description>
<p>Use the RemoveObject() method in instances where you need to remove an existing object from the tab list.  You only need to provide this method with the ID of the object that you want to remove.</p>
      </description>
      <result>
        <error code="Okay">The object was removed, or did not already exist in the tab list.</error>
        <error code="Args">Invalid arguments passed to function.</error>
      </result>
    </method>

    <method>
      <name>SetObject</name>
      <comment>Changes the object for a specific index.</comment>
      <prototype>ERROR tabSetObject(OBJECTPTR Object, LONG Index, OBJECTID Object)</prototype>
      <input>
        <param type="LONG" name="Index">The index in the tab list that you want to set.</param>
        <param type="OBJECTID" name="Object">The ID of the object that you want to set at the specified Index.</param>
      </input>
      <description>
<p>The tab list may be manipulated on a more direct basis by using the SetObject() method.  It allows you to change the object ID for a specific index point.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="OutOfRange">The specified Index was out of range.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="TF">INT</type>
      <description>
<types lookup="TF"/>
      </description>
    </field>

    <field>
      <name>Object</name>
      <comment>New objects may be set at specific indexes via this field.</comment>
      <access write="S">Set</access>
      <type>STRING</type>
      <description>
<p>The Object field provides a field-based way of setting objects at specific indexes.  An object can be set by specifying the index number, followed by the ID of the object that you want to set.  The following is a valid example, "3:-9495". The index and object ID can be separated with any type of white-space or non-numeric character(s).</p>
      </description>
    </field>

    <field>
      <name>Objects</name>
      <comment>A string sequence of objects to be added to the tab list may be set here.</comment>
      <access write="S">Set</access>
      <type>STRING</type>
      <description>
<p>A string sequence of objects may be added to the tab list via this field. Objects must be specified as ID's and be separated with white-space or non-numeric characters.  The following example illustrates a valid string <code>7984, #9493, -4001</code>.</p>
      </description>
    </field>

    <field>
      <name>Surface</name>
      <comment>Indicates the surface that will be monitored for the tab-key when it has the focus.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>OBJECTID</type>
      <description>
<p>On initialisation the tabfocus object will require a reference to a surface that should be monitored for tab-key presses when it has the focus.  This will usually be set to the surface of the window that is hosting the tabfocus object and the GUI elements in the tab list.</p>
<p>If this field is not set on initialisation, the tabfocus object will scan its parent hierarchy for the nearest available surface and reference it in this field.</p>
      </description>
    </field>

    <field>
      <name>Total</name>
      <comment>Indicates the total number of objects in the focus list.</comment>
      <access read="R">Read</access>
      <type>INT</type>
    </field>

  </fields>
  <types>
    <constants lookup="TF" comment="Flags for the TabFocus class.">
      <const name="CHILD_FOCUS">In this mode, the user's point of focus must match the monitored Surface or one of its immediate children for the tabfocus to function.</const>
      <const name="LIMIT_TO_LIST">In limit-to-list mode, the tabfocus only functions if the user's point of focus is on the monitored Surface or one of objects in the tab list.</const>
      <const name="LOCAL_FOCUS">In this mode, the user's point of focus must match the monitored Surface for the tabfocus to function.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
