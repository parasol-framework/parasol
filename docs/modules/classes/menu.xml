<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Menu</name>
    <type>class</type>
    <module>Widget</module>
    <comment>Creates and manages program menus.</comment>
    <version>1</version>
    <id>7c9a911a</id>
    <idstring>ID_MENU</idstring>
    <category>GUI</category>
    <include>modules/menu.h</include>
    <copyright>Paul Manias 2003-2020</copyright>
    <description>
<p>The Menu class provides a means to create and maintain menus in the graphical user interface.</p>
<p>This class is still in development.</p></description>
    <source>
      <file path="class_menu/">menu.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Switches the visibility state of the menu.</comment>
    </action>

    <action>
      <name>Clear</name>
      <comment>Clears an object's data.</comment>
    </action>

    <action>
      <name>GetVar</name>
      <comment>Simplifies the reading of menu item information.</comment>
      <description>
<p>The GetVar method simplifies the retrieval of menu item information when using scripting languages.  Menu items are referenced in the format 'item(id).field', where 'id' is a valid menu item ID and 'field' is a supported field name found in the MenuItem structure.  It is also possible to substitute the ID for index lookups from 0 to the total number of menu items available.  To do this, use a # prior to the index number.</p>
<p>This example reads the menu item text identified with ID 35: <code>item(35).text</code>.</p>
<p>This example reads the ID of the first available menu item: <code>item(0).id</code>.</p>
<p>Supported menu item fields include: GfxScript, Path, ActionScript, Name, Text, Flags, Key, Qualifiers, Colour, Background, Index, Group, ID.</p>
      </description>
    </action>

    <action>
      <name>Hide</name>
      <comment>Hides the menu and open sub-menus.</comment>
    </action>

    <action>
      <name>MoveToPoint</name>
      <comment>Move the menu to a new display position.</comment>
    </action>

    <action>
      <name>Refresh</name>
      <comment>Refreshes a menu from its source file.</comment>
    </action>

    <action>
      <name>ScrollToPoint</name>
      <comment>Scrolls the graphics of the targetted object to a specific point inside the parent view.</comment>
    </action>

    <action>
      <name>SetVar</name>
      <comment>Parameters to be passed on to item scripts are stored as variables.</comment>
    </action>

    <action>
      <name>Show</name>
      <comment>Shows the menu.</comment>
    </action>

  </actions>

  <methods>
    <method>
      <name>GetItem</name>
      <comment>Retrieves the MenuItem for a given ID.</comment>
      <prototype>ERROR mnGetItem(OBJECTPTR Object, LONG ID, struct rkMenuItem ** Item)</prototype>
      <input>
        <param type="LONG" name="ID">The ID of the menu item to retrieve.</param>
        <param type="struct rkMenuItem **" name="Item">The discovered menu item is returned in this field.</param>
      </input>
      <description>
<p>This method will search for a MenuItem by ID and return it if discovered.  Failure to find the item will result in an ERR_DoesNotExist error code.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="DoesNotExist">Resource does not exist.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>SelectItem</name>
      <comment>Toggle selectable menu items.</comment>
      <prototype>ERROR mnSelectItem(OBJECTPTR Object, LONG ID, LONG State)</prototype>
      <input>
        <param type="LONG" name="ID">The ID of the item to be executed (an ID must have been attributed to the item on creation).</param>
        <param type="LONG" name="State">A state value of 0 (off), 1 (on) or -1 (toggle).</param>
      </input>
      <description>
<p>The state of selectable menu items can be modified with the SelectItem method.  The ID of the menu item to be toggled is required, and the new State value must be indicated.  The State values are as follows:</p>
<types type="State">
<type name="0">Turn the selection indicator off.</type>
<type name="1">Turn the selection indicator on.</type>
<type name="-1">Toggle the selection state.</type>
</types>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="DoesNotExist">The ID does not refer to a known menu item.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>Switch</name>
      <comment>Switches the visible state of the menu.</comment>
      <prototype>ERROR mnSwitch(OBJECTPTR Object, LONG TimeLapse)</prototype>
      <input>
        <param type="LONG" name="TimeLapse">The amount of time that must elapse</param>
      </input>
      <description>
<p>The Switch method alternates the the visible state of the menu - for example, if the menu is hidden, calling Switch will show the menu.  A time-lapse feature is supported so that a rapid changes to menu visibility can be avoided.  For example, if the TimeLapse option is set to 10 milliseconds, the menu state will not change unless the specified amount of time has elapsed since the last Show or Hide action.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>AutoExpand</name>
      <comment>The number of seconds to wait before automatically expanding sub-menus.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>DOUBLE</type>
      <description>
<p>When the user's pointer hovers over an expandable menu item, the AutoExpand value will define the number of seconds that must pass before the sub-menu can be automatically expanded.  This value defaults to the user's preference settings, so it is strongly recommended that it is not modified unless there is good reason to do so.</p>
      </description>
    </field>

    <field>
      <name>BorderSize</name>
      <comment>The size of the border at the menu edge, measured in pixels.  Defaults to 1.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>BottomMargin</name>
      <comment>Total pixel white-space at the bottom edge of the menu.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>BreakHeight</name>
      <comment>The height of menu-break items, in pixels.</comment>
      <access read="R">Read</access>
      <type>INT</type>
    </field>

    <field>
      <name>Checkmark</name>
      <comment>An image to use for item checkmarks may be defined here.</comment>
      <access write="S">Set</access>
      <type>STRING</type>
      <description>
<p>This field allows an image to be used when drawing checkmarks in the menu items.  It must refer to the path of an image that is in a recognised picture format (PNG is strongly recommended).</p>
      </description>
    </field>

    <field>
      <name>Config</name>
      <comment>The menu configuration, expressed as a string.</comment>
      <access write="S">Set</access>
      <type>STRING</type>
      <description>
<p>The menu configuration can be parsed from an XML string by setting this field.  This must be done prior to initialisation.  Alternatively, set the <field>Path</field> field to load the configuration from an <class name="XML">XML</class> file.</p>
      </description>
    </field>

    <field>
      <name>ExtensionGap</name>
      <comment>Adds additional space for accommodating sub-menu indicators.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>If a menu contains sub-menus, extra space will be needed to accommodate the graphics indicators that identify the items that are sub-menus.  By default this value is set to 20 pixels.</p>
<p>If the menu contains no sub-menus in the item configuration, the ExtensionGap value is ignored.</p>
      </description>
    </field>

    <field>
      <name>FadeDelay</name>
      <comment>Maximum number of seconds that a fade-in or fade-out effect must be completed.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>DOUBLE</type>
      <description>
<p>The FadeDelay defines the window of time, in seconds, that a fade-in or fade-out effect must be completed.  If zero, menu fading will be disabled.</p>
<p>The default value for the FadeDelay originates from the user preferences, so it is strongly recommended that this field is not configured manually.</p>
      </description>
    </field>

    <field>
      <name>FixedWidth</name>
      <comment>Predetermined fixed-width, often used for things like combo-boxes</comment>
      <access>-/-</access>
      <type>INT</type>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="MNF">INT</type>
      <description>
<p>The following flags are supported.  The majority of these options are technical and normally specified in the menu template.</p>
<types lookup="MNF"/>
      </description>
    </field>

    <field>
      <name>Font</name>
      <comment>Refers to the <class name="Font">Font</class> object that will be used for rendering text in the menu.</comment>
      <access read="R">Read</access>
      <type class="Font">*Font</type>
      <description>
<p>This field refers to the <class name="Font">Font</class> object that will be used for rendering text in the menu.  Prior to initialisation, the font can be configured if it is desirable to override the default font style.</p>
      </description>
    </field>

    <field>
      <name>FontColour</name>
      <comment>The default font colour for menu items.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>FontHighlight</name>
      <comment>The default font colour for highlighted menu items.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>Highlight</name>
      <comment>Renders a background rectangle when an item is highlighted.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>If the Highlight colour is set with an alpha component other than zero, item backgrounds will be rendered with this colour when highlighted.</p>
      </description>
    </field>

    <field>
      <name>HighlightBorder</name>
      <comment>Renders a border around highlighted items.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>If the HighlightBorder colour is set with an alpha component other than zero, item borders will be rendered with this colour when highlighted.</p>
      </description>
    </field>

    <field>
      <name>HighlightLM</name>
      <comment>Overrides the <field>LeftMargin</field> for highlighted items.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>This field overrides the <field>LeftMargin</field> value when an item is highlighted.  By default HighlightLM is set to a value of -1, which disables this feature.</p>
      </description>
    </field>

    <field>
      <name>HighlightRM</name>
      <comment>Overrides the <field>RightMargin</field> for highlighted items.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>This field overrides the <field>RightMargin</field> value when an item is highlighted.  By default HighlightRM is set to a value of -1, which disables this feature.</p>
      </description>
    </field>

    <field>
      <name>HoverDelay</name>
      <comment>The number of seconds that must elapse before a hover event occurs in relation to the <field>Monitor</field> surface.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>DOUBLE</type>
      <description>
<p>Used in conjunction with <field>Monitor</field>, this field defines the minimum number of seconds that must elapse before a hover event is promoted to a 'click' and the menu is displayed.  This feature is disabled by default (set to zero).</p>
<p>Sub-second timing is supported, so values such as 0.25 for a quarter second are valid.</p>
      </description>
    </field>

    <field>
      <name>IconFilter</name>
      <comment>Sets the preferred icon filter.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Setting the IconFilter will change the default graphics filter used for loading all future icons.  Existing loaded icons are not affected by the change.</p>
      </description>
    </field>

    <field>
      <name>ImageGap</name>
      <comment>Defines the minimum amount of whitespace between images and text in menu items.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>This field defines the minimum amount of whitespace between images and text in menu items.  The value is measured in pixels and a minimum setting of 8 is recommended.</p>
      </description>
    </field>

    <field>
      <name>ImageSize</name>
      <comment>The maximum width and height of image icons used in menu items.  The default value is 16.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>ItemFeedback</name>
      <comment>Provides instant feedback when a user interacts with a menu item.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>Set the ItemFeedback field with a callback function in order to receive instant feedback when user interaction occurs with a menu item.  The function prototype is <code>Function(*Menu, *MenuItem)</code>.</p>
      </description>
    </field>

    <field>
      <name>ItemHeight</name>
      <comment>The minimum allowable height of items, in pixels.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>All menu items, with the exception of line-breaks, must have a height that is greater or equal to the value specified here.  This field is set to zero by default, allowing items to be of any height.</p>
      </description>
    </field>

    <field>
      <name>Items</name>
      <comment>A linked-list of <class name="MenuItem">MenuItem</class> objects.</comment>
      <access read="R">Read</access>
      <type class="MenuItem">*MenuItem</type>
      <description>
<p>Parsing the menu configuration data will result in the generation of this linked-list of <class name="MenuItem">MenuItem</class> objects. The list can be traversed manually, however if only one item needs to be found then it is recommended that the <method>GetItem</method> method is used.</p>
      </description>
    </field>

    <field>
      <name>KeyGap</name>
      <comment>The minimum amount of white-space between menu item text and key hints (e.g. 'CTRL-C').</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
    </field>

    <field>
      <name>KeyMonitor</name>
      <comment>Monitor a target surface for keypresses.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>OBJECTID</type>
      <description>
<p>This field is normally set to the window surface that relates to the menu.  By doing so, the menu will monitor that surface for keypresses and match them to keyboard shortcuts defined for the menu items.  A match will result in the item behaviour being executed immediately.</p>
      </description>
    </field>

    <field>
      <name>KeyWidth</name>
      <comment>Width of the widest key string</comment>
      <access>-/-</access>
      <type>INT</type>
    </field>

    <field>
      <name>LeftMargin</name>
      <comment>Total pixel white-space on the left side of the menu.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>LineLimit</name>
      <comment>Limits the total number of items that can be displayed before resorting to scrollbars.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>The LineLimit restricts the total number of items that can be displayed in the menu.  If there are more items than there is space available, a vertical scrollbar will be displayed that scrolls the menu content.</p>
      </description>
    </field>

    <field>
      <name>MenuSurface</name>
      <comment>The surface used to render the menu.</comment>
      <access read="R">Read</access>
      <type>OBJECTID</type>
      <description>
<p>This pre-allocated <class name="Surface">Surface</class> will host the menu's rendered graphics.</p>
      </description>
    </field>

    <field>
      <name>Monitor</name>
      <comment>Respond to user clicks on this referenced surface by showing the menu.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>OBJECTID</type>
      <description>
<p>This field can be set to a foreign surface prior to initialisation.  The surface will be monitored for user clicks, which will cause the menu to be shown when an interaction occurs.  In addition, if <field>HoverDelay</field> is defined, hovering over the monitored surface for a set length of time will also cause the menu to be displayed.</p>
      </description>
    </field>

    <field>
      <name>Node</name>
      <comment>The name of the menu node that will be used to configure the menu.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>To configure a menu from a source that contains multiple menu elements, it may be desirable to specify which menu should be used as the source material.  To do so, specify the name of the menu element here, and ensure that there is a menu element with a matching 'name' attribute in the XML source.</p>
      </description>
    </field>

    <field>
      <name>Parent</name>
      <comment>If this is a sub-menu, this field refers to the parent.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>OBJECTID</type>
      <description>
<p>This field will refer to the parent menu if the object was generated as a sub-menu.</p>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>Identifies the location of a menu configuration file to load.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>To load a menu configuration file on initialisation, a menu path must be specified in this field.  Alternatively, set the <field>Config</field> field if the configuration is already in memory.</p>
<p>The validity of the path string will not be checked until the menu object is initialised.</p>
      </description>
    </field>

    <field>
      <name>Relative</name>
      <comment>The primary surface or viewport to which the menu relates.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>OBJECTID</type>
      <description>
<p>The Relative field should refer to a foreign surface to which the menu relates.  It is normally used to refer to an application window so that the menu can be correctly offset at all times, as well as ensuring that the user focus between the menu and the application is handled efficiently.</p>
      </description>
    </field>

    <field>
      <name>RightMargin</name>
      <comment>Total pixel white-space on the right side of the menu.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>Selection</name>
      <comment>Returns the MenuItem structure for the most recently selected item.</comment>
      <access read="G">Get</access>
      <type>APTR</type>
      <description>
<p>This field returns the MenuItem structure for the most recently selected item.  It will return NULL if no item has been selected, or if deselection of an item has occurred.</p>
      </description>
    </field>

    <field>
      <name>SelectionIndex</name>
      <comment>The index of the item that was most recently selected.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>Style</name>
      <comment>Use a style definition other than the default.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>The style definition used by a menu can be changed by setting the Style field.  The string must refer to the name of a menu style in one of the system-wide style scripts.</p>
<p>Setting the Style does nothing if the style name is not recognised (an appropriate error code will be returned).</p>
      </description>
    </field>

    <field>
      <name>Target</name>
      <comment>Refers to the surface that will host the menu.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>OBJECTID</type>
      <description>
<p>The surface in which the menu will be hosted is defined here.  Most commonly, it refers to the desktop surface, and this will be the default if the Target is not set manually.</p>
      </description>
    </field>

    <field>
      <name>TextWidth</name>
      <comment>Width of the widest text string</comment>
      <access>-/-</access>
      <type>INT</type>
    </field>

    <field>
      <name>TopMargin</name>
      <comment>Total pixel white-space at the top edge of the menu.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>VSpacing</name>
      <comment>The amount of vertical white-space between menu items.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
    </field>

    <field>
      <name>Width</name>
      <comment>A fixed menu width can be applied by setting this field.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>To set a pre-calculated width against a menu, set this field. By default this field is normally set to zero, which results in the Menu class calculating the menu width automatically.  Because an automatic calculation is usually desirable, the Width should only be set manually if circumstances require it.  The ComboBox class is one such example where the drop-down menu needs to match the width of the widget.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>The horizontal position of the menu.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>The X and Y fields define the position of the menu within its target surface.  If <field>Relative</field> is defined, the coordinates will be offset from the position of the <field>Relative</field> surface.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>The vertical position of the menu.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>The X and Y fields define the position of the menu within its target surface.  If <field>Relative</field> is defined, the coordinates will be offset from the position of the <field>Relative</field> surface.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="MNF" comment="Flags for the Menu class.">
      <const name="CACHE">Cache menu surface once created.</const>
      <const name="EXT_COLUMN">Allow for an extension indicator column on the right.</const>
      <const name="IGNORE_FOCUS">Do not hide the menu if it loses the focus.</const>
      <const name="NO_HIDE">Activate() is prevented from hiding the menu.</const>
      <const name="NO_TRANSLATION">Do not translate menu text to the user's native language.</const>
      <const name="POINTER_PLACEMENT">Menu is placed at the position of the mouse pointer when shown.</const>
      <const name="POINTER_XY">Synonym for POINTER_PLACEMENT</const>
      <const name="POPUP">Locks the position of the menu to the mouse pointer.</const>
      <const name="PRESERVE_BKGD">Preserve background when scrolling.</const>
      <const name="REVERSE_X">Menu's open in reverse horizontal order.</const>
      <const name="REVERSE_Y">Menu's open in reverse vertical order.</const>
      <const name="SHOW_ICONS">Synonym for SHOW_IMAGES</const>
      <const name="SHOW_IMAGES">Allow for an image column on the left.</const>
      <const name="SHOW_KEYS">Print key controls on the right.</const>
      <const name="SORT">Sort all items by name.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
