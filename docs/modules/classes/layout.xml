<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Layout</name>
    <type>class</type>
    <module>Surface</module>
    <comment>Manages the layout of objects that support graphics.</comment>
    <version>1</version>
    <id>0aebb323</id>
    <idstring>ID_LAYOUT</idstring>
    <category>GUI</category>
    <include>modules/layout.h</include>
    <copyright>Paul Manias Â© 2000-2022</copyright>
    <description>
<p>The Layout class provides a generic, standardised system of graphics management for all objects. It should be used to extend the features of other classes only and is not for use in client programs.</p></description>
    <source>
      <file path="class_layout/">layout.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Focus</name>
      <comment>Focus on this object in the user interface.</comment>
    </action>

    <action>
      <name>Hide</name>
      <comment>Hides a visible object from the view of the user.</comment>
    </action>

    <action>
      <name>LostFocus</name>
      <comment>This internal action is called when an object loses the user focus.</comment>
    </action>

    <action>
      <name>Move</name>
      <comment>Moves the physical representation of an object to a new location.</comment>
    </action>

    <action>
      <name>MoveToBack</name>
      <comment>Move an object to the back of its current location.</comment>
    </action>

    <action>
      <name>MoveToFront</name>
      <comment>Brings the image graphics to the front of the surface.</comment>
    </action>

    <action>
      <name>MoveToPoint</name>
      <comment>Moves the coordinates of an object to a new position.</comment>
    </action>

    <action>
      <name>Redimension</name>
      <comment>Repositions and resizes the target object.</comment>
    </action>

    <action>
      <name>Resize</name>
      <comment>Resizes objects that are represented by  two or three dimensional graphics.</comment>
    </action>

    <action>
      <name>Show</name>
      <comment>Makes an object visible to the user.</comment>
    </action>

  </actions>

  <fields>
    <field>
      <name>AbsX</name>
      <comment>The absolute horizontal position of a graphic.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>This field returns the absolute horizontal position of a graphic, relative to the display.</p>
<p>It is possible to set this field, but only after initialisation of the surface object has occurred.</p>
      </description>
    </field>

    <field>
      <name>AbsY</name>
      <comment>The absolute vertical position of a graphic.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>This field returns the absolute vertical position of a graphic, relative to the display.</p>
<p>It is possible to set this field, but only after initialisation of the surface object has occurred.</p>
      </description>
    </field>

    <field>
      <name>Align</name>
      <comment>Defines the alignment of the graphic in relation to boundaries.</comment>
      <access read="G" write="S">Get/Set</access>
      <type lookup="ALIGN">INT</type>
      <description>
<p>The position of a Layout object can be abstractly defined with alignment instructions by setting this field.  The alignment feature takes precedence over values in coordinate fields such as <field>X</field> and <field>Y</field>.</p>
<types lookup="ALIGN"/>
      </description>
    </field>

    <field>
      <name>BitsPerPixel</name>
      <comment>Total bits per pixel for the canvas.</comment>
      <access>-/-</access>
      <type>INT</type>
    </field>

    <field>
      <name>Bottom</name>
      <comment>The bottom coordinate of the layout object (<field>BoundY</field> + <field>BoundHeight</field>).</comment>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

    <field>
      <name>BottomLimit</name>
      <comment>Prevents a graphic from moving beyond a fixed point at the bottom of its container.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>You can prevent a surface object from moving beyond a given point at the bottom of its container by setting this field. If for example you were to set the BottomLimit to 5, then any attempt to move the surface object into or beyond the 5 units at the bottom of its container would fail.</p>
<p>Limits only apply to movement, as induced through the Move() action.  This means that limits can be over-ridden by setting the coordinate fields directly (which can be useful in certain cases).</p>
      </description>
    </field>

    <field>
      <name>BottomMargin</name>
      <comment>Defines a white-space value for the bottom of the graphics page.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Margins declare an area of white-space to which no graphics should be drawn.  Margin values have no significant meaning to the target object, but may be used for the management of graphics placed within its area. For instance, the Window template uses margins to indicate the space available for placing graphics and other surface objects inside of it.</p>
<p>By default, all margins are initially set to zero.</p>
      </description>
    </field>

    <field>
      <name>BoundHeight</name>
      <comment>The boundary of space available for drawing, i.e. the clip region, for the height</comment>
      <access>-/-</access>
      <type>INT</type>
    </field>

    <field>
      <name>BoundWidth</name>
      <comment>The boundary of space available for drawing, i.e. the clip region, for the width</comment>
      <access>-/-</access>
      <type>INT</type>
    </field>

    <field>
      <name>BoundX</name>
      <comment>The boundary of space available for drawing, i.e. the clip region, for the X coordinate</comment>
      <access>-/-</access>
      <type>INT</type>
    </field>

    <field>
      <name>BoundY</name>
      <comment>The boundary of space available for drawing, i.e. the clip region, for the Y coordinate</comment>
      <access>-/-</access>
      <type>INT</type>
    </field>

    <field>
      <name>Cursor</name>
      <comment>Defines the preferred cursor to use when the mouse pointer is positioned over the layout object.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>This field defines the cursor image to use when the mouse pointer is positioned over the layout object.</p>
<p>For a list of valid values, please refer to the <class name="Pointer" index="CursorID">Pointer:CursorID</class> field.</p>
      </description>
    </field>

    <field>
      <name>Dimensions</name>
      <comment>Indicates the fields that are being used to manage the layout coordinates.</comment>
      <access read="G" write="S">Get/Set</access>
      <type lookup="DMF">INT</type>
      <description>
<p>The dimension settings of a layout object can be read from this field.  The flags indicate the dimension fields that are in use, and whether the values are fixed or relative.</p>
<p>It is strongly recommended that this field is never set manually, because the flags are automatically managed for the client when setting fields such as <field>X</field> and <field>Width</field>.  If circumstances require manual configuration, take care to ensure that the flags do not conflict.  For instance, FIXED_X and RELATIVE_X cannot be paired, nor could FIXED_X, FIXED_X_OFFSET and FIXED_WIDTH simultaneously.</p>
<types lookup="DMF"/>
      </description>
    </field>

    <field>
      <name>DisableDrawing</name>
      <comment>If TRUE, automatic redraws will be disabled.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>ULONG</type>
      <description>
<p>Automated redrawing can be disabled by setting this field to TRUE.  Automated redrawing occurs when performing real-time layout changes, such as moving the graphic and altering visibility.  If many changes are being made to the layout, then this may have a negative effect on CPU performance and it will be desirable to temporarily switch off automated redraws.</p>
<p>This feature is provided for the purpose of temporary graphics optimisation only, and the setting should be quickly reversed once the layout changes are complete.</p>
      </description>
    </field>

    <field>
      <name>Document</name>
      <comment>Private.  For use by the Document class only.</comment>
      <access>-/-</access>
      <type>OBJECTPTR</type>
    </field>

    <field>
      <name>DrawCallback</name>
      <comment>Allows direct drawing to the surface bitmap via a function callback.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>To draw to the bitmap of a layout surface, set the DrawCallback field with a function reference.  The function will be routed to the ~Surface module's <function module="Surface">AddCallback</function> function - please refer to the documentation for this function for more details on the required function format and calling procedure.</p>
      </description>
    </field>

    <field>
      <name>EastGap</name>
      <comment>Defines a white-space gap to the right of the layout area when it is used in a document.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>This field can be used when the layout object is targeting a <class name="Document">Document</class>.  It allows for white-space (defined in pixels) to be maintained on the right-side of the layout area.  The document will ensure that the white-space area is kept free of content when positioning elements on the page.</p>
      </description>
    </field>

    <field>
      <name>Gap</name>
      <comment>Defines a gap for all 4 sides surrounding the layout area if it is used in a document.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>This field can be used when the layout object is targeting a <class name="Document">Document</class>.  It allows for white-space (defined in pixels) to surround the layout area.  The document will ensure that the white-space area is kept free of content when positioning the elements on the page.</p>
      </description>
    </field>

    <field>
      <name>GraphicHeight</name>
      <comment>Defines a graphic's height in pixels.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The height of a graphic can be read and manipulated through this field.  If you set the height to a specific value then the picture will be resized to match the requested height.  The height is taken as a fixed value by default, but a relative height may be defined by passing the value as a percentage.</p>
<p>Reading this field will always return a fixed height value.</p>
      </description>
    </field>

    <field>
      <name>GraphicRelHeight</name>
      <comment>If the height is relative, the ratio is expressed here relative to the container's height.</comment>
      <access>-/-</access>
      <type>DOUBLE</type>
    </field>

    <field>
      <name>GraphicRelWidth</name>
      <comment>If the width is relative, the ratio is expressed here relative to the container's width.</comment>
      <access>-/-</access>
      <type>DOUBLE</type>
    </field>

    <field>
      <name>GraphicRelX</name>
      <comment>If the X position is relative, the ratio is expressed here relative to the container's width.</comment>
      <access>-/-</access>
      <type>DOUBLE</type>
    </field>

    <field>
      <name>GraphicRelY</name>
      <comment>If the Y position is relative, the ratio is expressed here relative to the container's height.</comment>
      <access>-/-</access>
      <type>DOUBLE</type>
    </field>

    <field>
      <name>GraphicWidth</name>
      <comment>Defines a graphic's width in pixels.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The width of a graphic can be read and manipulated through this field.  If you set the width to a specific value then the picture will be resized to match the requested width.  The width is taken as a fixed value by default, but a relative width may be defined by passing the value as a percentage.</p>
<p>Reading this field will always return a fixed width value.</p>
      </description>
    </field>

    <field>
      <name>GraphicX</name>
      <comment>Defines a fixed horizontal position for the graphic, relative to the assigned target area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>By default a graphic will be positioned at <code>(0,0)</code> relative to the target area defined by the <field>X</field> and <field>Y</field> values.  You can move the horizontal position of the graphic within the target area by changing the GraphicX value.  Any parts of the graphic that fall outside the boundaries of the target area will be clipped.</p>
      </description>
    </field>

    <field>
      <name>GraphicY</name>
      <comment>Defines a fixed vertical position for the graphic, relative to the assigned target area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>By default a graphic will be positioned at <code>(0,0)</code> relative to the target area defined by the <field>X</field> and <field>Y</field> values.  You can move the vertical position of the graphic within the target area by changing the GraphicY value.  Any parts of the graphic that fall outside the boundaries of the target area will be clipped.</p>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>The height of an image is specified here.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>If an image graphic is to be limited to a specific surface area, set this field to limit the clipping height.  A percentage may be specified if the FD_PERCENT flag is used when setting the field.</p>
      </description>
    </field>

    <field>
      <name>Hide</name>
      <comment>Hides the layout graphics if set to TRUE.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Set this field to TRUE to hide the layout graphics, or set to FALSE to ensure that it is displayed. Post-initialisation, it is recommended that the <action>Show</action> and <action>Hide</action> actions are used to manage visibility.</p>
      </description>
    </field>

    <field>
      <name>InsideHeight</name>
      <comment>Reflects the amount of space between the vertical margins.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The InsideHeight field determines the amount of space available for graphics containment. The returned value is the result of applying the formula <code>Height - TopMargin - BottomMargin</code>.</p>
<p>If you have not set the <field>TopMargin</field> and/or <field>BottomMargin</field> fields, then the returned value will be equal to the current <field>Height</field>.</p>
      </description>
    </field>

    <field>
      <name>InsideWidth</name>
      <comment>Reflects the amount of space between the horizontal margins.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The InsideWidth field determines the amount of space available for graphics containment. The returned value is the result of applying the formula <code>Width - LeftMargin - RightMargin</code></p>
<p>If you have not set the <field>LeftMargin</field> and/or <field>RightMargin</field> fields, then the returned value will be equal to the current <field>Width</field>.</p>
      </description>
    </field>

    <field>
      <name>Layout</name>
      <comment>Manages the layout of an image when used in a document.</comment>
      <access read="G" write="S">Get/Set</access>
      <type lookup="LAYOUT">INT</type>
      <description>
<p>If an image is used in a document, the LAYOUT flags can be used to manage the arrangement of text around the image.</p>
<types lookup="LAYOUT"/>
      </description>
    </field>

    <field>
      <name>LeftLimit</name>
      <comment>Prevents a graphic from moving beyond a fixed point on the left-hand side.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>You can prevent a graphic from moving beyond a given point at the left-hand side of its container by setting this field.  If for example you were to set the LeftLimit to 3, then any attempt to move the surface object into or beyond the 3 units at the left of its container would fail.</p>
<p>Limits only apply to movement, as induced through the <action>Move</action> action.  This means that you can override limits by setting the coordinate fields directly (which can be useful in certain cases).</p>
      </description>
    </field>

    <field>
      <name>LeftMargin</name>
      <comment>Defines a white-space value for the left side of the graphics page.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Margins declare an area of white-space to which no graphics should be drawn.  Margin values have no significant meaning to the target object, but may be used for the management of graphics placed within its area. For instance, the Window template uses margins to indicate the space available for placing graphics and other surface objects inside of it.</p>
<p>By default, all margins are initially set to zero.</p>
      </description>
    </field>

    <field>
      <name>MaxHeight</name>
      <comment>Hints at the maximum allowable height for the layout.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The MaxHeight value is a hint that prevents the layout from being expanded beyond the maximum height indicated. It specifically affects resizing, making it impossible to use the <action>Resize</action> or <action>Redimension</action> actions to extend beyond any imposed limits.</p>
<p>If the MaxHeight value is less than the <field>MinHeight</field> value, the results when resizing are undefined.</p>
<p>It is possible to circumvent the MaxHeight by setting the <field>Height</field> field directly.</p>
      </description>
    </field>

    <field>
      <name>MaxWidth</name>
      <comment>Hints at the maximum allowable width for the layout.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The MaxWidth value is a hint that prevents the layout from being expanded beyond the maximum width indicated. It specifically affects resizing, making it impossible to use the <action>Resize</action> or <action>Redimension</action> actions to extend beyond any imposed limits.</p>
<p>If the MaxWidth value is less than the <field>MinWidth</field> value, the results when resizing are undefined.</p>
<p>It is possible to circumvent the MaxWidth by setting the <field>Width</field> field directly.</p>
      </description>
    </field>

    <field>
      <name>MinHeight</name>
      <comment>Hints at the minimum allowable height for the layout.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The MinHeight is a hint that defines the minimum allowable height for the layout.  The minimum height will typically be honoured at all times except when circumstances prevent this (such as the container not being large enough to contain the layout).</p>
<p>If the MinHeight value is greater than the <field>MaxHeight</field> value, the results when resizing are undefined.</p>
<p>It is possible to circumvent the MinHeight by setting the <field>Height</field> field directly.</p>
      </description>
    </field>

    <field>
      <name>MinWidth</name>
      <comment>Hints at the minimum allowable width for the layout.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The MinWidth is a hint that defines the minimum allowable width for the layout.  The minimum width will typically be honoured at all times except when circumstances prevent this (such as the container not being large enough to contain the layout).</p>
<p>If the MinWidth value is greater than the <field>MaxWidth</field> value, the results when resizing are undefined.</p>
<p>It is possible to circumvent the MinWidth by setting the <field>Width</field> field directly.</p>
      </description>
    </field>

    <field>
      <name>NorthGap</name>
      <comment>Defines a white-space gap at the top of the layout area when it is used in a document.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>This field can be used when the layout object is targeting a <class name="Document">Document</class>.  It allows for white-space (defined in pixels) to be maintained at the top of the layout area.  The document will ensure that the white-space area is kept free of content when positioning elements on the page.</p>
      </description>
    </field>

    <field>
      <name>ParentSurface</name>
      <comment>The coordinates and dimensions of the parent surface are cached here.</comment>
      <access>-/-</access>
      <type>struct SurfaceCoords</type>
    </field>

    <field>
      <name>PresetHeight</name>
      <comment>TRUE if the height was defined by the client</comment>
      <access>-/-</access>
      <type>ULONG</type>
    </field>

    <field>
      <name>PresetWidth</name>
      <comment>TRUE if the width was defined by the client</comment>
      <access>-/-</access>
      <type>ULONG</type>
    </field>

    <field>
      <name>PresetX</name>
      <comment>TRUE if the horizontal position was defined by the client.</comment>
      <access>-/-</access>
      <type>ULONG</type>
    </field>

    <field>
      <name>PresetY</name>
      <comment>TRUE if the vertical position was defined by the client.</comment>
      <access>-/-</access>
      <type>ULONG</type>
    </field>

    <field>
      <name>ResizeCallback</name>
      <comment>Define a function reference here to receive callbacks when the layout is resized.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>To receive notifications when a layout area is resized, set the ResizeCallback field with a function reference.  The function must be in the format <code>ResizeCallback(OBJECTPTR Object)</code></p>
<p>The Object parameter will be identical to the value in the Owner field.</p>
<p>Your function can read the new size of the layout area from the <field>BoundX</field>, <field>BoundY</field>, <field>BoundWidth</field> and <field>BoundHeight</field> fields.</p>
      </description>
    </field>

    <field>
      <name>Right</name>
      <comment>Returns the right-most coordinate of the restricted drawing area.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>This field indicates the right-most coordinate of the graphic's restricted drawing space. This is essentially the opposite of the X field, and is calculated by adding the X and Width fields together.</p>
      </description>
    </field>

    <field>
      <name>RightLimit</name>
      <comment>Prevents the graphic from moving beyond a fixed point on the right-hand side.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>You can prevent a graphic from moving beyond a given point at the right-hand side of its container by setting this field.  If for example you were to set the RightLimit to 8, then any attempt to move the surface object into or beyond the 8 units at the right-hand side of its container would fail.</p>
<p>Limits only apply to movement, as induced through the <action>Move</action> action.  This means that limits can be over-ridden by setting the coordinate fields directly (which can be useful in certain cases).</p>
      </description>
    </field>

    <field>
      <name>RightMargin</name>
      <comment>Defines a whitespace value for the right side of the graphics page.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Margins declare an area of whitespace to which no graphics should be drawn.  Margin values have no significant meaning to the target object, but may be used for the management of graphics placed within its area. For instance, the Window template uses margins to indicate the space available for placing graphics and other surface objects inside of it.</p>
<p>By default, all margins are initially set to zero.</p>
      </description>
    </field>

    <field>
      <name>SouthGap</name>
      <comment>Defines a white-space gap at the bottom of the layout area when it is used in a document.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>This field can be used when the layout object is targeting a <class name="Document">Document</class>.  It allows for white-space (defined in pixels) to be maintained at the bottom of the layout area.  The document will ensure that the white-space area is kept free of content when positioning elements on the page.</p>
      </description>
    </field>

    <field>
      <name>Surface</name>
      <comment>Defines the surface area for the image graphic.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>OBJECTID</type>
      <description>
<p>When creating a new graphics object, it will need to be contained by a <class name="Surface">Surface</class> object.  Normally a graphics object will detect the nearest surface by analysing its parents and automatically set the Surface field to the correct object ID.  However in some cases it may be necessary to initialise the graphics object to a non-graphical container, in which case the Surface field must be manually set to a valid <class name="Surface">Surface</class> object.</p>
      </description>
    </field>

    <field>
      <name>TopLimit</name>
      <comment>Prevents a graphic from moving beyond a fixed point at the top of its container.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>You can prevent a graphic from moving beyond a given point at the top of its container by setting this field.  If for example you were to set the TopLimit to 10, then any attempt to move the surface object into or beyond the 10 units at the top of its container would fail.</p>
<p>Limits only apply to movement, as induced through the Move() action.  This means that limits can be over-ridden by setting the coordinate fields directly (which can be useful in certain cases).</p>
      </description>
    </field>

    <field>
      <name>TopMargin</name>
      <comment>Defines a whitespace value for the top of the graphics page.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Margins declare an area of whitespace to which no graphics should be drawn.  Margin values have no significant meaning to the target object, but may be used for the management of graphics placed within its area. For instance, the Window template uses margins to indicate the space available for placing graphics and other surface objects inside of it.</p>
<p>By default, all margins are initially set to zero.</p>
      </description>
    </field>

    <field>
      <name>Visible</name>
      <comment>If TRUE, the graphic is visible.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>ULONG</type>
      <description>
<p>To know or change the visibility of a graphic, use this field. A TRUE value is returned if the object is visible and FALSE is returned if the object is invisible.  Note that visibility is subject to the properties of the container that the surface object resides in.  For example, if a surface object is visible but is contained within a surface object that is invisible, the end result is that both objects are actually invisible.</p>
<p>Visibility is directly affected by the Hide and Show actions if you wish to change the visibility of a surface object.</p>
      </description>
    </field>

    <field>
      <name>VisibleHeight</name>
      <comment>The visible height of the graphic, relative to its restricted drawing area.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>To determine the visible area of a graphic, read the VisibleX, VisibleY, VisibleWidth and VisibleHeight fields.</p>
<p>The 'visible area' is determined by the position of the graphic relative to its restricted drawing area.  For example, if the graphic is 100 pixels across but is restricted to an area 50 pixels across, the number of pixels visible to the user must be 50 pixels or less, depending on the position of the graphic.</p>
<p>If none of the graphic is visible, then zero is returned.  The result is never negative.</p>
      </description>
    </field>

    <field>
      <name>VisibleWidth</name>
      <comment>The visible width of the graphic, relative to its restricted drawing area.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>To determine the visible area of a graphic, read the VisibleX, VisibleY, VisibleWidth and VisibleHeight fields.</p>
<p>The 'visible area' is determined by the position of the graphic relative to its restricted drawing area.  For example, if the graphic is 100 pixels across but is restricted to an area 50 pixels across, the number of pixels visible to the user must be 50 pixels or less, depending on the position of the graphic.</p>
<p>If none of the graphic is visible, then zero is returned.  The result is never negative.</p>
      </description>
    </field>

    <field>
      <name>VisibleX</name>
      <comment>The first visible X coordinate of the graphic, relative to its restricted drawing area.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>To determine the visible area of a graphic, read the VisibleX, VisibleY, VisibleWidth and VisibleHeight fields.</p>
<p>The 'visible area' is determined by the position of the graphic relative to its restricted drawing area.  For example, if the graphic is 100 pixels across but is restricted to an area 50 pixels across, the number of pixels visible to the user must be 50 pixels or less, depending on the position of the graphic.</p>
<p>If none of the graphic is visible, then zero is returned.  The result is never negative.</p>
      </description>
    </field>

    <field>
      <name>VisibleY</name>
      <comment>The first visible Y coordinate of the graphic, relative to its restricted drawing area.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>To determine the visible area of a graphic, read the VisibleX, VisibleY, VisibleWidth and VisibleHeight fields.</p>
<p>The 'visible area' is determined by the position of the graphic relative to its restricted drawing area.  For example, if the graphic is 100 pixels across but is restricted to an area 50 pixels across, the number of pixels visible to the user must be 50 pixels or less, depending on the position of the graphic.</p>
<p>If none of the graphic is visible, then zero is returned.  The result is never negative.</p>
      </description>
    </field>

    <field>
      <name>WestGap</name>
      <comment>Defines a white-space gap to the left of the layout area when it is used in a document.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>This field can be used when the layout object is targeting a <class name="Document">Document</class>.  It allows for white-space (defined in pixels) to be maintained on the left-side of the layout area.  The document will ensure that the white-space area is kept free of content when positioning elements on the page.</p>
      </description>
    </field>

    <field>
      <name>Width</name>
      <comment>The width of an image's surface area is specified here.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>If an image graphic is to be limited to a specific surface area, set this field to limit the clipping width.  A percentage may be specified if the FD_PERCENT flag is used when setting the field.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>Defines the horizontal position of the layout area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The horizontal position of the layout area can be set to an absolute or relative coordinate by writing a value to the X field.  To set a relative/percentage based value, use the FD_PERCENT flag or the value will be interpreted as fixed.  Negative values are permitted.</p>
      </description>
    </field>

    <field>
      <name>XOffset</name>
      <comment>Defines the horizontal offset of an image.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The XOffset has a dual purpose depending on whether or not it is set in conjunction with an X coordinate or a Width based field.</p>
<p>If set in conjunction with an X coordinate then the image will be drawn from that X coordinate up to the width of the container, minus the value given in the XOffset.  This means that the width of the image is dynamically calculated in relation to the width of the container.</p>
<p>If the XOffset field is set in conjunction with a fixed or relative width then the image will be drawn at an X coordinate calculated from the formula <code>X = ContainerWidth - ImageWidth - XOffset</code>.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>Defines the vertical position of the layout area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The vertical position of the layout area can be set to an absolute or relative coordinate by writing a value to the Y field.  To set a relative/percentage based value, use the FD_PERCENT flag or the value will be interpreted as fixed.  Negative values are permitted.</p>
      </description>
    </field>

    <field>
      <name>YOffset</name>
      <comment>Defines the vertical offset of an image.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The YOffset has a dual purpose depending on whether or not it is set in conjunction with a Y coordinate or a Height based field.</p>
<p>If set in conjunction with a Y coordinate then the image will be drawn from that Y coordinate up to the height of the container, minus the value given in the YOffset.  This means that the height of the Image is dynamically calculated in relation to the height of the container.</p>
<p>If the YOffset field is set in conjunction with a fixed or relative height then the image will be drawn at a Y coordinate calculated from the formula <code>Y = ContainerHeight - ImageHeight - YOffset</code>.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="BDF" comment="CopySurface() flags">
      <const name="SYNC">Force synchronsiation so that changes to the source image do not occur mid-copy.</const>
      <const name="DITHER">Allow the use of dithering to improve image quality at a cost of speed.</const>
      <const name="REDRAW">Redraw the surface before performing the copy operation.</const>
    </constants>

    <constants lookup="SWIN" comment="Options for the Surface WindowType field.">
      <const name="HOST">Default to the standard hosted window mode with full titlebar, borders and taskbar representation.</const>
      <const name="TASKBAR">Create a borderless (custom) window with taskbar representation.</const>
      <const name="ICON_TRAY">Create a borderless (custom) window with icon tray representation.</const>
      <const name="NONE">Create a borderless (custom) window with no UI representation.</const>
    </constants>

    <constants lookup="RNF">
      <const name="FULL_SCREEN">Allow the surface to open as a new screen display</const>
      <const name="POST_COMPOSITE">Do not copy background information into the surface buffer - composite on the fly instead</const>
      <const name="INIT_ONLY">Synonym for HOST | TRANSPARENT | FAST_RESIZE | DISABLED | PRECOPY | VIDEO | FIXED_BUFFER | PERVASIVE_COPY | FIXED_DEPTH | FULL_SCREEN | IGNORE_FOCUS</const>
      <const name="FAST_RESIZE">Do not redraw when a surface is shrunk on either dimension.  If a dimension is expanded, only redraw the exposed portion.</const>
      <const name="ASPECT_RATIO">When resizing, enforce the aspect ratio as defined by MinWidth and MinHeight.</const>
      <const name="NO_PRECOMPOSITE">Do not copy background information into the surface buffer - composite on the fly instead</const>
      <const name="READ_ONLY">Synonym for HAS_FOCUS | REGION | CURSOR | AFTER_COPY</const>
      <const name="GRAB_FOCUS">Helps application windows manage the user's focus within the window</const>
      <const name="VIDEO">Set this flag if you would like the surface object's data to be managed in video memory only.  While this can give some speed advantages, be warned that video based surfaces are limited to write-only operations.</const>
      <const name="PERVASIVE_COPY">This flag can be set in conjunction with after-copy mode.  It forces the after-copy support routine to copy graphics over the entire surface area, rather than avoiding the graphics of child surfaces.</const>
      <const name="STICKY">Prevents any response to the Move action.  It can be circumvented by writing to coordinate fields directly.</const>
      <const name="PRECOPY">Enables pre-copy mode, which means that all graphics behind the surface object are copied into the bitmap buffer prior to any redraw.  This mode can have a noticable impact on CPU time when drawing.</const>
      <const name="HOST">Define host on initialisation to create a container that can host surfaces from other processes.</const>
      <const name="NO_VERTICAL">Turns off all vertical movement (applies to the Move action only).</const>
      <const name="NO_HORIZONTAL">Turns off all horizontal movement (applies to the Move action only).</const>
      <const name="AUTO_QUIT">The surface object will send a quit message to its supporting process when and if the Close method is called.  This flag is typically used when a surface object represents a core window for an application.</const>
      <const name="TRANSPARENT">Enables transparency, which means that the internal graphics routines will ignore this surface during redraws.  It is typically used when creating containers that will host other surfaces.</const>
      <const name="FIXED_BUFFER">Passes the NEVER_SHRINK option to the surface bitmap</const>
      <const name="IGNORE_FOCUS">Focus is diverted directly to the parent</const>
      <const name="WRITE_ONLY">Set this flag if you would like the surface object's data to be managed in video memory only.  While this can give some speed advantages, be warned that video based surfaces are limited to write-only operations.</const>
      <const name="VISIBLE">If a surface object is visible to the user, the VISIBLE flag will be set.  If the flag is not set, the surface object is hidden.</const>
      <const name="NO_FOCUS">Prevents any kind of focussing on this object; no circumvention is possible</const>
      <const name="FIXED_DEPTH">The target buffer always remains at the same depth</const>
      <const name="COMPOSITE">Do not copy background information into the surface buffer - composite on the fly instead</const>
      <const name="HAS_FOCUS">Read-only.  If set, this flag indicates that the surface object currently has the focus.</const>
      <const name="STICK_TO_BACK">Enable if the surface object must stick to the back of its container.</const>
      <const name="DISABLED">This flag is set if the Disable action has been called on a surface object.  Calling the Enable action will turn off the flag setting.</const>
      <const name="AFTER_COPY">Read-only.  Indicates that after-copy mode has been enabled.</const>
      <const name="SCROLL_CONTENT">If set, the surface object will send Move and MoveToPoint messages if the Scroll and ScrollToPoint actions are ever called on the object.</const>
      <const name="VOLATILE">Synonym for PRECOPY | AFTER_COPY | CURSOR</const>
      <const name="TOTAL_REDRAW">Perform a total redraw of the entire surface when drawing - no partial draws</const>
      <const name="REGION">Read/Init only.  This flag is set if the Region option has been used.</const>
      <const name="STICK_TO_FRONT">Enable if the surface object must stick to the front of its container.</const>
    </constants>

    <constants lookup="ARF" comment="AccessSurfaceList() flags">
      <const name="READ">Read only access required</const>
      <const name="NO_DELAY">Do not delay when waiting for access</const>
      <const name="WRITE">Full write access required</const>
      <const name="UPDATE">Update a single entry (limited write access)</const>
    </constants>

    <constants lookup="EXF" comment="Optional flags for the ExposeSurface() function.">
      <const name="REDRAW_VOLATILE">Redraw every volatile object that intersects with the expose region, including internal volatile children.</const>
      <const name="REDRAW_VOLATILE_OVERLAP">Only redraw volatile objects that obscure the expose region from a position outside of the target surface and its children.  Useful if no redrawing has occurred in the surface, but the surface has moved to a new position and the parents need to be redrawn.</const>
      <const name="ABSOLUTE">The supplied coordinates for exposure are absolute (relative to the display).</const>
      <const name="CHILDREN">If set, all child surfaces that intersect with exposed region will be included in the expose operation.</const>
      <const name="ABSOLUTE_COORDS">The supplied coordinates for exposure are absolute (relative to the display).</const>
    </constants>

    <constants lookup="LVF" comment="drwLockBitmap() result flags">
      <const name="EXPOSE_CHANGES"/>
    </constants>

    <constants lookup="DRAG">
      <const name="NONE">The surface is not being dragged.</const>
      <const name="ANCHOR">The surface is being dragged and the mouse pointer is anchored to the surface.</const>
      <const name="NORMAL">The surface is being dragged.</const>
    </constants>

  </types>
  <structs>
    <struct name="SurfaceCoords">
      <field name="X" type="LONG">Horizontal coordinate</field>
      <field name="Y" type="LONG">Vertical coordinate</field>
      <field name="Width" type="LONG">Width</field>
      <field name="Height" type="LONG">Height</field>
      <field name="AbsX" type="LONG">Absolute X</field>
      <field name="AbsY" type="LONG">Absolute Y</field>
    </struct>

    <struct name="SurfaceControl" comment="Internal structure returned by AccessList()">
      <field name="ListIndex" type="LONG">Byte offset of the ordered list</field>
      <field name="ArrayIndex" type="LONG">Byte offset of the list array</field>
      <field name="EntrySize" type="LONG">Byte size of each entry in the array</field>
      <field name="Total" type="LONG">Total number of entries currently in the list array</field>
      <field name="ArraySize" type="LONG">Max limit of entries in the list array</field>
    </struct>

    <struct name="SurfaceInfo" typeName="SURFACEINFO">
      <field name="ParentID" type="OBJECTID">Object that contains the surface area</field>
      <field name="BitmapID" type="OBJECTID">Surface bitmap buffer</field>
      <field name="DataMID" type="OBJECTID">Bitmap data memory ID</field>
      <field name="DisplayID" type="OBJECTID">If the surface object is root, its display is reflected here</field>
      <field name="Flags" type="LONG">Surface flags (RNF_VISIBLE etc)</field>
      <field name="X" type="LONG">Horizontal coordinate</field>
      <field name="Y" type="LONG">Vertical coordinate</field>
      <field name="Width" type="LONG">Width of the surface area</field>
      <field name="Height" type="LONG">Height of the surface area</field>
      <field name="AbsX" type="LONG">Absolute X coordinate</field>
      <field name="AbsY" type="LONG">Absolute Y coordinate</field>
      <field name="Level" type="WORD">Branch level within the tree</field>
      <field name="BitsPerPixel" type="BYTE">Bits per pixel of the bitmap</field>
      <field name="BytesPerPixel" type="BYTE">Bytes per pixel of the bitmap</field>
      <field name="LineWidth" type="LONG">Line width of the bitmap, in bytes</field>
    </struct>

  </structs>
</book>
