<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>VectorWave</name>
    <type>class</type>
    <module>Vector</module>
    <comment>Extends the Vector class with support for sine wave based paths.</comment>
    <version>1</version>
    <id>51bca8eb</id>
    <idstring>ID_VECTORWAVE</idstring>
    <category>Graphics</category>
    <include>modules/vectorwave.h</include>
    <copyright>Paul Manias Â© 2010-2022</copyright>
    <description>
<p>The VectorWave class provides functionality for generating paths based on sine waves.  This feature is not part of the SVG standard and therefore should not be used in cases where SVG compliance is a strict requirement.</p>
<p>The sine wave will be generated within a rectangular region at (<field>X</field>,<field>Y</field>) with size (<field>Width</field>,<field>Height</field>).  The horizontal center-line within the rectangle will dictate the orientation of the sine wave, and the path vertices are generated on a left-to-right basis.</p>
<p>Waves can be used in Parasol's SVG implementation by using the &lt;parasol:wave/&gt; element.</p></description>
    <source>
      <file path="vectors/">wave.cpp</file>
    </source>
  </info>

  <fields>
    <field>
      <name>Amplitude</name>
      <comment>Adjusts the generated wave amplitude.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The Amplitude is expressed as a multiplier that adjusts the wave amplitude (i.e. height).  A value of 1.0 is the default.</p>
      </description>
    </field>

    <field>
      <name>Close</name>
      <comment>Closes the generated wave path at either the top or bottom.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Setting the Close field to TOP or BOTTOM will close the generated wave's path so that it is suitable for being filled.</p>
      </description>
    </field>

    <field>
      <name>Decay</name>
      <comment>Declares a rate of decay to apply to the wave amplitude.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The amplitude of a sine wave can be decayed between its start and end points by setting the Decay field.  Using a decay gives the wave an appearance of being funnelled into a cone-like shape.  If the value is negative, the start and end points for the decay will be reversed.</p>
      </description>
    </field>

    <field>
      <name>Degree</name>
      <comment>Declares the initial angle (in degrees) to use when generating the wave.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The degree value defines the initial angle that is used when computing the sine wave.  The default is zero.</p>
<p>Visually, changing the degree will affect the 'offset' of the generated wave.  Gradually incrementing the value will give the wave an appearance of moving from right to left.</p>
      </description>
    </field>

    <field>
      <name>Dimensions</name>
      <comment>Dimension flags define whether individual dimension fields contain fixed or relative values.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The following dimension flags are supported:</p>
<types lookup="DMF">
<type name="FIXED_HEIGHT">The <field>Height</field> value is a fixed coordinate.</type>
<type name="FIXED_WIDTH">The <field>Width</field> value is a fixed coordinate.</type>
<type name="FIXED_X">The <field>X</field> value is a fixed coordinate.</type>
<type name="FIXED_Y">The <field>Y</field> value is a fixed coordinate.</type>
<type name="RELATIVE_HEIGHT">The <field>Height</field> value is a relative coordinate.</type>
<type name="RELATIVE_WIDTH">The <field>Width</field> value is a relative coordinate.</type>
<type name="RELATIVE_X">The <field>X</field> value is a relative coordinate.</type>
<type name="RELATIVE_Y">The <field>Y</field> value is a relative coordinate.</type>
</types>
      </description>
    </field>

    <field>
      <name>Frequency</name>
      <comment>Defines the wave frequency (the distance between each wave).</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The frequency determines the distance between each individual wave that is generated.  The default value for the frequency is 1.0.  Shortening the frequency to a value closer to 0 will bring the waves closer together.</p>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>The height of the area containing the wave.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The height of the area containing the wave is defined here as a fixed or relative value.</p>
      </description>
    </field>

    <field>
      <name>Thickness</name>
      <comment>Expands the height of the wave to the specified value to produce a closed path.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>Specifying a thickness value will create a wave that forms a filled shape, rather than the default of a stroked path. The thickness (height) of the wave is determined by the provided value.</p>
      </description>
    </field>

    <field>
      <name>Width</name>
      <comment>The width of the area containing the wave.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The width of the area containing the wave is defined here as a fixed or relative value.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>The x coordinate of the wave.  Can be expressed as a fixed or relative coordinate.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The x coordinate of the wave is defined here as either a fixed or relative value.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>The y coordinate of the wave.  Can be expressed as a fixed or relative coordinate.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The y coordinate of the wave is defined here as either a fixed or relative value.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="ARC" comment="Options for drawing arcs.">
      <const name="LARGE"/>
      <const name="SWEEP"/>
    </constants>

    <constants lookup="VSM">
      <const name="AUTO">The default option is chosen by the system.  This will typically be bilinear, but slow machines may switch to nearest neighbour and high speed machines could use more advanced methods.</const>
      <const name="NEIGHBOUR">Nearest neighbour is the fastest sampler at the cost of poor quality.</const>
      <const name="BILINEAR">Bilinear is a common algorithm that produces a reasonable quality image.</const>
      <const name="BICUBIC">Produces a similar result to bilinear with a marginally sharper after-effect.</const>
      <const name="SPLINE16">About 1/2 the speed of bilinear, this method produces a considerably better result.</const>
      <const name="KAISER"/>
      <const name="QUADRIC"/>
      <const name="GAUSSIAN"/>
      <const name="BESSEL"/>
      <const name="MITCHELL"/>
      <const name="SINC3">Five times slower than bilinear, the final result is of very good quality.</const>
      <const name="LANCZOS3">This well known algorithm may serve as a point of comparison for evaluating the results of other methods.  It shares characteristics with SINC and BLACKMAN.</const>
      <const name="BLACKMAN3">Five times slower than bilinear, the final result will lack sharpness when compared to SINC3.</const>
      <const name="SINC8">15 times slower than bilinear, the final result is of excellent quality but may be marginally over-sharpened.</const>
      <const name="LANCZOS8"/>
      <const name="BLACKMAN8">15 times slower than bilinear, the final result is of excellent quality and sharpness is well balanced.</const>
    </constants>

    <constants lookup="VSPREAD" comment="Spread method options define the method to use for tiling filled graphics.">
      <const name="UNDEFINED">Either the default setting will be applied or the setting will be inherited from a parent object.</const>
      <const name="PAD">Scale the graphic to the object bounds.</const>
      <const name="REFLECT">Tile the graphic, reflecting the image alternately on the X and Y axis.</const>
      <const name="REPEAT">Tile the graphic repeatedly.</const>
      <const name="REFLECT_X">Tile the graphic, reflecting the image alternately on the X axis only.</const>
      <const name="REFLECT_Y">Tile the graphic, reflecting the image alternately on the Y axis only.</const>
      <const name="CLIP">Do not scale the graphic.  Clip it if it extends past imposed boundaries.</const>
    </constants>

    <constants lookup="VUNIT">
      <const name="UNDEFINED"/>
      <const name="BOUNDING_BOX">Coordinates are relative to the object's bounding box.</const>
      <const name="USERSPACE">Coordinates are relative to the current viewport.</const>
    </constants>

    <constants lookup="VTF" comment="Types of vector transforms.">
      <const name="SKEW">Skew the vector by (X,Y)</const>
      <const name="TRANSLATE">Translate the vector by (X,Y)</const>
      <const name="MATRIX">Apply a 2x3 matrix transformation to the vector.</const>
      <const name="SCALE">Scale the vector by (X,Y)</const>
      <const name="ROTATE">Rotate the vector around (CX,CY) by Angle.</const>
    </constants>

    <constants lookup="VIS" comment="Options for the Vector class' Visibility field.">
      <const name="HIDDEN">Hide the vector and its children.</const>
      <const name="VISIBLE">The default.  Ensures that the vector is visible.</const>
      <const name="COLLAPSE">Hide the vector and its children.  Do not use - provided for SVG compatibility only.</const>
      <const name="INHERIT">Inherit the visibility state from the parent.</const>
    </constants>

    <constants lookup="CS" comment="Colour space options.">
      <const name="SRGB">The default colour-space is sRGB, recommended for its speed.</const>
      <const name="LINEAR_RGB">Linear RGB is the default colour space for SVG and produces the best results.</const>
      <const name="INHERIT">Inherit the colour space option from the parent vector.</const>
    </constants>

    <constants lookup="VIJ" comment="Inner join options for angled lines.">
      <const name="BEVEL">Blunts the edge of the join.</const>
      <const name="MITER">Forms a sharp point at the join.  Typically not the best looking option.</const>
      <const name="JAG">A special non-SVG option.</const>
      <const name="ROUND">Rounds the edge of the join to produce the best looking results.</const>
      <const name="INHERIT">Inherit the parent's join value.</const>
    </constants>

    <constants lookup="VF" comment="Optional flags and indicators for the Vector class.">
      <const name="DISABLED">The vector is disabled and user input should be ignored.</const>
      <const name="HAS_FOCUS">The vector holds the user's input focus.</const>
    </constants>

    <constants lookup="VGF" comment="Gradient flags">
      <const name="FIXED_FY">FY is fixed</const>
      <const name="RELATIVE_X2">X2 is relative</const>
      <const name="RELATIVE_X1">X1 is relative</const>
      <const name="FIXED_X1">X1 is fixed</const>
      <const name="FIXED_Y2">Y2 is fixed</const>
      <const name="RELATIVE_CX">CX is relative</const>
      <const name="FIXED_RADIUS">is fixed</const>
      <const name="RELATIVE_RADIUS">Radius is relative</const>
      <const name="RELATIVE_FX">FX is relative</const>
      <const name="FIXED_CX">CX is fixed</const>
      <const name="RELATIVE_Y2">Y2 is relative</const>
      <const name="RELATIVE_CY">CY is relative</const>
      <const name="FIXED_FX">FX is fixed</const>
      <const name="RELATIVE_FY">FY is relative</const>
      <const name="FIXED_Y1">Y1 is fixed</const>
      <const name="FIXED_CY">CY is fixed</const>
      <const name="RELATIVE_Y1">Y1 is relative</const>
      <const name="FIXED_X2">X2 is fixed</const>
    </constants>

    <constants lookup="VLC" comment="Line-cap options.">
      <const name="BUTT">The default.  The line is sharply squared off at its exact end point.</const>
      <const name="SQUARE">Similar to butt, the line is sharply squared off but will extend past the end point by 'StrokeWidth / 2'.</const>
      <const name="ROUND">The line cap is a half-circle and the line's end-point forms the center point.</const>
      <const name="INHERIT">The cap type is inherited from the parent (defaults to butt if unspecified).</const>
    </constants>

    <constants lookup="VBF" comment="For vecGetBoundary()">
      <const name="INCLUSIVE">The result will be inclusive of all paths that belong to children of the queried vector.</const>
      <const name="NO_TRANSFORM">The transformation step will not be applied to the vector's path.</const>
    </constants>

    <constants lookup="VPF" comment="Optional flags for the VectorScene object.">
      <const name="RENDER_TIME">Compute the drawing frame-rate for the RenderTime field.</const>
      <const name="BITMAP_SIZED">Automatically adjust the PageWidth and PageHeight to match the target Bitmap width and height.</const>
      <const name="RESIZE">The vector will be stretched to fit the PageWidth and PageHeight values, if defined by the client.</const>
    </constants>

    <constants lookup="FM" comment="Mask for controlling feedback events that are received.">
      <const name="PATH_CHANGED">The vector path has been modified or affected by a transform.</const>
    </constants>

    <constants lookup="VLJ" comment="Options for the look of line joins.">
      <const name="MITER">The default.  The join will form a pointed edge.</const>
      <const name="MITER_REVERT"/>
      <const name="ROUND">The join is rounded.</const>
      <const name="BEVEL">The join is blunted, eliminating overly sharp edges.</const>
      <const name="MITER_ROUND">Default to MITER, but switch to ROUND if the miter limit is exceeded.</const>
      <const name="INHERIT">Inherit the join option from the parent.</const>
    </constants>

    <constants lookup="ARF" comment="Aspect ratios">
      <const name="NONE">Scale the viewbox to match the size of the viewport.  Aspect ratio is not preserved.</const>
      <const name="Y_MIN">Align to the top</const>
      <const name="Y_MAX">Align to the bottom</const>
      <const name="X_MID">Align to the horizontal center</const>
      <const name="X_MIN">Align to the left</const>
      <const name="X_MAX">Align to the right</const>
      <const name="SLICE">Aspect ratio is preserved. The viewbox can extend beyond the viewport's edges on one axis.  The viewbox is scaled up as much as possible.</const>
      <const name="Y_MID">Align to the vertical center</const>
      <const name="MEET">Aspect ratio is preserved. The entire viewbox will be visible in the viewport.  The viewbox is scaled up as much as possible.</const>
    </constants>

    <constants lookup="VGT" comment="VectorGradient options.">
      <const name="LINEAR">A linear gradient is drawn from (X1,Y1) to (X2,Y2).</const>
      <const name="RADIAL">A radial gradient is drawn from CenterX,CenterY to Radius.  An optional focal point can be expressed with FX and FY.</const>
      <const name="CONIC">The conic gradient is a variant on the radial type, whereby the colour values are drawn as a line that revolves around the cone's center point.</const>
      <const name="DIAMOND">A diamond gradient is drawn as a square emanating from the center point.</const>
      <const name="CONTOUR">Contoured gradients follow the contours of the vector path in which they are rendered.</const>
    </constants>

    <constants lookup="VFR" comment="Vector fill rules for the FillRule field in the Vector class.">
      <const name="NON_ZERO">This is the default.  This rule determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a path segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside the path. Otherwise, it is inside.</const>
      <const name="EVEN_ODD">This rule determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.</const>
      <const name="INHERIT">The rule is inherited from the parent vector(s).</const>
    </constants>

  </types>
  <structs>
    <struct name="VectorTransform">
      <field name="Next" type="struct VectorTransform *">The next transform in the list.</field>
      <field name="Prev" type="struct VectorTransform *">The previous transform in the list.</field>
      <field name="X" type="DOUBLE">The X value, the meaning of which is defined by the Type</field>
      <field name="Y" type="DOUBLE">The Y value, the meaning of which is defined by the Type</field>
      <field name="Angle" type="DOUBLE">Requires VTF_ROTATE.  A rotation by Angle degrees about a given point.  If optional parameters X and Y are not specified, the rotate is about the origin of the current user coordinate system.</field>
      <field name="Matrix[6]" type="DOUBLE">Requires VTF_MATRIX.  A transformation expressed as a matrix of six values.</field>
      <field name="Type" type="WORD" lookup="VTF">The VTF indicates the type of transformation: rotate, skew etc</field>
    </struct>

    <struct name="PathCommand" comment="Base structure for path commands.">
      <field name="Type" type="UBYTE">The command type (PE value)</field>
      <field name="Curved" type="UBYTE">Private</field>
      <field name="LargeArc" type="UBYTE">Equivalent to the large-arc-flag in SVG, it ensures that the arc follows the longest drawing path when TRUE.</field>
      <field name="Sweep" type="UBYTE">Equivalent to the sweep-flag in SVG, it inverts the default behaviour in generating arc paths.</field>
      <field name="Pad" type="LONG">Private</field>
      <field name="X" type="DOUBLE">The targeted X coordinate (absolute or relative) for the command</field>
      <field name="Y" type="DOUBLE">The targeted Y coordinate (absolute or relative) for the command</field>
      <field name="AbsX" type="DOUBLE">Private</field>
      <field name="AbsY" type="DOUBLE">Private</field>
      <field name="X2" type="DOUBLE">The X2 coordinate for curve commands, or RX for arcs</field>
      <field name="Y2" type="DOUBLE">The Y2 coordinate for curve commands, or RY for arcs</field>
      <field name="X3" type="DOUBLE">The X3 coordinate for curve-to or smooth-curve-to</field>
      <field name="Y3" type="DOUBLE">The Y3 coordinate for curve-to or smooth-curve-to</field>
      <field name="Angle" type="DOUBLE">Arc angle</field>
    </struct>

  </structs>
</book>
