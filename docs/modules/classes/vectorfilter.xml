<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>VectorFilter</name>
    <type>class</type>
    <module>Vector</module>
    <comment>Filters can be applied as post-effects to rendered vectors.</comment>
    <version>1</version>
    <id>8c6e727e</id>
    <idstring>ID_VECTORFILTER</idstring>
    <category>Graphics</category>
    <include>modules/vectorfilter.h</include>
    <copyright>Paul Manias Â© 2010-2022</copyright>
    <description>
<p>The VectorFilter class allows post-effect filters to be applied to vectors once they have been rendered.  Filter support is closely modelled around the SVG standard, and effect results are intended to match that of the standard. Once created, a filter can be utilised by vector objects through their Filter field.  By way of example in SVG:</p>
<pre>&lt;circle cx="160" cy="50" r="40" fill="#f00" filter="url(#FOMTest)"/&gt;
</pre>
<p>Filter instructions are passed to VectorFilter objects via the XML data feed, where they will be parsed into an internal list of instructions.  It is not possible to modify the instructions once they have been parsed, but they can be cleared and a new set of instructions can be applied.</p>
<p>It is important to note that filter effects are CPU intensive tasks and real-time performance may be disappointing. If this is an issue, consider pre-rendering the filter effects in advance and caching the results in memory or files.</p>
<p>It is a requirement that VectorFilter objects are owned by the <class name="VectorScene">VectorScene</class> they are targeting.</p></description>
    <source>
      <file path="filters/">filter.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Clear</name>
      <comment>Clears all filter instructions from the object.</comment>
    </action>

    <action>
      <name>DataFeed</name>
      <comment>Filter effects are parsed via the DataFeed action.</comment>
      <description>
<p>Filter instructions can be added to a VectorFilter object by parsing them as an SVG document.  The instructions must be passed as a sequential list that is formatted to SVG guidelines.</p>
<p>The following example illustrates:</p>
<pre>&lt;feOffset in="BackgroundImage" dx="0" dy="125"/&gt;
&lt;feGaussianBlur stdDeviation="8" result="blur"/&gt;
&lt;feMerge&gt;
  &lt;feMergeNode in="blur"/&gt;
  &lt;feMergeNode in="SourceGraphic"/&gt;
&lt;/feMerge&gt;
</pre>
<p>Unsupported or invalid elements will be reported in debug output and then ignored, allowing the parser to process as many instructions as possible.</p>
<p>Multiple calls to this action will append to existing effects.  If a reset of existing effects is necessary, call the @Clear action before appending new effects.</p>
      </description>
    </action>

  </actions>

  <fields>
    <field>
      <name>ColourSpace</name>
      <comment>The colour space of the filter graphics (SRGB or linear RGB).</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="VCS">INT</type>
      <description>
<p>By default, colour filters are processed in SRGB format.  This is the same colour space as used by the rest of the graphics system, which means that no special conversion is necessary prior to and post filter processing.  However, linear RGB is better suited for producing high quality results at a cost of speed.</p>
<p>Note that if SVG compatibility is required, linear RGB must be used as the default.</p>
<types lookup="VCS"/>
      </description>
    </field>

    <field>
      <name>Dimensions</name>
      <comment>Dimension flags define whether individual dimension fields contain fixed or relative values.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>The following dimension flags are supported:</p>
<types lookup="DMF">
<type name="FIXED_X">The <field>X</field> value is a fixed coordinate.</type>
<type name="FIXED_Y">The <field>Y</field> value is a fixed coordinate.</type>
<type name="RELATIVE_X">The <field>X</field> value is a relative coordinate.</type>
<type name="RELATIVE_Y">The <field>Y</field> value is a relative coordinate.</type>
<type name="FIXED_WIDTH">The <field>Width</field> value is a fixed coordinate.</type>
<type name="FIXED_HEIGHT">The <field>Height</field> value is a fixed coordinate.</type>
<type name="RELATIVE_WIDTH">The <field>Width</field> value is a relative coordinate.</type>
<type name="RELATIVE_HEIGHT">The <field>Height</field> value is a relative coordinate.</type>
</types>
      </description>
    </field>

    <field>
      <name>EffectXML</name>
      <comment>Returns a SVG XML string that defines the filter's effects.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
      <description>
<p>This field value will return a purpose-built string that defines the filter's effects in SVG compliant XML.  The string is allocated and must be freed once no longer in use.</p>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>The height of the filter area.  Can be expressed as a fixed or relative coordinate.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The height of the filter area is expressed here as a fixed or relative coordinate.  The width and height effectively restrain the working space for the effect processing, making them an important consideration for efficiency.</p>
<p>The coordinate system for the width and height depends on the value for <field>Units</field>.</p>
<p>If width or height is not specified, the effect is as if a value of 120% were specified.</p>
      </description>
    </field>

    <field>
      <name>Inherit</name>
      <comment>Inherit attributes from a VectorFilter referenced here.</comment>
      <access read="R" write="S">Read/Set</access>
      <type class="VectorFilter">*VectorFilter</type>
      <description>
<p>Attributes can be inherited from another filter by referencing that gradient in this field.  This feature is provided primarily for the purpose of simplifying SVG compatibility and its use may result in an unnecessary performance penalty.</p>
      </description>
    </field>

    <field>
      <name>Opacity</name>
      <comment>The opacity of the filter.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The opacity of the filter is defined as a value between 0.0 and 1.0, with 1.0 being fully opaque.  The default value is 1.0.</p>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>Affix this path to all file references in the filter definition.</comment>
      <access write="S">Set</access>
      <type>STRING</type>
      <description>
<p>Setting the Path field is recommended if the filter contains sub-classes that make file references, such as a filter image.  Any relative file reference will be prefixed with the path string that is specified here.</p>
      </description>
    </field>

    <field>
      <name>PrimitiveUnits</name>
      <comment>Alters the behaviour of some effects that support alternative position calculations.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="VUNIT">INT</type>
      <description>
<p>PrimitiveUnits alters the behaviour of some effects when their dimensions are calculated.  The default value is <code>USERSPACE</code>.  When set to <code>BOUNDING_BOX</code>, the effect may calculate its dimensions strictly based on the client vector using a relative coordinate space of (0,0,100%,100%).</p>
<types lookup="VUNIT"/>
      </description>
    </field>

    <field>
      <name>Units</name>
      <comment>Defines the coordinate system for fields X, Y, Width and Height.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="VUNIT">INT</type>
      <description>
<p>The default coordinate system is <code>BOUNDING_BOX</code>, which positions the filter within the client vector. The alternative is <code>USERSPACE</code>, which positions the filter relative to the client vector's nearest viewport.</p>
<types lookup="VUNIT"/>
      </description>
    </field>

    <field>
      <name>Width</name>
      <comment>The width of the filter area.  Can be expressed as a fixed or relative coordinate.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The width of the filter area is expressed here as a fixed or relative coordinate.  The width and height effectively restrain the working space for the effect processing, making them an important consideration for efficiency.</p>
<p>The coordinate system for the width and height depends on the value for <field>Units</field>.</p>
<p>If width or height is not specified, the effect is as if a value of 120% were specified.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>X coordinate for the filter.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The meaning of the (X,Y) field values depend on the value for <field>Units</field>.  In userspace mode, the filter position will be relative to the client vector's parent viewport.  In bounding-box mode, the filter position is relative to the vector's position.  It is important to note that coordinates are measured before any transforms are applied.</p>
<p>If X or Y is not specified, the effect is as if a value of -10% were specified.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>Y coordinate for the filter.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The meaning of the (X,Y) field values depend on the value for <field>Units</field>.  In userspace mode, the filter position will be relative to the client vector's parent viewport.  In bounding-box mode, the filter position is relative to the vector's position.  It is important to note that coordinates are measured before any transforms are applied.</p>
<p>If X or Y is not specified, the effect is as if a value of -10% were specified.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="VCS" comment="Colour space options.">
      <const name="INHERIT">Inherit the colour space option from the parent vector.</const>
      <const name="LINEAR_RGB">Linear RGB is the default colour space for SVG and produces the best results.</const>
      <const name="SRGB">The default colour-space is sRGB, recommended for its speed.</const>
    </constants>

    <constants lookup="VUNIT">
      <const name="BOUNDING_BOX">Coordinates are relative to the object's bounding box.</const>
      <const name="UNDEFINED"/>
      <const name="USERSPACE">Coordinates are relative to the current viewport.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
