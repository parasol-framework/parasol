<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>IconServer</name>
    <type>class</type>
    <module>IconServer</module>
    <comment>Manages the icon database.</comment>
    <version>1</version>
    <id>81d9f385</id>
    <idstring>ID_ICONSERVER</idstring>
    <category>System</category>
    <include>modules/iconserver.h</include>
    <copyright>Paul Manias Â© 2014-2020</copyright>
    <description>
<p>The IconServer class provides an icon management and image resizing service for all applications.  It provides this service through the icons: assignment.  Icons are requested from the server by accessing them through the virtual filesystem, making access to the icon server 'invisible'.  Direct contact with the icon server only needs to be made when requesting a new theme, or to change the default icon size.</p>
<p>Icon files can be accessed from the icon server using the following file path formats:</p>
<pre>icons:filename
icons:category/filename
icons:category/filename(size)
</pre>
<p>The second format, where the category and filename is specified is recommended for normal usage.  The size of the icon can be requested by entering a numeral in brackets at the end of the location.  For instance 'icons:programs/filemanager(64)' will generate a 64x64 pixel version of the filemanager icon.  The minimum size for an icon is 12 pixels and the maximum size is 256 pixels.</p></description>
    <source>
      <file>iconserver_class.c</file>
    </source>
  </info>

  <fields>
    <field>
      <name>CacheSize</name>
      <comment>Indicates the total size of the icon cache in bytes.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>This field can be read at any time to determine the total number of bytes in use by the icon cache.  The result value is generated dynamically through analysis of the icon directory structure.  Only the active icon theme will be analysed.</p>
      </description>
    </field>

    <field>
      <name>FixedSize</name>
      <comment>Enforces a fixed icon size.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>Setting the FixedSize field will enforce fixed icon sizing (measured in pixels), which overrides the dynamic sizing normally enabled by <field>IconSize</field>.  Fixed sizing can be switched off by setting this field to zero.</p>
      </description>
    </field>

    <field>
      <name>IconRatio</name>
      <comment>Setting this field enables dynamic icon sizing that is relative to the display size.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The IconRatio field can be set if you wish to enable dynamic icon sizing.  This field is set as a percentage, typically around 7%, which would generate icons at 7% of the shortest dimension of the current display .</p>
<p>The minimum ratio is 2% and the maximum is 15%.  When you write to this field, fixed icon sizes will no longer be the default.  You can switch back to fixed icon sizes if you write a value to the IconSize field.  Fixed size icons can also be requested at any time on an individual basis by passing a size to the icons: assignment when loading icons.</p>
<p>Regardless of the ratio setting, the maximum and minimum pixel size of any icon is always 12 and 256 pixels respectively.</p>
      </description>
    </field>

    <field>
      <name>IconSize</name>
      <comment>The default size of each icon generated by the server can be changed here.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>By default, the iconserver will generate icons at a size of 32 pixels when no specific size has been requested.  You may set this field to increase or decrease the default icon size.  The minimum and maximum values are 12 and 256 pixels respectively.</p>
      </description>
    </field>

    <field>
      <name>Theme</name>
      <comment>The theme used by an iconserver object is set here.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The theme currently in use by the iconserver is set here.  You can alter the theme at any time by writing the name of the new theme to this field.  The name must be represented in the 'system:icons/' directory tree or the theme will revert back to the default setting.  When you change the theme, the icon database will be refreshed.  This may take some time depending on the number of icons to process.</p>
      </description>
    </field>

    <field>
      <name>VolatileIcons</name>
      <comment>If TRUE, the icon database will not be checked for cached icon images.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>Setting the VolatileIcons field to TRUE will turn off support for the icon database.  Icons will be scaled on the fly and saved to disk, even if a cached version of that icon already exists.</p>
      </description>
    </field>

  </fields>
  <structs>
  </structs>
</book>
