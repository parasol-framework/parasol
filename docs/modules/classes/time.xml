<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Time</name>
    <type>class</type>
    <module>Core</module>
    <comment>Simplifies the management of date/time information.</comment>
    <version>1</version>
    <id>7c9e7894</id>
    <idstring>ID_TIME</idstring>
    <category>System</category>
    <include>modules/time.h</include>
    <copyright>Paul Manias 1996-2023</copyright>
    <description>
<p>The Time class is available for programs that require time and date recording.  In future, support will also be provided for the addition and subtraction of date values.</p>
<p>Please note that the Time class uses strict metric interpretations of "millisecond" and "microsecond" terminology. That is, a millisecond is 1/1000th (one thousandth) of a second, a microsecond is 1/1000000th (one millionth) of a second.</p>
<p>To get the current system time, use the <action>Query</action> action.</p></description>
    <source>
      <file path="../classes/">class_time.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Query</name>
      <comment>Updates the values in a time object with the current system date and time.</comment>
    </action>

  </actions>

  <methods>
    <method>
      <name>SetTime</name>
      <comment>Apply the time to the system clock.</comment>
      <prototype>ERROR tmSetTime(OBJECTPTR Object)</prototype>
      <description>
<p>This method will apply the time object's values to the BIOS.  Depending on the host platform, this method may only work if the user is logged in as the administrator.</p>
      </description>
    </method>

  </methods>

  <fields>
    <field>
      <name>Day</name>
      <comment>Day (1 - 31)</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>DayOfWeek</name>
      <comment>Day of week (0 - 6) starting from Sunday.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>Hour</name>
      <comment>Hour (0 - 23)</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>MicroSecond</name>
      <comment>Microsecond (0 - 999999)</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>MilliSecond</name>
      <comment>Millisecond (0 - 999)</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>Minute</name>
      <comment>Minute (0 - 59)</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>Month</name>
      <comment>Month (1 - 12)</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>Second</name>
      <comment>Second (0 - 59)</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>SystemTime</name>
      <comment>Represents the system time when the time object was last queried.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>BIGINT</type>
      <description>
<p>The SystemTime field returns the system time if the Time object has been queried.  The time is represented in microseconds.  This field serves no purpose beyond its initial query value.</p>
      </description>
    </field>

    <field>
      <name>TimeStamp</name>
      <comment>Read this field to get representation of the time as a single integer.</comment>
      <access read="G">Get</access>
      <type>BIGINT</type>
      <description>
<p>The TimeStamp field is a 64-bit integer that represents the time object as an approximation of the number of milliseconds represented in the time object (approximately the total amount of time passed since Zero-AD).  This is convenient for summarising a time value for comparison with other time stamps, or for storing time in a 64-bit space.</p>
<p>The TimeStamp is dynamically calculated when you read this field.</p>
      </description>
    </field>

    <field>
      <name>Year</name>
      <comment>Year (-ve for BC, +ve for AD).</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

  </fields>
  <structs>
  </structs>
</book>
