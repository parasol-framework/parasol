<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Task</name>
    <type>class</type>
    <module>Core</module>
    <comment>System processes are managed by the Task class.</comment>
    <fileExtension>*.exe|*.bat|*.com</fileExtension>
    <fileDescription>Executable File</fileDescription>
    <version>1</version>
    <id>7c9e5758</id>
    <idstring>ID_TASK</idstring>
    <category>System</category>
    <include>modules/task.h</include>
    <copyright>Paul Manias 1996-2022</copyright>
    <description>
<p>Tasks, also known as processes, form the basis of process execution in an operating system.  By creating a task object, it is possible to execute a program from within the host system.  Programs that are compliant with Parasol may also reveal additional meta information such as <field>Author</field> and <field>Copyright</field> strings in the task object.</p>
<p>To execute a compiled program, set the <field>Location</field> field to point to the executable file before initialising the task.  Arguments can be passed to the executable by setting the <field>Parameters</field> field.  Once the task object is successfully initialised, use the <action>Activate</action> action to run the executable.  If the file executes successfully, a new task object is spawned separately to represent the executable (which means it is safe to destroy your task object immediately afterwards).  If the <action>Activate</action> action returns with ERR_Okay then the executable program was run successfully.</p>
<p>To find the task object that represents the active process, use the <function module="Core">CurrentTask</function> function to quickly retrieve it.</p>
<p>To send messages to another task, you need to know its <field>MessageQueue</field> ID so that <function module="Core">SendMessage</function> can be used.  A simple way to initiate interprocess communication is to pass your MessageQueue ID to the other task as a parameter.</p></description>
    <source>
      <file path="../classes/">class_task.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Activating a task object will execute it.</comment>
      <description>
<p>Activating a task results in the execution of the file referenced in the <field>Location</field> field.</p>
<p>On successful execution, the ProcessID will refer to the ID of the executed process.  This ID is compatible with the hosting platform's unique process numbers.</p>
<p>If the WAIT flag is specified, this action will not return until the executed process has returned or the <field>TimeOut</field> (if specified) has expired.  Messages are processed as normal during this time, ensuring that your process remains responsive while waiting.</p>
<p>The process' return code can be read from the <field>ReturnCode</field> field after the process has completed its execution.</p>
<p>In Microsoft Windows, output can be redirected to a file if the redirection symbol is used to direct output in one of the task arguments.  For instance <code>&gt;C:\output.txt</code> will redirect both stderr and stdout to <code>c:\output.txt</code>.  The use of <code>1&gt;</code> to redirect stdout and <code>2&gt;</code> to redirect stderr independently of each other is also acceptable.</p>
<p>When running a DOS program in Microsoft Windows, the SHELL flag can be set in the <field>Flags</field> field to prevent the DOS window from appearing.  The DOS window will also be hidden if the stdout or stderr pipes are redirected.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Failed">General failure.</error>
        <error code="TimeOut">Can be returned if the WAIT flag is used.  Indicates that the process was launched, but the timeout expired before the process returned.</error>
        <error code="FieldNotSet">The Location field has not been set.</error>
      </result>
    </action>

    <action>
      <name>GetVar</name>
      <comment>Retrieves variable field values.</comment>
    </action>

    <action>
      <name>SetVar</name>
      <comment>Variable fields are supported for the general storage of program variables.</comment>
    </action>

    <action>
      <name>Write</name>
      <comment>Send raw data to a launched process' stdin descriptor.</comment>
      <description>
<p>If a process is successfully launched with the PIPE set in <field>Flags</field>, data can be sent to its stdin pipe by calling the Write action.  Setting the Buffer parameter to NULL will result in the pipe being closed (this will signal to the process that no more data is incoming).</p>
      </description>
    </action>

  </actions>

  <methods>
    <method>
      <name>AddArgument</name>
      <comment>Adds new arguments to the Parameters field.</comment>
      <prototype>ERROR taskAddArgument(OBJECTPTR Object, CSTRING Argument)</prototype>
      <input>
        <param type="CSTRING" name="Argument">The argument string that you want to add.</param>
      </input>
      <description>
<p>This method provides a simple way of adding new arguments to the <field>Parameters</field> field.  Provide the value of the new argument to add it to the end of the list.  If the string is surrounded by quotes, they will be removed automatically.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="AllocMemory">Memory for the new Parameters could not be allocated.</error>
        <error code="GetField">The Parameters field could not be retrieved.</error>
      </result>
    </method>

    <method>
      <name>CloseInstance</name>
      <comment>Sends a quit message to all tasks running in the current instance.</comment>
      <prototype>ERROR taskCloseInstance(OBJECTPTR Object)</prototype>
      <description>
<p>This method will close all tasks that are running in the current instance by sending them a quit message.  This includes the process that is making the method call.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>Expunge</name>
      <comment>Forces a Task to expunge unused code.</comment>
      <prototype>ERROR taskExpunge(OBJECTPTR Object)</prototype>
      <description>
<p>The Expunge method releases all loaded libraries that are no longer in use by the active process.</p>
<p>If the Expunge method is called on the System Task, it will message all Tasks to perform the expunge sequence. The System Task object can be found by searching for the "SystemTask" object.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>GetEnv</name>
      <comment>Retrieves environment variables for the active process.</comment>
      <prototype>ERROR taskGetEnv(OBJECTPTR Object, CSTRING Name, CSTRING * Value)</prototype>
      <input>
        <param type="CSTRING" name="Name">The name of the environment variable to retrieve.</param>
        <param type="CSTRING *" name="Value">The value of the environment variable is returned in this parameter.</param>
      </input>
      <description>
<p>On platforms that support environment variables, GetEnv() returns the value of the environment variable matching the Name string.  If there is no matching variable, ERR_DoesNotExist is returned.</p>
<p>In Windows, it is possible to look up registry keys if the string starts with one of the following (in all other cases, the system's environment variables are queried):</p>
<pre>\HKEY_LOCAL_MACHINE\
\HKEY_CURRENT_USER\
\HKEY_CLASSES_ROOT\
\HKEY_USERS\
</pre>
<p>Here is a valid example for reading the 'Parasol' key value <code>\HKEY_CURRENT_USER\Software\Parasol</code></p>
<p>Caution: If your programming language uses backslash as an escape character (true for Fluid developers), remember to use double-backslashes as the key value separator in your Name string.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="NoSupport">The platform does not support environment variables.</error>
        <error code="DoesNotExist">The environment variable is undefined.</error>
      </result>
    </method>

    <method>
      <name>Quit</name>
      <comment>Sends a quit message to a task.</comment>
      <prototype>ERROR taskQuit(OBJECTPTR Object)</prototype>
      <description>
<p>The Quit method can be used as a convenient way of sending a task a quit message.  This will normally result in the destruction of the task, so long as it is still functioning correctly and has been coded to respond to the MSGID_QUIT message type.  It is legal for a task to ignore a quit request if it is programmed to stay alive.  A task can be killed outright with the Free action.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>SetEnv</name>
      <comment>Sets environment variables for the active process.</comment>
      <prototype>ERROR taskSetEnv(OBJECTPTR Object, CSTRING Name, CSTRING Value)</prototype>
      <input>
        <param type="CSTRING" name="Name">The name of the environment variable to set.</param>
        <param type="CSTRING" name="Value">The value to assign to the environment variable.</param>
      </input>
      <description>
<p>On platforms that support environment variables, SetEnv() is used for defining values for named variables.  A Name and accompanying Value string are required.  If the Value is NULL, the environment variable is removed if it already exists.</p>
<p>In Windows, it is possible to set registry keys if the string starts with one of the following (in all other cases, the system's environment variables are queried):</p>
<pre>\HKEY_LOCAL_MACHINE\
\HKEY_CURRENT_USER\
\HKEY_CLASSES_ROOT\
\HKEY_USERS\
</pre>
<p>When setting a registry key, the function will always set the Value as a string type unless the key already exists.  If the existing key value is a number such as DWORD or QWORD, then the Value will be converted to an integer before the key is set.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="NoSupport">The platform does not support environment variables.</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>Actions</name>
      <comment>Used to gain direct access to a task's actions.</comment>
      <access read="G">Get</access>
      <type>APTR</type>
      <description>
<p>This field provides direct access to the actions of a task.  You can use it in the development of an executable program to hook into the Core action system.  This allows you to create a program that blends in seamlessly with the system's object oriented design.  In some cases this is a necessity, for example, use of some functions will require you to hook into the ActionNotify action.</p>
<p>The Actions field itself points to a list of action routines that are arranged into a lookup table, sorted by action ID. You can hook into an action simply by writing to its index in the table with a pointer to the routine that you want to use for that action.  For example:</p>
<pre>if (!AccessObject(CurrentTask(), 5000, &amp;task)) {
   GetPointer(task, FID_Actions, &amp;actions);
   actions[AC_ActionNotify] = PROGRAM_ActionNotify;
   ReleaseObject(task);
}
</pre>
<p>The synopsis of the routines that you use for hooking into the action list must match <code>ERROR PROGRAM_ActionNotify(*Task, APTR Args)</code>.</p>
<p>It is recommended that you refer to the Action Support Guide before hooking into any action that you have not written code for before.</p>
      </description>
    </field>

    <field>
      <name>Args</name>
      <comment>Command line arguments (string format).</comment>
      <access write="S">Set</access>
      <type>STRING</type>
      <description>
<p>This field allows command line arguments to be set using a single string, whereby each value is separated by whitespace. The string will be disassembled and the arguments will be available to read from the <field>Parameters</field> field.</p>
<p>If an argument needs to include whitespace, use double-quotes to encapsulate the value.</p>
      </description>
    </field>

    <field>
      <name>Author</name>
      <comment>Describes the person that wrote the program.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>This field gives information about the author of the program/task. If the author is not determinable from the <field>Location</field>, this field will usually be set to NULL.</p>
      </description>
    </field>

    <field>
      <name>Copyright</name>
      <comment>Copyright/licensing details.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
    </field>

    <field>
      <name>Date</name>
      <comment>The date that the program was last updated or compiled.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The Date usually specifies the date on which the program was compiled for public release. It is up to the developer of the program to set this string correctly and keep it current.</p>
<p>The correct specification for this string is <code>Day Month Year</code> or <code>Month Year</code> as in the following examples:</p>
<pre>"14 February 1998"
"6 May 1997"
"January 2000"
</pre>
<p>Please do not use shorthand dates such as <code>14/2/98</code>.  Do not include the time or any other information besides that which is outlined here.</p>
      </description>
    </field>

    <field>
      <name>ErrorCallback</name>
      <comment>This callback returns incoming data from STDERR.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The ErrorCallback field can be set with a function reference that will be called when an active process sends data via STDERR.  The callback must follow the synopsis <code>Function(*Task, APTR Data, LONG Size)</code></p>
<p>The information read from STDERR will be returned in the Data pointer and the byte-length of the data will be indicated by the Size.  The data pointer is temporary and will be invalid once the callback function has returned.</p>
      </description>
    </field>

    <field>
      <name>ExitCallback</name>
      <comment>The callback is activated when the process is terminated.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The ExitCallback field can be set with a function reference that will be called when the executed process is terminated.  The callback must follow the synopsis <code>Function(*Task)</code>.</p>
<p>Please keep in mind that if the Task is freed when the process is still executing, the ExitCallback routine will not be called on termination because the Task object no longer exists for the control of the process.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="I">Read/Init</access>
      <type lookup="TSF">INT</type>
      <description>
<types lookup="TSF"/>
      </description>
    </field>

    <field>
      <name>InputCallback</name>
      <comment>This callback returns incoming data from STDIN.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The InputCallback field is available for use only when the Task object represents the current process. The referenced function will be called when process receives data from STDIN.  The callback must follow the synopsis <code>Function(*Task, APTR Data, LONG Size, ERROR Status)</code></p>
<p>The information read from STDOUT will be returned in the Data pointer and the byte-length of the data will be indicated by the Size.  The data buffer is temporary and will be invalid once the callback function has returned.</p>
<p>A status of ERR_Finished is sent if the stdinput handle has been closed.</p>
      </description>
    </field>

    <field>
      <name>Instance</name>
      <comment>The instance ID that the process belongs to.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>All tasks that use the Parasol API belong to a run-time instance that can host multiple processes.  Tasks that share the same instance ID can easily communicate with each other, while those that do not will be in a separate namespace.</p>
<p>It is not possible to change the instance ID once the process has started.  New processes can be assigned an instance ID on creation with the <code>--instance</code> commandline argument.  By default, any new process will share the same instance ID as its creator.</p>
      </description>
    </field>

    <field>
      <name>LaunchPath</name>
      <comment>Launched executables will start in the path specified here.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Use the LaunchPath field to specify the folder that a launched executable will start in when the task object is activated.  This will override all other path options, such as the RESET_PATH flag.</p>
      </description>
    </field>

    <field>
      <name>Location</name>
      <comment>Location of an executable file to launch.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>When a task object is activated, the Location field will be checked for a valid filename.  If the path is valid, the executable code will be loaded from this source.  The source must be in an executable format recognised by the native platform.</p>
<p>Leading spaces will be ignored by the string parser.  The Location string can be enclosed with quotes, in which case only the quoted portion of the string will be used as the source path.</p>
      </description>
    </field>

    <field>
      <name>MessageQueue</name>
      <comment>Read this field to acquire a task's message queue ID.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>If you need the ID of a task's message queue, read this field to obtain it.  Once you have a task's message queue ID, you can use it to send messages to the task.  For information on messaging, refer to the <function module="Core">GetMessage</function>, <function module="Core">ProcessMessages</function> and <function module="Core">SendMessage</function> functions.</p>
      </description>
    </field>

    <field>
      <name>Name</name>
      <comment>Name of the task.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>This field specifies the name of the Task or program that has been initialised. It is up to the developer of the program to set the Name which will appear in this field.  If there is no name for the task then the system may assign a randomly generated name.</p>
      </description>
    </field>

    <field>
      <name>OutputCallback</name>
      <comment>This callback returns incoming data from STDOUT.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The OutputCallback field can be set with a function reference that will be called when an active process sends data via STDOUT.  The callback must follow the synopsis <code>Function(*Task, APTR Data, LONG Size)</code></p>
<p>The information read from STDOUT will be returned in the Data pointer and the byte-length of the data will be indicated by the Size.  The data pointer is temporary and will be invalid once the callback function has returned.</p>
      </description>
    </field>

    <field>
      <name>Parameters</name>
      <comment>Command line arguments (list format).</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING []</type>
      <description>
<p>Command line arguments for a program can be defined here in list format, whereby each argument is an independent string.  The list must be terminated with a NULL pointer.</p>
<p>To illustrate, the following command-line string:</p>
<pre>1&gt; YourProgram PREFS MyPrefs -file "documents:readme.txt"</pre>
<p>Would be represented as follows:</p>
<pre>CSTRING Args[] = {
   "PREFS",
   "MyPrefs",
   "-file",
   "documents:readme.txt",
   NULL
};
</pre>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>The current working folder of the active process.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The Path specifies the 'working folder' that determines where files are loaded from when an absolute path is not otherwise specified for file access.  Initially the working folder is usually set to the folder of the parent process, such as that of a terminal shell.</p>
<p>The working folder can be changed at any time by updating the Path with a new folder location.  If changing to the new folder fails for any reason, the working folder will remain unchanged and the path value will not be updated.</p>
      </description>
    </field>

    <field>
      <name>Priority</name>
      <comment>The task priority in relation to other tasks is be defined here.</comment>
      <access write="S">Set</access>
      <type>INT</type>
      <description>
<p>Set the Priority field to change the priority of the process associated with the task.  The default value for all processes is zero.  High positive values will give the process more CPU time while negative values will yield CPU time to other active processes.</p>
<p>Note that depending on the platform, there may be limits as to whether one process can change the priority level of a foreign process.  Other factors such as the scheduler used by the host system should be considered in the effect of prioritisation.</p>
      </description>
    </field>

    <field>
      <name>ProcessID</name>
      <comment>Reflects the process ID when an executable is launched.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>If a task object launches an executable file via Activate(), the ProcessID will be set to the 'pid' that was assigned to the new process by the host system.  At all other times the ProcessID is set to zero.</p>
      </description>
    </field>

    <field>
      <name>ProcessPath</name>
      <comment>The path of the executable that is associated with the task.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
      <description>
<p>The ProcessPath is set to the path of the executable file that is associated with the task.  It is managed internally and cannot be altered.</p>
<p>In Microsoft Windows it is not always possible to determine the origins of an executable, in which case the ProcessPath is set to the working folder in use at the time the process was launched.</p>
      </description>
    </field>

    <field>
      <name>ReturnCode</name>
      <comment>The task's return code can be retrieved following execution.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Once a process has completed execution then its return code can be read from this field.  If process is still running, the error code ERR_TaskStillExists will be returned.</p>
      </description>
    </field>

    <field>
      <name>Short</name>
      <comment>A short description of the process' purpose.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>This field allows for the specification of a short description for the process. The description should be under 80 characters (one sentence).  The description is typically useful for occasions where the user is debugging the system or trying to get a quick overview of the processes that are currently running.</p>
      </description>
    </field>

    <field>
      <name>TimeOut</name>
      <comment>Limits the amount of time to wait for a launched process to return.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>DOUBLE</type>
      <description>
<p>This field can be set in conjunction with the WAIT flag to define the time limit when waiting for a launched process to return.  The time out is defined in seconds.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="TSF" comment="Task flags">
      <const name="ATTACHED">Forces new task to be attached to the parent (child will close when parent closes).</const>
      <const name="DEBUG">Additional debug messages will be printed during normal usage of the task class when this flag is set.</const>
      <const name="DETACHED">Forces new task to be detached from the parent.</const>
      <const name="FOREIGN">Set this flag when using the task object to execute a foreign process - that is an executable that does not use the Parasol API.</const>
      <const name="PIPE">Enable the output pipe to the launched process so that it can read data.</const>
      <const name="PRIVILEGED">During a normal execution process, any privileges of the parent process will be dropped so that the child process runs unprivileged.  This behaviour can be reversed if he PRIVILEGED flag is set, in which case the child process has the same privileges as the parent.</const>
      <const name="QUIET">Setting this flag will divert all process output to /dev/null or the nearest equivalent for non-Unix systems.</const>
      <const name="RESET_PATH">If set, the executed process will start in its own folder rather than the folder of the parent process.</const>
      <const name="SHELL">Enables shell mode.  On Unix systems, this means that a shell (usually BASH) will be used to launch the process.</const>
      <const name="WAIT">This flag will cause the parent process to halt when the task is activated.  Control is returned to the parent process once the child process terminates.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
