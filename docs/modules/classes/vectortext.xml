<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>VectorText</name>
    <type>class</type>
    <module>Vector</module>
    <comment>Extends the Vector class with support for generating text.</comment>
    <version>1</version>
    <id>51bb151d</id>
    <idstring>ID_VECTORTEXT</idstring>
    <category>Graphics</category>
    <include>modules/vectortext.h</include>
    <copyright>Paul Manias © 2010-2022</copyright>
    <description>
<p>To create text along a path, set the #Morph field with a reference to any <class name="Vector">Vector</class> object that generates a path.  The following extract illustrates the SVG equivalent of this feature:</p>
<pre>&lt;defs&gt;
  &lt;path id="myTextPath2" d="M75,20 l100,0 l100,30 q0,100 150,100"/&gt;
&lt;/defs&gt;

&lt;text x="10" y="100" stroke="#000000"&gt;
  &lt;textPath xlink:href="#myTextPath2"/&gt;
&lt;/text&gt;
</pre>
<p>Support for bitmap fonts is included.  This feature is implemented by drawing bitmap characters to an internal <class name="VectorImage">VectorImage</class> and then rendering that to the viewport as a rectangular path.  It is recommended that this feature is only used for fast 1:1 rendering without transforms.  The user is otherwise better served through the use of scalable fonts.</p></description>
    <source>
      <file path="vectors/">text.cpp</file>
    </source>
  </info>

  <actions>
  </actions>

  <methods>
    <method>
      <name>DeleteLine</name>
      <comment>Deletes any line number.</comment>
      <prototype>ERROR vtDeleteLine(OBJECTPTR Object, LONG Line)</prototype>
      <input>
        <param type="LONG" name="Line">The line number that you want to delete.  If negative, the last line will be deleted.</param>
      </input>
      <description>
<p>This method deletes lines from a text object.  You only need to specify the line number to have it deleted.  If the line number does not exist, then the call will fail.  The text graphic will be updated as a result of calling this method.</p>
      </description>
      <result>
        <error code="Args">The Line value was out of the valid range.</error>
        <error code="Okay">The line was deleted.</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>Align</name>
      <comment>Defines the alignment of the text string.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>This field specifies the horizontal alignment of the text string.  The standard alignment flags are supported in the form of <code>ALIGN_LEFT</code>, <code>ALIGN_HORIZONTAL</code> and <code>ALIGN_RIGHT</code>.</p>
<p>In addition, the SVG equivalent values of 'start', 'middle' and 'end' are supported and map directly to the formerly mentioned align flags.</p>
      </description>
    </field>

    <field>
      <name>CharLimit</name>
      <comment>Limits the total characters allowed in the string.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Set the CharLimit field to limit the number of characters that can appear in the string.  The minimum possible value is 0 for no characters.  If the object is in edit mode then the user will be unable to extend the string beyond the limit.</p>
<p>Note that it is valid for the <field>String</field> length to exceed the limit if set manually.  Only the display of the string characters will be affected by the CharLimit value.</p>
      </description>
    </field>

    <field>
      <name>CursorColumn</name>
      <comment>The current column position of the cursor.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>CursorRow</name>
      <comment>The current line position of the cursor.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>DX</name>
      <comment>Adjusts horizontal spacing on a per-character basis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE []</type>
      <description>
<p>If a single value is provided, it represents the new relative X coordinate for the current text position for rendering the glyphs corresponding to the first character within this element or any of its descendants.  The current text position is shifted along the x-axis of the current user coordinate system by the provided value before the first character's glyphs are rendered.</p>
<p>If a series of values is provided, then the values represent incremental shifts along the x-axis for the current text position before rendering the glyphs corresponding to the first n characters within this element or any of its descendants. Thus, before the glyphs are rendered corresponding to each character, the current text position resulting from drawing the glyphs for the previous character within the current ‘text’ element is shifted along the X axis of the current user coordinate system by length.</p>
<p>If more characters exist than values, then for each of these extra characters: (a) if an ancestor Text object specifies a relative X coordinate for the given character via a <field>DX</field> field, then the current text position is shifted along the x-axis of the current user coordinate system by that amount (nearest ancestor has precedence), else (b) no extra shift along the x-axis occurs.</p>
      </description>
    </field>

    <field>
      <name>DY</name>
      <comment>Adjusts vertical spacing on a per-character basis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE []</type>
      <description>
<p>This field follows the same rules described in <field>DX</field>.</p>
      </description>
    </field>

    <field>
      <name>Face</name>
      <comment>Defines the font face/family to use in rendering the text string.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The face/family of the desired font for rendering the text is specified here.  It is possible to list multiple fonts in CSV format in case the first-choice font is unavailable.  For instance, <code>Arial,Open Sans</code> would load the Open Sans font if Arial was unavailable.</p>
<p>If none of the listed fonts are available, the default system font will be used.</p>
<p>Please note that referencing bitmap fonts is unsupported and they will be ignored by the font loader.</p>
      </description>
    </field>

    <field>
      <name>Focus</name>
      <comment>Refers to the object that will be monitored for user focussing.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>OBJECTID</type>
      <description>
<p>By default, a VectorText object with editing enabled will become active (capable of receiving keyboard input) when its nearest viewport receives the focus.  Setting the Focus field allows monitoring to be redirected to an alternative viewport.</p>
      </description>
    </field>

    <field>
      <name>Font</name>
      <comment>The primary Font object that is used to source glyphs for the text string.</comment>
      <access read="G">Get</access>
      <type>OBJECTPTR</type>
      <description>
<p>Returns the <class name="Font">Font</class> object that is used for drawing the text.  The object may be queried but must remain unmodified. Any modification by the client that happens to work in the present code release may fail in future releases.</p>
      </description>
    </field>

    <field>
      <name>FontSize</name>
      <comment>Defines the vertical size of the font.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The FontSize refers to the height of the font from baseline to baseline.  Without an identifier, the height value corresponds to the current user coordinate system (pixels by default).  If you intend to set the font's point size, please ensure that 'pt' is appended to the number.</p>
<p>If retrieving the font size, the string must be freed by the client when no longer in use.</p>
      </description>
    </field>

    <field>
      <name>FontStyle</name>
      <comment>Determines font styling.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Unique styles for a font can be selected through the FontStyle field.  Conventional font styles are <code>Bold</code>, <code>Bold Italic</code>, <code>Italic</code> and <code>Regular</code> (the default).  TrueType fonts can use any style name that the designer chooses, such as <code>Narrow</code> or <code>Wide</code>, so use <function module="Font">GetList</function> for a definitive list of available style names.</p>
      </description>
    </field>

    <field>
      <name>InlineSize</name>
      <comment>Enables word-wrapping at a fixed area size.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The inline-size property allows one to set the wrapping area to a rectangular shape. The computed value of the property sets the width of the rectangle for horizontal text and the height of the rectangle for vertical text. The other dimension (height for horizontal text, width for vertical text) is of infinite length. A value of zero (the default) disables the creation of a wrapping area.</p>
      </description>
    </field>

    <field>
      <name>LetterSpacing</name>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
    </field>

    <field>
      <name>LineLimit</name>
      <comment>Restricts the total number of lines allowed in a text object.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Set the LineLimit field to restrict the maximum number of lines permitted in a text object.  It is common to set this field to a value of 1 for input boxes that have a limited amount of space available.</p>
      </description>
    </field>

    <field>
      <name>Rotate</name>
      <comment>Applies vertical spacing on a per-character basis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE []</type>
      <description>
<p>Applies supplemental rotation about the current text position for all of the glyphs in the text string.</p>
<p>If multiple values are provided, then the first number represents the supplemental rotation for the glyphs corresponding to the first character within this element or any of its descendants, the second number represents the supplemental rotation for the glyphs that correspond to the second character, and so on.</p>
<p>If more numbers are provided than there are characters, then the extra numbers will be ignored.</p>
<p>If more characters are provided than numbers, then for each of these extra characters the rotation value specified by the last number must be used.</p>
<p>If the attribute is not specified and if an ancestor 'text' or 'tspan' element specifies a supplemental rotation for a given character via a 'rotate' attribute, then the given supplemental rotation is applied to the given character (nearest ancestor has precedence). If there are more characters than numbers specified in the ancestor's 'rotate' attribute, then for each of these extra characters the rotation value specified by the last number must be used.</p>
<p>This supplemental rotation has no impact on the rules by which current text position is modified as glyphs get rendered and is supplemental to any rotation due to text on a path and to 'glyph-orientation-horizontal' or 'glyph-orientation-vertical'.</p>
      </description>
    </field>

    <field>
      <name>SelectColumn</name>
      <comment>Indicates the column position of a selection's beginning.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>If the user has selected an area of text, the starting column of that area will be indicated by this field.  If an area has not been selected, the value of the SelectColumn field is undefined.</p>
<p>To check whether or not an area has been selected, test the <code>AREA_SELECTED</code> bit in the #Flags field.</p>
      </description>
    </field>

    <field>
      <name>SelectRow</name>
      <comment>Indicates the line position of a selection's beginning.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>If the user has selected an area of text, the starting row of that area will be indicated by this field.  If an area has not been selected, the value of the SelectRow field is undefined.</p>
<p>To check whether or not an area has been selected, test the <code>AREA_SELECTED</code> bit in the #Flags field.</p>
      </description>
    </field>

    <field>
      <name>ShapeInside</name>
      <comment>Reference a vector shape to define a content area that enables word-wrapping.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>OBJECTID</type>
      <description>
<p>This property enables word-wrapping in which the text will conform to the path of a <class name="Vector">Vector</class> shape.  Internally this is achieved by rendering the vector path as a mask and then fitting the text within the mask without crossing its boundaries.</p>
<p>This feature is computationally expensive and the use of <field>InlineSize</field> is preferred if the text can be wrapped to a rectangular area.</p>
      </description>
    </field>

    <field>
      <name>ShapeSubtract</name>
      <comment>Excludes a portion of the content area from the wrapping area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>OBJECTID</type>
      <description>
<p>This property can be used in conjunction with <field>ShapeInside</field> to further restrict the content area that is available for word-wrapping.  It has no effect if <field>ShapeInside</field> is undefined.</p>
      </description>
    </field>

    <field>
      <name>Spacing</name>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
    </field>

    <field>
      <name>StartOffset</name>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
    </field>

    <field>
      <name>String</name>
      <comment>The string to use for drawing the glyphs is defined here.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The string for drawing the glyphs is defined here in UTF-8 format.</p>
<p>When retrieving a string that contains return codes, only the first line of text is returned.</p>
      </description>
    </field>

    <field>
      <name>TextFlags</name>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>TextLength</name>
      <comment>Reflects the expected length of the text after all computations have been taken into account.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The purpose of this attribute is to allow exact alignment of the text graphic in the computed result.  If the #Width that is initially computed does not match this value, then the text will be scaled to match the TextLength.</p>
      </description>
    </field>

    <field>
      <name>TotalLines</name>
      <comment>The total number of lines stored in the object.</comment>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

    <field>
      <name>Weight</name>
      <comment>Defines the level of boldness in the text.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The weight value determines the level of boldness in the text.  A default value of 400 will render the text in its normal state.  Lower values between 100 to 300 render the text in a light format, while high values in the range of 400 - 900 result in boldness.</p>
<p>Please note that setting the Weight will give it priority over the @FontStyle value.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>The x coordinate of the text.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The x-axis coordinate of the text is specified here as a fixed value.  Relative coordinates are not supported.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>The base-line y coordinate of the text.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The Y-axis coordinate of the text is specified here as a fixed value.  Relative coordinates are not supported.</p>
<p>Unlike other vector shapes, the Y coordinate positions the text from its base line rather than the top of the shape.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="ARC" comment="Options for drawing arcs.">
      <const name="LARGE"/>
      <const name="SWEEP"/>
    </constants>

    <constants lookup="VSM">
      <const name="AUTO">The default option is chosen by the system.  This will typically be bilinear, but slow machines may switch to nearest neighbour and high speed machines could use more advanced methods.</const>
      <const name="NEIGHBOUR">Nearest neighbour is the fastest sampler at the cost of poor quality.</const>
      <const name="BILINEAR">Bilinear is a common algorithm that produces a reasonable quality image.</const>
      <const name="BICUBIC">Produces a similar result to bilinear with a marginally sharper after-effect.</const>
      <const name="SPLINE16">About 1/2 the speed of bilinear, this method produces a considerably better result.</const>
      <const name="KAISER"/>
      <const name="QUADRIC"/>
      <const name="GAUSSIAN"/>
      <const name="BESSEL"/>
      <const name="MITCHELL"/>
      <const name="SINC3">Five times slower than bilinear, the final result is of very good quality.</const>
      <const name="LANCZOS3">This well known algorithm may serve as a point of comparison for evaluating the results of other methods.  It shares characteristics with SINC and BLACKMAN.</const>
      <const name="BLACKMAN3">Five times slower than bilinear, the final result will lack sharpness when compared to SINC3.</const>
      <const name="SINC8">15 times slower than bilinear, the final result is of excellent quality but may be marginally over-sharpened.</const>
      <const name="LANCZOS8"/>
      <const name="BLACKMAN8">15 times slower than bilinear, the final result is of excellent quality and sharpness is well balanced.</const>
    </constants>

    <constants lookup="VSPREAD" comment="Spread method options define the method to use for tiling filled graphics.">
      <const name="UNDEFINED">Either the default setting will be applied or the setting will be inherited from a parent object.</const>
      <const name="PAD">Scale the graphic to the object bounds.</const>
      <const name="REFLECT">Tile the graphic, reflecting the image alternately on the X and Y axis.</const>
      <const name="REPEAT">Tile the graphic repeatedly.</const>
      <const name="REFLECT_X">Tile the graphic, reflecting the image alternately on the X axis only.</const>
      <const name="REFLECT_Y">Tile the graphic, reflecting the image alternately on the Y axis only.</const>
      <const name="CLIP">Do not scale the graphic.  Clip it if it extends past imposed boundaries.</const>
    </constants>

    <constants lookup="VUNIT">
      <const name="UNDEFINED"/>
      <const name="BOUNDING_BOX">Coordinates are relative to the object's bounding box.</const>
      <const name="USERSPACE">Coordinates are relative to the current viewport.</const>
    </constants>

    <constants lookup="VTF" comment="Types of vector transforms.">
      <const name="SKEW">Skew the vector by (X,Y)</const>
      <const name="TRANSLATE">Translate the vector by (X,Y)</const>
      <const name="MATRIX">Apply a 2x3 matrix transformation to the vector.</const>
      <const name="SCALE">Scale the vector by (X,Y)</const>
      <const name="ROTATE">Rotate the vector around (CX,CY) by Angle.</const>
    </constants>

    <constants lookup="VIS" comment="Options for the Vector class' Visibility field.">
      <const name="HIDDEN">Hide the vector and its children.</const>
      <const name="VISIBLE">The default.  Ensures that the vector is visible.</const>
      <const name="COLLAPSE">Hide the vector and its children.  Do not use - provided for SVG compatibility only.</const>
      <const name="INHERIT">Inherit the visibility state from the parent.</const>
    </constants>

    <constants lookup="CS" comment="Colour space options.">
      <const name="SRGB">The default colour-space is sRGB, recommended for its speed.</const>
      <const name="LINEAR_RGB">Linear RGB is the default colour space for SVG and produces the best results.</const>
      <const name="INHERIT">Inherit the colour space option from the parent vector.</const>
    </constants>

    <constants lookup="VIJ" comment="Inner join options for angled lines.">
      <const name="BEVEL">Blunts the edge of the join.</const>
      <const name="MITER">Forms a sharp point at the join.  Typically not the best looking option.</const>
      <const name="JAG">A special non-SVG option.</const>
      <const name="ROUND">Rounds the edge of the join to produce the best looking results.</const>
      <const name="INHERIT">Inherit the parent's join value.</const>
    </constants>

    <constants lookup="VF" comment="Optional flags and indicators for the Vector class.">
      <const name="DISABLED">The vector is disabled and user input should be ignored.</const>
      <const name="HAS_FOCUS">The vector holds the user's input focus.</const>
    </constants>

    <constants lookup="VGF" comment="Gradient flags">
      <const name="FIXED_FY">FY is fixed</const>
      <const name="RELATIVE_X2">X2 is relative</const>
      <const name="RELATIVE_X1">X1 is relative</const>
      <const name="FIXED_X1">X1 is fixed</const>
      <const name="FIXED_Y2">Y2 is fixed</const>
      <const name="RELATIVE_CX">CX is relative</const>
      <const name="FIXED_RADIUS">is fixed</const>
      <const name="RELATIVE_RADIUS">Radius is relative</const>
      <const name="RELATIVE_FX">FX is relative</const>
      <const name="FIXED_CX">CX is fixed</const>
      <const name="RELATIVE_Y2">Y2 is relative</const>
      <const name="RELATIVE_CY">CY is relative</const>
      <const name="FIXED_FX">FX is fixed</const>
      <const name="RELATIVE_FY">FY is relative</const>
      <const name="FIXED_Y1">Y1 is fixed</const>
      <const name="FIXED_CY">CY is fixed</const>
      <const name="RELATIVE_Y1">Y1 is relative</const>
      <const name="FIXED_X2">X2 is fixed</const>
    </constants>

    <constants lookup="VLC" comment="Line-cap options.">
      <const name="BUTT">The default.  The line is sharply squared off at its exact end point.</const>
      <const name="SQUARE">Similar to butt, the line is sharply squared off but will extend past the end point by 'StrokeWidth / 2'.</const>
      <const name="ROUND">The line cap is a half-circle and the line's end-point forms the center point.</const>
      <const name="INHERIT">The cap type is inherited from the parent (defaults to butt if unspecified).</const>
    </constants>

    <constants lookup="VBF" comment="Options for vecGetBoundary().">
      <const name="INCLUSIVE">The result will be inclusive of all paths that belong to children of the queried vector.</const>
      <const name="NO_TRANSFORM">The transformation step will not be applied to the vector's path.</const>
    </constants>

    <constants lookup="VPF" comment="Optional flags for the VectorScene object.">
      <const name="RENDER_TIME">Compute the drawing frame-rate for the RenderTime field.</const>
      <const name="BITMAP_SIZED">Automatically adjust the PageWidth and PageHeight to match the target Bitmap width and height.</const>
      <const name="RESIZE">The vector will be stretched to fit the PageWidth and PageHeight values, if defined by the client.</const>
    </constants>

    <constants lookup="FM" comment="Mask for controlling feedback events that are received.">
      <const name="PATH_CHANGED">The vector path has been modified or affected by a transform.</const>
    </constants>

    <constants lookup="VLJ" comment="Options for the look of line joins.">
      <const name="MITER">The default.  The join will form a pointed edge.</const>
      <const name="MITER_REVERT"/>
      <const name="ROUND">The join is rounded.</const>
      <const name="BEVEL">The join is blunted, eliminating overly sharp edges.</const>
      <const name="MITER_ROUND">Default to MITER, but switch to ROUND if the miter limit is exceeded.</const>
      <const name="INHERIT">Inherit the join option from the parent.</const>
    </constants>

    <constants lookup="ARF" comment="Aspect ratios control alignment, scaling and clipping.">
      <const name="NONE">Scale the viewbox to match the size of the viewport.  Aspect ratio is not preserved.</const>
      <const name="Y_MIN">Align to the top.</const>
      <const name="Y_MAX">Align to the bottom.</const>
      <const name="X_MID">Align to the horizontal center.</const>
      <const name="X_MIN">Align to the left.</const>
      <const name="X_MAX">Align to the right.</const>
      <const name="SLICE">Aspect ratio is preserved. The viewbox can extend beyond the viewport's edges on one axis.  The viewbox is scaled up as much as possible.</const>
      <const name="Y_MID">Align to the vertical center.</const>
      <const name="MEET">Aspect ratio is preserved. The entire viewbox will be visible in the viewport.  The viewbox is scaled up as much as possible.</const>
    </constants>

    <constants lookup="VGT" comment="VectorGradient options.">
      <const name="LINEAR">A linear gradient is drawn from (X1,Y1) to (X2,Y2).</const>
      <const name="RADIAL">A radial gradient is drawn from CenterX,CenterY to Radius.  An optional focal point can be expressed with FX and FY.</const>
      <const name="CONIC">The conic gradient is a variant on the radial type, whereby the colour values are drawn as a line that revolves around the cone's center point.</const>
      <const name="DIAMOND">A diamond gradient is drawn as a square emanating from the center point.</const>
      <const name="CONTOUR">Contoured gradients follow the contours of the vector path in which they are rendered.</const>
    </constants>

    <constants lookup="VFR" comment="Vector fill rules for the FillRule field in the Vector class.">
      <const name="NON_ZERO">This is the default.  This rule determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a path segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside the path. Otherwise, it is inside.</const>
      <const name="EVEN_ODD">This rule determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.</const>
      <const name="INHERIT">The rule is inherited from the parent vector(s).</const>
    </constants>

  </types>
  <structs>
    <struct name="VectorTransform">
      <field name="Next" type="struct VectorTransform *">The next transform in the list.</field>
      <field name="Prev" type="struct VectorTransform *">The previous transform in the list.</field>
      <field name="X" type="DOUBLE">The X value, the meaning of which is defined by the Type</field>
      <field name="Y" type="DOUBLE">The Y value, the meaning of which is defined by the Type</field>
      <field name="Angle" type="DOUBLE">Requires VTF_ROTATE.  A rotation by Angle degrees about a given point.  If optional parameters X and Y are not specified, the rotate is about the origin of the current user coordinate system.</field>
      <field name="Matrix[6]" type="DOUBLE">Requires VTF_MATRIX.  A transformation expressed as a matrix of six values.</field>
      <field name="Type" type="WORD" lookup="VTF">The VTF indicates the type of transformation: rotate, skew etc</field>
    </struct>

    <struct name="PathCommand" comment="Base structure for path commands.">
      <field name="Type" type="UBYTE">The command type (PE value)</field>
      <field name="Curved" type="UBYTE">Private</field>
      <field name="LargeArc" type="UBYTE">Equivalent to the large-arc-flag in SVG, it ensures that the arc follows the longest drawing path when TRUE.</field>
      <field name="Sweep" type="UBYTE">Equivalent to the sweep-flag in SVG, it inverts the default behaviour in generating arc paths.</field>
      <field name="Pad" type="LONG">Private</field>
      <field name="X" type="DOUBLE">The targeted X coordinate (absolute or relative) for the command</field>
      <field name="Y" type="DOUBLE">The targeted Y coordinate (absolute or relative) for the command</field>
      <field name="AbsX" type="DOUBLE">Private</field>
      <field name="AbsY" type="DOUBLE">Private</field>
      <field name="X2" type="DOUBLE">The X2 coordinate for curve commands, or RX for arcs</field>
      <field name="Y2" type="DOUBLE">The Y2 coordinate for curve commands, or RY for arcs</field>
      <field name="X3" type="DOUBLE">The X3 coordinate for curve-to or smooth-curve-to</field>
      <field name="Y3" type="DOUBLE">The Y3 coordinate for curve-to or smooth-curve-to</field>
      <field name="Angle" type="DOUBLE">Arc angle</field>
    </struct>

    <struct name="VectorPoint" comment="Structure for the VectorPolygon PointsArray field.">
      <field name="X" type="DOUBLE">The X coordinate of this point.</field>
      <field name="Y" type="DOUBLE">The Y coordinate of this point.</field>
      <field name="XRelative" type="UBYTE">TRUE if the X value is relative to its viewport (between 0 and 1.0).</field>
      <field name="YRelative" type="UBYTE">TRUE if the Y value is relative to its viewport (between 0 and 1.0).</field>
    </struct>

  </structs>
</book>
