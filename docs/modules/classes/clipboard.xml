<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Clipboard</name>
    <type>class</type>
    <module>Widget</module>
    <comment>The Clipboard class manages cut, copy and paste operations.</comment>
    <version>1</version>
    <id>4912a9b5</id>
    <idstring>ID_CLIPBOARD</idstring>
    <category>IO</category>
    <include>modules/clipboard.h</include>
    <copyright>Paul Manias 2003-2017</copyright>
    <description>
<p>The Clipboard class manages data transfer between applications on behalf of the user.  It holds a data cache of clipped items that originate from source applications, and these can be retrieved and 'pasted' into target applications.  The Clipboard class is provided for the primary purpose of allowing applications to implement the traditional 'cut', 'copy' and 'paste' actions.</p>
<p>Multiple clipboard objects can be created, but they all control the same group of clipped data for the logged-in user. All items that are passed to the clipboard object are stored in the 'clipboard:' assignment, which defaults to <code>temp:clipboard/</code>.</p>
<p>There is a limit on the amount of clipped items that can be stored in the clipboard.  Only 1 group of each datatype is permitted (for example, only one group of image clips may exist at any time) and there is a preset limit on the total number of clips that can be stored in the history cache.</p></description>
    <source>
      <file>class_clipboard.c</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Clear</name>
      <comment>Destroys all cached data that is stored in the clipboard.</comment>
    </action>

    <action>
      <name>DataFeed</name>
      <comment>This action can be used to place data in a clipboard.</comment>
      <description>
<p>Data can be sent to a clipboard object via the DataFeed action. Currently, only the DATA_TEXT type is supported. All data that is sent to a clipboard object through this action will replace any stored information that matches the given data type.</p>
      </description>
    </action>

    <action>
      <name>GetVar</name>
      <comment>Special field types are supported via unlisted fields.</comment>
      <description>
<p>The following unlisted field types are supported by the Clipboard class:</p>
<fields>
<fld type="STRING" name="File(Datatype,Index)">Where Datatype is a recognised data format (e.g. TEXT) and Index is between 0 and the Items() field.  If you don't support multiple clipped items, use an index of zero.  On success, this field will return a file location that points to the clipped data.</fld>
<fld type="NUMBER" name="Items(Datatype)">Returns the total number of items available for the specified data type.</fld>
</fields>
      </description>
    </action>

  </actions>

  <methods>
    <method>
      <name>AddFile</name>
      <comment>Add files to the clipboard.</comment>
      <prototype>ERROR clipAddFile(OBJECTPTR Object, LONG Datatype, CSTRING Path, LONG Flags)</prototype>
      <input>
        <param type="LONG" name="Datatype" lookup="CLIPTYPE">Set this argument to indicate the type of data you are copying to the clipboard.</param>
        <param type="CSTRING" name="Path">The path of the file to add.</param>
        <param type="LONG" name="Flags" lookup="CEF">Optional flags.</param>
      </input>
      <description>
<p>This method is used to add a file to the clipboard.  You are required to specify the type of data that is represented by the file. This allows the file content to be pasted by other applications that understand the data.  Adding files to the clipboard with a known datatype can be very efficient compared to other methods, as it saves loading the data into memory until the user is ready to paste the content.</p>
<p>Recognised data types are:</p>
<types lookup="CLIPTYPE"/>
<p>Optional flags that may be passed to this method are as follows:</p>
<types lookup="CEF"/>
      </description>
      <result>
        <error code="LimitedSuccess">The file item was successfully added to the internal clipboard, but could not be added to the host.</error>
        <error code="MissingLoation">The Files argument was not correctly specified.</error>
        <error code="Okay">The files were added to the clipboard.</error>
        <error code="Args">Invalid arguments passed to function.</error>
      </result>
    </method>

    <method>
      <name>AddObject</name>
      <comment>Extract data from an object and add it to the clipboard.</comment>
      <prototype>ERROR clipAddObject(OBJECTPTR Object, LONG Datatype, OBJECTID Object, LONG Flags)</prototype>
      <input>
        <param type="LONG" name="Datatype" lookup="CLIPTYPE">The type of data that you want the object data to be recognised as, or NULL for automatic recognition.</param>
        <param type="OBJECTID" name="Object">The object containing the data to add.</param>
        <param type="LONG" name="Flags" lookup="CEF">Optional flags.</param>
      </input>
      <description>
<p>This method is a simple implementation of the <method>AddObjects</method> method and is intended primarily for script usage. Please see the <method>AddObjects</method> method for details on adding objects to the clipboard.</p>
      </description>
      <result>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="Okay">The object was added to the clipboard.</error>
      </result>
    </method>

    <method>
      <name>AddObjects</name>
      <comment>Extract data from objects and add it all to the clipboard.</comment>
      <prototype>ERROR clipAddObjects(OBJECTPTR Object, LONG Datatype, OBJECTID * Objects, LONG Flags)</prototype>
      <input>
        <param type="LONG" name="Datatype" lookup="CLIPTYPE">The type of data that you want the object data to be recognised as, or NULL for automatic recognition.</param>
        <param type="OBJECTID *" name="Objects">Array of shared object ID's to add to the clipboard.</param>
        <param type="LONG" name="Flags" lookup="CEF">Optional flags.</param>
      </input>
      <description>
<p>Data can be saved to the clipboard directly from an object if the object's class supports the SaveToObject action.  The clipboard will ask that the object save its data directly to a cache file, completely removing the need for you to save the object data to an interim file for the clipboard.</p>
<p>Certain classes are recognised by the clipboard system and will be added to the correct datatype automatically (for instance, Picture objects will be put into the CLIPTYPE_IMAGE data category).  If an object's class is not recognised by the clipboard system then the data will be stored in the CLIPTYPE_OBJECT category to signify that there is a class in the system that recognises the data.  If you want to over-ride any aspect of this behaviour, you need to force the Datatype parameter with one of the available CLIPTYPE* types.</p>
<p>This method supports groups of objects in a single clip, thus requires you to pass an array of object ID's, terminated with a NULL entry.</p>
<p>Optional flags that may be passed to this method are the same as those specified in the <method>AddFile</method> method.  The CEF_DELETE flag has no effect on objects.</p>
<p>This method should always be called directly and not messaged to the clipboard, unless you are able to guarantee that the source objects are shared.</p>
      </description>
      <result>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="Okay">The objects were added to the clipboard.</error>
      </result>
    </method>

    <method>
      <name>AddText</name>
      <comment>Adds a block of text to the clipboard.</comment>
      <prototype>ERROR clipAddText(OBJECTPTR Object, CSTRING String)</prototype>
      <input>
        <param type="CSTRING" name="String">The text to add to the clipboard.</param>
      </input>
      <description>
<p>Text can be added to the clipboard using the AddText method.  This is the simplest way of passing text to the clipboard, although passing text through the data feed system may also be convenient in certain circumstances. Text is passed to the clipboard via the String parameter and it must be terminated with a null byte.</p>
      </description>
      <result>
        <error code="File">File error, e.g. file not found.</error>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
      </result>
    </method>

    <method>
      <name>Delete</name>
      <comment>Remove items from the clipboard.</comment>
      <prototype>ERROR clipDelete(OBJECTPTR Object, LONG Datatype)</prototype>
      <input>
        <param type="LONG" name="Datatype" lookup="CLIPTYPE">The datatype(s) that will be deleted (datatypes may be logically-or'd together).</param>
      </input>
      <description>
<p>The Delete method will clear all items that match a specified datatype.  Clear multiple datatypes by combining flags in the Datatype parameter.  To clear all content from the clipboard, use the <action>Clear</action> action instead of this method.</p>
      </description>
      <result>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="AccessMemory">The clipboard memory data was not accessible.</error>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>DeleteFiles</name>
      <comment>Deletes all files that have been referenced in the clipboard.</comment>
      <prototype>ERROR clipDeleteFiles(OBJECTPTR Object, OBJECTID Target)</prototype>
      <input>
        <param type="OBJECTID" name="Target">Set this parameter to a valid surface and the paste operation will open interactive windows (such as progress bars and user confirmations) during the paste operation.  This is usually set to the "Desktop" object, which is also the default if this argument is NULL.  Use a value of -1 if you don't want to provide feedback to the user.</param>
      </input>
      <description>
<p>The DeleteFiles method is used to implement file-delete operations for the CLIPTYPE_FILE datatype in a convenient way for the developer.</p>
<p>A progress window will popup during the delete operation if it takes an extended period of time to complete (typically over 0.5 seconds).  Any dialog windows will open on whatever surface you specify as the Target (this should be set to either the Desktop object, or a screen that you have created).  If the Target is set to NULL, the routine will discover the most appropriate space for opening new windows.  If the Target is set to -1, the routine will delete all files without progress information or telling the user about encountered errors.</p>
      </description>
      <result>
        <error code="File">A non-specific file error occurred during the paste operation.</error>
        <error code="Okay">The paste operation was performed successfully (this code is returned even if there are no files to be pasted).</error>
        <error code="Args">Invalid arguments were specified.</error>
      </result>
    </method>

    <method>
      <name>GetFiles</name>
      <comment>Retrieve the most recently clipped data as a list of files.</comment>
      <prototype>ERROR clipGetFiles(OBJECTPTR Object, LONG Datatype, LONG Index, STRING ** Files, LONG * Flags)</prototype>
      <input>
        <param type="LONG" name="Datatype" lookup="CLIPTYPE">The types of data that you recognise for retrieval are specified here (for example CLIPTYPE_TEXT, CLIPTYPE_AUDIO, CLIPTYPE_FILE...).  You may logical-OR multiple data types together.  This parameter will be updated to reflect the retrieved data type when the method returns.</param>
        <param type="LONG" name="Index">If the Datatype parameter is NULL, this parameter may be set to the index of the clip item that you want to retrieve.</param>
        <param type="STRING **" name="Files">The resulting location(s) of the requested clip data are returned in this parameter; terminated with a NULL entry.  You are required to free the returned array with FreeMemory().</param>
        <param type="LONG *" name="Flags" lookup="CEF">Result flags are returned in this parameter.  If CEF_DELETE is set, you need to delete the files after use in order to support the 'cut' operation.</param>
      </input>
      <description>
<p>To retrieve items from a clipboard, you must use the GetFiles method.  You must declare the types of data that you support (or NULL if you recognise all datatypes) so that you are returned a recognisable data format.</p>
<p>The most recent clip is always returned, so if you support text, audio and image clips and the most recent clip is an audio file, any text and image clips on the history buffer will be ignored by this routine. If you want to scan all available clip items, set the Datatype parameter to NULL and repeatedly call this method with incremented Index numbers until the error code ERR_OutOfRange is returned.</p>
<p>On success this method will return a list of files (terminated with a NULL entry) in the Files parameter.  Each file is a readable clipboard entry - how you read it depends on the resulting Datatype.  Additionally, the IdentifyFile() function could be used to find a class that supports the data.  The resulting Files array is a memory allocation that must be freed with a call to <function module="Core">FreeMemory</function>.</p>
<p>If this method returns the CEF_DELETE flag in the Flags parameter, you must delete the source files after successfully copying out the data.  If you are not successful in your operation, do not proceed with the deletion or the user will have lost the original data.  When cutting and pasting files within the file system, simply using the file system's 'move file' functionality may be useful for fast file transfer.</p>
      </description>
      <result>
        <error code="NoData">No clip was available that matched the requested data type.</error>
        <error code="Okay">A matching clip was found and returned.</error>
        <error code="OutOfRange">The specified Index is out of the range of the available clip items.</error>
        <error code="Args">Invalid arguments passed to function.</error>
      </result>
    </method>

    <method>
      <name>PasteFiles</name>
      <comment>Performs the 'paste' operation on file items.</comment>
      <prototype>ERROR clipPasteFiles(OBJECTPTR Object, CSTRING Dest, OBJECTID Target)</prototype>
      <input>
        <param type="CSTRING" name="Dest">The destination path for the file items.  Must be identifiable as a directory location, otherwise the file(s) will be copied to a destination file.</param>
        <param type="OBJECTID" name="Target">Set this parameter to a valid surface and the paste operation will open interactive windows (such as progress bars and user confirmations) during the paste operation.  This is usually set to the "Desktop" object, which is also the default if this argument is NULL.  Use a value of -1 if you don't want to provide feedback to the user.</param>
      </input>
      <description>
<p>The PasteFiles method is used to implement file-paste operations for the CLIPTYPE_FILE datatype in a convenient way for the developer.  The correct handling for both copy and cut operations is implemented for you.</p>
<p>You are required to specify a destination path for the file items.  This should be a directory (denoted by a trailing slash or colon character), although you may specify a single target file if you wish.</p>
<p>Confirmation windows are automatically handled by this routine when duplicate file names or errors are encountered during processing.  Any windows will open on whatever surface you specify as the Target (this should be set to either the Desktop object, or a screen that you have created).  If the Target is set to NULL, the routine will discover the most appropriate space for opening new windows. If the Target is set to -1, the routine will overwrite all files by default and not inform the user if errors are encountered.</p>
      </description>
      <result>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="File">A non-specific file error occurred during the paste operation.</error>
        <error code="Okay">The paste operation was performed successfully (this code is returned even if there are no files to be pasted).</error>
        <error code="MissingPath">The object is missing a setting in the Path or Location field.</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>Cluster</name>
      <comment>Identifies a unique cluster of items targeted by a clipboard object.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>MEMORYID</type>
      <description>
<p>By default, all clipboard objects will operate on a global cluster of clipboard entries.  This global cluster is used by all applications, so a cut operation in application 1 would transfer selected items during a paste operation to application 2.</p>
<p>If the Cluster field is set to zero prior to initialisation, a unique cluster will be assigned to that clipboard object. The ID of that cluster can be read from the Cluster field at any time and used in the creation of new clipboard objects. By sharing the ID with other applications, a private clipboard can be created that does not impact on the user's cut and paste operations.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="I">Read/Init</access>
      <type lookup="CLF">INT</type>
      <description>
<types lookup="CLF"/>
      </description>
    </field>

    <field>
      <name>Response</name>
      <comment>Contains the last value received from a user request window.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="RSP">INT</type>
      <description>
<p>If a clipboard operation requires a user confirmation request, this field will contain the response value.  The user will typically be asked for a response prior to delete operations and in cases of existing file replacement.</p>
<p>For available response values please refer to the <class>Dialog</class> class.</p>
<types lookup="RSP"/>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="VWF" comment="View flags.">
      <const name="WIDTH_RESET">Always reset column widths when the Columns field is set.</const>
      <const name="NO_SORTING">No user sorting, e.g. in column mode.</const>
      <const name="SENSITIVE">Sensitive mode will activate child objects when the user single-clicks with the mouse (by default, child activation only occurs with double-clicks).</const>
      <const name="NO_ICONS">Do not load or show any icons.</const>
      <const name="NOTIFY_ON_CLEAR">If the view should activate itself when cleared, set this flag. By default, activation normally only occurs when an item is double-clicked or when sensitive mode is enabled.</const>
      <const name="DRAG_DROP">Enables drag and drop for items in the view. In this mode, multi-select is only possible if the shift or ctrl keys are held while using the mouse.</const>
      <const name="NO_SELECT">Stop the user from selecting items.</const>
      <const name="NO_SELECT_JMP">When a new item is selected, the view will jump to that item if it is not completely visible to the user. Setting this flag will turn off this behaviour.</const>
      <const name="USER_DRAG">Enable drag and drop only if the user prefers it.</const>
      <const name="AUTO_DESELECT">Deselects a highlighted item when it is activated by mouse click or enter key.</const>
      <const name="MULTI_SELECT">Allow multiple item selections without having to hold the shift key.</const>
    </constants>

    <constants lookup="MHG" comment="Menubar highlighting flags.">
      <const name="LIGHT_BKGD">Lightens the background behind the menu item.</const>
      <const name="DARK_BKGD">Darkens the background behind the menu item.</const>
      <const name="SUNKEN">Draws a sunken border around the item using the highlight and shadow colours.</const>
      <const name="RAISED">Draws a raised border around the item using the highlight and shadow colours.</const>
      <const name="BORDER">Draws a border around the menu item using the default highlight colour.</const>
      <const name="TEXT">Highlights the menu item text using the highlight colour.</const>
    </constants>

    <constants lookup="MNF" comment="Flags for the Menu class.">
      <const name="SHOW_KEYS">Print key controls on the right.</const>
      <const name="POINTER_XY">Synonym for POINTER_PLACEMENT</const>
      <const name="SHOW_ICONS">Synonym for SHOW_IMAGES</const>
      <const name="SHOW_IMAGES">Allow for an image column on the left.</const>
      <const name="POINTER_PLACEMENT">Menu is placed at the position of the mouse pointer when shown.</const>
      <const name="REVERSE_Y">Menu's open in reverse vertical order.</const>
      <const name="CACHE">Cache menu surface once created.</const>
      <const name="IGNORE_FOCUS">Do not hide the menu if it loses the focus.</const>
      <const name="SORT">Sort all items by name.</const>
      <const name="EXT_COLUMN">Allow for an extension indicator column on the right.</const>
      <const name="PRESERVE_BKGD">Preserve background when scrolling.</const>
      <const name="REVERSE_X">Menu's open in reverse horizontal order.</const>
      <const name="NO_HIDE">Activate() is prevented from hiding the menu.</const>
      <const name="POPUP">Locks the position of the menu to the mouse pointer.</const>
      <const name="NO_TRANSLATION">Do not translate menu text to the user's native language.</const>
    </constants>

    <constants lookup="INF" comment="Flags for the Input class.">
      <const name="RAISED">Draw the input box with a raised (3D) border edge.  Read-only.</const>
      <const name="NO_GFX">Do not generate any text or image graphics using internal routines (use the Template graphics definition).</const>
      <const name="SELECT_TEXT">Select all text when the input box is shown for the first time.</const>
      <const name="SUNKEN">Reverses the highlight and shadow definitions to create a sunken effect.  Read-only.</const>
      <const name="HIDE">Hide on creation, or input is currently hidden.</const>
      <const name="ENTER_TAB">Press enter results in a virtual tab-keypress being sent.</const>
      <const name="SECRET">Used for secret user entry (passwords).</const>
      <const name="DISABLED">Disable on creation.</const>
      <const name="NO_BKGD">Do not draw background graphics (automatically set if Template graphics are used).</const>
      <const name="ACTIVE_DRAW">Pro-actively redraw the object when graphics alterations are made.</const>
      <const name="COMMANDLINE">Function as a command-line.  Typically used when the input box needs to remain persistent and is linked to an output system, such as a shell.</const>
    </constants>

    <constants lookup="BTF" comment="Button flags.">
      <const name="NO_GFX">Turns off the button's foreground graphics (text and images).</const>
      <const name="PULSE">Send repeated clicks when the mouse button is held down.</const>
      <const name="SUNKEN">Reverses the highlight and shadow definitions to create a sunken effect.</const>
      <const name="HIDE">Hide on creation, or button is currently hidden.</const>
      <const name="NO_FOCUS_GFX">Do not draw any graphics when the button has the focus.</const>
      <const name="DISABLED">Disable on creation, or button is currently disabled.  Read-only.</const>
      <const name="NO_BKGD">Do not draw background graphics (automatically set if styles are used).</const>
      <const name="FADE_BORDER">Fade the border edges into the button colour (requires thickness &gt; 1).</const>
      <const name="NO_FOCUS">Never draw lines around the button to indicate that it has the focus.</const>
    </constants>

    <constants lookup="MIF" comment="Flags for MenuItems.">
      <const name="SELECTED">The menu item has been selected (checked).</const>
      <const name="EXTENSION">Menu item is an extension.</const>
      <const name="NO_KEY_RESPONSE">Display the key, but do not respond to its equivalent key press.</const>
      <const name="SORT">Sort all content under the menuitem (applies only to extensions).</const>
      <const name="TOGGLE">Enables toggled menu items (checking state of on and off).</const>
      <const name="OPTION">Item is a clickable option (clicking the item's icon will turn the option on/off).</const>
      <const name="DISABLED">Set if the menu item is disabled (ghosted).</const>
      <const name="CATEGORISE">Categorise the attached config file.</const>
      <const name="BREAK">Menu item is acting as a break.</const>
      <const name="KEY_REPEAT">Respond to repeated key presses.</const>
    </constants>

    <constants lookup="CBF" comment="CheckBox flags.">
      <const name="DISABLED">Disable on creation, or object is currently disabled.</const>
      <const name="HIDE">Hide on creation, or object is currently hidden.</const>
      <const name="FADE_BORDER">Fade the border edges into the checkbox colour (requires thickness greater than 1).</const>
      <const name="NO_BKGD">Do not draw background graphics (automatically set if Template graphics are used).</const>
    </constants>

    <constants lookup="FVA" comment="Options for the Auto field.">
      <const name="OPEN">Open the file with the user's preferred program for this file type.</const>
      <const name="EDIT">Edit the file in a program suitable for editing this file type.</const>
      <const name="VIEW">View the file in a program suitable for read-only viewing.</const>
    </constants>

    <constants lookup="FVF" comment="Flags for the FileView.">
      <const name="SHOW_PARENT">The file view will display an item in the file list that reverts to the parent folder when activated.</const>
      <const name="NO_FILES">Do not display files in the file list.</const>
      <const name="SYS_KEYS">System key monitoring and relevant default behaviours are active when this option is enabled.  Cut, Copy, Paste and Select-All key combinations are provided to the user in this mode.</const>
      <const name="NO_EXTENSIONS">File extensions are not displayed when this option is active.</const>
      <const name="TOTAL_REFRESH">Force a total refresh of the files listed in the monitored folder whenever a change is detected.</const>
    </constants>

    <constants lookup="DF" comment="Dialog flags.">
      <const name="SECRET">User input needs to be secret (e.g. password entry).</const>
      <const name="QUIT">A quit message will be sent to the running application once the dialog window is closed.</const>
      <const name="MODAL">Makes the dialog window modal, this prevents the user from interacting with other windows that belong to the program.  For batch scripts, the WAIT flag should be used instead.</const>
      <const name="REVERSE">Reverse the activation process (respond to negatives, not positives).</const>
      <const name="WAIT">This option halts the program flow when the dialog box is activated.  Normal service will resume once the user responds to the dialog window.  Note that it is still possible to interact with other windows during this time, so the use of the MODAL flag may also be beneficial.</const>
      <const name="INPUT">An input box can be created inside the dialog window by setting this flag.  In this mode, the dialog box will return a user input string in the UserInput field after the user has responded to the dialog window.</const>
      <const name="OPTION_ON">Turn the checkbox option on by default.</const>
      <const name="INPUT_REQUIRED">This flag can be used in conjunction with the INPUT option.  It forces the user to input at least one character in the input box, otherwise the dialog window will automatically cancel itself.</const>
    </constants>

    <constants lookup="DT" comment="Types of dialog box">
      <const name="MESSAGE">The default setting.</const>
      <const name="CRITICAL">A highly critical error is being reported to the user.</const>
      <const name="ERROR">An error is being reported to the user.</const>
      <const name="WARNING">A warning message is being reported to the user.</const>
      <const name="ATTENTION">The dialog requests the user's immediate attention.</const>
      <const name="ALARM">The dialog is presented as a response to a preset alarm.</const>
      <const name="HELP">Help text is being presented in the dialog.</const>
      <const name="INFO">The dialog is providing the user with specific information on a topic.</const>
      <const name="QUESTION">A question is being asked of the user.</const>
      <const name="REQUEST">A request is being made (e.g. dialog requires user to type in input).</const>
      <const name="TEMPORARY">The dialog box will disappear after a short time-out period has expired.</const>
    </constants>

    <constants lookup="IMF" comment="Image flags">
      <const name="NO_DRAW">Stops automatic drawing of the target surface if the image is being animated or a special effect is active.</const>
      <const name="FIXED">Synonym for FIXED_SIZE</const>
      <const name="ENLARGE">If the dimensions of the original picture are smaller than the destination surface, the image will be stretched to fit.  Enlargement is dynamic, so if the surface changes in size then the size of the picture will be recalculated to fit.</const>
      <const name="NO_FAIL">If the source image file does not exist or an error occurs during loading, the image object will still pass the initialisation process successfully.  When the image object is drawn, it will clear the target surface to the colour specified in the Background field.</const>
      <const name="SHRINK">If the dimensions of the original picture are larger than the destination surface, the image will be stretched to fit.  Shrinking is dynamic, so if the surface changes in size then the size of the picture will be recalculated to fit.</const>
      <const name="SOLID_BLEND">Synonym for NO_BLEND</const>
      <const name="FIT">This flag applies to image resizing.  When set, the calculated width and height will be limited so that the image cannot be stretched beyond the edges of the target surface.  This flag is commonly set in conjunction with the 11RATIO flag.</const>
      <const name="NO_BLEND">Turns off alpha-blending if the target surface has the COMPOSITE flag set and the source image has an alpha channel.</const>
      <const name="FIXED_SIZE">Image data will normally be stored at its original size and resized on the fly when the STRETCH flag is used.  Setting the FIXED_SIZE flag will pre-scale the image and permanently store it at that size.</const>
      <const name="STRETCH">This flag conveniently combines the ENLARGE and SHRINK flags to ensure that the image always covers the dimensions of the destination surface.</const>
      <const name="SCALABLE">The image source is scalable (e.g. vector graphic).</const>
      <const name="STICKY">All calls to Move and MoveToPoint are ignored if this flag is set.</const>
      <const name="11_RATIO">When resizing the image, the calculated width and height will always be in correct proportion relative to the source image's original width and height.</const>
    </constants>

    <constants lookup="CMF" comment="ComboBox flags.">
      <const name="AUTO_COMPLETE">When in edit mode, this option helps the user by auto-completing text.</const>
      <const name="EDIT">Enable edit mode, which allows the user to write free-text in the combobox.</const>
      <const name="SUNKEN">Reverses the highlight and shadow definitions to create a sunken effect.</const>
      <const name="HIDE">Hide on creation, or combobox is currently hidden.</const>
      <const name="SHOW_ICONS">Show icons in the dropdown list.</const>
      <const name="LIMIT_TO_LIST">When in edit mode, limit-to-list prevents the user from entering text that isn't in the combobox list.</const>
      <const name="NO_BKGD">Do not draw background graphics (automatically set if Template graphics are used).</const>
      <const name="DISABLED">Disable on creation; or combobox is currently disabled.</const>
      <const name="NO_TRANSLATION">Do not attempt to translate combobox strings or the drop-down menu to the user's native language.</const>
    </constants>

    <constants lookup="TIF" comment="MenuBar item flags.">
      <const name="DISABLED">Item is disabled.</const>
      <const name="STATEMENT">The script reference is a statement string.</const>
      <const name="FOCUS">Item has the user focus.</const>
    </constants>

    <constants lookup="CLF" comment="Clipboard flags">
      <const name="WAIT">The clipboard will wait for the user to respond to user dialogs rather than return immediately from clipboard operations.</const>
      <const name="HOST"/>
    </constants>

    <constants lookup="SD" comment="Scroll directions.">
      <const name="NEGATIVE"/>
      <const name="POSITIVE"/>
    </constants>

    <constants lookup="TXF" comment="Flags for the Text class.">
      <const name="SECRET">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="PRESERVE_BKGD">Preserve-background disables fast scrolling for background preservation.</const>
      <const name="AREA_SELECTED">This read-only flag is set automatically when the user has selected an area of text.</const>
      <const name="GLOBAL_EDITING">Keeps the text object in edit mode regardless of user focus.</const>
      <const name="SINGLE_SELECT">Enables text selection (with or without edit mode).  If in line mode, a single click will allow the user to highlight any line.</const>
      <const name="DISABLED">This read-only flag is set if the object has been disabled through the Disable action.</const>
      <const name="OVERWRITE">Turns on overwrite mode (if off, insert mode is enabled).</const>
      <const name="SELECT">Synonym for MULTI_SELECT | SINGLE_SELECT</const>
      <const name="ENTER_TAB">Convert enter-key presses to the tab-key.</const>
      <const name="FORCE_CAPS">This flag forces the capitalisation of all text that is entered into the object.</const>
      <const name="AUTO_CLEAR">Clears the text string when the enter key is pressed.</const>
      <const name="EDIT">This flag must be enabled if the user is permitted to change the text string with the keyboard.</const>
      <const name="STRETCH">If the font is scalable, the text string will be resized to fit inside the surface that contains it (i.e. no characters will be clipped).  This is acheived by recalculating the font's point size.</const>
      <const name="WORDWRAP">Enables word wrapping.</const>
      <const name="AUTO_SELECT">Automatically select all text if the text object receives the focus.</const>
      <const name="TAB_KEY">If the tab key is pressed, print the tab character.</const>
      <const name="PASSWORD">Hide the string characters for secret text entry (e.g. passwords).</const>
      <const name="MULTI_SELECT">Allow the user to select/highlight multiple lines by holding the Ctrl key.</const>
      <const name="VARIABLE">This flag forces a text object to recalculate any variable references in its string data whenever a redraw occurs.  Such references are indicated through square brackets, e.g. [desktop.width].  Refer to the StrEvaluate() function in the Strings module for more information.</const>
      <const name="STR_TRANSLATE">Translate strings to the user's native language.</const>
      <const name="HISTORY">Enables historical browsing when the up/down cursor keys are used.  The number of historical lines stored can be set in the HistorySize field.</const>
      <const name="NO_SYS_KEYS">This flag is set by default to enable system key support.  System-keys provide support for common key combinations such as Ctrl-C, Ctrl-X etc.</const>
      <const name="BACKGROUND">Enables a colour background behind the text.</const>
      <const name="TAB_ENTRY">Pressing the tab key is treated the same as pressing enter.</const>
      <const name="COMMANDLINE">Synonym for AUTO_CLEAR | EDIT | HISTORY</const>
    </constants>

    <constants lookup="SO" comment="Direction options">
      <const name="HORIZONTAL"/>
      <const name="VERTICAL"/>
    </constants>

    <constants lookup="SBF" comment="Scrollbar flags.">
      <const name="CONSTANT">Ensures that the scrollbar is always on display.</const>
      <const name="RELATIVE">Enables relative scrolling (movement is reported relative to the current slider position rather than in absolute coordinates).</const>
      <const name="HIDE">Hide on creation, or scrollbar is currently hidden.</const>
      <const name="SLIDER">If set, the scrollbar behaves as a slider.  In this mode, the size of the draggable slider has a fixed size (by default the slider is proportional).</const>
      <const name="NO_INTERSECT">Do not attempt to intersect with adjacent scrollbars.</const>
    </constants>

    <constants lookup="CLIPTYPE" comment="Clipboard types">
      <const name="DATA">Raw information that is uncategorised can be defined as a data clip.</const>
      <const name="FILE">Pure file references are stored as file clips.  This type is typically used by file managers for moving and copying files.</const>
      <const name="TEXT">Plain text files such as ASCII and UTF-8 must be identified through this clip type.</const>
      <const name="AUDIO">An audio clip that is recognised by the Sound class (such as wav's and mp3's).</const>
      <const name="IMAGE">Images that are recognised by the Picture class may be stored as this type (such as jpeg's and png files).</const>
      <const name="OBJECT">An object that has been deserialised into binary form.</const>
    </constants>

    <constants lookup="SLF" comment="Flags for SelectCallback">
      <const name="ACTIVE">The most recently active tag has changed.</const>
      <const name="MANUAL">Item was manually selected (by the program, not the user).</const>
      <const name="SELECTED">A tag has been selected and is now highlighted.</const>
      <const name="INVERTED">Change is due to an inverted selection.</const>
      <const name="KEYPRESS">Item was selected by a keypress.</const>
      <const name="CLICK">Item was clicked - see ClickX and ClickY for coordinates.</const>
      <const name="MULTIPLE">Multiple items were selected.</const>
      <const name="MOVED">Change is due to the item being moved.</const>
    </constants>

    <constants lookup="TF" comment="Flags for the TabFocus class.">
      <const name="LOCAL_FOCUS">In this mode, the user's point of focus must match the monitored Surface for the tabfocus to function.</const>
      <const name="CHILD_FOCUS">In this mode, the user's point of focus must match the monitored Surface or one of its immediate children for the tabfocus to function.</const>
      <const name="LIMIT_TO_LIST">In limit-to-list mode, the tabfocus only functions if the user's point of focus is on the monitored Surface or one of objects in the tab list.</const>
    </constants>

    <constants lookup="VGF" comment="Graphics options (normally defined by the template)">
      <const name="OUTLINE_TITLE">Draw black outline around title text.</const>
      <const name="NO_BORDER">Do not draw a border around column headers when in table mode.</const>
      <const name="DRAW_TABLE">Draw the view as a table (the basic format is the same, graphics are different).</const>
      <const name="GROUP_SHADOW">Draw a shadow underneath the group graphics headers.</const>
      <const name="STRIPES">Draw stripes in group titles.</const>
      <const name="HAIRLINES">Draw a hairline between each column.</const>
      <const name="BRANCHES">Draw grey tree branches.</const>
      <const name="ALT_GROUP">Alternate the group header graphics.</const>
      <const name="LINE_BREAKS">Draw a line break between each view item.</const>
    </constants>

    <constants lookup="VIEW" comment="List options">
      <const name="LIST">Standard list view with small icons, arranged from top to bottom.</const>
      <const name="ICON">Similar to list-view but with large icons, arranged from left to right.</const>
      <const name="TREE">Tree mode can be used if the items are arranged in a hierarchy, where items can be embedded within items.  The tree view provides small buttons that the user can click to expand the tree and view hidden items.</const>
      <const name="COLUMN">Long list with detail columns.</const>
      <const name="LONG_LIST">This type is the same as the LIST view but the items will not wrap back to the top of the view when the bottom edge of the surface is encountered.</const>
      <const name="GROUP_TREE">Similar to tree view, but root level nodes are drawn as a headline.</const>
      <const name="DOCUMENT">Document mode allows view data to be passed to a document object for display.  You are required to provide a document object that is pre-loaded with a template capable of processing input from the view object.  Refer to the Document field for more information.</const>
      <const name="COLUMN_TREE">This mode combines the column and tree modes.  The view displays the layout and style of normal column mode, but the first column is used to display and manage a tree hierarchy.  The tree can be expanded and collapsed just as in the standard tree mode.</const>
    </constants>

    <constants lookup="RSP">
      <const name="CANCEL"/>
      <const name="YES"/>
      <const name="YES_ALL"/>
      <const name="NO"/>
    </constants>

    <constants lookup="RSF" comment="Dialog response flags">
      <const name="NO">Negative response.</const>
      <const name="CUSTOM_2">Developer customised option 2 - neutral response.</const>
      <const name="YES">Positive response.</const>
      <const name="CUSTOM_4">Developer customised option 4 - neutral response.</const>
      <const name="NO_ALL">Negative response.</const>
      <const name="OKAY">Positive response.</const>
      <const name="CANCEL">Negative response.</const>
      <const name="YES_ALL">Positive response.</const>
      <const name="CLOSED">Window closed without response.</const>
      <const name="OK">Positive response.</const>
      <const name="CUSTOM_3">Developer customised option 3 - neutral response.</const>
      <const name="NEGATIVE">Synonym for CANCEL | NO | QUIT | NO_ALL | CLOSED</const>
      <const name="POSITIVE">Synonym for YES | YES_ALL | OKAY | CUSTOM_1 | CUSTOM_2 | CUSTOM_3 | CUSTOM_4</const>
      <const name="QUIT">Negative response.</const>
      <const name="NONE">Do nothing dummy flag.</const>
      <const name="OPTION">Combobox option ticked.</const>
      <const name="CUSTOM_1">Developer customised option 1 - neutral response.</const>
      <const name="RETRY"/>
    </constants>

    <constants lookup="AXIS" comment="Axis options.  This determines the axis that is signalled when the slider is moved (note that it is feasible for a horizontal scrollbar to signal the Y axis, if this is desired by the client)">
      <const name="X"/>
      <const name="Y"/>
      <const name="Z"/>
    </constants>

    <constants lookup="MBF" comment="Menubar flags.">
      <const name="DISABLED">Disable on creation.  Automatically switched by the Disable and Enable actions.</const>
      <const name="HIDE">Hide on creation, or menubar is currently hidden.</const>
      <const name="BREAK">Draw a break-line at the bottom of the menubar.</const>
    </constants>

    <constants lookup="CEF">
      <const name="DELETE">Requests that the original file source is deleted if a successful paste operation takes place.</const>
      <const name="EXTEND">Instead of replacing existing clipboard data, add the new data to the group.</const>
    </constants>

    <constants lookup="FEF" comment="Event flags.">
      <const name="LOCATION">The location has been changed (user has moved to a different folder).</const>
    </constants>

    <constants lookup="SCF" comment="Scroll flags.">
      <const name="FIXED">Fixes the scroll slider to a specific size (non-proportional mode of operation).</const>
      <const name="REVERSE">When reporting the position of the slider, the value will always be reversed - so positive values will be negative and vice versa.  Reporting for relative position changes are also affected.</const>
      <const name="VERTICAL">The scrollbar is oriented vertically.</const>
      <const name="RELATIVE">Forces relative scrolling through the Scroll action rather than the default ScrollToPoint.</const>
      <const name="AUTO_ACTIVATE">The scroll object automatically activates itself whenever the position of the slider is changed.</const>
      <const name="AUTO_HIDE">Automatically hide the scrollbar when possible.</const>
      <const name="INVISIBLE">Keep scrollbar invisible.</const>
      <const name="HORIZONTAL">The scrollbar is oriented horizontally.</const>
      <const name="SLIDER">Changes the mode of operation so that the slider is non-proportional.  The size of the view is also set to a fixed value and resizing of the parent surface no longer affects the scroll values.</const>
      <const name="MESSAGE">Use used delay messages for activation of children.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
