<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Button</name>
    <type>class</type>
    <module>Widget</module>
    <comment>The Button class is used to create button widgets in the UI.</comment>
    <version>1</version>
    <id>f4ff5d81</id>
    <idstring>ID_BUTTON</idstring>
    <category>GUI</category>
    <include>modules/button.h</include>
    <copyright>Paul Manias 2003-2020</copyright>
    <description>
<p>The Button class simplifies the creation and management of buttons as part of the user interface.  New buttons are typically created by declaring the graphical dimensions and the text to be displayed within them.  The Button class allows for the specifics of the button to be altered, such as the colours and the font style.</p>
<p>Default button values and the look and feel are applied using styles.</p>
<p>You will need to configure the button so that when it is clicked, it performs an action.  The methods to achieve this are: Initialise child objects to the button for execution on activation; Listen to the Activate action by calling the <function module="Core">SubscribeAction</function> function on the button.</p></description>
    <source>
      <file>class_button.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Activates the button.</comment>
    </action>

    <action>
      <name>Disable</name>
      <comment>Turns the button off.</comment>
    </action>

    <action>
      <name>Enable</name>
      <comment>Turns the button on if it has been disabled.</comment>
    </action>

    <action>
      <name>Focus</name>
      <comment>Sets the focus on the button and activates keyboard monitoring.</comment>
    </action>

    <action>
      <name>Hide</name>
      <comment>Removes the button from the display.</comment>
    </action>

    <action>
      <name>Move</name>
      <comment>Move the button to a new position.</comment>
    </action>

    <action>
      <name>MoveToBack</name>
      <comment>Moves the button to the back of the display area.</comment>
    </action>

    <action>
      <name>MoveToFront</name>
      <comment>Moves the button to the front of the display area.</comment>
    </action>

    <action>
      <name>MoveToPoint</name>
      <comment>Move the button to a new position.</comment>
    </action>

    <action>
      <name>Redimension</name>
      <comment>Changes the size and position of the button.</comment>
    </action>

    <action>
      <name>Resize</name>
      <comment>Alters the size of the button.</comment>
    </action>

    <action>
      <name>Show</name>
      <comment>Puts the button on display.</comment>
    </action>

  </actions>

  <fields>
    <field>
      <name>Bottom</name>
      <comment>The bottom coordinate of the button (Y + Height).</comment>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

    <field>
      <name>Clicked</name>
      <comment>TRUE if the button has been clicked and reverts to FALSE when the user releases the button.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>Disabled</name>
      <comment>TRUE if the button is disabled, otherwise FALSE.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Read the Disabled to determine if the button is disabled (TRUE) or not (FALSE). It is possible to set this field to change the disabled state, however we recommend that you use the <action>Disable</action> and <action>Enable</action> actions to do this.</p>
      </description>
    </field>

    <field>
      <name>Feedback</name>
      <comment>Provides instant feedback when a user interacts with the button.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>Set the Feedback field with a callback function in order to receive instant feedback when user interaction occurs.  The function prototype is <code>routine(*Button)</code></p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags may be defined here.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="BTF">INT</type>
      <description>
<types lookup="BTF"/>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>Defines the height of a button.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>A button can be given a fixed or relative height by setting this field to the desired value.  To set a relative height, use the FD_PERCENT flag when setting the field.</p>
      </description>
    </field>

    <field>
      <name>Hint</name>
      <comment>Applies a hint to a button.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>A hint can be displayed when the mouse pointer remains motionless over a button for a short period of time.  The text that is displayed in the hint box is set in this field.  The string must be in UTF-8 format and be no longer than one line.  The string should be written in english and will be automatically translated to the user's native language when the field is set.</p>
      </description>
    </field>

    <field>
      <name>HoverState</name>
      <comment>User hover state indicator</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="BHS">INT</type>
      <description>
<types lookup="BHS"/>
      </description>
    </field>

    <field>
      <name>Icon</name>
      <comment>Reference to an icon that will be displayed inside the button.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>To display an image inside the button, set the Icon field with a string in the format of 'category/iconname'.  The icon will be displayed on the left side of the text inside the button.  If the button is unlabelled, the icon will be shown in the exact center of the button.</p>
      </description>
    </field>

    <field>
      <name>ParentViewport</name>
      <comment>The parent container for the Viewport</comment>
      <access read="R" write="I">Read/Init</access>
      <type class="Vector">*Vector</type>
    </field>

    <field>
      <name>Right</name>
      <comment>The right coordinate of the button (X + Width).</comment>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

    <field>
      <name>String</name>
      <comment>The string that is to be printed inside the button is declared here.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The string that you would like to be displayed in the button is specified in this field.  The string must be in UTF-8 format and be no longer than one line.  The string should be written in English and will be automatically translated to the user's native language when the field is set.</p>
<p>If the string is changed after initialisation, the button will be redrawn to show the updated text.</p>
      </description>
    </field>

    <field>
      <name>StyleTrigger</name>
      <comment>Requires a callback for reporting changes that can affect graphics styling.</comment>
      <access write="S">Set</access>
      <type>FUNCTION</type>
      <description>
<p>This field is reserved for use by the style code that is managing the widget graphics.</p>
      </description>
    </field>

    <field>
      <name>TabFocus</name>
      <comment>Set this field to a TabFocus object to register the button in a tab-list.</comment>
      <access write="S">Set</access>
      <type>OBJECTPTR</type>
      <description>
<p>The TabFocus field provides a convenient way of linking the button to a <class name="TabFocus">TabFocus</class> object, allowing it to receive the user focus via the tab key.  Do so by setting this field to the ID of the TabFocus object that is representing the application's window.</p>
      </description>
    </field>

    <field>
      <name>Viewport</name>
      <comment>Viewport region created by the button object</comment>
      <access read="R">Read</access>
      <type class="Vector">*Vector</type>
    </field>

    <field>
      <name>Width</name>
      <comment>Defines the width of a button.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>A button can be given a fixed or relative width by setting this field to the desired value.  To set a relative width, use the FD_PERCENT flag when setting the field.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>The horizontal position of a button.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The horizontal position of a button can be set to an absolute or relative coordinate by writing a value to the X field.  To set a relative/percentage based value, you must use the FD_PERCENT flag or the value will be interpreted as fixed.  Negative values are permitted.</p>
      </description>
    </field>

    <field>
      <name>XOffset</name>
      <comment>The horizontal offset of a button.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The XOffset has a dual purpose depending on whether or not it is set in conjunction with an X coordinate or a Width based field.</p>
<p>If set in conjunction with an X coordinate then the button will be drawn from that X coordinate up to the width of the container, minus the value given in the XOffset.  This means that the width of the Button is dynamically calculated in relation to the width of the container.</p>
<p>If the XOffset field is set in conjunction with a fixed or relative width then the button will be drawn at an X coordinate calculated from the formula <code>X = ContainerWidth - ButtonWidth - XOffset</code>.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>The vertical position of a button.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The vertical position of a Button can be set to an absolute or relative coordinate by writing a value to the Y field.  To set a relative/percentage based value, you must use the FD_PERCENT flag or the value will be interpreted as fixed.  Negative values are permitted.</p>
      </description>
    </field>

    <field>
      <name>YOffset</name>
      <comment>The vertical offset of a button.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The YOffset has a dual purpose depending on whether or not it is set in conjunction with a Y coordinate or a Height based field.</p>
<p>If set in conjunction with a Y coordinate then the button will be drawn from that Y coordinate up to the height of the container, minus the value given in the YOffset.  This means that the height of the button is dynamically calculated in relation to the height of the container.</p>
<p>If the YOffset field is set in conjunction with a fixed or relative height then the button will be drawn at a Y coordinate calculated from the formula <code>Y = ContainerHeight - ButtonHeight - YOffset</code>.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="BHS">
      <const name="ENTERED">The cursor has just entered the button's area</const>
      <const name="INSIDE">The cursor is inside the button's area</const>
      <const name="OUTSIDE">The cursor is outside of the button's area</const>
    </constants>

    <constants lookup="BTF" comment="Button flags.">
      <const name="DISABLED">Disable on creation, or button is currently disabled.  Read-only.</const>
      <const name="HIDE">Hide on creation, or button is currently hidden.</const>
      <const name="NO_GFX">Turns off the button's foreground graphics (text and images).</const>
      <const name="PULSE">Send repeated clicks when the mouse button is held down.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
