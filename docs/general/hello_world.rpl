<?xml version="1.0"?>

<info>
 <title>Hello World</title>
 <author>Rocklyte Systems</author>
 <keywords>hello, world, program, example, demo</keywords>
 <description>Writing a Hello World program using the Rocklyte SDK.</description>
</info>

<include src="inc_style.rpl"/>

<page>

<startpage title="Your First Program"/>

<p>This chapter demonstrates the process of opening a window and printing text inside it.  There are two ways that we can achieve this - the first being to write a script, the second to use a compiled language to generate an executable.  Both examples in this chapter are good 'shell programs' for you to use as a starting point in writing your own software.</p>

<h2>Hello World - The Script</h2>

<p>At Rocklyte we have a preference for writing most of our client software using scripts, no matter the complexity.  The development process is faster, code is more compact and our users can edit the source code.  Although we're going to focus on writing a Hello World executable in this chapter, we can see from the following example why the simplicity of scripted programming makes it so preferable:</p>

<indent><code>&lt;dml type="program"&gt;
  &lt;window title="Hello World" insideheight="100" insidewidth="180"&gt;
    &lt;surface x="[owner.leftmargin]" y="[owner.topmargin]"
      xoffset="[owner.rightmargin]" yoffset="[owner.bottommargin]"
      colour="#ffffff"&gt;
      &lt;text align="center" string="Hello World"/&gt;
    &lt;/surface&gt;
  &lt;/window&gt;
&lt;/dml&gt;</code></indent>

<p>The above script is written in DML, which is particularly suited for interface development.  To run the script we can use the parasol-gui or parasol-cmd executable:</p>

<indent><code>parasol-gui helloworld.dml</></>

<p>For more information on DML programming we recommend referring to the DML Tutorial available in Athene.  It covers the process of writing DML scripts more thoroughly than what we can afford in this chapter.</p>

<h2>Hello World - The Program</>

<p>The following is a complete working program that demonstrates the process of opening a window, setting up a connection with the desktop and then interpreting system messages in a message loop.  When the user clicks on the window's close gadget, the program ends.  Please note that you can inspect the function calls made by this program by clicking the hyperlinks.  Here's the code:</p>

<indent><code>#include &lt;rocklyte/system/all.h&gt;
#include &lt;rocklyte/graphics/all.h&gt;

STRING ProgName      = "Hello World";
STRING ProgAuthor    = "Rocklyte Systems";
STRING ProgDate      = "December 2003";
STRING ProgCopyright = "Copyright Rocklyte Ltd Â© 2001-2007";
LONG   ProgDebug = 0;
FLOAT  ProgKernelVersion = 3.3;

extern struct KernelBase *KernelBase;

ERROR msghandler(struct Message *);

OBJECTID glWindowID;

ERROR program(void)
{
   objSurface *surface;
   OBJECTPTR window, text;
   OBJECTID surface_id;
   LONG topmargin, bottommargin, rightmargin, leftmargin;

   /*** Open a window ***/

   if (<a href="../modules/viewmodule.rpl?xml=kernel.xml&amp;function=CreateObject">CreateObject</a>(ID_WINDOW, NULL, &amp;window, &amp;glWindowID,
      FID_Title|TSTRING,      ProgName,
      FID_InsideBorder|TLONG, TRUE,
      FID_InsideWidth|TLONG,  150,
      FID_InsideHeight|TLONG, 50,
      FID_Icon|TSTRING,       "nature/flower",
      TAGEND) IS ERR_Okay) {

      /*** Get the window margins ***/

      <a href="../modules/viewmodule.rpl?xml=kernel.xml&amp;function=GetFields">GetFields</a>(window, FID_LeftMargin|TLONG,   &amp;leftmargin,
                        FID_TopMargin|TLONG,    &amp;topmargin,
                        FID_BottomMargin|TLONG, &amp;bottommargin,
                        FID_RightMargin|TLONG,  &amp;rightmargin,
                        TAGEND);

      <a href="../modules/viewmodule.rpl?xml=kernel.xml&amp;function=ReleaseObject">ReleaseObject</a>(window);

      /*** Create a surface area for drawing graphics ***/

      if (<a href="../modules/viewmodule.rpl?xml=kernel.xml&amp;function=CreateObject">CreateObject</a>(ID_SURFACE, NULL, &amp;surface, &amp;surface_id,
         FID_Owner|TLONG,    glWindowID,
         FID_XCoord|TLONG,   leftmargin,
         FID_YCoord|TLONG,   topmargin,
         FID_XOffset|TLONG,  rightmargin,
         FID_YOffset|TLONG,  bottommargin,
         FID_Colour|TSTRING, "#ffffff",
         TAGEND) IS ERR_Okay) {

         /*** Create the Hello World text ***/

         <a href="../modules/viewmodule.rpl?xml=kernel.xml&amp;function=CreateObject">CreateObject</a>(ID_TEXT, NULL, &amp;text, NULL,
            FID_Owner|TLONG,    surface_id,
            FID_String|TSTRING, "Hello World",
            FID_Align|TLONG,    ALIGN_CENTER,
            FID_Face|TSTRING,   "Helvete:16",
            FID_Colour|TSTRING, "#000000",
            TAGEND);

         /*** Show the surface object inside the window ***/

         <a href="../modules/viewmodule.rpl?xml=kernel.xml&amp;function=Action">Action</a>(AC_Show, surface, NULL);
         <a href="../modules/viewmodule.rpl?xml=kernel.xml&amp;function=ReleaseObject">ReleaseObject</a>(surface);

         /*** Show our window ***/

         <a href="../modules/viewmodule.rpl?xml=kernel.xml&amp;function=ActionMsg">ActionMsg</a>(AC_Show, glWindowID, NULL);

         /*** Set our message handler and put the task to sleep ***/

         SetResourcePtr(RES_MESSAGEHANDLER, &amp;msghandler);

         <a href="../modules/viewmodule.rpl?xml=kernel.xml&amp;function=ProcessMessages">ProcessMessages</a>(NULL, MF_WAIT);
      }
   }

   return(ERR_Okay);
}

/* This routine will kill our program if the window that we created
** is closed by the user.
*/

ERROR msghandler(struct Message *Message)
{
   if (Message-&gt;Type IS MSGID_QUIT) return(ERR_Terminate);

   return(ERR_Failed); /* Return failure if message unrecognised */
}</code></indent>

<box width="100%" height="1" colour="0,0,0,40"/>

<p>The following is a detailed guide as to how the program works:</p>

<list type="ordered">
<li>A window is created to contain the interface.  Desktop windows are controlled by a class that is appropriately named 'Window' and referenced via the class identifier ID_WINDOW.  Using the <function mod="kernel">CreateObject</> function, we can create a new instance of a window and define some program-specific parameters by passing a series of tags to the function.  In our code we set just the basic details, such as the dimensions of the window and its title.  You can learn more about window settings in the documentation for the <class>Window</> Class.</li>
<li>After retrieving the window margins, we release the window from our program by calling <function mod="kernel">ReleaseObject</>.  This is essential - in being an object based system, certain object types such as the window must be available to other tasks when not in use.  Whenever you create an object that you know is shared (this is always true of the <class>Window</> and <class>Surface</> classes), always release it back to the system.  This should become second nature to you if you form the habit of doing this early.</li>
<li>With the window initialised, we now create a surface object and place the words 'Hello World' inside by creating a text object.  The Surface class forms the heart of the desktop windowing system and provides all the necessary functionality for arranging the graphical layers on the desktop and inside the windows.  In this case we created a simple rectangular area that fills most of the window and paints a white background.  Notice the use of the Owner field setting.  This is essential for specifying where our rendered graphic will appear.  If you forget this setting, the surface area will not be created inside your window.  You can learn more about the <class>Surface</> and <class>Text</> classes in their relevant manuals.</li>
<li>With the program interface configured, we need to use the Show action to make the surface and window objects visible.  Note how we use the <function mod="kernel">ActionMsg</> function to show the window, whereas we used the standard <function mod="kernel">Action</> function on the surface object.  This is necessary because we released the window earlier using <function mod="kernel">ReleaseObject</>, which renders the window address invalid.  In this situation you can call <function mod="kernel">AccessObject</> to regain access to the window address, but it is more optimal to call <function mod="kernel">ActionMsg</> when a single action needs to be executed.</li>
<li>Finally we must wait for the user to close the program in our main loop.  We do this by waiting for the window to disappear after the user clicks the window's close gadget.  Notice the <function mod="kernel">ProcessMessages</> function - this will put our task to sleep while it waits for incoming messages.  To simplify message management we have opted to call <function mod="kernel">SetResource</> and set a message handler for our task.  The code in the msghandler() routine will receive all incoming messages, although typically you will only be interested in the MSGID_QUIT message type.  When the msghandler() routine receives the quit message it returns the ERR_Terminate code, which causes our task to wake from its state in <function mod="kernel">ProcessMessages</> and continue its program flow (thus allowing the program to exit cleanly).</li>
</list>

<h2>Makefiles</>

<p>To compile the example you will need a makefile.  The following clip shows a multi-platform makefile that will compile the example in any of our supported environments using make and GCC:</p>

<indent><code>include ../../makefile.inc

NAME= helloworld
DEST= $(NAME)$(EXE)

compile: $(NAME).c $(EXEDEP)
     $(CC) $(CFLAGS) -o $(DEST) $(EXELINK) $(NAME).c

clean:
     rm $(DEST)
</code></indent>

<p>Note the first line that includes 'makefile.inc' which you can find in the root folder of the SDK.  This file contains important settings such as CFLAGS (defines optimisation parameters you can adjust) and platform specific constants such as EXE (the file extension to use for executables).  If you need to edit or create your own makefiles, you may wish to refer to makefile.inc to examine the variables that are available.</p>

<h2>Conclusion</>

<p>For further education we recommend reading the documentation on the Window, Surface and Text classes and then modifying this program by changing the field parameters that are passed to the objects.  Source code to Hello World and other example programs can be found and compiled in the source folder of the SDK.</p>

</page>
