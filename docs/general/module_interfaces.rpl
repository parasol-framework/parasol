<?xml version="1.0"?>

<info>
 <title>Module Interfaces</title>
 <author>Paul Manias</author>
 <keywords>sdk, api, library, module, function, call, library</keywords>
 <description>Overview of Parasol's module interface design.</description>
</info>

<include src="inc_style.rpl"/>

<page name="Index">

<startpage title="Module Interfaces"/>

<p>The Parasol Framework uses an API system that has been designed for multi-platform development. In this section we'll give you an introduction as to how this system works, and further on in the manual you will be able to learn how to create modules of your own devising. Please note that we tend not use the term 'API', as 'module' is more reflective of the system's modular design, but the terms are effectively one and the same.</p>

<h2>Background</h2>

<p>Parasol's module system has been designed to allow code to be shared between programs. The system keeps track of how many times the module has been opened.  If the open count is reduced to zero, it is possible to 'expunge' the code from memory when resources are running low.  Modules support version and revision numbers that can be checked on load, and information on a module's author, revision date and copyright can be stored and retrieved.</p>

<p>Modules are stored in the system:modules/ folder.  File extensions depend on the targetted binary system - Linux based modules have a '.so' extension and Windows modules use '.dll'.</p>

<p>Modules are compiled into binary formats that are native to the targetted system. For instance, Linux modules are compiled in ELF format, while Windows modules are compiled in DLL format. This means that modules are not portable between systems unless there is a conversion mechanism for foreign executable formats. In future, a standard file format for binaries may be adopted to solve this problem.</p>

<h2>Opening a Module</h2>

<p>The following code segment illustrates the most typical way of opening a module in order to make function calls:</p>

<indent><code>objModule      *mod_strings;
struct StringsBase *StringsBase;

if (!<a href="../modules/viewmodule.rpl?xml=kernel.xml&amp;name=NewObject#Function"><font color="#000000">CreateObject</font></a>(ID_MODULE, NULL, &amp;mod_strings, NULL,
      FID_Name|TSTRING, "strings",
      TAGEND))) {
   <a href="../modules/viewmodule.rpl?xml=kernel.xml&amp;name=GetField#Function"><font color="#000000">GetField</font></a>(mod_strings, FID_ModBase|TPTR, &amp;StringsBase);
}</code></indent>

<p>Breaking the routine down, the code first creates a new module object and loads the module data with the CreateObject() function. If successful, the ModBase is grabbed, which contains the addresses required to make function calls to the module. A well written program will terminate its connection with a module when it no longer requires its services. We can free our strings module using the following code:</p>

<indent><code>acFree(mod_strings);</code></indent>

<h2>Function Calls</h2>

<p>Function calls are made to a module through its Module Function Base, or ModBase for short. The ModBase is a structure that contains addresses that refer to all of the functions that a module supports. The following example is a shortened version of the strings' function base structure, which comes from the modules/strings.h include file:</p>

<indent><code>struct StringsBase {
   LONG   (*IntToStr)(LONG, STRING, LONG);
   LONG   (*StrShrink)(STRING, LONG, LONG);
   LONG   (*StrExpand)(STRING, LONG, LONG);
   void   (*StrInsert)(STRING, STRING, LONG);
   LONG   (*StrSearch)(STRING, STRING, WORD);
   ...
};</code></indent>

<p>If we wanted to call the IntToStr() function, we need to call it using code in the following format:</p>

<indent><code>StringsBase->IntToStr(100, Buffer, BufferLength);</code></indent>

<p>To simplify API calls, macros are used behind the scenes to make the process of making function calls easier for the developer. Example:</p>

<indent><code>#define IntToStr(a,b,c) (StringsBase->IntToStr(a,b,c))</code></indent>

<p>Using the above macro, we can convert our code to the following:</p>

<indent><code>IntToStr(100, Buffer, BufferLength);</code></indent>

<p>As a developer, you don't need to worry about creating your own macros as they are already defined in the include files for each module. To get a list of all the functions that a module supports, you need to refer to its documentation, where you will find details on the supported arguments and an overview of how each individual function operates.</p>

<h2>Class Modules</h2>

<p>Class modules are treated like function-based modules in every respect, except they create classes as part of their initialisation process. If necessary, a class module may export a set of functions as desired by the developer, but in most cases a class module will create one or two classes for the system, then linger in the system until its services are no longer required.</p>

<p>Unlike function modules, there is no need to load class modules in advance. When creating a new object through NewObject(), the correct module for the indicated class will be loaded automatically, relieving you of the complex issue of module management.</p>

<p>For further information on modules, refer to the <a href="module_development_guide.rpl">Module Development Guide</a>, the <a href="class_development_guide.rpl">Class Development Guide</a>, and the documentation for the <a href="../classes/module.rpl">Module</a> object.</p>

</page>
