<?xml version="1.0"?>

<info>
 <title>Object Management In Depth</title>
 <author>Paul Manias</author>
 <keywords>object, oriented, modular, moo, component, class, development, detail, manual</keywords>
 <description>A detailed summary of object management in the Parasol Framework.</description>
</info>

<include src="inc_style.rpl"/>

<page>
<startpage title="Object Management In Depth"/>

<p>As the Parasol Framework has an object oriented foundation, it is not only important to understand the basics behind the concept, but also to learn the way in which we support OO.  In this section we look at object management in more detail so that you may gain a thorough understanding as to how it works.</p>

<h2>Creating New Objects</h2>

<p>There are two functions in the object kernel that allow you to create new objects: CreateObject() and NewObject(). The <function mod="kernel">CreateObject</> function is provided for ease-of-use, as it is possible to duplicate its functionality outside of the object kernel.  <function mod="kernel">NewObject</> sits much closer to the heart of the system, and is the only function that is capable of creating new object structures. Calling the function is simple - you provide the ID of the new object's class, a variable to store a reference to the new object, and any special flags that may be required. Here is a code segment that creates an object based on the Picture class:</p>

<indent><code>OBJECTPTR pic;
if (!NewObject(ID_PICTURE, 0, &pic, NULL)) {
   ...
}</code></indent>

<p>The code example that we have used will create a private object - now let's compare it to this next code segment that creates a public picture object:</p>

<indent><code>OBJECTID pic_id;
if (!NewObject(ID_PICTURE, NF_PUBLIC, NULL, &pic_id)) {
   ...
}</code></indent>

<p>The key difference between the two examples is that the object handle that we received in the first case was a direct address, while the public version receives an ID based object handle.  Learning how to manage objects through their ID is an important issue - options are limited when no address is available for interaction.  The exact differences between private and public objects, and how to manage object ID's will be examined in the next section.</p>

<p>For a thorough overview of the two functions that we have mentioned, refer to the <function mod="kernel">CreateObject</> and <function mod="kernel">NewObject</> sections in the kernel manual.</p>

<h2>Public, Private or Shared?</h2>

<p>Knowing the difference between public and private objects and how to interact with them is one of the key factors that you need to learn before diving into your first project.  This situation is unusual as most systems will allow programmers to develop even the most complex projects without knowledge of the difference between public and private memory.  In comparison, our core platform's use of public memory is of significant note and you will be interacting with such memory areas from the outset.</p>

<p>If you're uncertain as to the difference between public and private memory, here is a quick explanation. Private memory is the default type of memory allocation - only your program can access it, which means that it is also protected from illegal accesses from other programs.  Public memory is the opposite, meaning every program can gain access to it. In order to prevent programs clamouring for access to the same memory block at once, access to public memory is regulated through management functions that ensure that only one program can use a public memory block at any given time. The benefit of public memory is that it makes it easy for programs to share data, and can often assist in preventing data from being duplicated in memory.</p>

<p>So what's the difference between public and private <i>objects</i>?  The principle is much the same - private objects are accessible by your program only, while public objects are accessible by all programs. A public object is typically created when an object should have <i>no relationship to the program that created it</i>, i.e. the object needs to function independently, as if the object itself were an API or program. When the program that created the object dies, the object can remain in memory so that others can continue to interact with it. The usefulness of this feature should be clear and you will regularly encounter these objects during your project development cycle. The impending question is that of access - how do you access a public object and prevent others interfering with your use of it?</p>

<p>Two functions are provided for gaining exclusive access to objects: <function mod="kernel">AccessObject</> and <function mod="kernel">ReleaseObject</>.  Here is a code segment that attempts to gain access to the picture object that we created earlier, and releases it if it is successful:</p>

<indent><code>if (!AccessObject(pic_id, 5000, &pic)) {
   ...
   ReleaseObject(pic);
}</code></indent>

<p>In order to gain access to a public object you will need to know the ID number.  In the above case we know the ID because we had created the object earlier and stored its ID in the pic_id variable.  If some other program created the object that you need to use, there are a number of other functions that you can use to aid you in searching for it, such as <function mod="kernel">FindObject</>.  When gaining access to an object, you also need to specify a time-out period in milli-seconds so that your program will give up waiting if someone has locked the object for an extended period of time.  In our example, a setting of 5000 will cause the program to wait for up to 5 seconds before giving up.  When a call to <function mod="kernel">AccessObject</> executes successfully, an address pointer will be returned that gives access to the object structure.  Once you have the address you may do with the object as you please, before finally releasing it with a call to <function mod="kernel">ReleaseObject</>.</p>

<p>We're now going to introduce a small element of confusion - shared objects.  A shared object is technically private (it is stored in private memory) but it is open for communication with other tasks.  All communication with the object works via messaging.  When the owner of the object receives your messages it will process them and if necessary, send results back to your program. Shared objects also differ slightly in that when the parent program terminates, any shared objects that were created will be destroyed with it.</p>

<p>In summary, here is a list of the different types of objects with their associated advantages and disadvantages:</p>

<h3>Public</>
<indent>
<list type="bullet">
  <li>Can be accessed and interacted with by any application directly, because the object structure and its data lies in public memory.</li>
  <li>Can receive messages.</li>
  <li>They take up public memory which in some environments can be an artificially restricted resource.</li>
  <li>They are potentially easier to corrupt by programs that are written incorrectly.</li>
  <li>When exclusively accessed, they sometimes need a little extra time to resolve internal memory addresses.</li>
</list>
</indent>

<h3>Shared</h3>
<indent>
<list type="bullet">
  <li>These objects are allocated within the memory space of the tasks that create them.</li>
  <li>A shared object can only be accessed directly by its parent task.</li>
  <li>Other tasks can discover shared objects by looking for them on the system's shared object list.</li>
  <li>If an external task needs to use the object, messages are sent between tasks to reach the desired results.</li>
</list>
</indent>

<h3>Private</>
<indent>
<list type="bullet">
  <li>These objects can only be accessed and interacted with by their parent task.</li>
  <li>There is no need to manage locks on private objects as they are permanently accessible - this ensures that speed is maximised.</li>
</list>
</indent>

<h3>Child</>
<indent>
<list type="bullet">
  <li>This object type can only be allocated when writing code for a class module.</li>
  <li>Child objects do not appear in object lists, effectively making them hidden from everything except the parent object.</li>
</ul>
</indent>

<h2>Structure Layout</h2>

<p>Both public and private objects have a physical structure that can be accessed and manipulated by program and class code alike. Object structures are split into two parts - a standard set of fields at the beginning of the structure, known as the 'header', followed by the object fields that contain data for the object, as defined by its class. The object header is always present and can be easily accessed, but the object fields can only be accessed directly if they have been 'published' by the developer. If the fields are not published, then they have to be accessed using the field support functions - more on this later in the document.</p>

<p>Here's a breakdown of the object header format:</p>

<indent><table width="100%" columns="120,100,0" vspacing="6">
  <row><cell><b><u>Type</u></b></cell><cell><b><u>Name</u></b></cell><cell><b><u>Description</u></b></cell></row>
  <row><cell>CLASSID</cell><cell>ClassID</cell><cell>The ClassID refers to the unique ID of the class that the object belongs to. E.g. If the object belongs to the Screen class, then its ID will be ID_SCREEN, as defined in the system/registry.h include file. When you need to identify an object as quickly as possible, check this field.</cell></row>
  <row><cell>CLASSID</cell><cell>SubID</cell><cell>If the object is being managed by a sub-class, this field will reflect that class ID.  You can read more about base-classes and sub-classes in the <class>Class</> Manual.</cell></row>
  <row><cell>OBJECTID</cell><cell>UID</cell><cell>the unique identifier that has been assigned to the object by the system. If you don't know the ID of an object but have its address, this field provides a quick way of obtaining the unique ID.</cell></row>
  <row><cell>OBJECTID</cell><cell>OwnerID</cell><cell>refers to the unique ID of the object's owner.  In almost all cases, an object will have an owner unless it has been marked as an untracked object. Knowing the owner of an object can be exceptionally useful, as it designates its position within the object hierarchy. This also has an impact on resource tracking - if the owner of an object is destroyed, then the object will also be eliminated as it will be treated as a resource of the owner. The owner of an object can be changed through the <function mod="kernel">SetOwner</> function - do not attempt to change the owner by writing to the OwnerID field directly.</cell></row>
  <row><cell>WORD</cell><cell>ObjectFlags</cell><cell>
    <p>This field can provide you with interesting information on an object's status. All flags are read-only and most are private to the system. Here are the flags that you are allowed to check:</p>
    <indent><table width="100%" columns="120,0">
      <row><cell>NF_NOTRACK</cell><cell>If this flag is set then the object is not being tracked as a resource.</cell></row>
      <row><cell>NF_PUBLIC</cell><cell>If the object is publicly accessible, this flag will be set.</cell></row>
      <row><cell>NF_NETWORK</cell><cell>This flag is set if the object has been given permission to be shared over a local network or the Internet.</cell></row>
      <row><cell>NF_INITIALISED</cell><cell>If the object has been initialised then this flag will be set.</cell></row>
      <row><cell>NF_SHARED</cell><cell>If the object is open to external communication, this flag is set.</cell></row>
      <row><cell>NF_CHILD</><cell>Set if the object extends its parent's functionality.</cell></row>
      <row><cell>NF_LOCKED</><cell>Automatically set when the object is locked.</cell></row>
   </table></indent>
  </cell>
  </row>
  <row><cell>WORD</cell><cell>MemFlags</cell><cell>Recommended memory allocation flags are set in this field. This field is extremely important for developers writing code for new and existing classes. When allocating memory blocks that are to be resourced by an object, this field must be referred to so that the correct type of memory is allocated.  For example, if the object is public, this field will be set with the MEM_PUBLIC flag so that correct memory types are allocated. Further information is provided in the <a href="class_development_guide.rpl">Class Development Tutorial</a>.</cell></row>
  <row><cell>OBJECTPTR</cell><cell>Class</cell><cell>You can read this field for direct access to the object's class definition. Refer to the <class>Class</> Manual for details.</cell></row>
  <row><cell>struct Stats *</cell><cell>Stats</cell><cell>This field is private, and is only for use by the object kernel.</cell></row>
</table></indent>

<p>Please note that the entire object header is read-only.  Writing to the fields will corrupt the object and potentially cause your program to crash.</p>

<h2>Field Management</h2>

<p>The vast majority of classes that have been developed use fields for storing and retrieving data that is specific to their objects.  For instance, the Picture class stores information regarding image height, width, colours, file location and other details required to effectively manage image data. Although the concept itself is a basic one, the circumstances surrounding field management become complicated very quickly when one examines the more crucial issues. For instance, if the string field of a public object is set by your program, what will happen if some other program tries to read the same string address through the object? If the string was allocated as a memory block, who is responsible for deallocating it? What about fields that need to calculate their values dynamically? If a field is a simple type such as a number, do you need to waste time reading and writing to it through function calls, or can you access it directly?</p>

<p>Although there are some strict guidelines surrounding some of these issues, the exact terms surrounding field access will be determined by the developer of an object's class. Depending on what the class is intended for, the developer may designate that certain parts of the field structure will be directly accessible, other parts indirectly accessible, or the entire object may be accessible only through indirect means. Furthermore, fields may not only be designated as readable and writeable, but various combinations thereof can also be declared - for instance, a field may be directly readable, but indirectly writeable.  Confused?  Let's provide you with some clarification. A direct field access is as you might suspect, a simple instruction that copies or reads data directly from an object's field. Here are some examples:</p>

<indent>
<list type="ordered">
<li><fixed>Bitmap->Width = 100;</></li>
<li><fixed>Height = Bitmap->Height;</></li>
<li><fixed>Font->String = "Hello World";</></li>
</>
</indent>

<p>On the other hand, an indirect field access involves reading or writing a field through an abstract mechanism, which will normally involve some type of function call. Object oriented languages will typically offer indirect field access through method calls only. For instance, C++ does little to distinguish the difference between method-based fields and embedded functions. The OOE design structure requires that a clear line is drawn between the two, requiring developers to make an exact distinction between fields and methods. So while a call such as Bitmap-&gt;SetWidth(100) may be commonplace in some OO languages, it is an illegal design construct in our system. Instead, special functions are provided for field access. They are:</p>

<indent>
<table align="center" width="50%" spacing="0" padding="0">
  <row><cell><b><u>Get Functions</u></b></cell><cell><b><u>Set Functions</u></b></cell></row>
  <row><cell><function mod="kernel">GetField</></cell><cell><function mod="kernel">SetField</></cell></row>
  <row><cell><function mod="kernel">GetFields</></cell><cell><function mod="kernel">SetFields</></cell></row>
  <row><cell><function mod="kernel">GetFieldVariable</></cell><cell><function mod="kernel">SetFieldVariable</></cell></row>
</table>
</indent>

<p>For detailed information on how these functions operate, refer to their relevant sections in the <a href="../modules/viewmodule.rpl?xml=kernel.xml">Object Kernel Manual</a>. Using the listed functions, the direct field examples that were given earlier could be rewritten as follows:</p>

<indent>
<list type="ordered">
<li><fixed>Width = 100;<br/>SetField(Bitmap, FID_Width|TLONG, &amp;Width);</></li>
<li><fixed>GetField(Bitmap, FID_Height|TLONG, &amp;Height);</></li>
<li><fixed>SetFieldVariable(Font, "String", &quot;Hello World&quot;);</></li>
</list>
</indent>

<p>An important question remains - how do you know when to use the field management functions as opposed to direct field access? The only way to know outright is to check the documentation for the class that you are using. By default, it is recommended that you always use the field management functions except in cases where you have thoroughly read the documentation for the class and understood the level of access that has been provided to you by the developer. Function calls are always safe to use, while direct access is only safe if the developer has allowed for it.</p>

<p>Finally we come to the issue of permitted field types and type naming conventions.  There are a limited number of field types available for use in object construction, as shown in this table:</p>

<indent>
<list type="custom" vspacing="0">
<u><b><li value="Type">Description</li></b></u>
<li value="LONG">A 32-bit integer value ranging from -2,147,483,647 to 2,147,483,648.</li>
<li value="LARGE">A 64-bit integer value, large enough for almost any situation.</li>
<li value="FLOAT">A 32-bit floating point value with low accuracy and potential for rounding errors.</li>
<li value="DOUBLE">A 64-bit floating point value with high accuracy and small potential for rounding errors.</li>
<li value="POINTER">A standard 32-bit address space pointer.</li>
<li value="STRING">A 32-bit address space pointer that refers to a null-terminated string.</li>
<li value="VARIABLE">A variable field can support some, to all of the above field types.</li>
</list>
</indent>

<p>Objects cannot declare 8 or 16 bit field types within their structure unless they are private to the class. No mechanism is provided for the support of unsigned integers. The field management functions provide full support for type-conversion, so you can for example write to a float based field using long, large or double values. If a field is accessed using a type that cannot be converted, a type mismatch occurs and the read/write procedure is aborted.</p>

<h2>Object Interaction: Actions and Methods</h2>

<p>The most important aspect of object management is interaction. Creating an object is one thing, but they are next to worthless until you actually do something with them. That's where actions and methods come into the picture, as they form the backbone of the object communication system. Before you even begin programming, a thorough background knowledge of how the communication system works is essential.</p>

<p>Let's start with an explanation of what we mean when using the term 'action'.  An action is a predefined function call that can be called on any object. At the time of writing there are 46 different action types, all of which have their own associated name and ID number. Examples of commonly used actions are 'Init', 'Free', 'Read', 'Draw' and 'Activate'. As you might notice the action names tend towards ambiguity; for instance it is difficult to tell what the result would be if we were to execute the 'Read' action on an object, unless we were to refer to the documentation for the object's class and find out what sort of data it uses for I/O operations. How is this helpful?  Predictability is the first reason. If you want to read data from an object, you'll know to use the Read action because it is the system standard for reading raw data streams. If you need more detail on how the object's class handles support for reading data, simply check the documentation for the object's class under the Read section. Abstraction is the second reason. Certain actions such as 'Move' lend themselves particularly well to this - if you want to move an object to a new position then you simply call its Move support function. If the object supports the concept of movement, off it will go. This is the principal beauty behind the action system - each class follows a general guideline for action implementation to give a certain level of predictability, but the end result and the methods used to obtain that result lie in the hands of the class developers.</p>

<p>So how do you get an object to execute an action for you? Here are a few examples:</p>

<indent>
<list type="ordered">
<li><fixed>Action(AC_Init, pic, NULL);</></li>
<li><fixed>ActionMsg(AC_Free, pic, NULL);</></li>
<li><fixed>struct acMove move;
move.DeltaX = 30;
move.DeltaY = 15;
move.DeltaZ = 0;
Action(AC_Move, Window, &move);</></li>
</list>
</indent>

<p>As you can see there are two primary functions available for action execution - <function mod="kernel">Action</> and <function mod="kernel">ActionMsg</>. The <function mod="kernel">Action</> function executes the requested action immediately, while <function mod="kernel">ActionMsg</> uses a delayed execution model via messaging.  The difference between the two will be examined in the next section, but for extensive information on how these functions operate, please read up on the <function mod="kernel">Action</a>, <function mod="kernel">ActionMsg</> and <function mod="kernel">ActionTags</> functions in the Object Kernel Manual. You may also be wondering where you can find documentation on all the different action types and what they do - if so, check the <a href="action_list.rpl">Action Document</a> as it documents all the actions and their associated guidelines in significant detail.</p>

<p>Now that you know what an action is, we can move onto methods. A method is defined as a function call that is specific to the class of a given object.  A class may define as little or as many methods as it likes, all of which can be given their own name and associated arguments. For the most part, methods are rarely implemented as part of a class' development as most functionality can be shoe-horned into the action and field support of the system. However, as the available actions cannot provide cover for every possible situation, methods are still needed on an occasional basis.</p>

<p>The good news about methods is that they use the same functions provided by the kernel for action execution. In fact, in all cases the object kernel has been designed to treat actions and methods as all being under the same umbrella.  What's more, you can execute methods using the message system, a feature which is very particular to the SDK's design. Here are some examples of valid method calls:</p>

<indent>
<list type="ordered">
<li><fixed>struct mtReadConfigInt read;
read.Section = "Section";
read.Item    = "Item";
Action(MT_ReadConfigInt, Config, &read);</></li>
<li><fixed>ActionMsg(MT_About, InspectorID, NULL);</></li>
</list>
</indent>

<p>The best way to obtain information on the methods supported by a class is to read the class documentation. This will tell you the names of any supported methods, details on any arguments you are expected to provide, and an overview of how each method operates. Also, keep in mind that methods are not interchangeable, i.e. do not try to execute a method documented in one class on an object that belongs to some other class. Unpredictable results will almost certainly occur.</p>

<h2>Direct Calls Vs Object Messaging</h2>

<p>In the previous section we used two similar looking functions, <function mod="kernel">Action</> and <function mod="kernel">ActionMsg</>. Knowing the difference between these two functions, and when to use one over the other is absolutely vital as the end results are not identical.</p>

<p>Calling the <function mod="kernel">Action</> function results in the immediate execution of an action routine on an object. As the routine will be executed in your own task space, it is essentially the same as making a direct function call. The only restriction is that you need to have the object's address in order to make a direct action call, which restricts you to using it on objects local to your task, or objects that have been allocated publicly. The primary advantage of calling an action directly is speed - with no messaging system to get in the way, the fastest route is always taken. Apart from its restrictions, there are no disadvantages in using the <function mod="kernel">Action</> function.</p>

<p>At first glance the <function mod="kernel">ActionMsg</> function looks almost identical to Action(), apart from one important factor, which is that it takes object ID's rather than addresses. The fact that it is based on unique identifiers means that it can execute actions on objects that are contained within a task space separate to your own, simply by passing messages through the system. The primary advantage of this function is that it can be used on any object type, and provides a certain level of crash protection for your task if there are any problems with the object's structure. Unfortunately, it is disadvantaged in that message passing is much slower than direct execution, and there is always potential for problems if the other task fails to respond to the message request. Still, being able to talk to other tasks within the system can be essential and you will most likely find yourself using the messaging system more often than you might imagine.</p>

<h2>Summary</h2>

<p>You now have enough information to start analysing the source code of other programs and even start thinking about writing your own programs from scratch. You may also want to start looking at the functionality of the <a href="../modules/viewmodule.rpl?xml=kernel.xml">object kernel</a> in more detail to start understanding how other parts of the system work. From this point the documentation gets very detailed - if you're not sure that you understood this document fully, examine the source of some existing programs, then return here and revise the information to obtain a thorough understanding.  Good luck!</p>

</page>
