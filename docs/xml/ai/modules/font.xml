<?xml version="1.0" encoding="UTF-8"?>
<ai:m xmlns:ai="http://parasol-framework.org/ai-docs" n="Font" v="1" cl="Font">
  <ai:f n="CharWidth" c="Returns the width of a character." p="INT fnt::CharWidth(objFont * Font, UINT Char)" r="INT">
    <ai:i n="Font" t="objFont *" c="The font to use for calculating the character width."/>
    <ai:i n="Char" t="UINT" c="A unicode character."/>
  </ai:f>
  <ai:f n="GetList" c="Returns a list of all available system fonts." p="ERR fnt::GetList(struct FontList ** Result)" r="ERR">
    <ai:i n="Result" t="struct FontList **" c="The font list is returned here."/>
    <ai:e c="Okay"/>
    <ai:e c="AccessObject"/>
    <ai:e c="NullArgs"/>
  </ai:f>
  <ai:f n="RefreshFonts" c="Refreshes the system font list with up-to-date font information." p="ERR fnt::RefreshFonts()" r="ERR">
    <ai:e c="Okay"/>
    <ai:e c="AccessObject"/>
  </ai:f>
  <ai:f n="ResolveFamilyName" c="Convert a CSV family string to a single family name." p="ERR fnt::ResolveFamilyName(CSTRING String, CSTRING * Result)" r="ERR">
    <ai:i n="String" t="CSTRING" c="A CSV family string to resolve."/>
    <ai:i n="Result" t="CSTRING *" c="The nominated family name is returned in this parameter."/>
    <ai:e c="Okay"/>
    <ai:e c="Search"/>
    <ai:e c="AccessObject"/>
    <ai:e c="GetField"/>
    <ai:e c="NullArgs"/>
  </ai:f>
  <ai:f n="SelectFont" c="Searches for a 'best fitting' font file, based on family name and style." p="ERR fnt::SelectFont(CSTRING Name, CSTRING Style, CSTRING * Path, FMETA * Meta)" r="ERR">
    <ai:i n="Name" t="CSTRING" c="The name of a font face to search for (case insensitive)."/>
    <ai:i n="Style" t="CSTRING" c="The required style, e.g. Bold or Italic. Using camel-case for each word is compulsory."/>
    <ai:i n="Path" t="CSTRING *" c="The location of the best-matching font file is returned in this parameter."/>
    <ai:i n="Meta" t="FMETA *" c="Optional, returns additional meta information about the font file."/>
    <ai:e c="Okay"/>
    <ai:e c="Search"/>
    <ai:e c="AccessObject"/>
    <ai:e c="NullArgs"/>
  </ai:f>
  <ai:f n="StringWidth" c="Returns the pixel width of any given string in relation to a font's settings." p="INT fnt::StringWidth(objFont * Font, CSTRING String, INT Chars)" r="INT">
    <ai:i n="Font" t="objFont *" c="An initialised font object."/>
    <ai:i n="String" t="CSTRING" c="The string to be calculated."/>
    <ai:i n="Chars" t="INT" c="The number of characters (not bytes, so consider UTF-8 serialisation) to be used in calculating the string length, or -1 to use the entire string."/>
  </ai:f>
  <ai:c l="ALIGN" c="Universal values for alignment of graphics and text">
    <ai:k n="BOTTOM" c="Align to bottom"/>
    <ai:k n="CENTER" c="Synonym for HORIZONTAL | VERTICAL"/>
    <ai:k n="HORIZONTAL" c="Align to horizontal center"/>
    <ai:k n="LEFT" c="Align to left"/>
    <ai:k n="MIDDLE" c="Synonym for HORIZONTAL | VERTICAL"/>
    <ai:k n="RIGHT" c="Align to right"/>
    <ai:k n="TOP" c="Align to top"/>
    <ai:k n="VERTICAL" c="Align to vertical center"/>
  </ai:c>
  <ai:c l="FMETA" c="Result flags for the SelectFont() function.">
    <ai:k n="HIDDEN" c="The font should not appear in any named list shown to the user."/>
    <ai:k n="HINT_INTERNAL" c="The Freetype hinter should be used."/>
    <ai:k n="HINT_LIGHT" c="The light version of the Freetype hinter should be used."/>
    <ai:k n="HINT_NORMAL" c="The hinting information provided by the font should be given preference."/>
    <ai:k n="SCALED" c="The font is scalable (assume fixed otherwise)."/>
    <ai:k n="VARIABLE" c="This is a scalable font featuring variable metrics."/>
  </ai:c>
  <ai:c l="FSS" c="Options for the StringSize() function.">
    <ai:k n="ALL" c="Process all characters."/>
    <ai:k n="LINE" c="Terminate operation at the first line feed or word-wrap."/>
  </ai:c>
  <ai:c l="FTF" c="Font flags">
    <ai:k n="BASE_LINE" c="The Font's Y coordinate is the base line."/>
    <ai:k n="BOLD" c="Font is described as having a bold weight (read only)."/>
    <ai:k n="HEAVY_LINE" c="Underline the font with a double-sized line, using the colour defined in Underline."/>
    <ai:k n="ITALIC" c="Font is described as using italics (read only)."/>
  </ai:c>
  <ai:c l="HINT" c="Force hinting options for a font.">
    <ai:k n="INTERNAL" c="The Freetype hinter will be forcibly imposed."/>
    <ai:k n="LIGHT" c="The light version of the Freetype hinter will be forcibly imposed."/>
    <ai:k n="NORMAL" c="The hinting information provided by the font will be given preference."/>
  </ai:c>
  <ai:s n="FontList">
    <ai:f n="Next" t="struct FontList *" c="Pointer to the next entry in the list."/>
    <ai:f n="Name" t="STRING" c="The name of the font face."/>
    <ai:f n="Alias" t="STRING" c="Reference to another font Name if this is an alias."/>
    <ai:f n="Points" t="INT *" s="0" c="Pointer to an array of fixed point sizes supported by the font."/>
    <ai:f n="Styles" t="STRING" c="Supported styles are listed here in CSV format."/>
    <ai:f n="Axes" t="STRING" c="For variable fonts, lists all supported axis codes in CSV format"/>
    <ai:f n="Scalable" t="INT8" c="TRUE if the font is scalable."/>
    <ai:f n="Variable" t="INT8" c="TRUE if the font has variable metrics."/>
    <ai:f n="Hinting" t="HINT" c="Hinting options"/>
    <ai:f n="Hidden" t="INT8" c="TRUE if the font should be hidden from user font lists."/>
  </ai:s>
  <ai:s n="RGB8">
    <ai:f n="Red" t="UINT8" c="Red component value"/>
    <ai:f n="Green" t="UINT8" c="Green component value"/>
    <ai:f n="Blue" t="UINT8" c="Blue component value"/>
    <ai:f n="Alpha" t="UINT8" c="Alpha component value"/>
  </ai:s>
</ai:m>
