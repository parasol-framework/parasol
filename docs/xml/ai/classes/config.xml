<?xml version="1.0" encoding="UTF-8"?>
<ai:cl xmlns:ai="http://parasol-framework.org/ai-docs" n="Config" mod="Core" c="Manages the reading and writing of configuration files." cat="Data" id="f6e46c7b" v="1">
  <ai:a n="Clear" c="Clears all configuration data." p="ERR acClear(*Object)"/>
  <ai:a n="DataFeed" c="Data can be added to a Config object through this action." p="ERR acDataFeed(*Object, OBJECTID Object, DATA Datatype, APTR Buffer, INT Size)">
    <ai:i n="Object" t="OBJECTID" c="Must refer to the unique ID of the object that you represent. If you do not represent an object, set this parameter to the current task ID."/>
    <ai:i n="Datatype" t="DATA" c="The type of data being sent."/>
    <ai:i n="Buffer" t="APTR" c="The data being sent to the target object."/>
    <ai:i n="Size" t="INT" c="The size of the data in Buffer."/>
  </ai:a>
  <ai:a n="Flush" c="Diverts to SaveSettings." p="ERR acFlush(*Object)"/>
  <ai:a n="SaveSettings" c="Saves data to the file that the configuration data was loaded from." p="ERR acSaveSettings(*Object)"/>
  <ai:a n="SaveToObject" c="Saves configuration data to an object, using standard config text format." p="ERR acSaveToObject(*Object, OBJECTID Dest, CLASSID ClassID)">
    <ai:i n="Dest" t="OBJECTID" c="Refers to an object that will receive the encoded data."/>
    <ai:i n="ClassID" t="CLASSID" c="Can refer to a sub-class that should be used when encoding the data."/>
  </ai:a>
  <ai:m n="DeleteGroup" c="Deletes entire groups of configuration data." p="ERR cfg::DeleteGroup(OBJECTPTR Object, CSTRING Group)">
    <ai:i n="Group" t="CSTRING" c="The name of the group that will be deleted."/>
    <ai:e c="Okay"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="DeleteKey" c="Deletes single key entries." p="ERR cfg::DeleteKey(OBJECTPTR Object, CSTRING Group, CSTRING Key)">
    <ai:i n="Group" t="CSTRING" c="The name of the targeted group."/>
    <ai:i n="Key" t="CSTRING" c="The name of the targeted key."/>
    <ai:e c="Okay"/>
    <ai:e c="Search"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="GetGroupFromIndex" c="Converts an index number into its matching group string." p="ERR cfg::GetGroupFromIndex(OBJECTPTR Object, INT Index, CSTRING * Group)">
    <ai:i n="Index" t="INT" c="The group index that you want to identify."/>
    <ai:i n="Group" t="CSTRING *" c="Points to the group string that matches the index number."/>
    <ai:e c="Okay"/>
    <ai:e c="Args"/>
    <ai:e c="NoData"/>
    <ai:e c="OutOfRange"/>
  </ai:m>
  <ai:m n="Merge" c="Merges two config objects together." p="ERR cfg::Merge(OBJECTPTR Object, OBJECTPTR Source)">
    <ai:i n="Source" t="OBJECTPTR" c="The Config object to be merged."/>
    <ai:e c="Okay"/>
    <ai:e c="AccessObject"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="MergeFile" c="Merges a configuration file into existing configuration data." p="ERR cfg::MergeFile(OBJECTPTR Object, CSTRING Path)">
    <ai:i n="Path" t="CSTRING" c="The location of the configuration file that you want to merge."/>
    <ai:e c="Okay"/>
    <ai:e c="File"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="ReadValue" c="Reads a key-value string." p="ERR cfg::ReadValue(OBJECTPTR Object, CSTRING Group, CSTRING Key, CSTRING * Data)">
    <ai:i n="Group" t="CSTRING" c="The name of a group to examine for a key. If NULL, all groups are scanned."/>
    <ai:i n="Key" t="CSTRING" c="The name of a key to retrieve (case sensitive)."/>
    <ai:i n="Data" t="CSTRING *" c="The key value will be stored in this parameter on returning."/>
    <ai:e c="Okay"/>
    <ai:e c="Search"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="Set" c="Sets keys in existing config groups (aborts if the group does not exist)." p="ERR cfg::Set(OBJECTPTR Object, CSTRING Group, CSTRING Key, CSTRING Data)">
    <ai:i n="Group" t="CSTRING" c="The name of the group. Wildcards are supported."/>
    <ai:i n="Key" t="CSTRING" c="The name of the key."/>
    <ai:i n="Data" t="CSTRING" c="The data that will be added to the given group/key."/>
    <ai:e c="Okay"/>
    <ai:e c="Search"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="SortByKey" c="Sorts config data using a sequence of sort instructions." p="ERR cfg::SortByKey(OBJECTPTR Object, CSTRING Key, INT Descending)">
    <ai:i n="Key" t="CSTRING" c="The name of the key to sort on."/>
    <ai:i n="Descending" t="INT" c="Set to true if a descending sort is required."/>
    <ai:e c="Okay"/>
    <ai:e c="NoData"/>
  </ai:m>
  <ai:m n="WriteValue" c="Adds new entries to config objects." p="ERR cfg::WriteValue(OBJECTPTR Object, CSTRING Group, CSTRING Key, CSTRING Data)">
    <ai:i n="Group" t="CSTRING" c="The name of the group."/>
    <ai:i n="Key" t="CSTRING" c="The name of the key."/>
    <ai:i n="Data" t="CSTRING" c="The data that will be added to the given group/key."/>
    <ai:e c="Okay"/>
    <ai:e c="Args"/>
    <ai:e c="AllocMemory"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:f n="Data" c="Reference to the raw data values." t="APTR" a="G"/>
  <ai:f n="Flags" c="Optional flags may be set here." t="CNF" a="RW"/>
  <ai:f n="GroupFilter" c="Set this field to enable group filtering." t="STRING" a="GS"/>
  <ai:f n="KeyFilter" c="Set this field to enable key filtering." t="STRING" a="GS"/>
  <ai:f n="Path" c="Set this field to the location of the source configuration file." t="STRING" a="RS"/>
  <ai:f n="TotalGroups" c="Returns the total number of groups in a config object." t="INT" a="G"/>
  <ai:f n="TotalKeys" c="The total number of key values loaded into the config object." t="INT" a="G"/>
</ai:cl>
