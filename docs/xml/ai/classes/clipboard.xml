<?xml version="1.0" encoding="UTF-8"?>
<ai:cl xmlns:ai="http://parasol-framework.org/ai-docs" n="Clipboard" mod="Display" c="The Clipboard class manages cut, copy and paste between applications." cat="IO" id="4912a9b5" v="1">
  <ai:a n="Clear" c="Destroys all cached data that is stored in the clipboard." p="ERR acClear(*Object)"/>
  <ai:a n="DataFeed" c="This action can be used to place data in a clipboard." p="ERR acDataFeed(*Object, OBJECTID Object, DATA Datatype, APTR Buffer, INT Size)">
    <ai:i n="Object" t="OBJECTID" c="Must refer to the unique ID of the object that you represent. If you do not represent an object, set this parameter to the current task ID."/>
    <ai:i n="Datatype" t="DATA" c="The type of data being sent."/>
    <ai:i n="Buffer" t="APTR" c="The data being sent to the target object."/>
    <ai:i n="Size" t="INT" c="The size of the data in Buffer."/>
  </ai:a>
  <ai:m n="AddFile" c="Add files to the clipboard." p="ERR clip::AddFile(OBJECTPTR Object, CLIPTYPE Datatype, CSTRING Path, CEF Flags)">
    <ai:i n="Datatype" t="CLIPTYPE" c="Set this argument to indicate the type of data you are copying to the clipboard."/>
    <ai:i n="Path" t="CSTRING" c="The path of the file to add."/>
    <ai:i n="Flags" t="CEF" c="Optional flags."/>
    <ai:e c="Okay"/>
    <ai:e c="MissingPath"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="AddObjects" c="Extract data from objects and add it all to the clipboard." p="ERR clip::AddObjects(OBJECTPTR Object, CLIPTYPE Datatype, OBJECTID * Objects, CEF Flags)">
    <ai:i n="Datatype" t="CLIPTYPE" c="The type of data representing the objects, or NULL for automatic recognition."/>
    <ai:i n="Objects" t="OBJECTID *" c="Array of object ID's to add to the clipboard."/>
    <ai:i n="Flags" t="CEF" c="Optional flags."/>
    <ai:e c="Okay"/>
    <ai:e c="Args"/>
  </ai:m>
  <ai:m n="AddText" c="Adds a block of text to the clipboard." p="ERR clip::AddText(OBJECTPTR Object, CSTRING String)">
    <ai:i n="String" t="CSTRING" c="The text to add to the clipboard."/>
    <ai:e c="Okay"/>
    <ai:e c="CreateFile"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="GetFiles" c="Retrieve the most recently clipped data as a list of files." p="ERR clip::GetFiles(OBJECTPTR Object, CLIPTYPE Filter, INT Index, CLIPTYPE * Datatype, CSTRING ** Files, CEF * Flags)">
    <ai:i n="Filter" t="CLIPTYPE" c="Filter down to the specified data type. This parameter will be updated to reflect the retrieved data type when the method returns. Set to zero to disable."/>
    <ai:i n="Index" t="INT" c="If the Filter parameter is zero and clipboard history is enabled, this parameter refers to a historical clipboard item, with zero being the most recent."/>
    <ai:i n="Datatype" t="CLIPTYPE *" c="The resulting datatype of the requested clip data."/>
    <ai:i n="Files" t="CSTRING **" c="The resulting location(s) of the requested clip data are returned in this parameter; terminated with a NULL entry. The client must free the returned array with FreeResource."/>
    <ai:i n="Flags" t="CEF *" c="Result flags are returned in this parameter. If DELETE is defined, the client must delete the files after use in order to support the 'cut' operation."/>
    <ai:e c="Okay"/>
    <ai:e c="Args"/>
    <ai:e c="NoData"/>
    <ai:e c="OutOfRange"/>
  </ai:m>
  <ai:m n="Remove" c="Remove items from the clipboard." p="ERR clip::Remove(OBJECTPTR Object, CLIPTYPE Datatype)">
    <ai:i n="Datatype" t="CLIPTYPE" c="The datatype(s) that will be deleted (datatypes may be logically-or'd together)."/>
    <ai:e c="Okay"/>
    <ai:e c="AccessMemory"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:f n="Flags" c="Optional flags." t="CPF" a="RI"/>
  <ai:f n="RequestHandler" c="Provides a hook for responding to drag and drop requests." t="FUNCTION" a="GS"/>
</ai:cl>
