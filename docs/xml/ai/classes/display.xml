<?xml version="1.0" encoding="UTF-8"?>
<ai:cl xmlns:ai="http://parasol-framework.org/ai-docs" n="Display" mod="Display" c="Manages the video display and graphics hardware." cat="Graphics" id="12cd479b" v="1">
  <ai:a n="Activate" c="Activating a display has the same effect as calling the Show action." p="ERR acActivate(*Object)"/>
  <ai:a n="Clear" c="Clears a display's image data and hardware buffers (e.g. OpenGL)" p="ERR acClear(*Object)"/>
  <ai:a n="Disable" c="Disables the display (goes into power saving mode)." p="ERR acDisable(*Object)">
    <ai:e c="Okay"/>
    <ai:e c="NoSupport"/>
  </ai:a>
  <ai:a n="Draw" c="Draws object graphics to drawable areas." p="ERR acDraw(*Object, DOUBLE X, DOUBLE Y, DOUBLE Width, DOUBLE Height)">
    <ai:i n="X" t="INT" c="The X position of the region to be drawn."/>
    <ai:i n="Y" t="INT" c="The Y position of the region to be drawn."/>
    <ai:i n="Width" t="INT" c="The width of the region to be drawn."/>
    <ai:i n="Height" t="INT" c="The height of the region to be drawn."/>
  </ai:a>
  <ai:a n="Enable" c="Restores the screen display from power saving mode." p="ERR acEnable(*Object)"/>
  <ai:a n="Flush" c="Flush pending graphics operations to the display." p="ERR acFlush(*Object)"/>
  <ai:a n="Focus" c="Focus on this object in the user interface." p="ERR acFocus(*Object)"/>
  <ai:a n="GetKey" c="Retrieve formatted information from the display." p="ERR acGetKey(*Object, CSTRING Key, STRING Value, INT Size)">
    <ai:i n="Key" t="CSTRING" c="The name of a key value."/>
    <ai:i n="Value" t="STRING" c="Pointer to a buffer space large enough to hold the retrieved value."/>
    <ai:i n="Size" t="INT" c="Indicates the byte size of the Buffer."/>
  </ai:a>
  <ai:a n="Hide" c="Hides a display from the user's view." p="ERR acHide(*Object)"/>
  <ai:a n="Move" c="Move the display to a new display position (relative coordinates)." p="ERR acMove(*Object, DOUBLE DeltaX, DOUBLE DeltaY, DOUBLE DeltaZ)">
    <ai:i n="DeltaX" t="DOUBLE" c="The number of units to move along the X axis."/>
    <ai:i n="DeltaY" t="DOUBLE" c="The number of units to move along the Y axis."/>
    <ai:i n="DeltaZ" t="DOUBLE" c="The number of units to move along the Z axis."/>
  </ai:a>
  <ai:a n="MoveToBack" c="Move the display to the back of the display list." p="ERR acMoveToBack(*Object)"/>
  <ai:a n="MoveToFront" c="Move the display to the front of the display list." p="ERR acMoveToFront(*Object)"/>
  <ai:a n="MoveToPoint" c="Move the display to a new position." p="ERR acMoveToPoint(*Object, DOUBLE X, DOUBLE Y, DOUBLE Z, MTF Flags)">
    <ai:i n="X" t="DOUBLE" c="The new X position to move the object to."/>
    <ai:i n="Y" t="DOUBLE" c="The new Y position to move the object to."/>
    <ai:i n="Z" t="DOUBLE" c="The new Z position to move the object to."/>
    <ai:i n="Flags" t="MTF" c="Set the relevant MTF flag for each provided parameter."/>
  </ai:a>
  <ai:a n="Redimension" c="Moves and resizes a display object in a single action call." p="ERR acRedimension(*Object, DOUBLE X, DOUBLE Y, DOUBLE Z, DOUBLE Width, DOUBLE Height, DOUBLE Depth)">
    <ai:i n="X" t="DOUBLE" c="The new X position to apply to the target object."/>
    <ai:i n="Y" t="DOUBLE" c="The new Y position to apply to the target object."/>
    <ai:i n="Z" t="DOUBLE" c="The new Z position to apply to the target object."/>
    <ai:i n="Width" t="DOUBLE" c="The new width of the target object."/>
    <ai:i n="Height" t="DOUBLE" c="The new height of the target object."/>
    <ai:i n="Depth" t="DOUBLE" c="The new depth of the target object."/>
  </ai:a>
  <ai:a n="Resize" c="Resizes the dimensions of a display object." p="ERR acResize(*Object, DOUBLE Width, DOUBLE Height, DOUBLE Depth)">
    <ai:i n="Width" t="DOUBLE" c="The new width of the object."/>
    <ai:i n="Height" t="DOUBLE" c="The new height of the object."/>
    <ai:i n="Depth" t="DOUBLE" c="The new depth of the object."/>
  </ai:a>
  <ai:a n="SaveImage" c="Saves the image of a display to a data object." p="ERR acSaveImage(*Object, OBJECTID Dest, CLASSID ClassID)">
    <ai:i n="Dest" t="OBJECTID" c="Refers to an object that will receive the encoded image data."/>
    <ai:i n="ClassID" t="CLASSID" c="The Picture class to use for encoding the image data."/>
  </ai:a>
  <ai:a n="SaveSettings" c="Saves the current display settings as the default." p="ERR acSaveSettings(*Object)"/>
  <ai:a n="Show" c="Presents a display object to the user." p="ERR acShow(*Object)"/>
  <ai:m n="Minimise" c="Minimise the desktop window hosting the display." p="ERR gfx::Minimise(OBJECTPTR Object)">
    <ai:e c="Okay"/>
  </ai:m>
  <ai:m n="SetDisplay" c="Changes the current display mode." p="ERR gfx::SetDisplay(OBJECTPTR Object, INT X, INT Y, INT Width, INT Height, INT InsideWidth, INT InsideHeight, INT BitsPerPixel, DOUBLE RefreshRate, INT Flags)">
    <ai:i n="X" t="INT" c="Horizontal offset of the display, relative to its default position."/>
    <ai:i n="Y" t="INT" c="Vertical offset of the display, relative to its default position."/>
    <ai:i n="Width" t="INT" c="Width of the display."/>
    <ai:i n="Height" t="INT" c="Height of the display."/>
    <ai:i n="InsideWidth" t="INT" c="Internal display width (must be equal to or greater than the display width)."/>
    <ai:i n="InsideHeight" t="INT" c="Internal display height (must be equal to or greater than the display height)."/>
    <ai:i n="BitsPerPixel" t="INT" c="The desired display depth (15, 16, 24 or 32)."/>
    <ai:i n="RefreshRate" t="DOUBLE" c="Refresh rate, measured in floating point format for precision."/>
    <ai:i n="Flags" t="INT" c="Optional flags."/>
    <ai:e c="Okay"/>
    <ai:e c="Failed"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="SetGamma" c="Sets the display gamma levels." p="ERR gfx::SetGamma(OBJECTPTR Object, DOUBLE Red, DOUBLE Green, DOUBLE Blue, GMF Flags)">
    <ai:i n="Red" t="DOUBLE" c="Gamma correction for the red gun."/>
    <ai:i n="Green" t="DOUBLE" c="Gamma correction for the green gun."/>
    <ai:i n="Blue" t="DOUBLE" c="Gamma correction for the blue gun."/>
    <ai:i n="Flags" t="GMF" c="Optional flags."/>
    <ai:e c="Okay"/>
    <ai:e c="NoSupport"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="SetGammaLinear" c="Sets the display gamma level using a linear algorithm." p="ERR gfx::SetGammaLinear(OBJECTPTR Object, DOUBLE Red, DOUBLE Green, DOUBLE Blue, GMF Flags)">
    <ai:i n="Red" t="DOUBLE" c="New red gamma value."/>
    <ai:i n="Green" t="DOUBLE" c="New green gamma value."/>
    <ai:i n="Blue" t="DOUBLE" c="New blue gamma value."/>
    <ai:i n="Flags" t="GMF" c="Use SAVE to store the new settings."/>
    <ai:e c="Okay"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="SetMonitor" c="Changes the default monitor settings." p="ERR gfx::SetMonitor(OBJECTPTR Object, CSTRING Name, INT MinH, INT MaxH, INT MinV, INT MaxV, MON Flags)">
    <ai:i n="Name" t="CSTRING" c="The name of the display."/>
    <ai:i n="MinH" t="INT" c="The minimum horizontal scan rate. Usually set to 31."/>
    <ai:i n="MaxH" t="INT" c="The maximum horizontal scan rate."/>
    <ai:i n="MinV" t="INT" c="The minimum vertical scan rate. Usually set to 50."/>
    <ai:i n="MaxV" t="INT" c="The maximum vertical scan rate."/>
    <ai:i n="Flags" t="MON" c="Set to AUTO_DETECT if the monitor settings should be auto-detected on startup. Set BIT_6 if the device is limited to 6-bit colour output."/>
    <ai:e c="Okay"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="SizeHints" c="Sets the width and height restrictions for the host window (hosted environments only)." p="ERR gfx::SizeHints(OBJECTPTR Object, INT MinWidth, INT MinHeight, INT MaxWidth, INT MaxHeight, INT EnforceAspect)">
    <ai:i n="MinWidth" t="INT" c="The minimum width of the window."/>
    <ai:i n="MinHeight" t="INT" c="The minimum height of the window."/>
    <ai:i n="MaxWidth" t="INT" c="The maximum width of the window."/>
    <ai:i n="MaxHeight" t="INT" c="The maximum width of the window."/>
    <ai:i n="EnforceAspect" t="INT" c="Set to true to enforce an aspect ratio that is scaled from MinWidth,MinHeight to MaxWidth,MaxHeight."/>
    <ai:e c="Okay"/>
    <ai:e c="NoSupport"/>
  </ai:m>
  <ai:m n="UpdatePalette" c="Updates the video display palette to new colour values if in 256 colour mode." p="ERR gfx::UpdatePalette(OBJECTPTR Object, struct RGBPalette * NewPalette)">
    <ai:i n="NewPalette" t="struct RGBPalette *" c="The new palette to apply to the display bitmap."/>
    <ai:e c="Okay"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="WaitVBL" c="Waits for a vertical blank." p="ERR gfx::WaitVBL(OBJECTPTR Object)">
    <ai:e c="Okay"/>
    <ai:e c="NoSupport"/>
  </ai:m>
  <ai:f n="Bitmap" c="Reference to the display's bitmap information." t="*Bitmap" a="R"/>
  <ai:f n="BmpX" c="The horizontal coordinate of the bitmap within a display." t="INT" a="RW"/>
  <ai:f n="BmpY" c="The vertical coordinate of the Bitmap within a display." t="INT" a="RW"/>
  <ai:f n="BottomMargin" c="In hosted mode, indicates the bottom margin of the client window." t="INT" a="R"/>
  <ai:f n="Chipset" c="String describing the graphics chipset." t="STRING" a="G"/>
  <ai:f n="Display" c="String describing the display (e.g. model name of the monitor)." t="STRING" a="G"/>
  <ai:f n="DisplayManufacturer" c="String describing the display manufacturer." t="STRING" a="G"/>
  <ai:f n="DisplayType" c="In hosted mode, indicates the bottom margin of the client window." t="DT" a="R"/>
  <ai:f n="Flags" c="Optional flag settings." t="SCR" a="RS"/>
  <ai:f n="Gamma" c="Contains red, green and blue values for the display's gamma setting." t="DOUBLE []" a="GS"/>
  <ai:f n="HDensity" c="Returns the horizontal pixel density for the display." t="INT" a="GS"/>
  <ai:f n="Height" c="Defines the height of the display." t="INT" a="RS"/>
  <ai:f n="InsideHeight" c="Represents the internal height of the display." t="INT" a="G"/>
  <ai:f n="InsideWidth" c="Represents the internal width of the display." t="INT" a="G"/>
  <ai:f n="LeftMargin" c="In hosted mode, indicates the left-hand margin of the client window." t="INT" a="R"/>
  <ai:f n="Manufacturer" c="String describing the manufacturer of the graphics hardware." t="STRING" a="G"/>
  <ai:f n="MaxHScan" c="The maximum horizontal scan rate of the display output device." t="INT" a="R"/>
  <ai:f n="MaxVScan" c="The maximum vertical scan rate of the display output device." t="INT" a="R"/>
  <ai:f n="MinHScan" c="The minimum horizontal scan rate of the display output device." t="INT" a="R"/>
  <ai:f n="MinVScan" c="The minimum vertical scan rate of the display output device." t="INT" a="R"/>
  <ai:f n="Opacity" c="Determines the level of translucency applied to the display (hosted displays only)." t="DOUBLE" a="GS"/>
  <ai:f n="PopOver" c="Enables pop-over support for hosted display windows." t="OBJECTID" a="S"/>
  <ai:f n="PowerMode" c="The display's power management method." t="DPMS" a="RW"/>
  <ai:f n="RefreshRate" c="This field manages the display refresh rate." t="DOUBLE" a="RS"/>
  <ai:f n="ResizeFeedback" c="This field manages the display refresh rate." t="FUNCTION" a="GS"/>
  <ai:f n="RightMargin" c="In hosted mode, indicates the pixel margin between the client window and right window edge." t="INT" a="R"/>
  <ai:f n="Title" c="Sets the window title (hosted environments only)." t="STRING" a="GS"/>
  <ai:f n="TopMargin" c="In hosted mode, indicates the pixel margin between the client window and top window edge." t="INT" a="R"/>
  <ai:f n="TotalMemory" c="The total amount of user accessible RAM installed on the video card, or zero if unknown." t="INT" a="R"/>
  <ai:f n="TotalResolutions" c="The total number of resolutions supported by the display." t="INT" a="G"/>
  <ai:f n="VDensity" c="Returns the vertical pixel density for the display." t="INT" a="GS"/>
  <ai:f n="Width" c="Defines the width of the display." t="INT" a="RS"/>
  <ai:f n="WindowHandle" c="Refers to a display object's window handle, if relevant." t="APTR" a="GS"/>
  <ai:f n="X" c="Defines the horizontal coordinate of the display." t="INT" a="RS"/>
  <ai:f n="Y" c="Defines the vertical coordinate of the display." t="INT" a="RS"/>
</ai:cl>
