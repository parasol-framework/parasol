<?xml version="1.0" encoding="UTF-8"?>
<ai:cl xmlns:ai="http://parasol-framework.org/ai-docs" n="Document" mod="Document" c="Provides document display and editing facilities." cat="GUI" id="155c3464" v="1">
  <ai:a n="Activate" c="Activates all child objects of the document." p="ERR acActivate(*Object)"/>
  <ai:a n="Clear" c="Clears all content from the object." p="ERR acClear(*Object)"/>
  <ai:a n="Clipboard" c="Full support for clipboard activity is provided through this action." p="ERR acClipboard(*Object, OBJECTID Clipboard, CLIPMODE Mode)">
    <ai:i n="Mode" t="CLIPMODE" c="The mode that will be used to shift data between the target object and clipboard system."/>
  </ai:a>
  <ai:a n="DataFeed" c="Document data can be sent and consumed via feeds." p="ERR acDataFeed(*Object, OBJECTID Object, DATA Datatype, APTR Buffer, INT Size)">
    <ai:i n="Object" t="OBJECTID" c="Must refer to the unique ID of the object that you represent. If you do not represent an object, set this parameter to the current task ID."/>
    <ai:i n="Datatype" t="DATA" c="The type of data being sent."/>
    <ai:i n="Buffer" t="APTR" c="The data being sent to the target object."/>
    <ai:i n="Size" t="INT" c="The size of the data in Buffer."/>
    <ai:e c="Okay"/>
    <ai:e c="AllocMemory"/>
    <ai:e c="Mismatch"/>
    <ai:e c="NullArgs"/>
  </ai:a>
  <ai:a n="Disable" c="Disables user interactivity." p="ERR acDisable(*Object)"/>
  <ai:a n="Draw" c="Force a page layout update (if changes are pending) and redraw to the display." p="ERR acDraw(*Object, DOUBLE X, DOUBLE Y, DOUBLE Width, DOUBLE Height)">
    <ai:i n="X" t="INT" c="The X position of the region to be drawn."/>
    <ai:i n="Y" t="INT" c="The Y position of the region to be drawn."/>
    <ai:i n="Width" t="INT" c="The width of the region to be drawn."/>
    <ai:i n="Height" t="INT" c="The height of the region to be drawn."/>
  </ai:a>
  <ai:a n="Enable" c="Enables object functionality." p="ERR acEnable(*Object)"/>
  <ai:a n="Focus" c="Sets the user focus on the document page." p="ERR acFocus(*Object)"/>
  <ai:a n="GetKey" c="Retrieves global variables and URI parameters." p="ERR acGetKey(*Object, CSTRING Key, STRING Value, INT Size)">
    <ai:i n="Key" t="CSTRING" c="The name of a key value."/>
    <ai:i n="Value" t="STRING" c="Pointer to a buffer space large enough to hold the retrieved value."/>
    <ai:i n="Size" t="INT" c="Indicates the byte size of the Buffer."/>
  </ai:a>
  <ai:a n="Refresh" c="Reloads the document data from the original source location." p="ERR acRefresh(*Object)"/>
  <ai:a n="SaveToObject" c="Use this action to save edited information as an XML document file." p="ERR acSaveToObject(*Object, OBJECTID Dest, CLASSID ClassID)">
    <ai:i n="Dest" t="OBJECTID" c="Refers to an object that will receive the encoded data."/>
    <ai:i n="ClassID" t="CLASSID" c="Can refer to a sub-class that should be used when encoding the data."/>
  </ai:a>
  <ai:a n="SetKey" c="Set a global key-value in the document." p="ERR acSetKey(*Object, CSTRING Key, CSTRING Value)">
    <ai:i n="Key" t="CSTRING" c="The name of the target key."/>
    <ai:i n="Value" t="CSTRING" c="The string value to associate with Key."/>
  </ai:a>
  <ai:m n="AddListener" c="Adds a listener to a document trigger for receiving special callbacks." p="ERR doc::AddListener(OBJECTPTR Object, DRT Trigger, FUNCTION * Function)">
    <ai:i n="Trigger" t="DRT" c="The unique identifier for the trigger."/>
    <ai:i n="Function" t="FUNCTION *" c="The function to call when the trigger activates."/>
    <ai:e c="Okay"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="CallFunction" c="Executes any registered function in the currently open document." p="ERR doc::CallFunction(OBJECTPTR Object, CSTRING Function, struct ScriptArg * Args, INT TotalArgs)">
    <ai:i n="Function" t="CSTRING" c="The name of the function that will be called."/>
    <ai:i n="Args" t="struct ScriptArg *" c="Pointer to an optional list of parameters to pass to the procedure."/>
    <ai:i n="TotalArgs" t="INT" c="The total number of entries in the Args array."/>
    <ai:e c="Okay"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="Edit" c="Activates a user editing section within a document." p="ERR doc::Edit(OBJECTPTR Object, CSTRING Name, INT Flags)">
    <ai:i n="Name" t="CSTRING" c="The name of the edit cell that will be activated."/>
    <ai:i n="Flags" t="INT" c="Optional flags."/>
    <ai:e c="Okay"/>
    <ai:e c="Search"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="FindIndex" c="Searches the document stream for an index, returning the start and end points if found." p="ERR doc::FindIndex(OBJECTPTR Object, CSTRING Name, INT * Start, INT * End)">
    <ai:i n="Name" t="CSTRING" c="The name of the index to search for."/>
    <ai:i n="Start" t="INT *" c="The byte position of the index is returned in this parameter."/>
    <ai:i n="End" t="INT *" c="The byte position at which the index ends is returned in this parameter."/>
    <ai:e c="Okay"/>
    <ai:e c="Search"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="HideIndex" c="Hides the content held within a named index." p="ERR doc::HideIndex(OBJECTPTR Object, CSTRING Name)">
    <ai:i n="Name" t="CSTRING" c="The name of the index."/>
    <ai:e c="Okay"/>
    <ai:e c="Search"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="InsertText" c="Inserts new content into a loaded document (raw text format)." p="ERR doc::InsertText(OBJECTPTR Object, CSTRING Text, INT Index, INT Char, INT Preformat)">
    <ai:i n="Text" t="CSTRING" c="A UTF-8 text string."/>
    <ai:i n="Index" t="INT" c="Reference to a TEXT control code that will receive the content. If -1, the text will be inserted at the end of the document stream."/>
    <ai:i n="Char" t="INT" c="A character offset within the TEXT control code that will be injected with content. If -1, the text will be injected at the end of the target string."/>
    <ai:i n="Preformat" t="INT" c="If true, the text will be treated as pre-formatted (all whitespace, including consecutive whitespace will be recognised)."/>
    <ai:e c="Okay"/>
    <ai:e c="Failed"/>
    <ai:e c="OutOfRange"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="InsertXML" c="Inserts new content into a loaded document (XML format)." p="ERR doc::InsertXML(OBJECTPTR Object, CSTRING XML, INT Index)">
    <ai:i n="XML" t="CSTRING" c="An XML string in RIPL format."/>
    <ai:i n="Index" t="INT" c="The byte position at which to insert the new content."/>
    <ai:e c="Okay"/>
    <ai:e c="NoData"/>
    <ai:e c="OutOfRange"/>
    <ai:e c="CreateObject"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="ReadContent" c="Returns selected content from the document, either as plain text or original byte code." p="ERR doc::ReadContent(OBJECTPTR Object, DATA Format, INT Start, INT End, STRING * Result)">
    <ai:i n="Format" t="DATA" c="Set to TEXT to receive plain-text, or RAW to receive the original byte-code."/>
    <ai:i n="Start" t="INT" c="An index in the document stream from which data will be extracted."/>
    <ai:i n="End" t="INT" c="An index in the document stream at which extraction will stop."/>
    <ai:i n="Result" t="STRING *" c="The data is returned in this parameter as an allocated string."/>
    <ai:e c="Okay"/>
    <ai:e c="Args"/>
    <ai:e c="NoData"/>
    <ai:e c="OutOfRange"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="RemoveContent" c="Removes content from a loaded document." p="ERR doc::RemoveContent(OBJECTPTR Object, INT Start, INT End)">
    <ai:i n="Start" t="INT" c="The byte position at which to start the removal."/>
    <ai:i n="End" t="INT" c="The byte position at which the removal ends."/>
    <ai:e c="Okay"/>
    <ai:e c="Args"/>
    <ai:e c="OutOfRange"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="RemoveListener" c="Removes a previously configured listener from the document." p="ERR doc::RemoveListener(OBJECTPTR Object, INT Trigger, FUNCTION * Function)">
    <ai:i n="Trigger" t="INT" c="The unique identifier for the trigger."/>
    <ai:i n="Function" t="FUNCTION *" c="The function that is called when the trigger activates."/>
    <ai:e c="Okay"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="SelectLink" c="Selects links in the document." p="ERR doc::SelectLink(OBJECTPTR Object, INT Index, CSTRING Name)">
    <ai:i n="Index" t="INT" c="Index to a link (links are in the order in which they are created in the document, zero being the first link). Ignored if the Name parameter is set."/>
    <ai:i n="Name" t="CSTRING" c="The name of the link to select (set to NULL if an Index is defined)."/>
    <ai:e c="Okay"/>
    <ai:e c="OutOfRange"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="ShowIndex" c="Shows the content held within a named index." p="ERR doc::ShowIndex(OBJECTPTR Object, CSTRING Name)">
    <ai:i n="Name" t="CSTRING" c="The name of the index."/>
    <ai:e c="Okay"/>
    <ai:e c="Search"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:f n="Author" c="The author(s) of the document." t="STRING" a="R"/>
  <ai:f n="ClientScript" c="Allows an external script object to be used by a document file." t="OBJECTPTR" a="S"/>
  <ai:f n="Copyright" c="Copyright information for the document." t="STRING" a="R"/>
  <ai:f n="Description" c="A description of the document, provided by its author." t="STRING" a="R"/>
  <ai:f n="Error" c="The most recently generated error code." t="ERR" a="R"/>
  <ai:f n="EventCallback" c="Provides callbacks for global state changes." t="FUNCTION" a="GS"/>
  <ai:f n="EventMask" c="Specifies events that need to be reported from the Document object." t="DEF" a="RW"/>
  <ai:f n="Flags" c="Optional flags that affect object behaviour." t="DCF" a="RS"/>
  <ai:f n="Focus" c="Refers to the object that will be monitored for user focusing." t="*VectorViewport" a="RI"/>
  <ai:f n="Keywords" c="Includes keywords declared by the source document." t="STRING" a="R"/>
  <ai:f n="Origin" c="Similar to the Path field, but does not automatically load content if set." t="STRING" a="GS"/>
  <ai:f n="Page" c="The Page contains the document content and is hosted by the View" t="*VectorViewport" a="R"/>
  <ai:f n="PageHeight" c="Measures the page height of the document, in pixels." t="INT" a="R"/>
  <ai:f n="PageWidth" c="Measures the page width of the document, in pixels." t="INT" a="GS"/>
  <ai:f n="Path" c="Identifies the location of a document file to load." t="STRING" a="GS"/>
  <ai:f n="Pretext" c="Execute the XML defined here prior to loading new pages." t="STRING" a="S"/>
  <ai:f n="TabFocus" c="Allows the user to hit the tab key to focus on other GUI objects." t="OBJECTID" a="RW"/>
  <ai:f n="Title" c="The title of the document." t="STRING" a="R"/>
  <ai:f n="View" c="The viewing area of the document." t="*VectorViewport" a="R"/>
  <ai:f n="Viewport" c="A client-specific viewport that will host the document graphics." t="*VectorViewport" a="RS"/>
  <ai:f n="WorkingPath" c="Defines the working path (folder or URI)." t="STRING" a="G"/>
</ai:cl>
