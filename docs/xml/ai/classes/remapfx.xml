<?xml version="1.0" encoding="UTF-8"?>
<ai:cl xmlns:ai="http://parasol-framework.org/ai-docs" n="RemapFX" mod="Vector" c="Provides pixel remapping; equivalent to feComponentTransfer in SVG." cat="Graphics" id="3eb33c98" v="1">
  <ai:a n="Draw" c="Render the effect to the target bitmap." p="ERR acDraw(*Object, DOUBLE X, DOUBLE Y, DOUBLE Width, DOUBLE Height)">
    <ai:i n="X" t="INT" c="The X position of the region to be drawn."/>
    <ai:i n="Y" t="INT" c="The Y position of the region to be drawn."/>
    <ai:i n="Width" t="INT" c="The width of the region to be drawn."/>
    <ai:i n="Height" t="INT" c="The height of the region to be drawn."/>
  </ai:a>
  <ai:m n="SelectDiscrete" c="Apply the discrete function to a pixel component." p="ERR rf::SelectDiscrete(OBJECTPTR Object, CMP Component, DOUBLE * Values, INT Size)">
    <ai:i n="Component" t="CMP" c="The pixel component to which the discrete function must be applied."/>
    <ai:i n="Values" t="DOUBLE *" c="A list of values for the discrete function."/>
    <ai:i n="Size" t="INT" c="Total number of elements in the Values list."/>
  </ai:m>
  <ai:m n="SelectGamma" c="Apply the gamma function to a pixel component." p="ERR rf::SelectGamma(OBJECTPTR Object, CMP Component, DOUBLE Amplitude, DOUBLE Offset, DOUBLE Exponent)">
    <ai:i n="Component" t="CMP" c="The pixel component to which the gamma function must be applied."/>
    <ai:i n="Amplitude" t="DOUBLE" c="The amplitude of the gamma function."/>
    <ai:i n="Offset" t="DOUBLE" c="The offset of the gamma function."/>
    <ai:i n="Exponent" t="DOUBLE" c="The exponent of the gamma function."/>
  </ai:m>
  <ai:m n="SelectIdentity" c="Apply the identity function to a pixel component." p="ERR rf::SelectIdentity(OBJECTPTR Object, CMP Component)">
    <ai:i n="Component" t="CMP" c="The pixel component to which the identity function must be applied."/>
  </ai:m>
  <ai:m n="SelectInvert" c="Apply the invert function to a pixel component." p="ERR rf::SelectInvert(OBJECTPTR Object, CMP Component)">
    <ai:i n="Component" t="CMP" c="The pixel component to which the function must be applied."/>
  </ai:m>
  <ai:m n="SelectLinear" c="Apply the linear function to a pixel component." p="ERR rf::SelectLinear(OBJECTPTR Object, CMP Component, DOUBLE Slope, DOUBLE Intercept)">
    <ai:i n="Component" t="CMP" c="The pixel component to which the function must be applied."/>
    <ai:i n="Slope" t="DOUBLE" c="The slope of the linear function."/>
    <ai:i n="Intercept" t="DOUBLE" c="The intercept of the linear function."/>
  </ai:m>
  <ai:m n="SelectMask" c="Apply the mask function to a pixel component." p="ERR rf::SelectMask(OBJECTPTR Object, CMP Component, INT Mask)">
    <ai:i n="Component" t="CMP" c="The pixel component to which the function must be applied."/>
    <ai:i n="Mask" t="INT" c="The bit mask to be AND'd with each value."/>
  </ai:m>
  <ai:m n="SelectTable" c="Apply the table function to a pixel component." p="ERR rf::SelectTable(OBJECTPTR Object, CMP Component, DOUBLE * Values, INT Size)">
    <ai:i n="Component" t="CMP" c="The pixel component to which the table function must be applied."/>
    <ai:i n="Values" t="DOUBLE *" c="A list of values for the table function."/>
    <ai:i n="Size" t="INT" c="Total number of elements in the value list."/>
  </ai:m>
  <ai:f n="XMLDef" c="Returns an SVG compliant XML string that describes the filter." t="STRING" a="G"/>
</ai:cl>
