<?xml version="1.0" encoding="UTF-8"?>
<ai:cl xmlns:ai="http://parasol-framework.org/ai-docs" n="Surface" mod="Display" c="Manages the display and positioning of 2-Dimensional rendered graphics." cat="GUI" id="b15cfb8e" v="1">
  <ai:a n="Activate" c="Shows a surface object on the display." p="ERR acActivate(*Object)"/>
  <ai:a n="Disable" c="Disables a surface object." p="ERR acDisable(*Object)"/>
  <ai:a n="Draw" c="Redraws the contents of a surface object." p="ERR acDraw(*Object, DOUBLE X, DOUBLE Y, DOUBLE Width, DOUBLE Height)">
    <ai:i n="X" t="INT" c="The X position of the region to be drawn."/>
    <ai:i n="Y" t="INT" c="The Y position of the region to be drawn."/>
    <ai:i n="Width" t="INT" c="The width of the region to be drawn."/>
    <ai:i n="Height" t="INT" c="The height of the region to be drawn."/>
  </ai:a>
  <ai:a n="Enable" c="Enables a disabled surface object." p="ERR acEnable(*Object)"/>
  <ai:a n="Focus" c="Changes the primary user focus to the surface object." p="ERR acFocus(*Object)"/>
  <ai:a n="Hide" c="Hides a surface object from the display." p="ERR acHide(*Object)"/>
  <ai:a n="LostFocus" c="Informs a surface object that it has lost the user focus." p="ERR acLostFocus(*Object)"/>
  <ai:a n="Move" c="Moves a surface object to a new display position." p="ERR acMove(*Object, DOUBLE DeltaX, DOUBLE DeltaY, DOUBLE DeltaZ)">
    <ai:i n="DeltaX" t="DOUBLE" c="The number of units to move along the X axis."/>
    <ai:i n="DeltaY" t="DOUBLE" c="The number of units to move along the Y axis."/>
    <ai:i n="DeltaZ" t="DOUBLE" c="The number of units to move along the Z axis."/>
  </ai:a>
  <ai:a n="MoveToBack" c="Moves a surface object to the back of its container." p="ERR acMoveToBack(*Object)"/>
  <ai:a n="MoveToFront" c="Moves a surface object to the front of its container." p="ERR acMoveToFront(*Object)"/>
  <ai:a n="MoveToPoint" c="Moves a surface object to an absolute coordinate." p="ERR acMoveToPoint(*Object, DOUBLE X, DOUBLE Y, DOUBLE Z, MTF Flags)">
    <ai:i n="X" t="DOUBLE" c="The new X position to move the object to."/>
    <ai:i n="Y" t="DOUBLE" c="The new Y position to move the object to."/>
    <ai:i n="Z" t="DOUBLE" c="The new Z position to move the object to."/>
    <ai:i n="Flags" t="MTF" c="Set the relevant MTF flag for each provided parameter."/>
  </ai:a>
  <ai:a n="Redimension" c="Moves and resizes a surface object in a single action call." p="ERR acRedimension(*Object, DOUBLE X, DOUBLE Y, DOUBLE Z, DOUBLE Width, DOUBLE Height, DOUBLE Depth)">
    <ai:i n="X" t="DOUBLE" c="The new X position to apply to the target object."/>
    <ai:i n="Y" t="DOUBLE" c="The new Y position to apply to the target object."/>
    <ai:i n="Z" t="DOUBLE" c="The new Z position to apply to the target object."/>
    <ai:i n="Width" t="DOUBLE" c="The new width of the target object."/>
    <ai:i n="Height" t="DOUBLE" c="The new height of the target object."/>
    <ai:i n="Depth" t="DOUBLE" c="The new depth of the target object."/>
  </ai:a>
  <ai:a n="Resize" c="Alters the dimensions of a surface object." p="ERR acResize(*Object, DOUBLE Width, DOUBLE Height, DOUBLE Depth)">
    <ai:i n="Width" t="DOUBLE" c="The new width of the object."/>
    <ai:i n="Height" t="DOUBLE" c="The new height of the object."/>
    <ai:i n="Depth" t="DOUBLE" c="The new depth of the object."/>
  </ai:a>
  <ai:a n="SaveImage" c="Saves the graphics of a surface object." p="ERR acSaveImage(*Object, OBJECTID Dest, CLASSID ClassID)">
    <ai:i n="Dest" t="OBJECTID" c="Refers to an object that will receive the encoded image data."/>
    <ai:i n="ClassID" t="CLASSID" c="The Picture class to use for encoding the image data."/>
  </ai:a>
  <ai:a n="Show" c="Shows a surface object on the display." p="ERR acShow(*Object)"/>
  <ai:m n="AddCallback" c="Inserts a function hook into the drawing process of a surface object." p="ERR drw::AddCallback(OBJECTPTR Object, FUNCTION * Callback)">
    <ai:i n="Callback" t="FUNCTION *" c="Pointer to the callback routine or NULL to remove callbacks for the given Object."/>
    <ai:e c="Okay"/>
    <ai:e c="AllocMemory"/>
    <ai:e c="NullArgs"/>
    <ai:e c="ExecViolation"/>
  </ai:m>
  <ai:m n="ExposeToDisplay" c="Redraws a surface region to the display, preferably from its graphics buffer." p="ERR drw::ExposeToDisplay(OBJECTPTR Object, INT X, INT Y, INT Width, INT Height, EXF Flags)">
    <ai:i n="X" t="INT" c="X coordinate of the expose area."/>
    <ai:i n="Y" t="INT" c="Y coordinate of the expose area."/>
    <ai:i n="Width" t="INT" c="Width of the expose area."/>
    <ai:i n="Height" t="INT" c="Height of the expose area."/>
    <ai:i n="Flags" t="EXF" c="Optional flags."/>
    <ai:e c="Okay"/>
  </ai:m>
  <ai:m n="InvalidateRegion" c="Redraws all of the content in a surface object." p="ERR drw::InvalidateRegion(OBJECTPTR Object, INT X, INT Y, INT Width, INT Height)">
    <ai:i n="X" t="INT" c="X coordinate of the region to invalidate."/>
    <ai:i n="Y" t="INT" c="Y coordinate of the region to invalidate."/>
    <ai:i n="Width" t="INT" c="Width of the region to invalidate."/>
    <ai:i n="Height" t="INT" c="Height of the region to invalidate."/>
    <ai:e c="Okay"/>
    <ai:e c="AccessMemory"/>
  </ai:m>
  <ai:m n="Minimise" c="For hosted surfaces only, this method will minimise the surface to an icon." p="ERR drw::Minimise(OBJECTPTR Object)"/>
  <ai:m n="RemoveCallback" c="Removes a callback previously inserted by AddCallback()." p="ERR drw::RemoveCallback(OBJECTPTR Object, FUNCTION * Callback)">
    <ai:i n="Callback" t="FUNCTION *" c="Pointer to the callback routine to remove, or NULL to remove all assoicated callback routines."/>
    <ai:e c="Okay"/>
    <ai:e c="Search"/>
  </ai:m>
  <ai:m n="ResetDimensions" c="Changes the dimensions of a surface." p="ERR drw::ResetDimensions(OBJECTPTR Object, DOUBLE X, DOUBLE Y, DOUBLE XOffset, DOUBLE YOffset, DOUBLE Width, DOUBLE Height, DMF Dimensions)">
    <ai:i n="X" t="DOUBLE" c="New X coordinate."/>
    <ai:i n="Y" t="DOUBLE" c="New Y coordinate."/>
    <ai:i n="XOffset" t="DOUBLE" c="New X offset."/>
    <ai:i n="YOffset" t="DOUBLE" c="New Y offset."/>
    <ai:i n="Width" t="DOUBLE" c="New width."/>
    <ai:i n="Height" t="DOUBLE" c="New height."/>
    <ai:i n="Dimensions" t="DMF" c="Dimension flags."/>
    <ai:e c="Okay"/>
    <ai:e c="AccessMemory"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:m n="ScheduleRedraw" c="Schedules a redraw operation for the next frame." p="ERR drw::ScheduleRedraw(OBJECTPTR Object)">
    <ai:e c="Okay"/>
  </ai:m>
  <ai:m n="SetDisplay" c="Changes the screen resolution (applies to top-level surface objects only)." p="ERR drw::SetDisplay(OBJECTPTR Object, INT X, INT Y, INT Width, INT Height, INT InsideWidth, INT InsideHeight, INT BitsPerPixel, DOUBLE RefreshRate, INT Flags)">
    <ai:i n="X" t="INT" c="The horizontal coordinate/offset for the display."/>
    <ai:i n="Y" t="INT" c="The vertical coordinate/offset for the display."/>
    <ai:i n="Width" t="INT" c="The width of the display."/>
    <ai:i n="Height" t="INT" c="The height of the display."/>
    <ai:i n="InsideWidth" t="INT" c="The page width of the display must be the same as Width or greater."/>
    <ai:i n="InsideHeight" t="INT" c="The page height of the display must be the same as Height or greater."/>
    <ai:i n="BitsPerPixel" t="INT" c="Bits per pixel - 15, 16, 24 or 32."/>
    <ai:i n="RefreshRate" t="DOUBLE" c="Refresh rate."/>
    <ai:i n="Flags" t="INT" c="Optional flags."/>
    <ai:e c="Okay"/>
    <ai:e c="Failed"/>
    <ai:e c="Args"/>
  </ai:m>
  <ai:m n="SetOpacity" c="Alters the opacity of a surface object." p="ERR drw::SetOpacity(OBJECTPTR Object, DOUBLE Value, DOUBLE Adjustment)">
    <ai:i n="Value" t="DOUBLE" c="The new opacity value between 0 and 100% (ignored if you have set the Adjustment parameter)."/>
    <ai:i n="Adjustment" t="DOUBLE" c="Adjustment value to add or subtract from the existing opacity (set to zero if you want to set a fixed Value instead)."/>
    <ai:e c="Okay"/>
    <ai:e c="NullArgs"/>
  </ai:m>
  <ai:f n="AbsX" c="The absolute horizontal position of a surface object." t="INT" a="GS"/>
  <ai:f n="AbsY" c="The absolute vertical position of a surface object." t="INT" a="GS"/>
  <ai:f n="Align" c="This field allows you to align a surface area within its owner." t="ALIGN" a="RW"/>
  <ai:f n="BitsPerPixel" c="Defines the number of bits per pixel for a surface." t="INT" a="GS"/>
  <ai:f n="Bottom" c="Returns the bottom-most coordinate of a surface object, Y + Height." t="INT" a="G"/>
  <ai:f n="BottomLimit" c="Prevents a surface object from moving beyond a given point at the bottom of its container." t="INT" a="RS"/>
  <ai:f n="Buffer" c="The ID of the bitmap that manages the surface's graphics." t="OBJECTID" a="R"/>
  <ai:f n="Colour" c="String-based field for setting the background colour." t="RGB8" a="RW"/>
  <ai:f n="Cursor" c="A default cursor image can be set here for changing the mouse pointer." t="PTC" a="RS"/>
  <ai:f n="Dimensions" c="Indicates currently active dimension settings." t="DMF" a="RS"/>
  <ai:f n="Display" c="Refers to the Display object that is managing the surface's graphics." t="OBJECTID" a="R"/>
  <ai:f n="Drag" c="This object-based field is used to control the dragging of objects around the display." t="OBJECTID" a="RS"/>
  <ai:f n="DragStatus" c="Indicates the draggable state when dragging is enabled." t="DRAG" a="R"/>
  <ai:f n="Flags" c="Optional flags." t="RNF" a="RS"/>
  <ai:f n="Height" c="Defines the height of a surface object." t="INT" a="GS"/>
  <ai:f n="LeftLimit" c="Prevents a surface object from moving beyond a given point on the left-hand side." t="INT" a="RS"/>
  <ai:f n="MaxHeight" c="Prevents the height of a surface object from exceeding a certain value." t="INT" a="RS"/>
  <ai:f n="MaxWidth" c="Prevents the width of a surface object from exceeding a certain value." t="INT" a="RS"/>
  <ai:f n="MinHeight" c="Prevents the height of a surface object from shrinking beyond a certain value." t="INT" a="RS"/>
  <ai:f n="MinWidth" c="Prevents the width of a surface object from shrinking beyond a certain value." t="INT" a="RS"/>
  <ai:f n="Modal" c="Sets the surface as modal (prevents user interaction with other surfaces)." t="INT" a="RS"/>
  <ai:f n="Movement" c="Limits the movement of a surface object to vertical or horizontal shifts." t="INT" a="RS"/>
  <ai:f n="Opacity" c="Affects the level of translucency applied to a surface object." t="DOUBLE" a="GS"/>
  <ai:f n="Parent" c="The parent for a surface is defined here." t="OBJECTID" a="RS"/>
  <ai:f n="PopOver" c="Keeps a surface in front of another surface in the Z order." t="OBJECTID" a="RS"/>
  <ai:f n="Right" c="Returns the right-most coordinate of a surface object, X + Width." t="INT" a="G"/>
  <ai:f n="RightLimit" c="Prevents a surface object from moving beyond a given point on the right-hand side." t="INT" a="RS"/>
  <ai:f n="Root" c="Surface that is acting as a root for many surface children (useful when applying translucency)" t="OBJECTID" a=""/>
  <ai:f n="TopLimit" c="Prevents a surface object from moving beyond a given point at the top of its container." t="INT" a="RS"/>
  <ai:f n="UserFocus" c="Refers to the surface object that has the current focus." t="INT" a="G"/>
  <ai:f n="Visible" c="Indicates the visibility of a surface object." t="INT" a="GS"/>
  <ai:f n="VisibleHeight" c="The visible height of the surface area, relative to its parents." t="INT" a="G"/>
  <ai:f n="VisibleWidth" c="The visible width of the surface area, relative to its parents." t="INT" a="G"/>
  <ai:f n="VisibleX" c="The first visible X coordinate of the surface area, relative to its parents." t="INT" a="G"/>
  <ai:f n="VisibleY" c="The first visible Y coordinate of the surface area, relative to its parents." t="INT" a="G"/>
  <ai:f n="Width" c="Defines the width of a surface object." t="INT" a="GS"/>
  <ai:f n="WindowHandle" c="Refers to a surface object's window handle, if relevant." t="APTR" a="GS"/>
  <ai:f n="WindowType" c="Indicator for surfaces that represent themselves as a desktop window." t="INT" a="GS"/>
  <ai:f n="X" c="Determines the horizontal position of a surface object." t="INT" a="GS"/>
  <ai:f n="XOffset" c="Determines the horizontal offset of a surface object." t="INT" a="GS"/>
  <ai:f n="Y" c="Determines the vertical position of a surface object." t="INT" a="GS"/>
  <ai:f n="YOffset" c="Determines the vertical offset of a surface object." t="INT" a="GS"/>
</ai:cl>
