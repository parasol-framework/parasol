<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="module.xsl"?>

<book>
  <info>
    <name>Audio</name>
    <type>module</type>
    <comment>Comprehensive audio processing and playback system with professional-grade mixing capabilities.</comment>
    <version>1</version>
    <copyright>Paul Manias Â© 2002-2025</copyright>
    <description>
<p>The Audio module provides a robust, cross-platform audio infrastructure that manages the complete audio pipeline from sample loading through to hardware output.  The module's architecture supports both high-level convenience interfaces and low-level professional audio control, making it suitable for applications ranging from simple media playback to sophisticated audio production environments.</p>
<p>The module implements a client-server design pattern with two complementary class interfaces:</p>
<list type="bullet">
<li>
<class name="Audio">Audio</class>: Low-level hardware interface providing precise control over audio mixing, buffering, and output configuration.  Designed for applications requiring professional audio capabilities including real-time processing, multi-channel mixing, and advanced streaming architectures</li>
<li>
<class name="Sound">Sound</class>: High-level sample playback interface optimised for simplicity and performance.  Automatically manages resource allocation, format conversion, and hardware abstraction whilst providing intelligent streaming decisions</li>
</list>
<p>The internal mixer is a floating-point engine that processes all audio internally at 32-bit precision regardless of output bit depth.  The mixer supports features that include:</p>
<list type="bullet">
<li>Oversampling with interpolation for enhanced quality and reduced aliasing</li>
<li>Real-time volume ramping to eliminate audio artefacts during playback transitions</li>
<li>Multi-stage filtering with configurable low-pass and high-pass characteristics</li>
<li>Sample-accurate playback positioning with sub-sample interpolation</li>
<li>Bidirectional and unidirectional looping with precision loop point handling</li>
</list>
<header>Platform-Specific Optimisations</header>
<p>Audio implementation is optimised for each supported platform to maximise performance and minimise latency:</p>
<list type="bullet">
<li>
<b>Linux (ALSA Integration):</b> Utilises ALSA's period-based buffering with configurable period counts and sizes.  All samples are processed through the unified mixer with support for system-wide volume control and hardware mixer integration</li>
<li>
<b>Windows (DirectSound Integration):</b> Implements dual-path audio where simple playback can bypass the internal mixer for reduced latency, whilst complex operations utilise the full mixing pipeline.  Automatic fallback ensures compatibility across Windows audio driver variations</li>
<li>
<b>Cross-Platform Consistency:</b> API behaviour remains consistent across platforms, with platform-specific optimisations operating transparently to applications</li>
</list>
<header>Streaming and Memory Management</header>
<p>The module implements streaming technology that automatically adapts to sample characteristics and system resources:</p>
<list type="bullet">
<li>Smart streaming decisions based on sample size, available memory, and playback requirements</li>
<li>Configurable streaming thresholds with support for forced streaming or memory-resident operation</li>
<li>Rolling buffer architecture for large samples with automatic buffer management</li>
<li>Loop-aware streaming that maintains loop points during streaming operations</li>
</list>
<header>Usage Guidelines</header>
<p>For optimal results, choose the appropriate interface based on application requirements:</p>
<list type="bullet">
<li>
<b>
<class name="Sound">Sound</class> Class (Recommended for Most Applications):</b> Provides immediate audio playback with automatic resource management, format detection, and intelligent streaming.  Ideal for media players, games, and general-purpose audio applications</li>
<li>
<b>
<class name="Audio">Audio</class> Class (Advanced Applications):</b> Offers complete control over the audio pipeline including custom mixer configurations, real-time effects processing, and professional-grade timing control.  Required for audio workstations, synthesisers, and applications with demanding audio requirements</li>
</list>
<header>Technical Specifications</header>
<list type="bullet">
<li>Internal processing: 32-bit floating-point precision</li>
<li>Output formats: 8, 16, 24, and 32-bit with automatic conversion</li>
<li>Sample rates: Up to 44.1 kHz (hardware dependent)</li>
<li>Channel configurations: Mono and stereo with automatic format adaptation</li>
<li>Latency: Platform-optimised with configurable buffering for real-time applications</li>
</list></description>
    <classes>
      <class>Audio</class>
      <class>Sound</class>
    </classes>
  </info>

  <function>
    <name>MixContinue</name>
    <comment>Continue playing a stopped channel.</comment>
    <prototype>ERR snd::MixContinue(objAudio * Audio, INT Handle)</prototype>
    <input>
      <param type="objAudio *" name="Audio">The target Audio object.</param>
      <param type="INT" name="Handle">The target channel.</param>
    </input>
    <description>
<p>This function will continue playback on a channel that has previously been stopped.</p>
    </description>
    <result type="ERR">
      <error code="Okay">Operation successful.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>MixEndSequence</name>
    <comment>Ends the buffering of mix commands.</comment>
    <prototype>ERR snd::MixEndSequence(objAudio * Audio, INT Handle)</prototype>
    <input>
      <param type="objAudio *" name="Audio">The target Audio object.</param>
      <param type="INT" name="Handle">The target channel.</param>
    </input>
    <description>
<p>Use this function to end a buffered command sequence that was started by <function>MixStartSequence</function>.</p>
    </description>
    <result type="ERR">
      <error code="Okay">Operation successful.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>MixFrequency</name>
    <comment>Sets a channel's playback rate.</comment>
    <prototype>ERR snd::MixFrequency(objAudio * Audio, INT Handle, INT Frequency)</prototype>
    <input>
      <param type="objAudio *" name="Audio">The target Audio object.</param>
      <param type="INT" name="Handle">The target channel.</param>
      <param type="INT" name="Frequency">The desired frequency.</param>
    </input>
    <description>
<p>Use this function to set the playback rate of a mixer channel.</p>
    </description>
    <result type="ERR">
      <error code="Okay">Operation successful.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>MixMute</name>
    <comment>Mutes the audio of a channel.</comment>
    <prototype>ERR snd::MixMute(objAudio * Audio, INT Handle, INT Mute)</prototype>
    <input>
      <param type="objAudio *" name="Audio">The target Audio object.</param>
      <param type="INT" name="Handle">The target channel.</param>
      <param type="INT" name="Mute">Set to true to mute the channel.  A value of 0 will undo the mute setting.</param>
    </input>
    <description>
<p>Use this function to mute the audio of a mixer channel.</p>
    </description>
    <result type="ERR">
      <error code="Okay">Operation successful.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>MixPan</name>
    <comment>Sets a channel's panning value.</comment>
    <prototype>ERR snd::MixPan(objAudio * Audio, INT Handle, DOUBLE Pan)</prototype>
    <input>
      <param type="objAudio *" name="Audio">The target Audio object.</param>
      <param type="INT" name="Handle">The target channel.</param>
      <param type="DOUBLE" name="Pan">The desired pan value between -1.0 and 1.0.</param>
    </input>
    <description>
<p>Use this function to set a mixer channel's panning value.  Accepted values are between -1.0 (left) and 1.0 (right).</p>
    </description>
    <result type="ERR">
      <error code="Okay">Operation successful.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>MixPlay</name>
    <comment>Commences channel playback at a set frequency.</comment>
    <prototype>ERR snd::MixPlay(objAudio * Audio, INT Handle, INT Position)</prototype>
    <input>
      <param type="objAudio *" name="Audio">The target Audio object.</param>
      <param type="INT" name="Handle">The target channel.</param>
      <param type="INT" name="Position">The new playing position, measured in bytes.</param>
    </input>
    <description>
<p>This function will start playback of the sound sample associated with the target mixer channel.  If the channel is already in playback mode, it will be stopped to facilitate the new playback request.</p>
    </description>
    <result type="ERR">
      <error code="Okay">Playback successfully initiated.</error>
      <error code="Failed">Channel not associated with a valid sample.</error>
      <error code="OutOfRange">Position exceeds sample boundaries.</error>
      <error code="NullArgs">Required parameters are null or missing.</error>
    </result>
  </function>

  <function>
    <name>MixRate</name>
    <comment>Sets a new update rate for a channel.</comment>
    <prototype>ERR snd::MixRate(objAudio * Audio, INT Handle, INT Rate)</prototype>
    <input>
      <param type="objAudio *" name="Audio">The target Audio object.</param>
      <param type="INT" name="Handle">The channel set allocated from OpenChannels().</param>
      <param type="INT" name="Rate">The new update rate in milliseconds.</param>
    </input>
    <description>
<p>This function will set a new update rate for all channels, measured in milliseconds.  The default update rate is 125, which is equivalent to 5000Hz.</p>
    </description>
    <result type="ERR">
      <error code="Okay">Operation successful.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>MixSample</name>
    <comment>Associate a sound sample with a mixer channel.</comment>
    <prototype>ERR snd::MixSample(objAudio * Audio, INT Handle, INT Sample)</prototype>
    <input>
      <param type="objAudio *" name="Audio">The target Audio object.</param>
      <param type="INT" name="Handle">The target channel.</param>
      <param type="INT" name="Sample">A sample handle allocated from <class name="Audio" method="AddSample">Audio.AddSample()</class> or <class name="Audio" method="AddStream">Audio.AddStream()</class>.</param>
    </input>
    <description>
<p>This function will associate a sound sample with the channel identified by Handle.  The client should follow this by setting configuration details (e.g. volume and pan values).</p>
<p>The referenced Sample must have been added to the audio server via the <class name="Audio" method="AddSample">Audio.AddSample()</class> or <class name="Audio" method="AddStream">Audio.AddStream()</class> methods.</p>
    </description>
    <result type="ERR">
      <error code="Okay">Operation successful.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>MixStartSequence</name>
    <comment>Initiates buffering of mix commands.</comment>
    <prototype>ERR snd::MixStartSequence(objAudio * Audio, INT Handle)</prototype>
    <input>
      <param type="objAudio *" name="Audio">The target Audio object.</param>
      <param type="INT" name="Handle">The target channel.</param>
    </input>
    <description>
<p>Use this function to initiate the buffering of mix commands, up until a call to <function>MixEndSequence</function> is made.  The buffering of mix commands makes it possible to create batches of commands that are executed at timed intervals as determined by <function>MixRate</function>.</p>
<header>Command Buffering Architecture</header>
<p>When command buffering is activated, the mixer transitions to a batch processing mode with several key characteristics:</p>
<list type="bullet">
<li>
<b>Deferred Execution:</b> All mixer operations (<function>MixPlay</function>, <function>MixVolume</function>, <function>MixPan</function>, <function>MixFrequency</function>, etc.) are queued rather than executed immediately</li>
<li>
<b>Atomic Batch Processing:</b> Queued commands are processed synchronously during the next mixer update cycle, ensuring sample-accurate timing coordination</li>
<li>
<b>Thread-Safe Queueing:</b> Commands can be safely queued from multiple threads without explicit synchronisation requirements</li>
<li>
<b>Overflow Protection:</b> Command buffers include overflow detection to prevent memory exhaustion during extended buffering periods</li>
</list>
<p>This feature can be used to implement complex sound mixes and digital music players.</p>
<header>Advanced Usage Patterns</header>
<list type="ordered">
<li>
<b>Sequence Initiation:</b> Call MixStartSequence() to begin command buffering for the target channel or channel set</li>
<li>
<b>Command Queuing:</b> Issue multiple mixer commands (volume, pan, play, frequency adjustments, etc.) which are automatically queued</li>
<li>
<b>Sequence Completion:</b> Call <function>MixEndSequence</function> to mark the end of the command batch and schedule execution</li>
<li>
<b>Automatic Execution:</b> Commands execute atomically at the next mixer update interval determined by <function>MixRate</function></li>
</list>
    </description>
    <result type="ERR">
      <error code="Okay">Command buffering successfully initiated.</error>
      <error code="NullArgs">Required parameters are null or missing.</error>
    </result>
  </function>

  <function>
    <name>MixStop</name>
    <comment>Stops all playback on a channel.</comment>
    <prototype>ERR snd::MixStop(objAudio * Audio, INT Handle)</prototype>
    <input>
      <param type="objAudio *" name="Audio">The target Audio object.</param>
      <param type="INT" name="Handle">The target channel.</param>
    </input>
    <description>
<p>This function will stop a channel that is currently playing.</p>
    </description>
    <result type="ERR">
      <error code="Okay">Operation successful.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>MixStopLoop</name>
    <comment>Cancels any playback loop configured for a channel.</comment>
    <prototype>ERR snd::MixStopLoop(objAudio * Audio, INT Handle)</prototype>
    <input>
      <param type="objAudio *" name="Audio">The target Audio object.</param>
      <param type="INT" name="Handle">The target channel.</param>
    </input>
    <description>
<p>This function will cancel the loop that is associated with the channel identified by Handle if in playback mode. The existing loop configuration will remain intact if playback is restarted.</p>
    </description>
    <result type="ERR">
      <error code="Okay">Operation successful.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>MixVolume</name>
    <comment>Changes the volume of a channel.</comment>
    <prototype>ERR snd::MixVolume(objAudio * Audio, INT Handle, DOUBLE Volume)</prototype>
    <input>
      <param type="objAudio *" name="Audio">The target Audio object.</param>
      <param type="INT" name="Handle">The target channel.</param>
      <param type="DOUBLE" name="Volume">The new volume for the channel.</param>
    </input>
    <description>
<p>This function will change the volume of the mixer channel identified by Handle.  Valid values are from 0 (silent) to 1.0 (maximum).</p>
    </description>
    <result type="ERR">
      <error code="Okay">Operation successful.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <types>
    <constants lookup="ADF" comment="Optional flags for the Audio object.">
      <const name="AUTO_SAVE">Save configuration information on exit.</const>
      <const name="FILTER_HIGH">Enable a high level of output filtering to minimise distortion.</const>
      <const name="FILTER_LOW">Enable a low level of output filtering to minimise distortion.</const>
      <const name="OVER_SAMPLING">Enables oversampling for higher quality audio at the cost of slower mixing.</const>
      <const name="STEREO">Enable stereo output (set by default if the platform supports stereo).  If not set, output is in mono.</const>
      <const name="SYSTEM_WIDE">Mixer changes should be applied system-wide.</const>
      <const name="VOL_RAMPING">Enable volume ramping for softer playback when a sample is played multiple times (enabled by default).</const>
    </constants>

    <constants lookup="CHF" comment="Optional flags for the AudioChannel structure.">
      <const name="BACKWARD">Play channel backwards.</const>
      <const name="CHANGED">Sample change</const>
      <const name="MUTE">Channel is muted.</const>
      <const name="VOL_RAMP">Volume ramping is enabled.</const>
    </constants>

    <constants lookup="CHS" comment="Channel status types for the AudioChannel structure.">
      <const name="FADE_OUT">Playback is fading out.</const>
      <const name="FINISHED">Playback concluded by reaching the sample end.</const>
      <const name="PLAYING">Sample playing and not released.</const>
      <const name="RELEASED">Sample playing and note has been released.</const>
      <const name="STOPPED">Playing was stopped by the client.</const>
    </constants>

    <constants lookup="LOOP" comment="Loop modes for the AudioLoop structure.">
      <const name="AMIGA">Single loop: Amiga style.</const>
      <const name="AMIGA_NONE">Amiga loop: Do nothing.</const>
      <const name="DOUBLE">Double loop: When the note is released, playing shifts to the second loop.</const>
      <const name="SINGLE">Single loop: Releasing will end the note.</const>
      <const name="SINGLE_RELEASE">Single loop: Sample data after the loop will be played when the note is released.</const>
    </constants>

    <constants lookup="LTYPE" comment="Loop types for the AudioLoop structure.">
      <const name="BIDIRECTIONAL">The sample will play in reverse whenever it hits the end marker, then forwards when it hits the start marker.</const>
      <const name="UNIDIRECTIONAL">The sample playback position returns to the byte position specified in the Loop1Start field.</const>
    </constants>

    <constants lookup="NOTE" comment="Definitions for the Note field.  An 'S' indicates a sharp note.">
      <const name="A"/>
      <const name="AS"/>
      <const name="B"/>
      <const name="C"/>
      <const name="CS"/>
      <const name="D"/>
      <const name="DS"/>
      <const name="E"/>
      <const name="F"/>
      <const name="FS"/>
      <const name="G"/>
      <const name="GS"/>
      <const name="OCTAVE"/>
    </constants>

    <constants lookup="SDF" comment="Sound flags">
      <const name="LOOP">Enables sample looping. The <fl>LoopStart</fl> and <fl>LoopEnd</fl> fields determine where the looping area lies within the sample data.</const>
      <const name="NEW">Create the sample from scratch (e.g. for audio recording purposes).</const>
      <const name="RESTRICT_PLAY">Restricts playback so that the sound can never play on more than one channel at any given time.</const>
      <const name="STEREO">Indicates that the sound has multiple audio channels.</const>
      <const name="STREAM">Read-Only. Indicates that streaming is enabled.</const>
    </constants>

    <constants lookup="SFM" comment="These audio bit formats are supported by AddSample and AddStream.">
      <const name="F_BIG_ENDIAN">Combine this flag with any audio format to declare it as big endian.</const>
      <const name="S16_BIT_MONO">16-bit mono signed sample.</const>
      <const name="S16_BIT_STEREO">16-bit stereo signed sample.</const>
      <const name="U8_BIT_MONO">8-bit mono unsigned sample.</const>
      <const name="U8_BIT_STEREO">8-bit stereo unsigned sample.</const>
    </constants>

    <constants lookup="STREAM" comment="Streaming options">
      <const name="ALWAYS">Stream if the sample length exceeds 64k.</const>
      <const name="NEVER">No streaming - load all data into memory.</const>
      <const name="SMART">Smart streaming is the default.  If the sample appears to be relatively small with respect to available system RAM, it will be loaded into memory.  Otherwise it will be streamed.</const>
    </constants>

    <constants lookup="SVF" comment="Flags for the SetVolume() method.">
      <const name="CAPTURE">Set input, not output.</const>
      <const name="MUTE">Mute the audio for this channel.</const>
      <const name="UNMUTE">Unmute the audio for this channel.</const>
    </constants>

    <constants lookup="VCF" comment="Volume control flags">
      <const name="CAPTURE">The mixer supports audio input.</const>
      <const name="JOINED">The mixer channels are joined (e.g. left and right speakers cannot be adjusted separately).</const>
      <const name="MONO">The mixer is restricted to mono input/output.</const>
      <const name="MUTE">The mixer is muted.</const>
      <const name="PLAYBACK">The mixer supports audio output.</const>
      <const name="SYNC">The mixer is synchronised.</const>
    </constants>

  </types>
  <structs>
    <struct name="AudioLoop" comment="Loop settings for the AddSample() method.">
      <field name="LoopMode" type="LOOP" lookup="LOOP">Loop mode (single, double)</field>
      <field name="Loop1Type" type="LTYPE" lookup="LTYPE">First loop type (unidirectional, bidirectional)</field>
      <field name="Loop2Type" type="LTYPE" lookup="LTYPE">Second loop type (unidirectional, bidirectional)</field>
      <field name="Loop1Start" type="INT">Start of the first loop</field>
      <field name="Loop1End" type="INT">End of the first loop</field>
      <field name="Loop2Start" type="INT">Start of the second loop</field>
      <field name="Loop2End" type="INT">End of the second loop</field>
    </struct>

  </structs>
</book>
