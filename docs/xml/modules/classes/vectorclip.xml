<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>VectorClip</name>
    <type>class</type>
    <module>Vector</module>
    <comment>Clips are used to define complex clipping regions for vectors.</comment>
    <version>1</version>
    <id>51b1de80</id>
    <idstring>ID_VECTORCLIP</idstring>
    <category>Graphics</category>
    <include>modules/vectorclip.h</include>
    <copyright>Paul Manias Â© 2010-2024</copyright>
    <description>
<p>The VectorClip defines a clipping path that can be used by other vectors as a mask.  The clipping path is defined by creating Vector shapes that are initialised to the VectorClip's <field>Viewport</field> as child objects.</p>
<p>Vector shapes can utilise a VectorClip by referring to it via the Vector's <class name="Vector" index="Mask">Vector:Mask</class> field.</p>
<p>VectorClip objects must be owned by a <class name="VectorScene">VectorScene</class>.  It is valid for a VectorClip to be shared by multiple vector objects within the same scene.  If optimum drawing efficiency is required, we recommend that each VectorClip is referenced by one vector only.  This will reduce the frequency of path recomputation and redrawing of the clipping path.</p>
<p>The SVG standard makes a distinction between clipping paths and masks.  Consequently, this distinction also exists in the VectorClip design, and by default VectorClip objects will operate in path clipping mode.  This means that the clipping path is constructed as a solid filled area, and stroke instructions are completely ignored.  To create more complex masks, such as one with a filled gradient, use the <code>VCLF::APPLY_FILLS</code> option in <field>Flags</field>.  If stroking operations are required, define <code>VCLF::APPLY_STROKES</code>.</p>
<p>Finally, for the purposes of UI development it may often be beneficial to set <field>Units</field> to <code>VUNIT::BOUNDING_BOX</code> so that the clipping path is resized to match the target vector.  This enables a default viewbox size of <code>0 0 1 1</code>, but if a 1:1 match to the target vector is preferred then set the <field>Viewport</field> <class name="VectorViewport" index="ViewWidth">VectorViewport:ViewWidth</class> and <class name="VectorViewport" index="ViewHeight">VectorViewport:ViewHeight</class> to match the target vector's dimensions.</p></description>
    <source>
      <file path="vectors/">clip.cpp</file>
    </source>
  </info>

  <fields>
    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="G" write="S">Get/Set</access>
      <type lookup="VCLF">VCLF</type>
      <description>
<types lookup="VCLF"/>
      </description>
    </field>

    <field>
      <name>Units</name>
      <comment>Defines the coordinate system for fields X, Y, Width and Height.</comment>
      <access read="G" write="S">Get/Set</access>
      <type lookup="VUNIT">VUNIT</type>
      <description>
<p>The default coordinate system for clip-paths is <code>BOUNDING_BOX</code>, which positions the clipping region relative to the vector that references it.  The alternative is <code>USERSPACE</code>, which positions the path relative to the vector's parent viewport.</p>
<types lookup="VUNIT"/>
      </description>
    </field>

    <field>
      <name>Viewport</name>
      <comment>This viewport hosts the Vector objects that will contribute to the clip path.</comment>
      <access read="G">Get</access>
      <type class="VectorViewport">*VectorViewport</type>
      <description>
<p>To define the path(s) that will be used to build the clipping mask, add at least one <class name="Vector">Vector</class> object to the viewport declared here.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="VCLF" comment="Options for VectorClip.">
      <const name="APPLY_FILLS">Apply fill instructions when drawing the clipping path(s).</const>
      <const name="APPLY_STROKES">Apply stroke instructions when drawing the clipping path(s).</const>
    </constants>

    <constants lookup="VUNIT">
      <const name="BOUNDING_BOX">Coordinates are scaled to the object's bounding box.</const>
      <const name="UNDEFINED"/>
      <const name="USERSPACE">Coordinates are scaled to the current viewport.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
