<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Display</name>
    <type>class</type>
    <module>Display</module>
    <comment>Manages the video display and graphics hardware.</comment>
    <version>1</version>
    <id>12cd479b</id>
    <idstring>DISPLAY</idstring>
    <category>Graphics</category>
    <copyright>Paul Manias 2003-2025</copyright>
    <description>
<p>A Display object represents a region of displayable video memory and metadata that defines the display mode. The Display is a primitive, hardware oriented interface.  It is recommended that unless otherwise required, the <class name="Surface">Surface</class> class is used to create displayable graphics regions.</p></description>
    <source>
      <file>class_display.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Activating a display has the same effect as calling the Show action.</comment>
      <prototype>ERR acActivate(*Object)</prototype>
    </action>

    <action>
      <name>Clear</name>
      <comment>Clears a display's image data and hardware buffers (e.g. OpenGL)</comment>
      <prototype>ERR acClear(*Object)</prototype>
    </action>

    <action>
      <name>Disable</name>
      <comment>Disables the display (goes into power saving mode).</comment>
      <prototype>ERR acDisable(*Object)</prototype>
      <description>
<p>Disabling a display will put the display into power saving mode.  The DPMS mode is determined by the user's system settings and cannot be changed by the developer.  The display will remain off until the Enable action is called.</p>
<p>This action does nothing if the display is in hosted mode.</p>
      </description>
      <result>
        <error code="Okay">The display was disabled.</error>
        <error code="NoSupport">The display driver does not support DPMS.</error>
      </result>
    </action>

    <action>
      <name>Draw</name>
      <comment>Draws object graphics to drawable areas.</comment>
      <prototype>ERR acDraw(*Object, DOUBLE X, DOUBLE Y, DOUBLE Width, DOUBLE Height)</prototype>
      <input>
        <param type="INT" name="X">The X position of the region to be drawn.</param>
        <param type="INT" name="Y">The Y position of the region to be drawn.</param>
        <param type="INT" name="Width">The width of the region to be drawn.</param>
        <param type="INT" name="Height">The height of the region to be drawn.</param>
      </input>
    </action>

    <action>
      <name>Enable</name>
      <comment>Restores the screen display from power saving mode.</comment>
      <prototype>ERR acEnable(*Object)</prototype>
    </action>

    <action>
      <name>Flush</name>
      <comment>Flush pending graphics operations to the display.</comment>
      <prototype>ERR acFlush(*Object)</prototype>
    </action>

    <action>
      <name>Focus</name>
      <comment>Focus on this object in the user interface.</comment>
      <prototype>ERR acFocus(*Object)</prototype>
    </action>

    <action>
      <name>GetKey</name>
      <comment>Retrieve formatted information from the display.</comment>
      <prototype>ERR acGetKey(*Object, CSTRING Key, STRING Value, INT Size)</prototype>
      <input>
        <param type="CSTRING" name="Key">The name of a key value.</param>
        <param type="STRING" name="Value">Pointer to a buffer space large enough to hold the retrieved value.</param>
        <param type="INT" name="Size">Indicates the byte size of the Buffer.</param>
      </input>
    </action>

    <action>
      <name>Hide</name>
      <comment>Hides a display from the user's view.</comment>
      <prototype>ERR acHide(*Object)</prototype>
      <description>
<p>Calling this action will hide a display from the user's view.  If the hidden display was at the front of the display and there is a display object behind it, then the next underlying display will be displayed.  If there are no other displays available then the user's viewport will be blank after calling this action.</p>
      </description>
    </action>

    <action>
      <name>Move</name>
      <comment>Move the display to a new display position (relative coordinates).</comment>
      <prototype>ERR acMove(*Object, DOUBLE DeltaX, DOUBLE DeltaY, DOUBLE DeltaZ)</prototype>
      <input>
        <param type="DOUBLE" name="DeltaX">The number of units to move along the X axis.</param>
        <param type="DOUBLE" name="DeltaY">The number of units to move along the Y axis.</param>
        <param type="DOUBLE" name="DeltaZ">The number of units to move along the Z axis.</param>
      </input>
    </action>

    <action>
      <name>MoveToBack</name>
      <comment>Move the display to the back of the display list.</comment>
      <prototype>ERR acMoveToBack(*Object)</prototype>
    </action>

    <action>
      <name>MoveToFront</name>
      <comment>Move the display to the front of the display list.</comment>
      <prototype>ERR acMoveToFront(*Object)</prototype>
    </action>

    <action>
      <name>MoveToPoint</name>
      <comment>Move the display to a new position.</comment>
      <prototype>ERR acMoveToPoint(*Object, DOUBLE X, DOUBLE Y, DOUBLE Z, MTF Flags)</prototype>
      <input>
        <param type="DOUBLE" name="X">The new X position to move the object to.</param>
        <param type="DOUBLE" name="Y">The new Y position to move the object to.</param>
        <param type="DOUBLE" name="Z">The new Z position to move the object to.</param>
        <param type="MTF" name="Flags" lookup="MTF">Set the relevant MTF flag for each provided parameter.</param>
      </input>
      <description>
<p>The MoveToPoint action moves the display to a new position.</p>
<p>In a hosted environment, the supplied coordinates are treated as being indicative of the absolute position of the host window (not the client area).</p>
<p>For full-screen displays, MoveToPoint can alter the screen position for the hardware device managing the display output.  This is a rare feature that requires hardware support.  <code>ERR::NoSupport</code> is returned if this feature is unavailable.</p>
      </description>
    </action>

    <action>
      <name>Redimension</name>
      <comment>Moves and resizes a display object in a single action call.</comment>
      <prototype>ERR acRedimension(*Object, DOUBLE X, DOUBLE Y, DOUBLE Z, DOUBLE Width, DOUBLE Height, DOUBLE Depth)</prototype>
      <input>
        <param type="DOUBLE" name="X">The new X position to apply to the target object.</param>
        <param type="DOUBLE" name="Y">The new Y position to apply to the target object.</param>
        <param type="DOUBLE" name="Z">The new Z position to apply to the target object.</param>
        <param type="DOUBLE" name="Width">The new width of the target object.</param>
        <param type="DOUBLE" name="Height">The new height of the target object.</param>
        <param type="DOUBLE" name="Depth">The new depth of the target object.</param>
      </input>
    </action>

    <action>
      <name>Resize</name>
      <comment>Resizes the dimensions of a display object.</comment>
      <prototype>ERR acResize(*Object, DOUBLE Width, DOUBLE Height, DOUBLE Depth)</prototype>
      <input>
        <param type="DOUBLE" name="Width">The new width of the object.</param>
        <param type="DOUBLE" name="Height">The new height of the object.</param>
        <param type="DOUBLE" name="Depth">The new depth of the object.</param>
      </input>
      <description>
<p>If the display is hosted, the Width and Height values will determine the size of the inside area of the window.</p>
      </description>
    </action>

    <action>
      <name>SaveImage</name>
      <comment>Saves the image of a display to a data object.</comment>
      <prototype>ERR acSaveImage(*Object, OBJECTID Dest, CLASSID ClassID)</prototype>
      <input>
        <param type="OBJECTID" name="Dest">Refers to an object that will receive the encoded image data.</param>
        <param type="CLASSID" name="ClassID">The Picture class to use for encoding the image data.</param>
      </input>
    </action>

    <action>
      <name>SaveSettings</name>
      <comment>Saves the current display settings as the default.</comment>
      <prototype>ERR acSaveSettings(*Object)</prototype>
    </action>

    <action>
      <name>Show</name>
      <comment>Presents a display object to the user.</comment>
      <prototype>ERR acShow(*Object)</prototype>
      <description>
<p>This method presents a display object to the user.  On a hosted platform, this will result in a window appearing on screen.  By default the window will be hosted within a window border which may contain regular window gadgets such as a titlebar and buttons for close, maximise and minimise operations.  The position of the window is determined by the <fl>X</fl> and <fl>Y</fl> fields.  In Parasol's native environment, the user's screen display will be altered to match the required resolution and the graphics of the display's <fl>Bitmap</fl> object will take up the entirety of the screen.</p>
<p>If the <code>BORDERLESS</code> flag has been set in the <fl>Flags</fl> field, the window will appear without the surrounding border and gadgets normally associated with new windows.</p>
<p>In Microsoft Windows, the <fl>LeftMargin</fl>, <fl>RightMargin</fl>, <fl>TopMargin</fl> and <fl>BottomMargin</fl> fields will be updated to reflect the position of the client area within the hosted window.  In X11 these field values are all set to zero.</p>
<p>If the window is minimised at the time this action is called, the window will be restored to its original position if the code for the host platform supports this capability.</p>
<p>The <code>VISIBLE</code> flag in the <fl>Flags</fl> field will be set if the Show operation is successful.</p>
      </description>
    </action>

  </actions>

  <methods>
    <method>
      <name>Minimise</name>
      <comment>Minimise the desktop window hosting the display.</comment>
      <prototype>ERR gfx::Minimise(OBJECTPTR Object)</prototype>
      <description>
<p>If a display is hosted in a desktop window, calling the Minimise method will perform the default minimise action on that window.  On a platform such as Microsoft Windows, this would normally result in the window being minimised to the task bar.</p>
<p>Calling Minimise on a display that is already in the minimised state may result in the host window being restored to the desktop.  This behaviour is platform dependent and should be manually tested to confirm its reliability on the host platform.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>SetDisplay</name>
      <comment>Changes the current display mode.</comment>
      <prototype>ERR gfx::SetDisplay(OBJECTPTR Object, INT X, INT Y, INT Width, INT Height, INT InsideWidth, INT InsideHeight, INT BitsPerPixel, DOUBLE RefreshRate, INT Flags)</prototype>
      <input>
        <param type="INT" name="X">Horizontal offset of the display, relative to its default position.</param>
        <param type="INT" name="Y">Vertical offset of the display, relative to its default position.</param>
        <param type="INT" name="Width">Width of the display.</param>
        <param type="INT" name="Height">Height of the display.</param>
        <param type="INT" name="InsideWidth">Internal display width (must be equal to or greater than the display width).</param>
        <param type="INT" name="InsideHeight">Internal display height (must be equal to or greater than the display height).</param>
        <param type="INT" name="BitsPerPixel">The desired display depth (15, 16, 24 or 32).</param>
        <param type="DOUBLE" name="RefreshRate">Refresh rate, measured in floating point format for precision.</param>
        <param type="INT" name="Flags">Optional flags.</param>
      </input>
      <description>
<p>The SetDisplay method changes the current display settings for the screen. It can alter the position and screen dimensions and the display refresh rate. The new settings are applied immediately, although minor delays are possible while the graphics card and monitor adjust to the changes.</p>
<p>To keep any of the display settings at their current value, set the appropriate parameters to zero to leave them unchanged.  Only the parameters that you set will be used.</p>
<p>If the display parameters do not match with a valid display mode - for instance if you request a screen size of 1280x1024 and the nearest equivalent is 1024x768, the SetDisplay method will automatically adjust to match against the nearest screen size.</p>
<p>Only the original owner of the display object is allowed to change the display settings.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Failed">Failed to switch to the requested display mode.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>SetGamma</name>
      <comment>Sets the display gamma levels.</comment>
      <prototype>ERR gfx::SetGamma(OBJECTPTR Object, DOUBLE Red, DOUBLE Green, DOUBLE Blue, GMF Flags)</prototype>
      <input>
        <param type="DOUBLE" name="Red">Gamma correction for the red gun.</param>
        <param type="DOUBLE" name="Green">Gamma correction for the green gun.</param>
        <param type="DOUBLE" name="Blue">Gamma correction for the blue gun.</param>
        <param type="GMF" name="Flags" lookup="GMF">Optional flags.</param>
      </input>
      <description>
<p>The SetGamma method controls the gamma correction levels for the display.  Gamma levels for the red, green and blue colour components can be set at floating point precision.  The default gamma level for each component is 1.0; the minimum value is 0.0 and the maximum value is 100.</p>
<p>Optional flags include <code>GMF::SAVE</code>.  This option will save the requested settings as the user default when future displays are opened.</p>
<p>If you would like to know the default gamma correction settings for a display, please refer to the <fl>Gamma</fl> field.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="NoSupport">The graphics hardware does not support gamma correction.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>SetGammaLinear</name>
      <comment>Sets the display gamma level using a linear algorithm.</comment>
      <prototype>ERR gfx::SetGammaLinear(OBJECTPTR Object, DOUBLE Red, DOUBLE Green, DOUBLE Blue, GMF Flags)</prototype>
      <input>
        <param type="DOUBLE" name="Red">New red gamma value.</param>
        <param type="DOUBLE" name="Green">New green gamma value.</param>
        <param type="DOUBLE" name="Blue">New blue gamma value.</param>
        <param type="GMF" name="Flags" lookup="GMF">Use <code>SAVE</code> to store the new settings.</param>
      </input>
      <description>
<p>Call SetGammaLinear() to update a target display's gamma values with a linear algorithm that takes input from <code>Red</code>, <code>Green</code> and <code>Blue</code> parameters provided by the client.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>SetMonitor</name>
      <comment>Changes the default monitor settings.</comment>
      <prototype>ERR gfx::SetMonitor(OBJECTPTR Object, CSTRING Name, INT MinH, INT MaxH, INT MinV, INT MaxV, MON Flags)</prototype>
      <input>
        <param type="CSTRING" name="Name">The name of the display.</param>
        <param type="INT" name="MinH">The minimum horizontal scan rate.  Usually set to 31.</param>
        <param type="INT" name="MaxH">The maximum horizontal scan rate.</param>
        <param type="INT" name="MinV">The minimum vertical scan rate.  Usually set to 50.</param>
        <param type="INT" name="MaxV">The maximum vertical scan rate.</param>
        <param type="MON" name="Flags" lookup="MON">Set to <code>AUTO_DETECT</code> if the monitor settings should be auto-detected on startup.  Set <code>BIT_6</code> if the device is limited to 6-bit colour output.</param>
      </input>
      <description>
<p>Use the SetMonitor() method to change the settings that configure the user's monitor display.  You can set the model name of the monitor and the frequencies that are supported by it.  Altering the display frequencies will affect the available display resolutions, as well as the maximum allowable refresh rate.</p>
<p>An AutoDetect option is available, which if defined will cause the display settings to be automatically detected when the desktop is loaded at startup. If it is not possible to detect the correct settings for the plugged-in display, it reverts to the default display settings.</p>
<p>This method does not work on hosted platforms.  All parameters passed to this method are optional (set a value to zero if it should not be changed).</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>SizeHints</name>
      <comment>Sets the width and height restrictions for the host window (hosted environments only).</comment>
      <prototype>ERR gfx::SizeHints(OBJECTPTR Object, INT MinWidth, INT MinHeight, INT MaxWidth, INT MaxHeight, INT EnforceAspect)</prototype>
      <input>
        <param type="INT" name="MinWidth">The minimum width of the window.</param>
        <param type="INT" name="MinHeight">The minimum height of the window.</param>
        <param type="INT" name="MaxWidth">The maximum width of the window.</param>
        <param type="INT" name="MaxHeight">The maximum width of the window.</param>
        <param type="INT" name="EnforceAspect">Set to true to enforce an aspect ratio that is scaled from MinWidth,MinHeight to MaxWidth,MaxHeight.</param>
      </input>
      <description>
<p>If a display is hosted in a desktop window, it may be possible to enforce size restrictions that prevent the window from being shrunk or expanded beyond a certain size.  This feature is platform dependent and <code>ERR::NoSupport</code> will be returned if it is not implemented.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="NoSupport">The host platform does not support this feature.</error>
      </result>
    </method>

    <method>
      <name>UpdatePalette</name>
      <comment>Updates the video display palette to new colour values if in 256 colour mode.</comment>
      <prototype>ERR gfx::UpdatePalette(OBJECTPTR Object, struct RGBPalette * NewPalette)</prototype>
      <input>
        <param type="struct RGBPalette *" name="NewPalette">The new palette to apply to the display bitmap.</param>
      </input>
      <description>
<p>Call UpdatePalette() to copy a new palette to the display bitmap's internal palette.  If the video display is running in 256 colour mode, the new palette colours will also be reflected in the display.</p>
<p>This method has no visible effect on RGB pixel displays.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>WaitVBL</name>
      <comment>Waits for a vertical blank.</comment>
      <prototype>ERR gfx::WaitVBL(OBJECTPTR Object)</prototype>
      <description>
<p>This method waits for the strobe to reach the vertical blank area at the bottom of the display.  Not all graphics hardware will support this method.  If this is the case, WaitVBL() will return immediately with <code>ERR::NoSupport</code>.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="NoSupport">Operation not supported.</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>Bitmap</name>
      <comment>Reference to the display's bitmap information.</comment>
      <access read="R">Read</access>
      <type class="Bitmap">*Bitmap</type>
      <description>
<p>The <class name="Bitmap">Bitmap</class> object describes the video region that will be used for displaying graphics. It holds details on the width, height, type, number of colours and so on.  The display class inherits the bitmap's attributes, so it is not necessary to retrieve a direct reference to the bitmap object in order to make adjustments.</p>
<p>The <class name="Bitmap" field="Width">Bitmap.Width</class> and <class name="Bitmap" field="Height">Bitmap.Height</class> can be larger than the display area, but never smaller.</p>
      </description>
    </field>

    <field>
      <name>BmpX</name>
      <comment>The horizontal coordinate of the bitmap within a display.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>This field defines the horizontal offset for the <fl>Bitmap</fl>, which is positioned 'behind' the display. To achieve hardware scrolling, call the <action>Move</action> action on the Bitmap in order to change this value and update the display.</p>
      </description>
    </field>

    <field>
      <name>BmpY</name>
      <comment>The vertical coordinate of the Bitmap within a display.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>This field defines the vertical offset for the <fl>Bitmap</fl>, which is positioned 'behind' the display.  To achieve hardware scrolling, you will need to call the Move() action on the <fl>Bitmap</fl> in order to change this value and update the display.</p>
      </description>
    </field>

    <field>
      <name>BottomMargin</name>
      <comment>In hosted mode, indicates the bottom margin of the client window.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>If the display is hosted in a client window, the BottomMargin indicates the number of pixels between the client area and the bottom window edge.</p>
      </description>
    </field>

    <field>
      <name>Chipset</name>
      <comment>String describing the graphics chipset.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
      <description>
<p>This string describes the graphic card's chipset, if known.</p>
      </description>
    </field>

    <field>
      <name>Display</name>
      <comment>String describing the display (e.g. model name of the monitor).</comment>
      <access read="G">Get</access>
      <type>STRING</type>
      <description>
<p>This string describes the display device that is connected to the user's graphics card.</p>
      </description>
    </field>

    <field>
      <name>DisplayManufacturer</name>
      <comment>String describing the display manufacturer.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
      <description>
<p>This string names the manufacturer of the user's display device.</p>
      </description>
    </field>

    <field>
      <name>DisplayType</name>
      <comment>In hosted mode, indicates the bottom margin of the client window.</comment>
      <access read="R">Read</access>
      <type lookup="DT">DT</type>
      <description>
<p>If the display is hosted in a client window, the <fl>BottomMargin</fl> indicates the number of pixels between the client area and the bottom window edge.</p>
<types lookup="DT"/>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flag settings.</comment>
      <access read="R" write="S">Read/Set</access>
      <type lookup="SCR">SCR</type>
      <description>
<p>Optional display flags can be defined here.  Post-initialisation, the only flags that can be set are <code>AUTO_SAVE</code> and <code>BORDERLESS</code>.</p>
<types lookup="SCR"/>
      </description>
    </field>

    <field>
      <name>Gamma</name>
      <comment>Contains red, green and blue values for the display's gamma setting.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE []</type>
      <description>
<p>The gamma settings for the display are stored in this field.  The settings are stored in an array of 3 floating point values that represent red, green and blue colours guns.  The default gamma value for each colour gun is 1.0.</p>
<p>To modify the display gamma values, please refer to the <method>SetGamma</method> and <method>SetGammaLinear</method> methods.</p>
      </description>
    </field>

    <field>
      <name>HDensity</name>
      <comment>Returns the horizontal pixel density for the display.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Reading the HDensity field will return the horizontal pixel density for the display (pixels per inch).  If the physical size of the display is unknown, a default value based on knowledge of the platform will be retuned.  For standard PC's this will usually be 96.</p>
<p>A custom density value can be enforced by setting the <code>/interface/@dpi</code> value in the loaded style, or by setting HDensity.</p>
<p>Reading this field always succeeds.</p>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>Defines the height of the display.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>This field defines the height of a display.  This is known as the 'viewport' that the bitmap data is displayed through. If the height exceeds allowable limits, it will be restricted to a value that the display hardware can handle.</p>
<p>If the display is hosted, the height reflects the internal height of the host window.  On some hosted systems, the true height of the window can be calculated by reading the <fl>TopMargin</fl> and <fl>BottomMargin</fl> fields.</p>
      </description>
    </field>

    <field>
      <name>InsideHeight</name>
      <comment>Represents the internal height of the display.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>On full-screen displays, the video data area can exceed the height of the screen display.  The InsideHeight reflects the height of the video data in pixels.  If this feature is not in use or is unavailable, the InsideWidth is equal to the display <fl>Height</fl>.</p>
      </description>
    </field>

    <field>
      <name>InsideWidth</name>
      <comment>Represents the internal width of the display.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>On full-screen displays, the video data area can exceed the width of the screen display.  The InsideWidth reflects the width of the video data in pixels.  If this feature is not in use or is unavailable, the InsideWidth is equal to the display <fl>Width</fl>.</p>
      </description>
    </field>

    <field>
      <name>LeftMargin</name>
      <comment>In hosted mode, indicates the left-hand margin of the client window.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>If the display is hosted in a client window, the LeftMargin indicates the number of pixels between the client area and the left window edge.</p>
      </description>
    </field>

    <field>
      <name>Manufacturer</name>
      <comment>String describing the manufacturer of the graphics hardware.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
      <description>
<p>The string in this field returns the name of the manufacturer that created the user's graphics card.  If this information is not detectable, a <code>NULL</code> pointer is returned.</p>
      </description>
    </field>

    <field>
      <name>MaxHScan</name>
      <comment>The maximum horizontal scan rate of the display output device.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>If the display output device supports variable refresh rates, this field will refer to the maximum horizontal scan rate supported by the device.  If variable refresh rates are not supported, this field is set to zero.</p>
      </description>
    </field>

    <field>
      <name>MaxVScan</name>
      <comment>The maximum vertical scan rate of the display output device.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>If the display output device supports variable refresh rates, this field will refer to the maximum vertical scan rate supported by the device.  If variable refresh rates are not supported, this field is set to zero.</p>
      </description>
    </field>

    <field>
      <name>MinHScan</name>
      <comment>The minimum horizontal scan rate of the display output device.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>If the display output device supports variable refresh rates, this field will refer to the minimum horizontal scan rate supported by the device.  If variable refresh rates are not supported, this field is set to zero.</p>
      </description>
    </field>

    <field>
      <name>MinVScan</name>
      <comment>The minimum vertical scan rate of the display output device.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>If the display output device supports variable refresh rates, this field will refer to the minimum vertical scan rate supported by the device.  If variable refresh rates are not supported, this field is set to zero.</p>
      </description>
    </field>

    <field>
      <name>Opacity</name>
      <comment>Determines the level of translucency applied to the display (hosted displays only).</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>This field determines the translucency level applied to a display. Its support level is limited to hosted displays that support translucent windows (for example, Windows XP).  The default setting is 100%, which means that the display will be solid.  High values will retain the boldness of the display, while low values reduce visibility.</p>
      </description>
    </field>

    <field>
      <name>PopOver</name>
      <comment>Enables pop-over support for hosted display windows.</comment>
      <access write="S">Set</access>
      <type>OBJECTID</type>
      <description>
<p>The PopOver field can be used when a display is hosted as a window.  Setting the PopOver field to refer to the object ID of another display will ensure that the host window is always in front of the other display's window (assuming both windows are visible on the desktop).</p>
<p>The <code>ERR::NoSupport</code> error code is returned if the host does not support this functionality or if the display owns the output device.</p>
      </description>
    </field>

    <field>
      <name>PowerMode</name>
      <comment>The display's power management method.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="DPMS">DPMS</type>
      <description>
<p>When DPMS is enabled via a call to <action>Disable</action>, the DPMS method that is applied is controlled by this field.</p>
<p>DPMS is a user configurable option and it is not recommended that the PowerMode value is changed manually.</p>
<types lookup="DPMS"/>
      </description>
    </field>

    <field>
      <name>RefreshRate</name>
      <comment>This field manages the display refresh rate.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The value in this field reflects the refresh rate of the currently active display, if operating in full-screen mode.</p>
      </description>
    </field>

    <field>
      <name>ResizeFeedback</name>
      <comment>This field manages the display refresh rate.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The value in this field reflects the refresh rate of the currently active display, if operating in full-screen mode.</p>
      </description>
    </field>

    <field>
      <name>RightMargin</name>
      <comment>In hosted mode, indicates the pixel margin between the client window and right window edge.</comment>
      <access read="R">Read</access>
      <type>INT</type>
    </field>

    <field>
      <name>Title</name>
      <comment>Sets the window title (hosted environments only).</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
    </field>

    <field>
      <name>TopMargin</name>
      <comment>In hosted mode, indicates the pixel margin between the client window and top window edge.</comment>
      <access read="R">Read</access>
      <type>INT</type>
    </field>

    <field>
      <name>TotalMemory</name>
      <comment>The total amount of user accessible RAM installed on the video card, or zero if unknown.</comment>
      <access read="R">Read</access>
      <type>INT</type>
    </field>

    <field>
      <name>TotalResolutions</name>
      <comment>The total number of resolutions supported by the display.</comment>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

    <field>
      <name>VDensity</name>
      <comment>Returns the vertical pixel density for the display.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Reading the VDensity field will return the vertical pixel density for the display (pixels per inch).  If the physical size of the display is unknown, a default value based on knowledge of the platform will be retuned.  For standard PC's this will usually be 96.</p>
<p>A custom density value can be enforced by setting the <code>/interface/@dpi</code> value in the loaded style, or by setting VDensity.</p>
<p>Reading this field always succeeds.</p>
      </description>
    </field>

    <field>
      <name>Width</name>
      <comment>Defines the width of the display.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>This field defines the width of a display.  This is known as the 'viewport' that the bitmap data is displayed through. If the width exceeds allowable limits, it will be restricted to a value that the display hardware can handle.</p>
<p>If the display is hosted, the width reflects the internal width of the host window.  On some hosted systems, the true width of the window can be calculated by reading the <fl>LeftMargin</fl> and <fl>RightMargin</fl> fields.</p>
      </description>
    </field>

    <field>
      <name>WindowHandle</name>
      <comment>Refers to a display object's window handle, if relevant.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>APTR</type>
      <description>
<p>This field refers to the window handle of a display object, but only if such a thing is relevant to the platform that the system is running on.  Currently, this field is only usable when creating a display within an X11 window manager or Microsoft Windows.</p>
<p>It is possible to set the WindowHandle field prior to initialisation if you want a display object to be based on a window that already exists.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>Defines the horizontal coordinate of the display.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>The X field defines the horizontal hardware coordinate for a display.  This field should be set to zero unless the screen requires adjustment.  Most hardware drivers and output devices do not support this feature.</p>
<p>On hosted displays, prior to initialisation the coordinate will reflect the position of the display window when it is created.  After initialisation, the coordinate is altered to reflect the absolute position of the client area of the display window.  The <fl>LeftMargin</fl> can be used to determine the actual position of the host window.</p>
<p>To adjust the position of the display, use the <action>MoveToPoint</action> action rather than setting this field directly.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>Defines the vertical coordinate of the display.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>The Y field defines the vertical hardware coordinate for a display.  This field should be set to zero unless the screen requires adjustment.  Most hardware drivers and output devices do not support this feature.</p>
<p>On hosted displays, prior to initialisation the coordinate will reflect the position of the display window  when it is created.  After initialisation, the coordinate is altered to reflect the absolute position of the client area of the display window.  The <fl>TopMargin</fl> can be used to determine the actual position of the host window.</p>
<p>To adjust the position of the display, use the <action>MoveToPoint</action> action rather than setting this field directly.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="DPMS" comment="Possible modes for the Display class' PowerMode field.">
      <const name="DEFAULT">Use the default DPMS mode as defined by the display driver.</const>
      <const name="OFF">Stop sending power to the display in order to turn it off (it may not be possible to restart the display without the user's intervention).</const>
      <const name="STANDBY">Puts the display into standby (reduced power) mode.</const>
      <const name="SUSPEND">Puts the display into suspend mode (blanks the display output while maintaining normal power levels).</const>
    </constants>

    <constants lookup="DT" comment="Flags for GetDisplayType().">
      <const name="GLES">The display is driven by OpenGLES.</const>
      <const name="NATIVE">The display is native (supported by internal drivers).</const>
      <const name="WINGDI">The display is driven by Microsoft Windows drivers.</const>
      <const name="X11">The display is driven by the X Window System (X11, X.Org, XFree86)</const>
    </constants>

    <constants lookup="GMF" comment="Flags for gamma operations.">
      <const name="SAVE">Save the provided settings permanently.</const>
    </constants>

    <constants lookup="MON" comment="Flags for the Display class SetMonitor() method.">
      <const name="AUTO_DETECT">Monitor settings to be auto-detected on startup.</const>
      <const name="BIT_6">The device is limited to 6-bit colour production in real terms.</const>
    </constants>

    <constants lookup="SCR" comment="Display flags.">
      <const name="ALPHA_BLEND">Enables alpha channel blending (if display is hosted and 32-bit).</const>
      <const name="AUTO_SAVE">Saves settings to the global display state when the object is freed.</const>
      <const name="BIT_6">Display is limited to 6-bit output per colour gun.</const>
      <const name="BORDERLESS">If display is hosted, create it as a popup / borderless window.</const>
      <const name="BUFFER">Set if you would like a complementing buffer in video RAM.</const>
      <const name="COMPOSITE">Enables alpha channel blending (if display is hosted and 32-bit).</const>
      <const name="CUSTOM_WINDOW">The display has been created with a custom window reference.</const>
      <const name="DPMS_ENABLED">Power saving through DPMS is supported.</const>
      <const name="FLIPPABLE">If <code>SCR::BUFFER</code> is used, this flag may be set by the display manager if it is possible to flip the buffer.</const>
      <const name="GRAB_CONTROLLERS">Grab controllers for receiving input when the display has the focus.</const>
      <const name="GTF_ENABLED">GTF frequency timings are supported.</const>
      <const name="HOSTED">The display is a desktop hosted window.</const>
      <const name="MAXIMISE">Special win32 flag.</const>
      <const name="MAXSIZE">For <function module="Display">GetDisplayInfo</function> only, indicates that the width and height values indicate the display's maximum size.</const>
      <const name="NO_ACCELERATION">2D graphics card acceleration is not available.</const>
      <const name="POWERSAVE">Power saving is active (read-only).</const>
      <const name="READ_ONLY">Synonym for <code>MAXIMISE | CUSTOM_WINDOW | FLIPPABLE | GTF_ENABLED | DPMS_ENABLED | POWERSAVE | HOSTED | MAXSIZE | REFRESH | BIT_6 | VISIBLE | NO_ACCELERATION</code></const>
      <const name="REFRESH">For <function module="Display">GetDisplayInfo</function> only, used to indicate that a display change has recently occurred and cache refresh is required.</const>
      <const name="VISIBLE">Set if the screen is on display.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
