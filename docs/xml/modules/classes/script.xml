<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Script</name>
    <type>class</type>
    <module>Core</module>
    <comment>The Script class defines a common interface for script execution.</comment>
    <version>1</version>
    <id>1b600fba</id>
    <idstring>ID_SCRIPT</idstring>
    <category>Data</category>
    <include>modules/script.h</include>
    <copyright>Paul Manias 1996-2023</copyright>
    <description>
<p>The Script class defines a common interface for the purpose of executing scripts, such as Fluid.  The base class does not include a default parser or execution process of any kind.</p>
<p>To execute a script file, choose a sub-class that matches the language and create the script object.  Set the <field>Path</field> field and then <action>Activate</action> the script.  Global input parameters for the script can be defined via the <action>SetVar</action> action.</p>
<p>Note that client scripts may sometimes create objects that are unmanaged by the script object that created them. Terminating the script will not remove objects that are outside its resource hierarchy.</p></description>
    <source>
      <file path="../classes/">class_script.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Executes the script.</comment>
    </action>

    <action>
      <name>GetVar</name>
      <comment>Script parameters can be retrieved through this action.</comment>
    </action>

    <action>
      <name>Reset</name>
      <comment>Resets an object to its original state.</comment>
    </action>

    <action>
      <name>SetVar</name>
      <comment>Script parameters can be set through this action.</comment>
    </action>

  </actions>

  <methods>
    <method>
      <name>Callback</name>
      <comment>An internal method for managing callbacks.</comment>
      <prototype>ERROR scCallback(OBJECTPTR Object, LARGE ProcedureID, const struct ScriptArg * Args, LONG TotalArgs, LONG * Error)</prototype>
      <input>
        <param type="LARGE" name="ProcedureID">An identifier for the target procedure.</param>
        <param type="const struct ScriptArg *" name="Args">Optional CSV string containing arguments to pass to the procedure.</param>
        <param type="LONG" name="TotalArgs">The total number of arguments in the Args parameter.</param>
        <param type="LONG *" name="Error">The error code returned from the script, if any.</param>
      </input>
      <description>
<p>Private</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
      </result>
    </method>

    <method>
      <name>DerefProcedure</name>
      <comment>Dereferences a function.</comment>
      <prototype>ERROR scDerefProcedure(OBJECTPTR Object, FUNCTION * Procedure)</prototype>
      <input>
        <param type="FUNCTION *" name="Procedure">The function to be dereferenced.</param>
      </input>
      <description>
<p>This method is applicable to scripting languages that manage function references as a keyed resource.  Fluid is one such language.</p>
<p>Any routine that accepts a script function as a parameter should call DerefProcedure at a later point in order to ensure that the function reference is released.  Not doing so may leave the reference in memory until the Script that owns the procedure is terminated.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>Exec</name>
      <comment>Executes a procedure in the script.</comment>
      <prototype>ERROR scExec(OBJECTPTR Object, CSTRING Procedure, const struct ScriptArg * Args, LONG TotalArgs)</prototype>
      <input>
        <param type="CSTRING" name="Procedure">The name of the procedure to execute, or NULL for the default entry point.</param>
        <param type="const struct ScriptArg *" name="Args">Optional CSV string containing arguments to pass to the procedure (applies to script-based Exec only).</param>
        <param type="LONG" name="TotalArgs">Total number of script arguments provided.</param>
      </input>
      <description>
<p>Use the Exec method to execute a named procedure in a script, optionally passing that procedure a series of arguments. This method has two different interfaces - one for scripting, which takes parameters as a CSV string, and another for C/C++, which takes parameters in a serialised array.</p>
<p>The behaviour of the execution process matches that of the <action>Activate</action> action and will return the same error codes in the event of failure.  If the procedure returns results, they will be available from the <field>Results</field> field after execution.</p>
<p>If parameters will be passed to the procedure in script (e.g. Fluid), they must be specified as a Comma Separated Value list in the Args string. Exec will interpret all the values as a string type.  Double or single quotes should be used to encapsulate string values (use two quotes in sequence as a means of an escape character).  Values should instead be set as named variables in the script object.</p>
<p>If parameters will be passed to the procedure in C/C++ or similar compiled language, they must be specified as an array of ScriptArg structures.  The following example illustrates such a list:</p>
<pre>
struct ScriptArg args[] = {
   { "Object",       FD_OBJECTID, { .Long = Self-&gt;UID } },
   { "Output",       FD_PTR,      { .Address = output } },
   { "OutputLength", FD_LONG,     { .Long = len } }
};
</pre>
<p>The ScriptArg structure follows this arrangement:</p>
<pre>
struct ScriptArg {
   STRING Name;
   LONG Type;
   union {
      APTR   Address;
      LONG   Long;
      LARGE  Large;
      DOUBLE Double;
   };
};
</pre>
<p>The Field Descriptor (FD) specified in the Type must be a match to whatever value is defined in the union.  For instance if the Long field is defined then an FD_LONG Type must be used.  Supplementary field definition information, e.g. FD_OBJECT, may be used to assist in clarifying the type of the value that is being passed.  Field Descriptors are documented in detail in the Class Development Guide.</p>
<p>The C/C++ interface for Exec also requires a hidden third argument that is not specified in this documentation.  The argument, TotalArgs, must reflect the total number of entries in the Args array.</p>
      </description>
      <result>
        <error code="Okay">The procedure was executed.</error>
        <error code="Args">The TotalArgs value is invalid.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>GetProcedureID</name>
      <comment>Converts a procedure name to an ID.</comment>
      <prototype>ERROR scGetProcedureID(OBJECTPTR Object, CSTRING Procedure, LARGE * ProcedureID)</prototype>
      <input>
        <param type="CSTRING" name="Procedure">The name of the procedure.</param>
        <param type="LARGE *" name="ProcedureID">The computed ID will be returned in this parameter.</param>
      </input>
      <description>
<p>This method will convert a procedure name to a unique reference that will be recognised by the script as a direct reference to that procedure.  The ID can be used to create new FUNCTION definitions, for example:</p>
<pre>FUNCTION callback;
SET_FUNCTION_SCRIPT(callback, script, procedure_id);
</pre>
<p>Resolving a procedure will often result in the Script maintaining an ongoing reference for it.  To discard the reference, call <method>DerefProcedure</method> once access to the procedure is no longer required.  Alternatively, destroying the script will also dereference all procedures.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>CacheFile</name>
      <comment>Compilable script languages can be compiled to a cache file.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Scripts that support compilation of the source code can be compiled to a target file when the script is initialised. This file is then used as a cache, so that if the cache file exists on the next initialisation then the cache file is used instead of the original source code.</p>
<p>If the cache file exists, a determination on whether the source code has been edited is usually made by comparing date stamps on the original and cache files.</p>
      </description>
    </field>

    <field>
      <name>CurrentLine</name>
      <comment>Indicates the current line being executed when in debug mode.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>In debug mode, the CurrentLine will indicate the current line of execution (according to the original source code for the script).</p>
<p>It should be noted that not all script processors will support this feature, in which case the value for this field will be set to -1.</p>
      </description>
    </field>

    <field>
      <name>Error</name>
      <comment>If a script fails during execution, an error code may be readable here.</comment>
      <access read="R">Read</access>
      <type>ERROR</type>
      <description>
<p>On execution of a script, the Error value is reset to ERR_Okay and will be updated if the script fails.  Be mindful that if a script is likely to be executed recursively then the first thrown error will have priority and be propagated through the call stack.</p>
      </description>
    </field>

    <field>
      <name>ErrorString</name>
      <comment>A human readable error string may be declared here following a script execution failure.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="I">Read/Init</access>
      <type lookup="SCF">SCF</type>
      <description>
<types lookup="SCF"/>
      </description>
    </field>

    <field>
      <name>Language</name>
      <comment>Indicates the language (locale) that the source script is written in.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
      <description>
<p>The Language value indicates the language in which the source script was written.  The default setting is ENG, the code for international English.</p>
      </description>
    </field>

    <field>
      <name>LineOffset</name>
      <comment>For debugging purposes, this value is added to any message referencing a line number.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The LineOffset is a value that is added to all line numbers that are referenced in script debugging output.  It is primarily intended for internal usage only.</p>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>The location of a script file to be loaded.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>A script file can be loaded by setting the Path to its location.  The path must be defined prior to the initialisation process, or alternatively the client can define the <field>Statement</field> field.</p>
<p>Optional parameters can also be passed to the script via the Path string.  The name of a function is passed first, surrounded by semicolons.  Arguments can be passed to the function by appending them as a CSV list.  The following string illustrates the format used:</p>
<pre>dir:location;procedure;arg1=val1,arg2,arg3=val2</pre>
<p>A target for the script may be specified by using the 'target' argument in the parameter list (value must refer to a valid existing object).</p>
      </description>
    </field>

    <field>
      <name>Procedure</name>
      <comment>Allows you to specify a procedure to be executed from within a script.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Sometimes scripts are split into several procedures or functions that can be executed independently from the 'main' area of the script.  If a script that you have loaded contains procedures, you can set the Procedure field to execute a specific routine whenever the script is activated with the Activate action.</p>
<p>If this field is not set, the first procedure in the script, or the 'main' procedure (as defined by the script type) is executed by default.</p>
      </description>
    </field>

    <field>
      <name>Results</name>
      <comment>Stores multiple string results for languages that support this feature.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING []</type>
      <description>
<p>If a scripting language supports the return of multiple results, this field may reflect those result values after the execution of any procedure.</p>
<p>For maximum compatibility in type conversion, the results are stored as an array of strings.</p>
      </description>
    </field>

    <field>
      <name>Statement</name>
      <comment>Scripts can be executed from any string passed into this field.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Scripts may be compiled into a script object by setting the Statement field with a complete script string.  This is often convenient for embedding a small script into another script file without having to make external file references. It is also commonly used for executing scripts that have been embedded into program binaries.</p>
      </description>
    </field>

    <field>
      <name>Target</name>
      <comment>Reference to the default container that new script objects will be initialised to.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>OBJECTID</type>
      <description>
<p>This field can refer to the target object that new objects at the root of the script will be initialised to.  If this field is not set, the root-level objects in the script will be initialised to the script's owner.</p>
      </description>
    </field>

    <field>
      <name>TotalArgs</name>
      <comment>Reflects the total number of arguments used in a script object.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>The total number of arguments that have been set in a script object through the unlisted field mechanism are reflected in the value of this field.  If you have not set any arguments then the field value will be zero.</p>
      </description>
    </field>

    <field>
      <name>WorkingPath</name>
      <comment>Defines the script's working path (folder).</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The working path for a script is defined here.  By default this is defined as the location from which the script was loaded, without the file name.  If this cannot be determined then the working path for the parent process is used (this is usually set to the location of the program).</p>
<p>The working path is always fully qualified with a slash or colon at the end of the string.</p>
<p>You can manually change the working path by setting this field with a custom string.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="SCF" comment="Script flags">
      <const name="EXIT_ON_ERROR">The script will automatically terminate its execution process if an error is detected.</const>
      <const name="LOG_ALL">Enables execution debugging.  More information will be printed to the console in this mode.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
