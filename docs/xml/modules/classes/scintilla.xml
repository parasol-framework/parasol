<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Scintilla</name>
    <type>class</type>
    <module>Scintilla</module>
    <comment>Provides advanced text display and editing facilities.</comment>
    <version>1</version>
    <id>3f218968</id>
    <idstring>ID_SCINTILLA</idstring>
    <category>Tool</category>
    <include>modules/scintilla.h</include>
    <copyright>Paul Manias Â© 2005-2024</copyright>
    <description>
<p>The Scintilla class provides advanced text editing capabilities that are suitable for modifying text files of any kind, as well as simple user input features for text input boxes.  The code is based on the Scintilla project at http://scintilla.org and it may be useful to study the official Scintilla documentation for further insight into its capabilities.</p></description>
    <source>
      <file>class_scintilla.cxx</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Clear</name>
      <comment>Clears all content from the editor.</comment>
    </action>

    <action>
      <name>Clipboard</name>
      <comment>Full support for clipboard activity is provided through this action.</comment>
    </action>

    <action>
      <name>Disable</name>
      <comment>Disables the target <field>Surface</field>.</comment>
    </action>

    <action>
      <name>Draw</name>
      <comment>Draws the Scintilla object's graphics.</comment>
    </action>

    <action>
      <name>Enable</name>
      <comment>Enables the target <field>Surface</field>.</comment>
    </action>

    <action>
      <name>Focus</name>
      <comment>Focus on the Scintilla surface.</comment>
    </action>

    <action>
      <name>Hide</name>
      <comment>Hides a visible object from the view of the user.</comment>
    </action>

    <action>
      <name>Redo</name>
      <comment>Redo the most recently undone activity.</comment>
    </action>

    <action>
      <name>SaveToObject</name>
      <comment>Save content as a text stream to another object.</comment>
    </action>

    <action>
      <name>Show</name>
      <comment>Makes an object visible to the user.</comment>
    </action>

    <action>
      <name>Undo</name>
      <comment>Undo the last user action.</comment>
    </action>

  </actions>

  <methods>
    <method>
      <name>DeleteLine</name>
      <comment>Deletes a line.</comment>
      <prototype>ERR sciDeleteLine(OBJECTPTR Object, LONG Line)</prototype>
      <input>
        <param type="LONG" name="Line">The number of the line to delete.  Indexing starts from 0.</param>
      </input>
      <description>
<p>This method will delete a single line at the position indicated by the Line parameter.  If no parameters are provided or the Line parameter is less than zero, the line at the current cursor position will be deleted.  If the index exceeds the total number of available lines, the last available line will be targeted.</p>
      </description>
    </method>

    <method>
      <name>GetLine</name>
      <comment>Copies the text content of any line to a user-supplied buffer.</comment>
      <prototype>ERR sciGetLine(OBJECTPTR Object, LONG Line, STRING Buffer, LONG Length)</prototype>
      <input>
        <param type="LONG" name="Line">The index of the line to retrieve.</param>
        <param type="STRING" name="Buffer">The destination buffer.</param>
        <param type="LONG" name="Length">The byte size of the buffer.</param>
      </input>
      <description>
<p>This method will retrieve the string for a line at a given index.  The string is copied to a user supplied buffer of the indicated length (in bytes).</p>
      </description>
    </method>

    <method>
      <name>GetPos</name>
      <comment>Returns the byte position of a given line and column number.</comment>
      <prototype>ERR sciGetPos(OBJECTPTR Object, LONG Line, LONG Column, LONG * Pos)</prototype>
      <input>
        <param type="LONG" name="Line">Line index</param>
        <param type="LONG" name="Column">Column index</param>
        <param type="LONG *" name="Pos">The byte position is returned in this parameter.</param>
      </input>
      <description>
<p>This method converts a line and column index to the equivalent byte position within the text document.</p>
      </description>
    </method>

    <method>
      <name>GotoLine</name>
      <comment>Moves the cursor to any line in the document.</comment>
      <prototype>ERR sciGotoLine(OBJECTPTR Object, LONG Line)</prototype>
      <input>
        <param type="LONG" name="Line">The line index to move to.</param>
      </input>
      <description>
<p>This method moves the cursor to a given line index.  If the index is greater than the total number of available lines, the cursor is moved to the last line in the document.  A line index of less than zero is invalid.</p>
      </description>
    </method>

    <method>
      <name>InsertText</name>
      <comment>Inserts text into a document.</comment>
      <prototype>ERR sciInsertText(OBJECTPTR Object, CSTRING String, LONG Pos)</prototype>
      <input>
        <param type="CSTRING" name="String">A text string to add.</param>
        <param type="LONG" name="Pos">-1 inserts at the current cursor position, -2 replaces currently selected text, zero or above inserts at the character index indicated.</param>
      </input>
      <description>
<p>Use InsertText to insert a string at any point in the document (if adding text to the end of the document, we recommend using data channels instead).</p>
<p>You will need to specify the character position at which the provided String should be inserted.  Two special character positions are also supported as an alternative - a value of -1 inserts the text at the current cursor position and a value of -2 replaces currently selected text.</p>
      </description>
    </method>

    <method>
      <name>ReplaceLine</name>
      <comment>Replaces a line with new text content.</comment>
      <prototype>ERR sciReplaceLine(OBJECTPTR Object, LONG Line, CSTRING String, LONG Length)</prototype>
      <input>
        <param type="LONG" name="Line">Index of the line being targeted.</param>
        <param type="CSTRING" name="String">The new string that will replace the line.</param>
        <param type="LONG" name="Length">The number of characters to replace the target with, or -1 for the entire source string.</param>
      </input>
      <description>
<p>This method will replace an entire line with a new text string.  If the new string contains line feeds, then multiple lines will be inserted at the target position.  It is possible to limit the number of characters inserted from the source string by setting the Length parameter.  To insert all characters from the source string, set a Length of -1.</p>
      </description>
    </method>

    <method>
      <name>ReplaceText</name>
      <comment>Replaces all text within an entire document or limited range.</comment>
      <prototype>ERR sciReplaceText(OBJECTPTR Object, CSTRING Find, CSTRING Replace, STF Flags, LONG Start, LONG End)</prototype>
      <input>
        <param type="CSTRING" name="Find">The keyword string to find.</param>
        <param type="CSTRING" name="Replace">The string that will replace the keyword.</param>
        <param type="STF" name="Flags" lookup="STF">Optional flags.</param>
        <param type="LONG" name="Start">The start of the search - set to zero if covering the entire document.  If -1, starts from the current cursor position.</param>
        <param type="LONG" name="End">The end of the search - set to -1 if covering the entire document.</param>
      </input>
      <description>
<p>The ReplaceText method will replace all instances of the Find string with the content of the Replace string, between a given Start and End point.  The <code>STF::CASE</code>, <code>STF::SCAN_SELECTION</code> and <code>STF::EXPRESSION</code> are valid flag options for this method (see FindText for details).</p>
      </description>
    </method>

    <method>
      <name>ScrollToPoint</name>
      <comment>Scrolls text by moving the Page.</comment>
      <prototype>ERR sciScrollToPoint(OBJECTPTR Object, LONG X, LONG Y)</prototype>
      <input>
        <param type="LONG" name="X">New horizontal position.</param>
        <param type="LONG" name="Y">New vertical position.</param>
      </input>
      <description>
<p>This method will scroll text in the Scintilla document by moving the page position.</p>
      </description>
    </method>

    <method>
      <name>SelectRange</name>
      <comment>Selects a range of text, can also deselect all text.</comment>
      <prototype>ERR sciSelectRange(OBJECTPTR Object, LONG Start, LONG End)</prototype>
      <input>
        <param type="LONG" name="Start">The character at which the selection will start.</param>
        <param type="LONG" name="End">The character at which the selection will end.  If negative, the last character in the document will be targeted.</param>
      </input>
      <description>
<p>This method will select an area of text between a start and end point, measured in characters.  It can also deselect all text if no arguments are provided.</p>
      </description>
    </method>

    <method>
      <name>SetFont</name>
      <comment>Changes the font that is used for text display.</comment>
      <prototype>ERR sciSetFont(OBJECTPTR Object, CSTRING Face)</prototype>
      <input>
        <param type="CSTRING" name="Face">The name of the new font face.</param>
      </input>
      <description>
<p>Call SetFont() to change the font face that is used for displaying text.  The string format follows the standard for font requests, e.g. <code>Helvete:12:Bold Italic:#ff0000</code>.  Refer to the Face field in the <class name="Font">Font</class> class for more details.</p>
<p>If the new face is invalid or fails to load, the current font will remain unchanged.</p>
      </description>
    </method>

    <method>
      <name>TrimWhitespace</name>
      <comment>Strips trailing white-space from the document.</comment>
      <prototype>ERR sciTrimWhitespace(OBJECTPTR Object)</prototype>
      <description>
<p>The TrimWhitespace method will remove trailing white-space from every line in the document.  Both tabs and spaces are considered white-space - all other characters shall be treated as content.</p>
<p>The position of the cursor is reset to the left margin as a result of calling this method.</p>
      </description>
    </method>

  </methods>

  <fields>
    <field>
      <name>AllowTabs</name>
      <comment>If enabled, use of the tab key produces real tabs and not spaces.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>AutoIndent</name>
      <comment>If TRUE, enables auto-indenting when the user presses the enter key.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>BkgdColour</name>
      <comment>Defines the background colour.  Alpha blending is not supported.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>CursorCol</name>
      <comment>The current column of the text cursor.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The CursorCol and <field>CursorRow</field> fields reflect the current row and column of the user's text cursor.  The values are updated every time that the cursor is moved.  Use <field>EventCallback</field> and listen for the event SEF_CURSOR_POS to receive updates on changes to CursorCol and <field>CursorRow</field>.</p>
      </description>
    </field>

    <field>
      <name>CursorColour</name>
      <comment>Defines the colour of the text cursor.  Alpha blending is not supported.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>CursorRow</name>
      <comment>The current row of the text cursor.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The <field>CursorCol</field> and CursorRow fields reflect the current row and column of the user's text cursor.  The values are updated every time that the cursor is moved.  Use <field>EventCallback</field> and listen for the event SEF_CURSOR_POS to receive updates on changes to <field>CursorCol</field> and CursorRow.</p>
      </description>
    </field>

    <field>
      <name>EventCallback</name>
      <comment>Provides callbacks for global state changes.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>Set this field with a function reference to receive event notifications.  It must be set in conjunction with <field>EventFlags</field> so that you can select the type of notifications that will be received.</p>
<p>The callback function must be in the format <code>Function(*Scintilla, LARGE EventFlag)</code>.</p>
<p>The EventFlag value will indicate the event that occurred.  Please see the <field>EventFlags</field> field for a list of supported events and additional details.</p>
      </description>
    </field>

    <field>
      <name>EventFlags</name>
      <comment>Specifies events that need to be reported from the Scintilla object.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="SEF">SEF</type>
      <description>
<p>To receive event notifications, set <field>EventCallback</field> with a function reference and the EventFlags field with a mask that indicates the events that need to be received.</p>
<types lookup="SEF"/>
      </description>
    </field>

    <field>
      <name>FileDrop</name>
      <comment>A callback for receiving drag and drop file notifications.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>Set this field with a reference to a callback function to receive notifications when the user drops a file onto the Scintilla object's surface.  The synopsis for the callback function is <code>ERR Function(*Scintilla, CSTRING Path)</code></p>
<p>If multiple files are dropped, the callback will be repeatedly called until all of the file paths have been reported.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="I">Read/Init</access>
      <type lookup="SCIF">SCIF</type>
      <description>
<types lookup="SCIF"/>
      </description>
    </field>

    <field>
      <name>Focus</name>
      <comment>Defines the object that is monitored for user focus changes.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>OBJECTID</type>
      <description>
<p>By default, the user focus is managed by monitoring the target <field>Surface</field> for changes (for instance, clicking on or away from the surface will result in a focus state change).  If another object should be monitored for focus state changes, it can be defined here prior to initialisation.</p>
      </description>
    </field>

    <field>
      <name>FoldingMarkers</name>
      <comment>Folding markers in the left margin will be visible when this value is TRUE.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>Font</name>
      <comment>Refers to the font that is used for drawing text in the document.</comment>
      <access read="R">Read</access>
      <type class="Font">*Font</type>
      <description>
<p>This field refers to the font object that is used for drawing text in the document.  It is recommended that all font customisation takes place prior to initialisation of the Scintilla object.  Directly altering the font object after initialisation may result in clashes with the Scintilla class that produce unpredictable results.</p>
<p>To change the font post-initialisation, please use the <method>SetFont</method> method.</p>
      </description>
    </field>

    <field>
      <name>LeftMargin</name>
      <comment>The amount of white-space at the left side of the page.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>Lexer</name>
      <comment>The lexer for document styling is defined here.</comment>
      <access read="R" write="S">Read/Set</access>
      <type lookup="SCLEX">SCLEX</type>
      <description>
<p>The lexer for document styling is defined here.</p>
<types lookup="SCLEX"/>
      </description>
    </field>

    <field>
      <name>LineCount</name>
      <comment>The total number of lines in the document.</comment>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

    <field>
      <name>LineHighlight</name>
      <comment>The colour to use when highlighting the line that contains the user's cursor.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>LineNumbers</name>
      <comment>Line numbers will appear on the left when this value is TRUE.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>Modified</name>
      <comment>Returns TRUE if the document has been modified and not saved.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>The Modified field controls the modification state of the document.  It is automatically changed to a value of TRUE when the user edits the document.  To receive notification of changes to the document state, you should subscribe to the Modified field.</p>
<p>It is recommended that you manually set this field to FALSE if the document is saved to disk.  The Scintilla class will not make this change for you automatically.</p>
      </description>
    </field>

    <field>
      <name>Origin</name>
      <comment>Similar to the Path field, but does not automatically load content if set.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>This field is identical to the <field>Path</field> field, with the exception that it does not update the content of a scintilla object if it is set after initialisation.  This may be useful if the origin of the currently loaded content needs to be changed without causing a load operation.</p>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>Identifies the location of a text file to load.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>CSTRING</type>
      <description>
<p>To load data from a text file into a scintilla object, set the Path field.</p>
<p>If the Path is set after initialisation, the existing content will be cleared and data loaded from the location that you specify.  To change the path without automatically loading from the source file, set the <field>Origin</field> field instead.</p>
      </description>
    </field>

    <field>
      <name>RightMargin</name>
      <comment>Defines the amount of white-space at the right side of the page.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>SelectBkgd</name>
      <comment>Defines the background colour of selected text.  Supports alpha blending.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>SelectFore</name>
      <comment>Defines the colour of selected text.  Supports alpha blending.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>ShowWhitespace</name>
      <comment>White-space characters will be visible to the user when this field is TRUE.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>String</name>
      <comment>Manages the text data as a complete string.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>A Scintilla document can be completely updated by setting the String field.  Equally, the entire document can be retrieved by getting the String field.  Please be aware that retrieving the document in string format can be very inefficient, as the document text is normally stored on a per-line basis.  Consider using the <method>GetLine</method> method as the preferred alternative, as it is much more efficient with memory usage.</p>
      </description>
    </field>

    <field>
      <name>Surface</name>
      <comment>Refers to the <class name="Surface">Surface</class> targeted by the Scintilla object.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>OBJECTID</type>
      <description>
<p>This compulsory field refers to the <class name="Surface">Surface</class> that the Scintilla object is targeting for graphics operations.  If not set prior to initialisation, the Scintilla object will search for the nearest <class name="Surface">Surface</class> object based on its ownership hierarchy.</p>
      </description>
    </field>

    <field>
      <name>Symbols</name>
      <comment>Symbols can be displayed in the left margin when this value is TRUE.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>TabWidth</name>
      <comment>The width of tab stops in the document, measured as fixed-width characters.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>TextColour</name>
      <comment>Defines the default colour of foreground text.  Supports alpha blending.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>Visible</name>
      <comment>If TRUE, indicates the Scintilla object is visible in the target <field>Surface</field>.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>This field is set to TRUE if the Scintilla object is visible in the target <field>Surface</field>.  To control visibility, please use the <action>Show</action> and <action>Hide</action> actions appropriately.  This field can be set to FALSE prior to initialisation if the Scintilla object should start in a hidden state.</p>
      </description>
    </field>

    <field>
      <name>Wordwrap</name>
      <comment>Enables automatic word wrapping when TRUE.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

  </fields>
  <types>
    <constants lookup="SCIF" comment="Optional flags.">
      <const name="DETECT_LEXER">Automatic lexer detection will occur on initialisation and at any time that a source file is loaded.</const>
      <const name="DISABLED">Read-only.  This flag is set if the Scintilla object has been deactivated with the Disable action.</const>
      <const name="EDIT">Must be defined if the document is to be editable via user input.</const>
      <const name="EXT_PAGE">Extends the length of the document by one blank page.  This is a visual effect that only has an impact when the user scrolls to the end of the document.</const>
    </constants>

    <constants lookup="SCLEX" comment="Scintilla Lexers.  These codes originate from the Scintilla library.">
      <const name="ASP">Active Server Pages</const>
      <const name="ASSEMBLER">Assembler</const>
      <const name="BASH">Bash</const>
      <const name="BATCH">Batch</const>
      <const name="CPP">C or C++</const>
      <const name="CSS">CSS</const>
      <const name="DIFF">Diff</const>
      <const name="ERRORLIST">ErrorList</const>
      <const name="FLUID">Fluid</const>
      <const name="HTML">HTML</const>
      <const name="MAKEFILE">Makefile</const>
      <const name="PASCAL">Pascal</const>
      <const name="PERL">Perl</const>
      <const name="PHPSCRIPT">PHP Script</const>
      <const name="PROPERTIES">Properties</const>
      <const name="PYTHON">Python</const>
      <const name="REBOL">Rebol</const>
      <const name="RUBY">Ruby</const>
      <const name="SQL">SQL</const>
      <const name="VB">Visual Basic</const>
      <const name="VBSCRIPT">VBScript</const>
      <const name="XML">XML</const>
    </constants>

    <constants lookup="SEF" comment="Flags for EventCallback and EventFlags">
      <const name="CURSOR_POS">The cursor position has changed.</const>
      <const name="FAIL_RO">User attempt to edit read-only content.</const>
      <const name="MODIFIED">The content has changed to a modified state, i.e. the user has made an edit.  The modified state will remain until the content is saved.</const>
      <const name="NEW_CHAR">At least one new character has been inserted.</const>
    </constants>

    <constants lookup="STF" comment="Scintilla search flags.">
      <const name="BACKWARDS">Search backwards.</const>
      <const name="CASE">Case sensitive search.</const>
      <const name="EXPRESSION">Search text is a regular expression.</const>
      <const name="MOVE_CURSOR">The cursor is moved to the discovered string.  If not set, the string is auto-selected.</const>
      <const name="SCAN_SELECTION">Limit search to within the user's current selection.</const>
      <const name="WRAP">Wrap search at the end of the document.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
