<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>CompressedStream</name>
    <type>class</type>
    <module>Core</module>
    <comment>Acts as a proxy for decompressing and compressing data streams between objects.</comment>
    <fileDescription>GZip File</fileDescription>
    <version>1</version>
    <id>2144cb86</id>
    <idstring>ID_COMPRESSEDSTREAM</idstring>
    <category>Data</category>
    <include>modules/compressedstream.h</include>
    <copyright>Paul Manias 1996-2024</copyright>
    <description>
<p>Use the CompressedStream class to compress and decompress data on the fly without the need for a temporary storage area.  The default compression algorithm is DEFLATE with gzip header data.  It is compatible with common command-line tools such as gzip.</p>
<p>To decompress data, set the <field>Input</field> field with a source object that supports the Read action, such as a File. Repeatedly reading from the CompressedStream will automatically handle the decompression process for you.  If the decompressed size of the incoming data is defined in the source header, it will be reflected in the <field>Size</field> field.</p>
<p>To compress data, set the <field>Output</field> field with a source object that supports the <action>Write</action> action, such as a <class name="File">File</class>. Repeatedly writing to the CompressedStream with raw data will automatically handle the compression process for you. Once all of the data has been written, call the <action>Write</action> action with a Buffer of NULL and Length -1 to signal an end to the streaming process.</p></description>
    <source>
      <file path="../compression/">class_compressed_stream.cpp</file>
    </source>
  </info>

  <fields>
    <field>
      <name>Format</name>
      <comment>The format of the compressed stream.  The default is GZIP.</comment>
      <access read="R" write="I">Read/Init</access>
      <type lookup="CF">CF</type>
      <description>
<types lookup="CF"/>
      </description>
    </field>

    <field>
      <name>Input</name>
      <comment>An input object that will supply data for decompression.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>OBJECTPTR</type>
      <description>
<p>To create a stream that decompresses data from a compressed source, set the Input field with a reference to an object that will provide the source data.  It is most common for the source object to be a <class name="File">File</class> type, however any class that supports the Read action is permitted.</p>
<p>The source object must be in a readable state.  The Input field is mutually exclusive to the <field>Output</field> field.</p>
      </description>
    </field>

    <field>
      <name>Output</name>
      <comment>A target object that will receive data compressed by the stream.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>OBJECTPTR</type>
      <description>
<p>To create a stream that compresses data to a target object, set the Output field with an object reference.  It is most common for the target object to be a <class name="File">File</class> type, however any class that supports the Write action is permitted.</p>
<p>The target object must be in a writeable state.  The Output field is mutually exclusive to the <field>Input</field> field.</p>
      </description>
    </field>

    <field>
      <name>Size</name>
      <comment>The uncompressed size of the input source, if known.</comment>
      <access read="G">Get</access>
      <type>BIGINT</type>
      <description>
<p>The Size field will reflect the uncompressed size of the input source, if this can be determined from the header. In the case of GZIP decompression, the size will not be known until the parser has consumed the header. This means that at least one call to the <action>Read</action> action is required before the Size is known.</p>
<p>If the size is unknown, a value of -1 is returned.</p>
      </description>
    </field>

    <field>
      <name>TotalOutput</name>
      <comment>A live counter of total bytes that have been output by the stream.</comment>
      <access read="R">Read</access>
      <type>BIGINT</type>
    </field>

  </fields>
  <types>
    <constants lookup="AC" comment="Action identifiers.">
      <const name="Activate"/>
      <const name="Clear"/>
      <const name="Clipboard"/>
      <const name="CopyData"/>
      <const name="DataFeed"/>
      <const name="Deactivate"/>
      <const name="Disable"/>
      <const name="DragDrop"/>
      <const name="Draw"/>
      <const name="END"/>
      <const name="Enable"/>
      <const name="Flush"/>
      <const name="Focus"/>
      <const name="Free"/>
      <const name="FreeWarning"/>
      <const name="GetKey"/>
      <const name="Hide"/>
      <const name="Init"/>
      <const name="Lock"/>
      <const name="LostFocus"/>
      <const name="Move"/>
      <const name="MoveToBack"/>
      <const name="MoveToFront"/>
      <const name="MoveToPoint"/>
      <const name="NewChild"/>
      <const name="NewObject"/>
      <const name="NewOwner"/>
      <const name="Next"/>
      <const name="Prev"/>
      <const name="Query"/>
      <const name="Read"/>
      <const name="Redimension"/>
      <const name="Redo"/>
      <const name="Refresh"/>
      <const name="Rename"/>
      <const name="Reset"/>
      <const name="Resize"/>
      <const name="SaveImage"/>
      <const name="SaveSettings"/>
      <const name="SaveToObject"/>
      <const name="Seek"/>
      <const name="SetField"/>
      <const name="SetKey"/>
      <const name="Show"/>
      <const name="Signal"/>
      <const name="Undo"/>
      <const name="Unlock"/>
      <const name="Write"/>
    </constants>

    <constants lookup="CF" comment="Compression stream formats">
      <const name="DEFLATE">The 'deflate' format</const>
      <const name="GZIP">The 'gzip' format</const>
      <const name="ZLIB">The 'zlib' format</const>
    </constants>

    <constants lookup="EVG" comment="Event categories.">
      <const name="ANDROID">Android specific events that do not already fit existing categories.</const>
      <const name="APP">Custom event dispatched from an application</const>
      <const name="AUDIO">Audio system events.</const>
      <const name="CLASS">Custom event dispatched from a class that doesn't fit within the rest of the event framework</const>
      <const name="DISPLAY">Video display events.</const>
      <const name="FILESYSTEM">File system events.</const>
      <const name="GUI">Events generated by the Graphical User Interface.</const>
      <const name="HARDWARE">Hardware device events that are not covered by other types.</const>
      <const name="IO">Input/Output events.</const>
      <const name="NETWORK">Network events.</const>
      <const name="POWER">Power Management - can also include app-specific events relating to resource management.</const>
      <const name="SYSTEM">System-wide events</const>
      <const name="USER">User activity events (such as user login).</const>
    </constants>

    <constants lookup="FOF" comment="Flags that can be passed to FindObject()">
      <const name="SMART_NAMES">Parse numeric object names as ID references and support use of the 'Owner' reserved keyword.</const>
    </constants>

    <constants lookup="IDTYPE" comment="Types for AllocateID()">
      <const name="FUNCTION">Function ID's are used to track FUNCTION types and are assigned to the function ID field.</const>
      <const name="GLOBAL">Global ID's have no specific association with anything.</const>
      <const name="MESSAGE">Message ID's are allocated for the purpose of sending uniquely identifiable messages between tasks.</const>
    </constants>

    <constants lookup="LDF" comment="Flags for LoadFile()">
      <const name="CHECK_EXISTS">Limits the routine to checking the file cache for the existence of the file.  If found, the relevant cache entry is returned. The open count is not incremented by this action (it is therefore unnecessary to follow-up with a call to UnloadFile()).  If no up-to-date cache entry is available, ERR::Search is returned.</const>
    </constants>

    <constants lookup="LOC" comment="AnalysePath() values">
      <const name="DIRECTORY">The path refers to a folder.</const>
      <const name="FILE">The path refers to a file.</const>
      <const name="VOLUME">The path refers to a volume name.</const>
    </constants>

    <constants lookup="MEM" comment="Memory types used by AllocMemory().  The lower 16 bits are stored with allocated blocks, the upper 16 bits are function-relative only.">
      <const name="AUDIO">The memory space is reserved by an audio device such as a sound card.</const>
      <const name="CALLER">This flag is usable only in routines that are supporting a class method.  It forces the memory allocation to be tracked to the object that made the method call.  This is particularly important in methods that return memory blocks that do not form a part of the object itself.</const>
      <const name="CODE">Set if the memory will contain executable program code.</const>
      <const name="DATA">The default type, MEM_DATA, is used to indicate a standard memory allocation from system RAM.</const>
      <const name="HIDDEN">Hidden blocks are not recorded and are excluded from resource tracking.</const>
      <const name="MANAGED">Enables custom resource management for the memory block.  The start of the block will need to be reserved with a pointer to a ResourceManager structure, which is included as part of the block's declared Size.  The Free() callback will be called when the block is removed.</const>
      <const name="NO_BLOCK">Permanently turn off all accesses to this memory block.  This means that multiple threads can have full read/write access to the memory block at once regardless of other acces flags.</const>
      <const name="NO_BLOCKING">Permanently turn off all accesses to this memory block.  This means that multiple threads can have full read/write access to the memory block at once regardless of other acces flags.</const>
      <const name="NO_CLEAR">Do not clear the memory on allocation (saves time).</const>
      <const name="NO_LOCK">For AllocMemory() only, indicates that the (private) memory block should not be locked on return.</const>
      <const name="NO_POOL">Gives a hint to the allocator to allocate the block outside of the memory pool.</const>
      <const name="READ">The memory is explicitly marked as readable.</const>
      <const name="READ_WRITE">Synonym for READ | WRITE</const>
      <const name="STRING">Identifies the memory content as a null terminated string. Useful for debugging and run-time type identification in scripts.</const>
      <const name="TEXTURE">The memory space is reserved by a video driver for hosting texture graphics.</const>
      <const name="TMP_LOCK">Enables temporary locking restrictions.  Prevents processes from sleeping while holding a lock on the memory block.</const>
      <const name="UNTRACKED">Allocating an untracked memory block will prevent the memory block from being tracked back to the object holding the current context.</const>
      <const name="VIDEO">The memory space is reserved by a video device such as a graphics card for display purposes, e.g. framebuffer.</const>
      <const name="WRITE">The memory is explicitly marked as writeable.</const>
    </constants>

    <constants lookup="MSF" comment="Message flags.">
      <const name="ADD">The default behaviour - this will add the message to the end of the queue.</const>
      <const name="MESSAGE_ID">The Type parameter refers to a unique message ID rather than a message type for this call.</const>
      <const name="NO_DUPLICATE">If the Type parameter matches a message already inside the queue, the new message will not be added and the function will immediately return with ERR::Okay.</const>
      <const name="UPDATE">If the Type parameter matches a message already inside the queue, the data for that message will be deleted, then the new message will be added to the end of the queue.</const>
      <const name="WAIT">Wait before inserting the message if the queue is at maximum capacity.</const>
    </constants>

    <constants lookup="MSGID" comment="Reserved message ID's that are handled internally.">
      <const name="ACTION"/>
      <const name="BREAK"/>
      <const name="COMMAND"/>
      <const name="CORE_END"/>
      <const name="DEBUG"/>
      <const name="EVENT"/>
      <const name="FREE"/>
      <const name="QUIT"/>
      <const name="THREAD_ACTION"/>
      <const name="THREAD_CALLBACK"/>
      <const name="VALIDATE_PROCESS"/>
      <const name="WAIT_FOR_OBJECTS"/>
    </constants>

    <constants lookup="NF" comment="Flags that can be passed to NewObject().  If a flag needs to be stored with the object, it must be specified in the lower word.">
      <const name="COLLECT">Marked for garbage collection.</const>
      <const name="FREE">Read-only indicator for when the object is being freed.</const>
      <const name="FREE_ON_UNLOCK">Read-only indicator for when the object is marked for deletion.</const>
      <const name="INITIALISED">Read-only indicator if the object has been initialised.</const>
      <const name="INTEGRAL">Integral objects can only be allocated by classes that need to adopt the functionality of said object.  Integral objects do not appear in the object tree, effectively making them hidden from view.</const>
      <const name="MESSAGE">Action has been called against the object through the message system (managed by ProcessMessages()).</const>
      <const name="NAME">Use the Name parameter to name the created object.  This flag is not required if using NF_UNIQUE.</const>
      <const name="PRIVATE"/>
      <const name="RECLASSED">The object switched from the base-class to a sub-class during initialisation.</const>
      <const name="SIGNALLED">The object has been signalled and is awaiting processing.</const>
      <const name="TIMER_SUB">The object is subscribed to a timer interval.</const>
      <const name="UNIQUE">Use to allocate an object that has a guaranteed unique name.  This will prevent code from shadowing any object that exists with the same name, which can be imperative when creating shared objects.  If it is discovered that an identically named object exists, NewObject() will return ERR::ObjectExists.  This flag works in conjunction with the Name argument.</const>
      <const name="UNTRACKED">An object created with this flag will not be tracked back to the object that created it.</const>
    </constants>

    <constants lookup="PERMIT" comment="Permission flags">
      <const name="ALL_DELETE">Synonym for EVERYONE_DELETE</const>
      <const name="ALL_EXEC">Synonym for EVERYONE_EXEC</const>
      <const name="ALL_READ">Synonym for EVERYONE_READ</const>
      <const name="ALL_WRITE">Synonym for EVERYONE_WRITE</const>
      <const name="ARCHIVE">Marks the file for future backup.  The flag should be cleared after the backup has succeeded.</const>
      <const name="DELETE">Owner can delete.  If the file system does not support this, deletion is enabled via the WRITE flag.</const>
      <const name="EVERYONE_ACCESS">Synonym for EVERYONE_READ | EVERYONE_WRITE | EVERYONE_EXEC | EVERYONE_DELETE</const>
      <const name="EVERYONE_DELETE">Synonym for DELETE | GROUP_DELETE | OTHERS_DELETE</const>
      <const name="EVERYONE_EXEC">Synonym for EXEC | GROUP_EXEC | OTHERS_EXEC</const>
      <const name="EVERYONE_READ">Synonym for READ | GROUP_READ | OTHERS_READ</const>
      <const name="EVERYONE_READWRITE">Synonym for EVERYONE_READ | EVERYONE_WRITE</const>
      <const name="EVERYONE_WRITE">Synonym for WRITE | GROUP_WRITE | OTHERS_WRITE</const>
      <const name="EXEC">User/Owner can execute.</const>
      <const name="GROUP">Synonym for GROUP_READ | GROUP_WRITE | GROUP_EXEC | GROUP_DELETE</const>
      <const name="GROUPID">Allows executables to run with a set group id.</const>
      <const name="GROUP_DELETE">Group members can delete.</const>
      <const name="GROUP_EXEC">Group members can execute.</const>
      <const name="GROUP_READ">Group members can read.</const>
      <const name="GROUP_WRITE">Group members can write.</const>
      <const name="HIDDEN">Recommends that the file is hidden from view by default.</const>
      <const name="INHERIT">Inherit permissions from parent folder and logical OR them with preset permission flags.</const>
      <const name="NETWORK">File is hosted on another machine.</const>
      <const name="OFFLINE">File content for this networked file has not been cached on the local PC.</const>
      <const name="OTHERS">Synonym for OTHERS_READ | OTHERS_WRITE | OTHERS_EXEC | OTHERS_DELETE</const>
      <const name="OTHERS_DELETE">Others can delete.</const>
      <const name="OTHERS_EXEC">Others can execute.</const>
      <const name="OTHERS_READ">Others can read.</const>
      <const name="OTHERS_WRITE">Others can write.</const>
      <const name="PASSWORD">File is password protected.</const>
      <const name="READ">User/Owner has read access.  This will not allow compiled code to be executed.</const>
      <const name="USER">Synonym for READ | WRITE | EXEC | DELETE</const>
      <const name="USERID">Allows executables to run with a set user id.</const>
      <const name="USER_EXEC">Synonym for EXEC</const>
      <const name="USER_READ">Synonym for READ</const>
      <const name="USER_WRITE">Synonym for WRITE</const>
      <const name="WRITE">User/Owner can write.</const>
    </constants>

    <constants lookup="PMF" comment="Flags for ProcessMessages">
    </constants>

    <constants lookup="RDF" comment="Flags for the OpenDir() function.">
      <const name="ARCHIVE">Feedback only - archive bit is set.</const>
      <const name="DATE">Retrieve the date stamp of each file.</const>
      <const name="FILE">Read all files in the folder.</const>
      <const name="FILES">Read all files in the folder.</const>
      <const name="FOLDER">Read all folders/volumes in the folder.</const>
      <const name="FOLDERS">Read all folders/volumes in the folder.</const>
      <const name="HIDDEN">Feedback only - file/folder is hidden.</const>
      <const name="LINK">Feedback only - file/folder is actually a link to another location.</const>
      <const name="PERMISSIONS">Get permission/security information.</const>
      <const name="QUALIFIED">Return fully qualified folder names (i.e. trailing slash or colon for each name).</const>
      <const name="QUALIFY">Return fully qualified folder names (i.e. trailing slash or colon for each name).</const>
      <const name="READ_ALL">Synonym for SIZE | DATE | PERMISSIONS | FILES | FOLDERS</const>
      <const name="READ_ONLY">Read-only (not permissions related and might indicate read-only media).</const>
      <const name="SIZE">Retrieve the byte size of each file.</const>
      <const name="STREAM">Path is connected via a stream, e.g. network connection.</const>
      <const name="TAGS">Receive additional information for each file, such as comments, author and copyright.  The results are stored in the Tags field of each file.</const>
      <const name="TIME">Retrieve the date stamp of each file.</const>
      <const name="VIRTUAL">Path is to a virtual device.</const>
      <const name="VOLUME">Feedback only - indicates a volume.</const>
    </constants>

    <constants lookup="RES">
      <const name="CORE_IDL">Refers to the Core module's compressed IDL string.</const>
      <const name="CPU_SPEED">The average top-speed of all CPU cores in Mhz.</const>
      <const name="FREE_MEMORY">The total amount of free memory.</const>
      <const name="FREE_SWAP">The total amount of free swap memory.</const>
      <const name="JNI_ENV">Return the current JNI environment string.</const>
      <const name="KEY_STATE">Maintains the state of key qualifiers such as caps-lock and the shift keys.</const>
      <const name="LOG_DEPTH">The current depth of log messages.</const>
      <const name="LOG_LEVEL">The current level of log detail (larger numbers indicate more detail).</const>
      <const name="MAX_PROCESSES">The maximum number of processes that can be supported at any time.</const>
      <const name="OPEN_INFO">Pointer to the OpenInfo structure originally used to initialise the system.</const>
      <const name="PARENT_CONTEXT">Read-only pointer to the parent object of the current context.</const>
      <const name="PRIVILEGED">This is set to TRUE if the process has elevated privileges (such as superuser or administrative rights).</const>
      <const name="PRIVILEGED_USER">If this value is set to 1, the process will operate in privileged mode (typically this enables full administrator rights).  This feature will only work for Unix processes that are granted admin rights when launched.  Setting the Value to 0 reverts to the user's permission settings.  SetResource() will return an error code indicating the level of success.</const>
      <const name="PROCESS_STATE">Life-cycle stage of the running process</const>
      <const name="STATIC_BUILD">Returns true if the runtime is a statically linked build.</const>
      <const name="THREAD_ID">Return the ID of the current thread.</const>
      <const name="TOTAL_MEMORY">The total amount of installed memory.</const>
      <const name="TOTAL_SHARED_MEMORY">The total amount of shared memory in use (system wide).</const>
      <const name="TOTAL_SWAP">The total amount of available swap space.</const>
    </constants>

    <constants lookup="RFD" comment="Flags for RegisterFD()">
      <const name="ALWAYS_CALL">Always call this FD's handler prior to the process going to sleep.</const>
      <const name="EXCEPT">Activate the callback if error conditions are pending.</const>
      <const name="READ">Activate the callback if there is data available to read.</const>
      <const name="RECALL">Set if the subscriber needs to manually check for incoming/outgoing data.  This is supported as a one-off check, so the flag will be disabled automatically when the subscriber is called.</const>
      <const name="REMOVE">Stop monitoring this file descriptor.</const>
      <const name="SOCKET">Identifies the file descriptor as a socket (Linux systems only).</const>
      <const name="WRITE">Activate the callback if there is room to write to the FD's buffer.</const>
    </constants>

    <constants lookup="RP" comment="Path types for SetResourcePath()">
      <const name="MODULE_PATH">An alternative path leading to the system modules (normally 'system:modules/').  Introduced for platforms such as Android, where modules are stored in asset folders.</const>
      <const name="ROOT_PATH">Overrides the root path, which defaults to the location at which Parasol is installed.</const>
      <const name="SYSTEM_PATH">The path of the 'system:' volume, which otherwise defaults to '[root]:system/'.</const>
    </constants>

    <constants lookup="RSF" comment="Flags for ResolvePath()">
      <const name="APPROXIMATE">Ignores file extensions for the purpose of file name matching.</const>
      <const name="CASE_SENSITIVE">For use on host systems that use case-insensitive file systems such as Windows; this option checks that the discovered file is a case-sensitive match to the Path.</const>
      <const name="CHECK_VIRTUAL">If the volume referenced by Path is traced to another volume that is reserved by a virtual file system driver, ERR::VirtualVolume is returned. The volume is still resolved as far as possible and the resulting path will be returned by this function.</const>
      <const name="NO_DEEP_SCAN">Do not perform more than one iteration when resolving the source file path.</const>
      <const name="NO_FILE_CHECK">Do not test for the existence of the targeted file or folder during the resolution process.</const>
      <const name="PATH">Use the PATH environment variable to resolve the file name in the Path parameter.</const>
    </constants>

    <constants lookup="STR">
      <const name="CASE">Perform a case-sensitive match.</const>
      <const name="MATCH_CASE">Perform a case-sensitive match.</const>
      <const name="MATCH_LEN">The strings must be of equal length to be matched.</const>
      <const name="WILDCARD">Allow the use of wildcard characters '|', '?' and '*'.</const>
    </constants>

    <constants lookup="VLF" comment="VlogF flags">
      <const name="API"/>
      <const name="BRANCH"/>
      <const name="CRITICAL"/>
      <const name="DETAIL"/>
      <const name="ERROR"/>
      <const name="FUNCTION"/>
      <const name="INFO"/>
      <const name="TRACE"/>
      <const name="WARNING"/>
    </constants>

    <constants lookup="VOLUME" comment="Options for SetVolume()">
      <const name="HIDDEN">Hides the volume so that it will not show up when reading the root folder.</const>
      <const name="PRIORITY">If the volume already exists, the path will be inserted at the beginning of the path list so that it has priority over the others.</const>
      <const name="REPLACE">If the volume already exists, all paths that are attached to it will be replaced with the new path setting.</const>
      <const name="SYSTEM">Identifies the volume as being created by the system, is immutable and persistent between sessions.</const>
    </constants>

  </types>
  <structs>
    <struct name="ActionTable" comment="Structure for ActionList">
      <field name="Hash" type="ULONG">Hash of the action name.</field>
      <field name="Size" type="LONG">Byte-size of the structure for this action.</field>
      <field name="Name" type="CSTRING">Name of the action.</field>
      <field name="Args" type="const struct FunctionField *">List of fields that are passed to this action.</field>
    </struct>

    <struct name="ChildEntry" comment="Structure for ListChildren() function">
      <field name="ObjectID" type="OBJECTID">Object ID</field>
      <field name="ClassID" type="CLASSID">The class ID of the referenced object.</field>
    </struct>

    <struct name="DirInfo" comment="Used by OpenDir() only">
      <field name="Info" type="struct FileInfo *">Pointer to a FileInfo structure</field>
    </struct>

    <struct name="Field" comment="Used to describe the public fields of a class.">
      <field name="Arg" type="MAXINT">An option to complement the field type.  Can be a pointer or an integer value</field>
      <field name="GetValue" type="FUNCTION *" prototype="ERR (*GetValue)(APTR, APTR)">A virtual function that will retrieve the value for this field.</field>
      <field name="SetValue" type="APTR">A virtual function that will set the value for this field.</field>
      <field name="WriteValue" type="FUNCTION *" prototype="ERR (*WriteValue)(OBJECTPTR, struct Field *, LONG, const void *, LONG)">An internal function for writing to this field.</field>
      <field name="Name" type="CSTRING">The English name for the field, e.g. "Width"</field>
      <field name="FieldID" type="ULONG">Provides a fast way of finding fields, e.g. FID_WIDTH</field>
      <field name="Offset" type="UWORD">Field offset within the object</field>
      <field name="Index" type="UWORD">Field array index</field>
      <field name="Flags" type="ULONG">Special flags that describe the field</field>
    </struct>

    <struct name="FileInfo" comment="Returned by GetFileInfo()">
      <field name="Size" type="LARGE">The size of the file's content.</field>
      <field name="TimeStamp" type="LARGE">64-bit time stamp - usable only for comparison (e.g. sorting).</field>
      <field name="Next" type="struct FileInfo *">Next structure in the list, or NULL.</field>
      <field name="Name" type="STRING">The name of the file.  This string remains valid until the next call to GetFileInfo().</field>
      <field name="Flags" type="RDF" lookup="RDF">Additional flags to describe the file.</field>
      <field name="Permissions" type="PERMIT" lookup="PERMIT">Standard permission flags.</field>
      <field name="UserID" type="LONG">User  ID (Unix systems only).</field>
      <field name="GroupID" type="LONG">Group ID (Unix systems only).</field>
      <field name="Created" type="struct DateTime">The date/time of the file's creation.</field>
      <field name="Modified" type="struct DateTime">The date/time of the last file modification.</field>
    </struct>

    <struct name="MemInfo" typeName="MEMINFO">
      <field name="Start" type="APTR">The starting address of the memory block (does not apply to shared blocks).</field>
      <field name="ObjectID" type="OBJECTID">The object that owns the memory block.</field>
      <field name="Size" type="ULONG">The size of the memory block.</field>
      <field name="Flags" type="MEM" lookup="MEM">The type of memory.</field>
      <field name="MemoryID" type="MEMORYID">The unique ID for this block.</field>
      <field name="AccessCount" type="WORD">Total number of active locks on this block.</field>
    </struct>

    <struct name="Message" comment="Message header.">
      <field name="Time" type="LARGE">A timestamp acquired from PreciseTime() when the message was first passed to SendMessage().</field>
      <field name="UID" type="LONG">A unique identifier automatically created by SendMessage().</field>
      <field name="Type" type="LONG">A message type identifier as defined by the client.</field>
      <field name="Size" type="LONG">The size of the message data, in bytes.  If there is no data associated with the message, the Size will be set to zero.&lt;/&gt;</field>
    </struct>

    <struct name="ObjectSignal" comment="Required in calls to WaitForObjects().">
      <field name="Object" type="OBJECTPTR"></field>
    </struct>

    <struct name="SystemState" comment="Returned by the GetSystemState() function.">
      <field name="Platform" type="CSTRING">String-based field indicating the user's platform.  Currently returns 'Native', 'Windows', 'OSX' or 'Linux'.</field>
      <field name="ConsoleFD" type="HOSTHANDLE">Internal</field>
      <field name="Stage" type="LONG">The current operating stage.  -1 = Initialising, 0 indicates normal operating status; 1 means that the program is shutting down; 2 indicates a program restart; 3 is for mode switches.</field>
    </struct>

    <struct name="pfBase64Decode" comment="Private structure for the Base64Decode() function." typeName="BASE64DECODE">
      <field name="Step" type="UBYTE">Internal</field>
      <field name="PlainChar" type="UBYTE">Internal</field>
      <field name="Initialised" type="UBYTE">Internal</field>
    </struct>

    <struct name="pfBase64Encode" comment="Private structure for the Base64Encode() function." typeName="BASE64ENCODE">
      <field name="Step" type="UBYTE">Internal</field>
      <field name="Result" type="UBYTE">Internal</field>
      <field name="StepCount" type="LONG">Internal</field>
    </struct>

  </structs>
</book>
