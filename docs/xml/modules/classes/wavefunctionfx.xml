<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>WaveFunctionFX</name>
    <type>class</type>
    <module>Vector</module>
    <comment>A filter effect that plots the probability distribution of a quantum wave function.</comment>
    <version>1</version>
    <id>1069903c</id>
    <idstring>WAVEFUNCTIONFX</idstring>
    <category>Graphics</category>
    <copyright>Paul Manias Â© 2010-2025</copyright>
    <description>
<p>This filter effect uses a quantum wave function algorithm to generate a plot of electron probability density. Ignoring its scientific value, the formula can be exploited for its aesthetic qualities.  It can be used as an alternative to the radial gradient for generating more interesting shapes for example.</p>
<p>The rendering of the wave function is controlled by its parameters <fl>N</fl>, <fl>L</fl> and <fl>M</fl>.  A <fl>Scale</fl> is also provided to deal with situations where the generated plot would otherwise be too large for its bounds.</p>
<p>The parameter values are clamped according to the rules <code>N &gt;= 1</code>, <code>0 &lt;= L &lt; N</code>, <code>0 &lt;= M &lt;= L</code>. Check that the values are assigned and clamped correctly if the wave function is not rendering as expected.</p></description>
    <source>
      <file path="filters/">filter_wavefunction.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Draw</name>
      <comment>Render the effect to the target bitmap.</comment>
      <prototype>ERR acDraw(*Object, DOUBLE X, DOUBLE Y, DOUBLE Width, DOUBLE Height)</prototype>
      <input>
        <param type="INT" name="X">The X position of the region to be drawn.</param>
        <param type="INT" name="Y">The Y position of the region to be drawn.</param>
        <param type="INT" name="Width">The width of the region to be drawn.</param>
        <param type="INT" name="Height">The height of the region to be drawn.</param>
      </input>
      <description>
<p>Note that drawing the wave function will result in the N, L and M parameters being clamped to their valid ranges and this will be reflected in the object once the method returns.</p>
      </description>
    </action>

  </actions>

  <fields>
    <field>
      <name>AspectRatio</name>
      <comment>SVG compliant aspect ratio settings.</comment>
      <access read="G" write="S">Get/Set</access>
      <type lookup="ARF">INT</type>
      <description>
<types lookup="ARF"/>
      </description>
    </field>

    <field>
      <name>ColourMap</name>
      <comment>Assigns a pre-defined colourmap to the wave function.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>An alternative to defining colour <fl>Stops</fl> in a wave function is available in the form of named colourmaps. Declaring a colourmap in this field will automatically populate the wave function's gradient with the colours defined in the map.</p>
<p>We currently support the following established colourmaps from the matplotlib and seaborn projects: <code>cmap:crest</code>, <code>cmap:flare</code>, <code>cmap:icefire</code>, <code>cmap:inferno</code>, <code>cmap:magma</code>, <code>cmap:mako</code>, <code>cmap:plasma</code>, <code>cmap:rocket</code>, <code>cmap:viridis</code>.</p>
<p>The use of colourmaps and custom stops are mutually exclusive.</p>
      </description>
    </field>

    <field>
      <name>L</name>
      <comment>Azimuthal quantum number.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>This value is clamped by <code>0 &lt;= L &lt; N</code>.</p>
      </description>
    </field>

    <field>
      <name>M</name>
      <comment>Magnetic quantum number.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>This value is clamped by <code>0 &lt;= M &lt;= L</code>.</p>
      </description>
    </field>

    <field>
      <name>N</name>
      <comment>Principal quantum number.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>This value is clamped by <code>N &gt;= 1</code>.</p>
      </description>
    </field>

    <field>
      <name>Resolution</name>
      <comment>The pixel resolution of the internally rendered wave function.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>By default the resolution of the wave function will match the smallest dimension of the filter target region, which gives the best looking result at the cost of performance.</p>
<p>Setting the Resolution field will instead fix the resolution to that size permanently, and the final result will be scaled to fit the target region.  This can give a considerable performance increase, especially when the filter is redrawn it will not be necessary to redraw the wave function if its parameters are constant.</p>
      </description>
    </field>

    <field>
      <name>Scale</name>
      <comment>Multiplier that affects the scale of the plot.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
    </field>

    <field>
      <name>Stops</name>
      <comment>Defines the colours to use for the wave function.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRUCT []</type>
      <description>
<p>The colours that will be used for drawing a wave function can be defined by the Stops array.  At least two stops are required to define a start and end point for interpolating the gradient colours.</p>
<p>If no stops are defined, the wave function will be drawn in greyscale.</p>
      </description>
    </field>

    <field>
      <name>XMLDef</name>
      <comment>Returns an SVG compliant XML string that describes the effect.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
    </field>

  </fields>
  <types>
    <constants lookup="ARF" comment="Aspect ratios control alignment, scaling and clipping.">
      <const name="MEET">Aspect ratio is preserved. The entire viewbox will be visible in the viewport.  The viewbox is scaled up as much as possible.</const>
      <const name="NONE">Scale the viewbox to match the size of the viewport.  Aspect ratio is not preserved.</const>
      <const name="SLICE">Aspect ratio is preserved. The viewbox can extend beyond the viewport's edges on one axis.  The viewbox is scaled up as much as possible.</const>
      <const name="X_MAX">Align to the right.</const>
      <const name="X_MID">Align to the horizontal center.</const>
      <const name="X_MIN">Align to the left.</const>
      <const name="Y_MAX">Align to the bottom.</const>
      <const name="Y_MID">Align to the vertical center.</const>
      <const name="Y_MIN">Align to the top.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
