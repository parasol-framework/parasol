<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>ConvolveFX</name>
    <type>class</type>
    <module>Vector</module>
    <comment>Applies a matrix convolution filter effect.</comment>
    <version>1</version>
    <id>522bdc4f</id>
    <idstring>ID_CONVOLVEFX</idstring>
    <category>Graphics</category>
    <include>modules/convolvefx.h</include>
    <copyright>Paul Manias Â© 2010-2024</copyright>
    <description>
<p>Convolve applies a matrix convolution filter effect to an input source.  A convolution combines pixels in the input image with neighbouring pixels to produce a resulting image.  A wide variety of imaging operations can be achieved through convolutions, including blurring, edge detection, sharpening, embossing and beveling.</p>
<p>A matrix convolution is based on an <code>n-by-m</code> matrix (the convolution kernel) which describes how a given pixel value in the input image is combined with its neighbouring pixel values to produce a resulting pixel value. Each result pixel is determined by applying the kernel matrix to the corresponding source pixel and its neighbouring pixels.  The basic convolution formula which is applied to each colour value for a given pixel is:</p>
<pre>COLOURX,Y = (
     SUM I=0 to [MatrixRows-1] {
       SUM J=0 to [MatrixColumns-1] {
         SOURCE X - TargetX + J, Y - TargetY + I * Matrix * MatrixColumns - J - 1,  MatrixRows - I - 1
       }
     }
   ) / Divisor + Bias * ALPHAX,Y
</pre>
<p>Note in the above formula that the values in the kernel matrix are applied such that the kernel matrix is rotated 180 degrees relative to the source and destination images in order to match convolution theory as described in many computer graphics textbooks.</p>
<p>Because they operate on pixels, matrix convolutions are inherently resolution-dependent.  To make resolution-independent results, an explicit value should be provided for either the <code>ResX</code> and <code>ResY</code> attributes on the parent <class name="VectorFilter">VectorFilter</class> and/or <fl>UnitX</fl> and <fl>UnitY</fl>.</p></description>
    <source>
      <file path="filters/">filter_convolve.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Draw</name>
      <comment>Draws object graphics to drawable areas.</comment>
    </action>

  </actions>

  <fields>
    <field>
      <name>Bias</name>
      <comment>Used to adjust the final result of each computed RGB value.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>After applying the <fl>Matrix</fl> to the input image to yield a number and applying the <fl>Divisor</fl>, the Bias value is added to each component.  One application of Bias is when it is desirable to have .5 gray value be the zero response of the filter.  The Bias value shifts the range of the filter.  This allows representation of values that would otherwise be clamped to 0 or 1.  The default is 0.</p>
      </description>
    </field>

    <field>
      <name>Divisor</name>
      <comment>Defines the divisor value in the convolution algorithm.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>After applying the <fl>Matrix</fl> to the input image to yield a number, that number is divided by <fl>Divisor</fl> to yield the final destination color value.  A divisor that is the sum of all the matrix values tends to have an evening effect on the overall color intensity of the result.  The default value is the sum of all values in <fl>Matrix</fl>, with the exception that if the sum is zero, then the divisor is set to <code>1</code>.</p>
      </description>
    </field>

    <field>
      <name>EdgeMode</name>
      <comment>Defines the behaviour of the convolve algorithm around the edges of the input image.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The EdgeMode determines how to extend the input image with color values so that the matrix operations can be applied when the <fl>Matrix</fl> is positioned at or near the edge of the input image.</p>
      </description>
    </field>

    <field>
      <name>Matrix</name>
      <comment>A list of numbers that make up the kernel matrix for the convolution.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE []</type>
      <description>
<p>A list of numbers that make up the kernel matrix for the convolution.  The number of entries in the list must equal <code>MatrixColumns * MatrixRows</code>.</p>
      </description>
    </field>

    <field>
      <name>MatrixColumns</name>
      <comment>The number of columns in the Matrix.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Indicates the number of columns represented in <fl>Matrix</fl>.  A typical value is <code>3</code>.  It is recommended that only small values are used; higher values may result in very high CPU overhead and usually do not produce results that justify the impact on performance.  The default value is <code>3</code>.</p>
      </description>
    </field>

    <field>
      <name>MatrixRows</name>
      <comment>The number of rows in the Matrix.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Indicates the number of rows represented in <fl>Matrix</fl>.  A typical value is <code>3</code>.  It is recommended that only small values are used; higher values may result in very high CPU overhead and usually do not produce results that justify the impact on performance.  The default value is 3.</p>
      </description>
    </field>

    <field>
      <name>PreserveAlpha</name>
      <comment>If TRUE, the alpha channel is protected from the effects of the convolve algorithm.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

    <field>
      <name>TargetX</name>
      <comment>The X position of the matrix in relation to the input image.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Determines the positioning in X of the convolution matrix relative to a given target pixel in the input image.  The left-most column of the matrix is column number zero.  The value must be such that <code>0 &lt;= TargetX &lt; MatrixColumns</code>.  By default, the convolution matrix is centered in X over each pixel of the input image, i.e. <code>TargetX = floor(MatrixColumns / 2)</code>.</p>
      </description>
    </field>

    <field>
      <name>TargetY</name>
      <comment>The Y position of the matrix in relation to the input image.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Determines the positioning in Y of the convolution matrix relative to a given target pixel in the input image.  The left-most column of the matrix is column number zero.  The value must be such that <code>0 &lt;= TargetY &lt; MatrixRows</code>.  By default, the convolution matrix is centered in Y over each pixel of the input image, i.e. <code>TargetY = floor(MatrixRows / 2)</code>.</p>
      </description>
    </field>

    <field>
      <name>UnitX</name>
      <comment>The distance in filter units between rows in the Matrix.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>Indicates the intended distance in current filter units (i.e. as determined by the value of PrimitiveUnits) between successive columns and rows, respectively, in the <fl>Matrix</fl>.  By specifying value(s) for <fl>UnitX</fl>, the kernel becomes defined in a scalable, abstract coordinate system.  If <fl>UnitX</fl> is not specified, the default value is one pixel in the offscreen bitmap, which is a pixel-based coordinate system, and thus potentially not scalable.  For some level of consistency across display media and user agents, it is necessary that a value be provided for at least one of ResX and <fl>UnitX</fl>.</p>
<p>The most consistent results and the fastest performance will be achieved if the pixel grid of the offscreen bitmap aligns with the pixel grid of the kernel.</p>
      </description>
    </field>

    <field>
      <name>UnitY</name>
      <comment>The distance in filter units between columns in the Matrix.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>Indicates the intended distance in current filter units (i.e. as determined by the value of PrimitiveUnits) between successive columns and rows, respectively, in the <fl>Matrix</fl>.  By specifying value(s) for <fl>UnitY</fl>, the kernel becomes defined in a scalable, abstract coordinate system.  If <fl>UnitY</fl> is not specified, the default value is one pixel in the offscreen bitmap, which is a pixel-based coordinate system, and thus potentially not scalable.  For some level of consistency across display media and user agents, it is necessary that a value be provided for at least one of ResY and <fl>UnitY</fl>.</p>
<p>The most consistent results and the fastest performance will be achieved if the pixel grid of the offscreen bitmap aligns with the pixel grid of the kernel.</p>
      </description>
    </field>

    <field>
      <name>XMLDef</name>
      <comment>Returns an SVG compliant XML string that describes the effect.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
    </field>

  </fields>
  <structs>
  </structs>
</book>
