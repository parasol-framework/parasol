<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Font</name>
    <type>class</type>
    <module>Font</module>
    <comment>Draws bitmap fonts and manages font meta information.</comment>
    <fileExtension>*.font|*.fnt|*.ttf|*.fon</fileExtension>
    <fileDescription>Font</fileDescription>
    <version>1</version>
    <id>7c96e4fc</id>
    <idstring>FONT</idstring>
    <category>Graphics</category>
    <copyright>Paul Manias Â© 1998-2024</copyright>
    <description>
<p>The Font class is provided for the purpose of bitmap font rendering and querying font meta information.  It supports styles such as bold, italic and underlined text, along with extra features such as adjustable spacing and word alignment. Fixed-point bitmap fonts are supported through the Windows .fon file format.  Truetype fonts are not supported (refer to the <class name="VectorText">VectorText</class> class for this feature).</p>
<p>Bitmap fonts must be stored in the <code>fonts:fixed/</code> directory in order to be recognised.  The process of font installation and file management is managed by functions supplied in the Font module.</p>
<p>The Font class includes full support for the unicode character set through its support for UTF-8.  This gives you the added benefit of being able to support international character sets with ease, but you must be careful not to use character codes above #127 without being sure that they follow UTF-8 guidelines.  Find out more about UTF-8 at this <a href="http://www.cl.cam.ac.uk/~mgk25/unicode.html">web page</a>.</p>
<p>Initialisation of a new font object can be as simple as declaring its <fl>Point</fl> size and <fl>Face</fl> name.  Font objects can be difficult to alter post-initialisation, so all style and graphical selections must be defined on creation.  For example, it is not possible to change styling from regular to bold format dynamically.  To support multiple styles of the same font, create a font object for every style that requires support.  Basic settings such as colour, the font string and text positioning are not affected by these limitations.</p>
<p>To draw a font string to a Bitmap object, start by setting the <fl>Bitmap</fl> and <fl>String</fl> fields.  The <fl>X</fl> and <fl>Y</fl> fields determine string positioning and you can also use the <fl>Align</fl> field to position a string to the right or center of the surface area.</p>
<p>To clarify the terminology used in this documentation, please note the definitions for the following terms:</p>
<list type="unsorted">
<li>'Point' determines the size of a font.  The value is relative only to other point sizes of the same font face, i.e. two faces at the same point size are not necessarily the same height.</li>
<li>'Height' represents the 'vertical bearing' or point of the font, expressed as a pixel value.  The height does not cover for any leading at the top of the font, or the gutter space used for the tails on characters like 'g' and 'y'.</li>
<li>'Gutter' is the amount of space that a character can descend below the base line.  Characters like 'g' and 'y' are examples of characters that utilise the gutter space.  The gutter is also sometimes known as the 'external leading' or 'descent' of a character.</li>
<li>'LineSpacing' is the recommended pixel distance between each line that is printed with the font.</li>
<li>'Glyph' refers to a single font character.</li>
</list>
<p>Please note that in the majority of cases the <class name="VectorText">VectorText</class> class should be used for drawing strings because the Font class is not integrated with the display's vector scene graph.</p></description>
    <source>
      <file>class_font.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Draw</name>
      <comment>Draws a font to a Bitmap.</comment>
      <prototype>ERR acDraw(*Object, DOUBLE X, DOUBLE Y, DOUBLE Width, DOUBLE Height)</prototype>
      <input>
        <param type="LONG" name="X">The X position of the region to be drawn.</param>
        <param type="LONG" name="Y">The Y position of the region to be drawn.</param>
        <param type="LONG" name="Width">The width of the region to be drawn.</param>
        <param type="LONG" name="Height">The height of the region to be drawn.</param>
      </input>
      <description>
<p>Draws a font to a target Bitmap, starting at the coordinates of <fl>X</fl> and <fl>Y</fl>, using the characters in the font <fl>String</fl>.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="FieldNotSet">The Bitmap and/or String field has not been set.</error>
      </result>
    </action>

  </actions>

  <fields>
    <field>
      <name>Align</name>
      <comment>Sets the position of a font string to an abstract alignment.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="ALIGN">ALIGN</type>
      <description>
<p>Use this field to set the alignment of a font string within its surface area.  This is an abstract means of positioning in comparison to setting the <fl>X</fl> and <fl>Y</fl> fields directly.</p>
<types lookup="ALIGN"/>
      </description>
    </field>

    <field>
      <name>AlignHeight</name>
      <comment>The height to use when aligning the font string.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>If the <code>VERTICAL</code> or <code>TOP</code> alignment options are used in the <fl>Align</fl> field, the AlignHeight should be set so that the alignment of the font string can be correctly calculated.  If the AlignHeight is not defined, the target <fl>Bitmap</fl>'s height will be used when computing alignment.</p>
      </description>
    </field>

    <field>
      <name>AlignWidth</name>
      <comment>The width to use when aligning the font string.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>If the <code>HORIZONTAL</code> or <code>RIGHT</code> alignment options are used in the <fl>Align</fl> field, the AlignWidth should be set so that the alignment of the font string can be correctly calculated.  If the AlignWidth is not defined, the target <fl>Bitmap</fl>'s width will be used when computing alignment.</p>
      </description>
    </field>

    <field>
      <name>Ascent</name>
      <comment>The total number of pixels above the baseline.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>The Ascent value reflects the total number of pixels above the baseline, including the <fl>Leading</fl> value.</p>
      </description>
    </field>

    <field>
      <name>Bitmap</name>
      <comment>The destination Bitmap to use when drawing a font.</comment>
      <access read="R" write="W">Read/Write</access>
      <type class="Bitmap">*Bitmap</type>
    </field>

    <field>
      <name>Bold</name>
      <comment>Set to <code>true</code> to enable bold styling.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Setting the Bold field to <code>true</code> prior to initialisation will enable bold styling.  This field is provided only for convenience - we recommend that you set the Style field for determining font styling where possible.</p>
      </description>
    </field>

    <field>
      <name>Colour</name>
      <comment>The font colour in <st>RGB8</st> format.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
    </field>

    <field>
      <name>EndX</name>
      <comment>Indicates the final horizontal coordinate after completing a draw operation.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The EndX and <fl>EndY</fl> fields reflect the final coordinate of the font <fl>String</fl>, following the most recent call to the <action>Draw</action> action.</p>
      </description>
    </field>

    <field>
      <name>EndY</name>
      <comment>Indicates the final vertical coordinate after completing a draw operation.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The <fl>EndX</fl> and EndY fields reflect the final coordinate of the font <fl>String</fl>, following the most recent call to the <action>Draw</action> action.</p>
      </description>
    </field>

    <field>
      <name>Face</name>
      <comment>The name of a font face that is to be loaded on initialisation.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>The name of an installed font face must be specified here for initialisation.  If this field is undefined then the initialisation process will use the user's preferred face.  A list of available faces can be obtained from the <function module="Font">GetList</function> function.</p>
<p>For convenience, the face string can also be extended with extra parameters so that the point size and style are defined at the same time.  Extra parameters are delimited with the colon character and must follow a set order defined as <code>face:pointsize:style:colour</code>.</p>
<p>Here are some examples:</p>
<pre>Noto Sans:12:Bold Italic:#ff0000
Courier:10.6
Charter:120%::255,128,255
</pre>
<p>Multiple font faces can be specified in CSV format, e.g. <code>Sans Serif,Noto Sans</code>, which allows the closest matching font to be selected if the first face is unavailable or unable to match the requested point size.</p>
      </description>
    </field>

    <field>
      <name>FixedWidth</name>
      <comment>Forces a fixed pixel width to use for all glyphs.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The FixedWidth value imposes a preset pixel width for all glyphs in the font.  It is important to note that if the fixed width value is less than the widest glyph, the glyphs will overlap each other.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="S">Read/Set</access>
      <type lookup="FTF">FTF</type>
      <description>
<types lookup="FTF"/>
      </description>
    </field>

    <field>
      <name>GlyphSpacing</name>
      <comment>Adjusts the amount of spacing between each character.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>DOUBLE</type>
      <description>
<p>This field adjusts the horizontal spacing between each glyph, technically known as kerning between each font character.  The value is expressed as a multiplier of the width of each character, and defaults to <code>1.0</code>.</p>
<p>Using negative values is valid, and can lead to text being printed backwards.</p>
      </description>
    </field>

    <field>
      <name>Gutter</name>
      <comment>The 'external leading' value, measured in pixels.  Applies to fixed fonts only.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>This field reflects the 'external leading' value (also known as the 'gutter'), measured in pixels.</p>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>The point size of the font, expressed in pixels.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>The point size of the font is expressed in this field as a pixel measurement.  It does not not include the leading value (refer to <fl>Ascent</fl> if leading is required).</p>
<p>The height is calculated on initialisation and can be read at any time.</p>
      </description>
    </field>

    <field>
      <name>Italic</name>
      <comment>Set to <code>true</code> to enable italic styling.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Setting the Italic field to <code>true</code> prior to initialisation will enable italic styling.  This field is provided for convenience only - we recommend that you set the <fl>Style</fl> field for determining font styling where possible.</p>
      </description>
    </field>

    <field>
      <name>Leading</name>
      <comment>'Internal leading' measured in pixels.  Applies to fixed fonts only.</comment>
      <access read="R">Read</access>
      <type>INT</type>
    </field>

    <field>
      <name>LineCount</name>
      <comment>The total number of lines in a font string.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>This field indicates the number of lines that are present in a #font's String field.  If word wrapping is enabled, this will be taken into account in the resulting figure.</p>
      </description>
    </field>

    <field>
      <name>LineSpacing</name>
      <comment>The amount of spacing between each line.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>This field defines the amount of space between each line that is printed with a font object.  It is set automatically during initialisation to reflect the recommended distance between each line.   The client can increase or decrease this value to make finer adjustments to the line spacing.  If negative, the text will be printed in a reverse vertical direction with each new line.</p>
<p>If set prior to initialisation, the value will be added to the font's normal line-spacing instead of over-riding it. For instance, setting the LineSpacing to 2 will result in an extra 2 pixels being added to the font's spacing.</p>
      </description>
    </field>

    <field>
      <name>MaxHeight</name>
      <comment>The maximum possible pixel height per character.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>This field reflects the maximum possible pixel height per character, covering the entire character set at the current point size.</p>
      </description>
    </field>

    <field>
      <name>Opacity</name>
      <comment>Determines the level of translucency applied to a font.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>This field determines the translucency level of a font graphic.  The default setting is 100%, which means that the font will not be translucent.  Any other value set here will alter the impact of a font's graphic over the destination <fl>Bitmap</fl>.  High values will retain the boldness of the font, while low values can render it close to invisible.</p>
<p>Please note that the use of translucency will always have an impact on the time it normally takes to draw a font.</p>
      </description>
    </field>

    <field>
      <name>Outline</name>
      <comment>Defines the outline colour around a font.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>An outline can be drawn around a font by setting the Outline field to an <st>RGB8</st> colour.  The outline can be turned off by writing this field with a <code>NULL</code> value or setting the alpha component to zero.  Outlining is currently supported for bitmap fonts only.</p>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>The path to a font file.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>This field can be defined prior to initialisation.  It can be used to refer to the exact location of a font data file, in opposition to the normal practice of loading fonts that are installed on the host system.</p>
<p>This feature is ideal for use when distributing custom fonts with an application.</p>
      </description>
    </field>

    <field>
      <name>Point</name>
      <comment>The point size of a font.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The point size defines the size of a font in point units, at a ratio of 1:72 DPI.</p>
<p>When setting the point size of a bitmap font, the system will try and find the closest matching value for the requested point size.  For instance, if you request a fixed font at point 11 and the closest size is point 8, the system will drop the font to point 8.</p>
      </description>
    </field>

    <field>
      <name>String</name>
      <comment>The string to use when drawing a Font.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>The String field must be defined in order to draw text with a font object.  A string must consist of a valid sequence of UTF-8 characters.  Line feeds are allowed (whenever a line feed is reached, the Draw() action will start printing on the next line).  Drawing will stop when the null termination character is reached.</p>
<p>If a string contains characters that are not supported by a font, those characters will be printed using a default character from the font.</p>
      </description>
    </field>

    <field>
      <name>Style</name>
      <comment>Determines font styling.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>The style of a font can be selected by setting the Style field.  This comes into effect only if the font actually supports the specified style as part of its graphics set.  If the style is unsupported, the regular styling of the face will be used on initialisation.</p>
<p>Bitmap fonts are a special case if a bold or italic style is selected.  In this situation the system can automatically convert the font to that style even if the correct graphics set does not exist.</p>
<p>Conventional font styles are <code>Bold</code>, <code>Bold Italic</code>, <code>Italic</code> and <code>Regular</code> (the default).</p>
      </description>
    </field>

    <field>
      <name>TabSize</name>
      <comment>Defines the tab size to use when drawing and manipulating a font string.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The TabSize value controls the interval between tabs, measured in characters.</p>
<p>The default tab size is 8 and the TabSize only comes into effect when tab characters are used in the font <fl>String</fl>.</p>
      </description>
    </field>

    <field>
      <name>Underline</name>
      <comment>Enables font underlining when set.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>RGB8</type>
      <description>
<p>To underline a font string, set the Underline field to the colour that should be used to draw the underline. Underlining can be turned off by writing this field with a <code>NULL</code> value or setting the alpha component to zero.</p>
      </description>
    </field>

    <field>
      <name>Width</name>
      <comment>Returns the pixel width of a string.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>Read this virtual field to obtain the pixel width of a font string.  You must have already set a string in the font for this to work, or a width of zero will be returned.</p>
      </description>
    </field>

    <field>
      <name>WrapEdge</name>
      <comment>Enables word wrapping at a given boundary.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>Word wrapping is enabled by setting the WrapEdge field to a value greater than zero.  Wrapping occurs whenever the right-most edge of any word in the font string extends past the coordinate indicated by the WrapEdge.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>The starting horizontal position when drawing the font string.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>When drawing font strings, the X and <fl>Y</fl> fields define the position that the string will be drawn to in the target surface.  The default coordinates are <code>(0, 0)</code>.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>The starting vertical position when drawing the font string.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>When drawing font strings, the <fl>X</fl> and Y fields define the position that the string will be drawn to in the target surface.  The default coordinates are <code>(0, 0)</code>.</p>
      </description>
    </field>

    <field>
      <name>YOffset</name>
      <comment>Additional offset value that is added to vertically aligned fonts.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>Fonts that are aligned vertically (either in the center or bottom edge of the drawing area) will have a vertical offset value.  Reading that value from this field and adding it to the Y field will give you an accurate reading of where the string will be drawn.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="ALIGN" comment="Universal values for alignment of graphics and text">
      <const name="BOTTOM">Align to bottom</const>
      <const name="CENTER">Synonym for <code>HORIZONTAL | VERTICAL</code></const>
      <const name="HORIZONTAL">Align to horizontal center</const>
      <const name="LEFT">Align to left</const>
      <const name="MIDDLE">Synonym for <code>HORIZONTAL | VERTICAL</code></const>
      <const name="RIGHT">Align to right</const>
      <const name="TOP">Align to top</const>
      <const name="VERTICAL">Align to vertical center</const>
    </constants>

    <constants lookup="FMETA" comment="Result flags for the SelectFont() function.">
      <const name="HIDDEN">The font should not appear in any named list shown to the user.</const>
      <const name="HINT_INTERNAL">The Freetype hinter should be used.</const>
      <const name="HINT_LIGHT">The light version of the Freetype hinter should be used.</const>
      <const name="HINT_NORMAL">The hinting information provided by the font should be given preference.</const>
      <const name="SCALED">The font is scalable (assume fixed otherwise).</const>
      <const name="VARIABLE">This is a scalable font featuring variable metrics.</const>
    </constants>

    <constants lookup="FTF" comment="Font flags">
      <const name="BASE_LINE">The Font's <fl>Y</fl> coordinate is the base line.</const>
      <const name="BOLD">Font is described as having a bold weight (read only).</const>
      <const name="HEAVY_LINE">Underline the font with a double-sized line, using the colour defined in <fl>Underline</fl>.</const>
      <const name="ITALIC">Font is described as using italics (read only).</const>
    </constants>

  </types>
  <structs>
    <struct name="FontList" comment="For GetList(), describes a system font.">
      <field name="Next" type="struct FontList *">Pointer to the next entry in the list.</field>
      <field name="Name" type="STRING">The name of the font face.</field>
      <field name="Alias" type="STRING">Reference to another font Name if this is an alias.</field>
      <field name="Points" type="LONG *" size="0">Pointer to an array of fixed point sizes supported by the font.</field>
      <field name="Styles" type="STRING">Supported styles are listed here in CSV format.</field>
      <field name="Axes" type="STRING">For variable fonts, lists all supported axis codes in CSV format</field>
      <field name="Scalable" type="BYTE"><code>TRUE</code> if the font is scalable.</field>
      <field name="Variable" type="BYTE"><code>TRUE</code> if the font has variable metrics.</field>
      <field name="Hinting" type="HINT" lookup="HINT">Hinting options</field>
      <field name="Hidden" type="BYTE"><code>TRUE</code> if the font should be hidden from user font lists.</field>
    </struct>

    <struct name="RGB8" comment="8-bit RGB colour value." typeName="RGB8">
      <field name="Red" type="UBYTE">Red component value</field>
      <field name="Green" type="UBYTE">Green component value</field>
      <field name="Blue" type="UBYTE">Blue component value</field>
      <field name="Alpha" type="UBYTE">Alpha component value</field>
    </struct>

  </structs>
</book>
