<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>ImageFX</name>
    <type>class</type>
    <module>Vector</module>
    <comment>Renders a bitmap image in the effect pipeline.</comment>
    <version>1</version>
    <id>9bba5446</id>
    <idstring>ID_IMAGEFX</idstring>
    <category>Graphics</category>
    <include>modules/imagefx.h</include>
    <copyright>Paul Manias Â© 2010-2025</copyright>
    <description>
<p>The ImageFX class will render a source image into a given rectangle within the current user coordinate system.  The client has the option of providing a pre-allocated <class name="Bitmap">Bitmap</class> or the path to a <class name="Picture">Picture</class> file as the source.</p>
<p>If a pre-allocated <class name="Bitmap">Bitmap</class> is to be used, it must be created under the ownership of the ImageFX object, and this must be configured prior to initialisation.  It is required that the bitmap uses 32 bits per pixel and that the alpha channel is enabled.</p>
<p>If a source picture file is referenced, it will be upscaled to meet the requirements automatically as needed.</p>
<p>Technically the ImageFX object is represented by a new viewport, the bounds of which are defined by attributes <code>X</code>, <code>Y</code>, <code>Width</code> and <code>Height</code>.  The placement and scaling of the referenced image is controlled by the <fl>AspectRatio</fl> field.</p></description>
    <source>
      <file path="filters/">filter_image.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Draw</name>
      <comment>Render the effect to the target bitmap.</comment>
      <prototype>ERR acDraw(*Object, DOUBLE X, DOUBLE Y, DOUBLE Width, DOUBLE Height)</prototype>
      <input>
        <param type="LONG" name="X">The X position of the region to be drawn.</param>
        <param type="LONG" name="Y">The Y position of the region to be drawn.</param>
        <param type="LONG" name="Width">The width of the region to be drawn.</param>
        <param type="LONG" name="Height">The height of the region to be drawn.</param>
      </input>
    </action>

  </actions>

  <fields>
    <field>
      <name>AspectRatio</name>
      <comment>SVG compliant aspect ratio settings.</comment>
      <access read="G" write="S">Get/Set</access>
      <type lookup="ARF">INT</type>
      <description>
<types lookup="ARF"/>
      </description>
    </field>

    <field>
      <name>Bitmap</name>
      <comment>The <class name="Bitmap">Bitmap</class> being used as the image source.</comment>
      <access read="G">Get</access>
      <type>OBJECTPTR</type>
      <description>
<p>Reading the Bitmap field will return the <class name="Bitmap">Bitmap</class> that is being used as the image source.  Note that if a custom Bitmap is to be used, the correct way to do this as to assign it to the ImageFX object via ownership rules.</p>
<p>If a picture image has been processed by setting the <fl>Path</fl>, the Bitmap will refer to the content that has been processed.</p>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>Path to an image file supported by the <class name="Picture">Picture</class> class.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
    </field>

    <field>
      <name>ResampleMethod</name>
      <comment>The resample algorithm to use for transforming the source image.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<types lookup="VSM"/>
      </description>
    </field>

    <field>
      <name>XMLDef</name>
      <comment>Returns an SVG compliant XML string that describes the filter.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
    </field>

  </fields>
  <types>
    <constants lookup="ARF" comment="Aspect ratios control alignment, scaling and clipping.">
      <const name="MEET">Aspect ratio is preserved. The entire viewbox will be visible in the viewport.  The viewbox is scaled up as much as possible.</const>
      <const name="NONE">Scale the viewbox to match the size of the viewport.  Aspect ratio is not preserved.</const>
      <const name="SLICE">Aspect ratio is preserved. The viewbox can extend beyond the viewport's edges on one axis.  The viewbox is scaled up as much as possible.</const>
      <const name="X_MAX">Align to the right.</const>
      <const name="X_MID">Align to the horizontal center.</const>
      <const name="X_MIN">Align to the left.</const>
      <const name="Y_MAX">Align to the bottom.</const>
      <const name="Y_MID">Align to the vertical center.</const>
      <const name="Y_MIN">Align to the top.</const>
    </constants>

    <constants lookup="VSM">
      <const name="AUTO">The default option is chosen by the system.  This will typically be <code>BILINEAR</code>, but slow machines may switch to nearest neighbour and high speed machines could use more advanced methods.</const>
      <const name="BESSEL"/>
      <const name="BICUBIC">Produces a similar result to <code>BILINEAR</code> with a marginally sharper after-effect.</const>
      <const name="BILINEAR">Bilinear is a common algorithm that produces a reasonable quality image quickly.</const>
      <const name="BLACKMAN3">Five times slower than <code>BILINEAR</code>, the final result will lack sharpness when compared to SINC3.</const>
      <const name="BLACKMAN8">15 times slower than <code>BILINEAR</code>, the final result is of excellent quality and sharpness is well balanced.</const>
      <const name="GAUSSIAN"/>
      <const name="KAISER"/>
      <const name="LANCZOS3">This well known algorithm may serve as a point of comparison for evaluating the results of other methods.  It shares characteristics with <code>SINC</code> and <code>BLACKMAN</code>.</const>
      <const name="LANCZOS8"/>
      <const name="MITCHELL"/>
      <const name="NEIGHBOUR">Nearest neighbour is the fastest sampler at the cost of poor quality.</const>
      <const name="QUADRIC"/>
      <const name="SINC3">Five times slower than <code>BILINEAR</code>, the final result is of very good quality.</const>
      <const name="SINC8">15 times slower than <code>BILINEAR</code>, the final result is of excellent quality but may be marginally over-sharpened.</const>
      <const name="SPLINE16">About half the speed of <code>BILINEAR</code>, this method produces a considerably better result.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
