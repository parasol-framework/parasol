<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>StorageDevice</name>
    <type>class</type>
    <module>Core</module>
    <comment>Queries the meta data of file system volumes.</comment>
    <version>1</version>
    <id>63e19c4a</id>
    <idstring>ID_STORAGEDEVICE</idstring>
    <category>System</category>
    <include>modules/storagedevice.h</include>
    <copyright>Paul Manias 1996-2023</copyright>
    <description>
<p>The StorageDevice class returns the meta data of file system volumes.  A reference to an existing volume is required in the <field>Volume</field> field in order to make a successful analysis.  If the volume name cannot be resolved, initialisation will fail.</p>
<p>Following initialisation, all meta fields describing the volume are readable for further information.</p></description>
    <source>
      <file path="../classes/">class_storagedevice.cpp</file>
    </source>
  </info>

  <fields>
    <field>
      <name>BytesFree</name>
      <comment>Total amount of storage space that is available, measured in bytes.</comment>
      <access read="R">Read</access>
      <type>BIGINT</type>
    </field>

    <field>
      <name>BytesUsed</name>
      <comment>Total amount of storage space in use.</comment>
      <access read="R">Read</access>
      <type>BIGINT</type>
      <description>
<p>The total amount of storage space used by the device is indicated in this field.</p>
<p>Please note that storage usage is typically measured in terms of blocks.  For instance a block size of 512 bytes will mean that this field will be a multiple of 512.  Two files of 1 byte each on such a file system would take up 1024 bytes of space and not 2.</p>
      </description>
    </field>

    <field>
      <name>DeviceFlags</name>
      <comment>These read-only flags identify the type of device and its features.</comment>
      <access read="R">Read</access>
      <type lookup="DEVICE">DEVICE</type>
      <description>
<types lookup="DEVICE"/>
      </description>
    </field>

    <field>
      <name>DeviceID</name>
      <comment>A unique ID for the mounted device (platform dependent, NULL if unavailable).</comment>
      <access read="G">Get</access>
      <type>STRING</type>
      <description>
<p>If a volume expresses a unique device identifier such as a factory serial number, it will be readable from this field.</p>
      </description>
    </field>

    <field>
      <name>DeviceSize</name>
      <comment>The storage size of the device in bytes, without accounting for the file system format.</comment>
      <access read="R">Read</access>
      <type>BIGINT</type>
      <description>
<p>This field indicates the storage size of the device.  It does not reflect the available space determined by the device's file system, which will typically be measurably smaller than this value.</p>
      </description>
    </field>

    <field>
      <name>Volume</name>
      <comment>The volume name of the device to query.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Set the Volume field prior to initialisation for that volume to be queried by the object.  The standard volume string format is 'name:', but omitting the colon or defining complete file system paths when writing this field is also acceptable.  Any characters following a colon will be stripped automatically with no ongoing functional impact.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="DEVICE">
      <const name="COMPACT_DISC">Compact disc style device</const>
      <const name="FLOPPY_DISK">Floppy disk style device</const>
      <const name="HARD_DISK">Hard disk style device</const>
      <const name="MEMORY">Device is RAM, ROM, WORM, NVRAM, flashdisk or other form of memory.  Does not guarantee a fast connection as it could be over a slow USB 1.1 connection for example</const>
      <const name="MODEM">Device is a modem.</const>
      <const name="NETWORK">Device represents a network link</const>
      <const name="PRINTER">Device is a paper-based printer.</const>
      <const name="PRINTER_3D">Device is a three dimensional printer.</const>
      <const name="READ">Device is readable</const>
      <const name="REMOVABLE">Device media is removable from the hardware</const>
      <const name="REMOVEABLE">Device media is removable from the hardware</const>
      <const name="SCANNER">Device is a two dimensional scanner.</const>
      <const name="SCANNER_3D">Device is a three dimensional scanner.</const>
      <const name="SOFTWARE">Device is virtual/software defined</const>
      <const name="TAPE">Tape/Stream style device</const>
      <const name="TEMPORARY">All storage is temporary</const>
      <const name="USB">Removable USB storage device.  May be further qualified by DEVICE_HARDDISK, DEVICE_FLOPPYDISK etc</const>
      <const name="WRITE">Device is writeable</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
