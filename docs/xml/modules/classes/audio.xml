<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Audio</name>
    <type>class</type>
    <module>Audio</module>
    <comment>Supports a machine's audio hardware and provides a client-server audio management service.</comment>
    <version>1</version>
    <id>0f1c28b7</id>
    <idstring>AUDIO</idstring>
    <category>Audio</category>
    <copyright>Paul Manias Â© 2002-2025</copyright>
    <description>
<p>The Audio class provides a comprehensive audio service that works across multiple platforms and follows a client-server design model. It serves as the foundation for all audio operations in the Parasol framework, managing hardware resources, sample mixing, and output buffering.</p>
<p>The Audio class supports 8/16/32 bit output in stereo or mono configurations, with advanced features including oversampling for enhanced quality, intelligent streaming for large samples, multiple simultaneous audio channels, and command sequencing for precise timing control. The internal floating-point mixer ensures high-quality audio processing regardless of the target hardware bit depth.</p>
<p>For straightforward audio playback requirements, we recommend using the <class name="Sound">Sound</class> class interface, which provides a simplified API whilst utilising the Audio class internally. Direct use of the Audio class is appropriate for applications requiring precise mixer control, multiple simultaneous samples, or custom audio processing workflows.</p>
<p>Note: Support for audio recording is not currently available in this implementation.</p></description>
    <source>
      <file>class_audio.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Enables access to the audio hardware and initialises the mixer.</comment>
      <prototype>ERR acActivate(*Object)</prototype>
      <description>
<p>An audio object must be activated before it can play audio samples. The activation process involves several critical steps: hardware resource acquisition, mixer buffer allocation, and platform-specific driver initialisation.</p>
<p>Activation attempts to gain exclusive or shared access to the audio hardware device. On some platforms, this may fail if another process has obtained an exclusive lock on the audio device. The specific behaviour depends on the underlying audio system (ALSA on Linux, DirectSound on Windows).</p>
<p>If activation fails, the audio object remains in an inactive state but retains its configuration. Common failure causes include hardware device unavailability, insufficient system resources, or driver compatibility issues.</p>
<p>All resources and device locks obtained during activation can be released through <action>Deactivate</action>. An inactive audio object can perform configuration operations but cannot process audio samples.</p>
      </description>
      <result>
        <error code="Okay">Hardware activation completed successfully.</error>
        <error code="Failed">Hardware device unavailable or driver initialisation failed.</error>
        <error code="AllocMemory">Failed to allocate internal mixing buffers.</error>
      </result>
    </action>

    <action>
      <name>Deactivate</name>
      <comment>Disables the audio mixer and returns device resources to the system.</comment>
      <prototype>ERR acDeactivate(*Object)</prototype>
      <description>
<p>Deactivating an audio object will switch off the mixer, clear the output buffer and return any allocated device resources back to the host system.  The audio object will remain in a suspended state until it is reactivated.</p>
      </description>
    </action>

    <action>
      <name>SaveSettings</name>
      <comment>Saves the current audio settings.</comment>
      <prototype>ERR acSaveSettings(*Object)</prototype>
    </action>

    <action>
      <name>SaveToObject</name>
      <comment>Saves the current audio settings to another object.</comment>
      <prototype>ERR acSaveToObject(*Object, OBJECTID Dest, CLASSID ClassID)</prototype>
      <input>
        <param type="OBJECTID" name="Dest">Refers to an object that will receive the encoded data.</param>
        <param type="CLASSID" name="ClassID">Can refer to a sub-class that should be used when encoding the data.</param>
      </input>
    </action>

  </actions>

  <methods>
    <method>
      <name>AddSample</name>
      <comment>Adds a new sample to an audio object for channel-based playback.</comment>
      <prototype>ERR snd::AddSample(OBJECTPTR Object, FUNCTION OnStop, SFM SampleFormat, APTR Data, INT DataSize, struct AudioLoop * Loop, INT LoopSize, INT * Result)</prototype>
      <input>
        <param type="FUNCTION" name="OnStop">This optional callback function will be called when the stream stops playing.</param>
        <param type="SFM" name="SampleFormat" lookup="SFM">Indicates the format of the sample data that you are adding.</param>
        <param type="APTR" name="Data">Points to the address of the sample data.</param>
        <param type="INT" name="DataSize">Size of the sample data, in bytes.</param>
        <param type="struct AudioLoop *" name="Loop">Optional sample loop information.</param>
        <param type="INT" name="LoopSize">Must be set to <code>sizeof(AudioLoop)</code> if <code>Loop</code> is defined.</param>
        <param type="INT *" name="Result">The resulting sample handle will be returned in this parameter.</param>
      </input>
      <description>
<p>Audio samples can be loaded into an Audio object for playback via the AddSample() or <method>AddStream</method> methods.  For small samples under 512k we recommend AddSample(), while anything larger should be supported through <method>AddStream</method>.</p>
<p>When adding a sample, it is essential to select the correct bit format for the sample data.  While it is important to differentiate between simple attributes such as 8 or 16 bit data, mono or stereo format, you should also be aware of whether or not the data is little or big endian, and if the sample data consists of signed or unsigned values.  Because of the possible variations there are a number of sample formats, as illustrated in the following table:</p>
<types lookup="SFM"/>
<p>By default, all samples are assumed to be in little endian format, as supported by Intel CPU's.  If the data is in big endian format, logical-or the SampleFormat value with <code>SFM::F_BIG_ENDIAN</code>.</p>
<p>It is also possible to supply loop information with the sample data.  This is achieved by configuring the <st>AudioLoop</st> structure:</p>
<struct lookup="AudioLoop"/>
<p>The types that can be specified in the <code>LoopMode</code> field are:</p>
<types lookup="LOOP"/>
<p>The <code>Loop1Type</code> and <code>Loop2Type</code> fields alter the style of the loop.  These can be set to the following:</p>
<types lookup="LTYPE"/>
      </description>
      <result>
        <error code="Okay">Sample successfully added to the audio system.</error>
        <error code="Args">Invalid argument values provided.</error>
        <error code="AllocMemory">Failed to allocate enough memory to hold the sample data.</error>
        <error code="NullArgs">Required parameters are null or missing.</error>
      </result>
    </method>

    <method>
      <name>AddStream</name>
      <comment>Adds a new sample-stream to an Audio object for channel-based playback.</comment>
      <prototype>ERR snd::AddStream(OBJECTPTR Object, FUNCTION Callback, FUNCTION OnStop, SFM SampleFormat, INT SampleLength, INT PlayOffset, struct AudioLoop * Loop, INT LoopSize, INT * Result)</prototype>
      <input>
        <param type="FUNCTION" name="Callback">This callback function must be able to return raw audio data for streaming.</param>
        <param type="FUNCTION" name="OnStop">This optional callback function will be called when the stream stops playing.</param>
        <param type="SFM" name="SampleFormat" lookup="SFM">Indicates the format of the sample data that you are adding.</param>
        <param type="INT" name="SampleLength">Total byte-length of the sample data that is being streamed.  May be set to zero if the length is infinite or unknown.</param>
        <param type="INT" name="PlayOffset">Offset the playing position by this byte index.</param>
        <param type="struct AudioLoop *" name="Loop">Refers to sample loop information, or <code>NULL</code> if no loop is required.</param>
        <param type="INT" name="LoopSize">Must be set to <code>sizeof(AudioLoop)</code>.</param>
        <param type="INT *" name="Result">The resulting sample handle will be returned in this parameter.</param>
      </input>
      <description>
<p>Use AddStream to load large sound samples to an Audio object, allowing it to play those samples on the client machine without over-provisioning available resources.  For small samples under 256k consider using <method>AddSample</method> instead.</p>
<p>The data source used for a stream will need to be provided by a client provided <code>Callback</code> function.  The prototype is <code>INT callback(INT SampleHandle, INT Offset, UINT8 *Buffer, INT BufferSize)</code>.</p>
<p>The <code>Offset</code> reflects the retrieval point of the decoded data and is measured in bytes.  The <code>Buffer</code> and <code>BufferSize</code> reflect the target for the decoded data.  The function must return the total number of bytes that were written to the <code>Buffer</code>. If an error occurs, return zero.</p>
<p>When creating a new stream, pay attention to the audio format that is being used for the sample data. It is important to differentiate between 8-bit, 16-bit, mono and stereo, but also be aware of whether or not the data is little or big endian, and if the sample data consists of signed or unsigned values.  Because of the possible variations there are a number of sample formats, as illustrated in the following table:</p>
<types lookup="SFM"/>
<p>By default, all samples are assumed to be in little endian format, as supported by Intel CPU's.  If the data is in big endian format, logical-or the <code>SampleFormat</code> value with the flag <code>SFM::F_BIG_ENDIAN</code>.</p>
<p>It is also possible to supply loop information with the stream.  The Audio class supports a number of different looping formats via the <st>AudioLoop</st> structure:</p>
<struct lookup="AudioLoop"/>
<p>There are three types of loop modes that can be specified in the <code>LoopMode</code> field:</p>
<types lookup="LOOP"/>
<p>The <code>Loop1Type</code> and <code>Loop2Type</code> fields normally determine the style of the loop, however only unidirectional looping is currently supported for streams.  For that reason, set the type variables to either <code>LTYPE::NIL</code> or <code>LTYPE::UNIDIRECTIONAL</code>.</p>
      </description>
      <result>
        <error code="Okay">Stream successfully configured and added to the audio system.</error>
        <error code="Args">Invalid argument values provided.</error>
        <error code="AllocMemory">Failed to allocate the stream buffer.</error>
        <error code="NullArgs">Required parameters are null or missing.</error>
      </result>
    </method>

    <method>
      <name>Beep</name>
      <comment>Generates system alert tones through the platform's audio notification system.</comment>
      <prototype>ERR snd::Beep(OBJECTPTR Object, INT Pitch, INT Duration, INT Volume)</prototype>
      <input>
        <param type="INT" name="Pitch">The pitch of the beep in HZ.</param>
        <param type="INT" name="Duration">The duration of the beep in milliseconds.</param>
        <param type="INT" name="Volume">The volume of the beep, from 0 to 100.</param>
      </input>
      <description>
<p>Use Beep to emit a tone from the platform's audio notification system, typically through the PC speaker or other system-level audio devices. This method is useful for generating simple alert sounds or notifications without requiring a full audio sample or stream.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="NoSupport">PC speaker support is not available.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>CloseChannels</name>
      <comment>Frees audio channels that have been allocated for sample playback.</comment>
      <prototype>ERR snd::CloseChannels(OBJECTPTR Object, INT Handle)</prototype>
      <input>
        <param type="INT" name="Handle">Must refer to a channel handle returned from the <method>OpenChannels</method> method.</param>
      </input>
      <description>
<p>Use CloseChannels to destroy a group of channels that have previously been allocated through the <method>OpenChannels</method> method.  Any audio commands buffered against the channels will be cleared instantly.  Any audio data that has already been mixed into the output buffer can continue to play for 1 - 2 seconds.  If this is an issue then the volume should be muted at the same time.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>OpenChannels</name>
      <comment>Allocates audio channels that can be used for sample playback.</comment>
      <prototype>ERR snd::OpenChannels(OBJECTPTR Object, INT Total, INT * Result)</prototype>
      <input>
        <param type="INT" name="Total">Total of channels to allocate.</param>
        <param type="INT *" name="Result">The resulting channel handle is returned in this parameter.</param>
      </input>
      <description>
<p>Use the OpenChannels method to open audio channels for sample playback.  Channels are allocated in sets with a size range between 1 and 64.  Channel sets make it easier to segregate playback between users of the same audio object.</p>
<p>The resulting handle returned from this method is an integer consisting of two parts.  The upper word uniquely identifies the channel set that has been provided to you, while the lower word is used to refer to specific channel numbers.  If referring to a specific channel is required for a function, use the formula <code>Channel = Handle | ChannelNo</code>.</p>
<p>To destroy allocated channels, use the <method>CloseChannels</method> method.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="OutOfRange">The amount of requested channels or commands is outside of acceptable range.</error>
        <error code="AllocMemory">Memory for the audio channels could not be allocated.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>RemoveSample</name>
      <comment>Removes a sample from the global sample list and deallocates its resources.</comment>
      <prototype>ERR snd::RemoveSample(OBJECTPTR Object, INT Handle)</prototype>
      <input>
        <param type="INT" name="Handle">The handle of the sample that requires removal.</param>
      </input>
      <description>
<p>Remove an allocated sample by calling the RemoveSample method.  Removed samples are permanently deleted from the audio server and it is not possible to reallocate the sample against the same <code>Handle</code> value.</p>
<p>Sample handles can be reused by the API after being removed.  Clearing references to stale sample handles on the client side is recommended.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="OutOfRange">The provided sample handle is not within the valid range.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>SetSampleLength</name>
      <comment>Sets the byte length of a streaming sample.</comment>
      <prototype>ERR snd::SetSampleLength(OBJECTPTR Object, INT Sample, INT64 Length)</prototype>
      <input>
        <param type="INT" name="Sample">A sample handle from AddStream().</param>
        <param type="INT64" name="Length">Byte length of the sample stream.</param>
      </input>
      <description>
<p>This function will update the byte length of a streaming <code>Sample</code>.  Although it is possible to manually stop a stream at any point, setting the length is a preferable means to stop playback as it ensures complete accuracy when a sample's output is buffered.</p>
<p>Setting a <code>Length</code> of <code>-1</code> indicates that the stream should be played indefinitely.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Failed">Sample is not a stream.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>SetVolume</name>
      <comment>Sets the volume for input and output mixers.</comment>
      <prototype>ERR snd::SetVolume(OBJECTPTR Object, INT Index, CSTRING Name, SVF Flags, INT Channel, DOUBLE Volume)</prototype>
      <input>
        <param type="INT" name="Index">The index of the mixer that you want to set.</param>
        <param type="CSTRING" name="Name">If the correct index number is unknown, the name of the mixer may be set here.</param>
        <param type="SVF" name="Flags" lookup="SVF">Optional flags.</param>
        <param type="INT" name="Channel">A specific channel to modify (e.g. <code>0</code> for left, <code>1</code> for right).  If <code>-1</code>, all channels are affected.</param>
        <param type="DOUBLE" name="Volume">The volume to set for the mixer, from 0 to 1.0.  If <code>-1</code>, the current volume values are retained.</param>
      </input>
      <description>
<p>To change volume and mixer levels, use the SetVolume method.  It is possible to make adjustments to any of the available mixers and for different channels per mixer - for instance you may set different volumes for left and right speakers.  Support is also provided for special options such as muting.</p>
<p>To set the volume for a mixer, use its index or set its name (to change the master volume, use a name of <code>Master</code>).</p>
<p>A target <code>Channel</code> such as the left <code>0</code> or right <code>1</code> speaker can be specified.  Set the <code>Channel</code> to <code>-1</code> if all channels should be the same value.</p>
<p>The new mixer value is set in the <code>Volume</code> field.</p>
<p>Optional flags may be set as follows:</p>
<types lookup="SVF"/>
      </description>
      <result>
        <error code="Okay">The new volume was applied successfully.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="OutOfRange">The <code>Volume</code> or <code>Index</code> is out of the acceptable range.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>BitDepth</name>
      <comment>The bit depth affects the overall quality of audio input and output.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>This field manages the bit depth for audio mixing and output.  Valid bit depths are <code>8</code>, <code>16</code> and <code>24</code>, with <code>16</code> being the recommended value for CD quality playback.</p>
      </description>
    </field>

    <field>
      <name>Device</name>
      <comment>The name of the audio device used by this audio object.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>A host platform may have multiple audio devices installed, but a given audio object can represent only one device at a time.  A new audio object will always represent the default device initially.  Choose a different device by setting the <code>Device</code> field to a valid alternative.</p>
<p>The default device can always be referenced with a name of <code>default</code>.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Special audio flags can be set here.</comment>
      <access read="R" write="I">Read/Init</access>
      <type lookup="ADF">ADF</type>
      <description>
<p>The audio class supports a number of special flags that affect internal behaviour.  The following table illustrates the publicly available flags:</p>
<types lookup="ADF"/>
      </description>
    </field>

    <field>
      <name>InputRate</name>
      <comment>Determines the frequency to use when recording audio data.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>The InputRate determines the frequency to use when recording audio data from a Line-In connection or microphone.  In most cases, this value should be set to <code>44100</code> for CD quality audio.</p>
<p>The InputRate can only be set prior to initialisation, further attempts to set the field will be ignored.  On some platforms, it may not be possible to set an InputRate that is different to the <fl>OutputRate</fl>.  In such a case, the value of the InputRate shall be ignored.</p>
      </description>
    </field>

    <field>
      <name>MasterVolume</name>
      <comment>The master volume to use for audio playback.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The MasterVolume field controls the amount of volume applied to all of the audio channels.  Volume is expressed as a value between <code>0</code> and <code>1.0</code>.</p>
      </description>
    </field>

    <field>
      <name>MixerLag</name>
      <comment>Returns the lag time of the internal mixer, measured in seconds.</comment>
      <access read="G">Get</access>
      <type>DOUBLE</type>
      <description>
<p>This field will return the worst-case value for latency imposed by the internal audio mixer.  The value is measured in seconds and will differ between platforms and user configurations.</p>
      </description>
    </field>

    <field>
      <name>Mute</name>
      <comment>Mutes all audio output.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Audio output can be muted at any time by setting this value to <code>true</code>.  To restart audio output after muting, set the field to <code>false</code>.  Muting does not disable the audio system, which is achieved by calling <action>Deactivate</action>.</p>
      </description>
    </field>

    <field>
      <name>OutputRate</name>
      <comment>Determines the frequency to use for the output of audio data.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>The OutputRate determines the frequency of the audio data that will be output to the audio speakers.  In most cases, this value should be set to <code>44100</code> for CD quality audio.</p>
<p>The OutputRate can only be set prior to initialisation, further attempts to set the field will be ignored.</p>
      </description>
    </field>

    <field>
      <name>PeriodSize</name>
      <comment>Defines the byte size of each period allocated to the internal audio buffer.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>The PeriodSize field determines the granularity of audio buffer management, affecting system responsiveness, processing efficiency, and overall audio quality. This setting works in conjunction with the <fl>Periods</fl> field to define the complete buffering architecture.</p>
<list type="bullet">
<li>
<b>Minimum</b>: 1024 bytes (1KB) - Enables very low latency but requires high-performance processing.</li>
<li>
<b>Maximum</b>: 16384 bytes (16KB) - Provides maximum buffering and processing time per period.</li>
<li>
<b>Recommended</b>: 2048 bytes (2KB) - Optimal balance for most applications and hardware configurations.</li>
</list>
<p>Period latency (in seconds) = <code>PeriodSize Ã· (SampleRate Ã Channels Ã BytesPerSample)</code></p>
<p>For example, with a 2048-byte period at 44100Hz stereo 16-bit <code>Latency = 2048 Ã· (44100 Ã 2 Ã 2) = 11.6ms per period</code></p>
<p>The combination of PeriodSize and <fl>Periods</fl> creates a multi-stage buffering system where audio data flows through sequential periods, providing time for processing whilst maintaining continuous playback.</p>
<header>Application Guidelines</header>
<list type="bullet">
<li>
<b>Real-time applications</b>: Use smaller periods (1-2KB) with fewer periods for minimal latency.</li>
<li>
<b>General applications</b>: Use medium periods (2-4KB) with 4 periods for reliable performance.</li>
<li>
<b>Background audio</b>: Use larger periods (8-16KB) with more periods for maximum efficiency.</li>
</list>
      </description>
    </field>

    <field>
      <name>Periods</name>
      <comment>Defines the number of periods that make up the internal audio buffer.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>The Periods field controls the segmentation of the internal audio buffer, directly affecting latency, performance, and audio continuity. This setting is particularly relevant for ALSA-based systems where period-based buffering is fundamental to audio driver operation.</p>
<p>The total audio buffer is divided into discrete periods, each representing a contiguous block of audio data. The audio system processes data period by period, allowing for predictable latency characteristics and efficient interrupt handling.</p>
<list type="bullet">
<li>
<b>Minimum</b>: 2 periods (provides double-buffering for basic audio continuity)</li>
<li>
<b>Maximum</b>: 16 periods (enables extensive buffering for demanding applications)</li>
<li>
<b>Recommended</b>: 4 periods (balances latency and reliability for most use cases)</li>
</list>
<p>Fewer periods reduce overall system latency but increase the risk of audio dropouts if processing cannot keep pace with audio consumption. More periods provide greater buffering security at the cost of increased latency.</p>
      </description>
    </field>

    <field>
      <name>Quality</name>
      <comment>Determines the quality of the audio mixing.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>INT</type>
      <description>
<p>The Quality field controls the precision and filtering applied during audio mixing operations. This setting automatically configures multiple internal processing parameters to balance audio fidelity against computational overhead.</p>
<p>The value range spans from 0 (minimal processing) to 100 (maximum fidelity), with recommended settings between 70-80 for most applications. This range provides an optimal balance between audio clarity and system performance.</p>
<p>Setting the Quality value automatically adjusts the following processing flags:</p>
<list type="bullet">
<li>
<b>Quality 0-9</b>: Minimal processing, no filtering or oversampling applied.</li>
<li>
<b>Quality 10-32</b>: Enables <code>ADF::FILTER_LOW</code> for basic output filtering.</li>
<li>
<b>Quality 33-65</b>: Activates <code>ADF::FILTER_HIGH</code> for enhanced frequency response.</li>
<li>
<b>Quality 66-100</b>: Implements <code>ADF::OVER_SAMPLING</code> and <code>ADF::FILTER_HIGH</code> for maximum fidelity.</li>
</list>
      </description>
    </field>

    <field>
      <name>Stereo</name>
      <comment>Set to <code>true</code> for stereo output and <code>false</code> for mono output.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
    </field>

  </fields>
  <types>
    <constants lookup="ADF" comment="Optional flags for the Audio object.">
      <const name="AUTO_SAVE">Save configuration information on exit.</const>
      <const name="FILTER_HIGH">Enable a high level of output filtering to minimise distortion.</const>
      <const name="FILTER_LOW">Enable a low level of output filtering to minimise distortion.</const>
      <const name="OVER_SAMPLING">Enables oversampling for higher quality audio at the cost of slower mixing.</const>
      <const name="STEREO">Enable stereo output (set by default if the platform supports stereo).  If not set, output is in mono.</const>
      <const name="SYSTEM_WIDE">Mixer changes should be applied system-wide.</const>
      <const name="VOL_RAMPING">Enable volume ramping for softer playback when a sample is played multiple times (enabled by default).</const>
    </constants>

    <constants lookup="LOOP" comment="Loop modes for the AudioLoop structure.">
      <const name="AMIGA">Single loop: Amiga style.</const>
      <const name="AMIGA_NONE">Amiga loop: Do nothing.</const>
      <const name="DOUBLE">Double loop: When the note is released, playing shifts to the second loop.</const>
      <const name="SINGLE">Single loop: Releasing will end the note.</const>
      <const name="SINGLE_RELEASE">Single loop: Sample data after the loop will be played when the note is released.</const>
    </constants>

    <constants lookup="LTYPE" comment="Loop types for the AudioLoop structure.">
      <const name="BIDIRECTIONAL">The sample will play in reverse whenever it hits the end marker, then forwards when it hits the start marker.</const>
      <const name="UNIDIRECTIONAL">The sample playback position returns to the byte position specified in the Loop1Start field.</const>
    </constants>

    <constants lookup="SFM" comment="These audio bit formats are supported by AddSample and AddStream.">
      <const name="F_BIG_ENDIAN">Combine this flag with any audio format to declare it as big endian.</const>
      <const name="S16_BIT_MONO">16-bit mono signed sample.</const>
      <const name="S16_BIT_STEREO">16-bit stereo signed sample.</const>
      <const name="U8_BIT_MONO">8-bit mono unsigned sample.</const>
      <const name="U8_BIT_STEREO">8-bit stereo unsigned sample.</const>
    </constants>

    <constants lookup="SVF" comment="Flags for the SetVolume() method.">
      <const name="CAPTURE">Set input, not output.</const>
      <const name="MUTE">Mute the audio for this channel.</const>
      <const name="UNMUTE">Unmute the audio for this channel.</const>
    </constants>

  </types>
  <structs>
    <struct name="AudioLoop" comment="Loop settings for the AddSample() method.">
      <field name="LoopMode" type="LOOP" lookup="LOOP">Loop mode (single, double)</field>
      <field name="Loop1Type" type="LTYPE" lookup="LTYPE">First loop type (unidirectional, bidirectional)</field>
      <field name="Loop2Type" type="LTYPE" lookup="LTYPE">Second loop type (unidirectional, bidirectional)</field>
      <field name="Loop1Start" type="INT">Start of the first loop</field>
      <field name="Loop1End" type="INT">End of the first loop</field>
      <field name="Loop2Start" type="INT">Start of the second loop</field>
      <field name="Loop2End" type="INT">End of the second loop</field>
    </struct>

  </structs>
</book>
