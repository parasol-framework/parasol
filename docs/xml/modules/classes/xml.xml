<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>XML</name>
    <type>class</type>
    <module>XML</module>
    <comment>Provides XML data management services.</comment>
    <fileExtension>*.xml</fileExtension>
    <fileDescription>Extendable Markup Language (XML)</fileDescription>
    <version>1</version>
    <id>0b88bfd6</id>
    <idstring>XML</idstring>
    <category>Data</category>
    <copyright>Paul Manias Â© 2001-2025</copyright>
    <description>
<p>The XML class provides functionality to create and maintain XML data files.  It is capable of parsing and validating XML files with or without correct structure, and can perform optional parsing behaviours such as stripping comments during processing.</p>
<p>Data can be loaded into an XML object either by specifying a file <fl>Path</fl> or by giving it an XML <fl>Statement</fl>.  If multiple XML statements need to be processed then reset the Path or Statement field after initialisation and the XML object will rebuild itself.  This saves on allocating multiple XML objects for batch processing.</p>
<p>Successfully processed data can be read back by scanning the array referenced in the <fl>Tags</fl> field.  The array contains an <st>XMLTag</st> structure for each tag parsed from the original XML statement.  For more information on how to scan this information, refer to the <fl>Tags</fl> field.  C++ developers are recommended to interact with <fl>Tags</fl> directly, which is represented as <code>pf::vector&lt;XMLTag&gt;</code>.  Note that adding new Tags is a volatile action that can destabilise the object (taking a complete copy of the tags may be warranted instead).</p></description>
    <source>
      <file>xml.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Clear</name>
      <comment>Clears all of the data held in an XML object.</comment>
      <prototype>ERR acClear(*Object)</prototype>
    </action>

    <action>
      <name>GetKey</name>
      <comment>Retrieves data from an xml object.</comment>
      <prototype>ERR acGetKey(*Object, CSTRING Key, STRING Value, INT Size)</prototype>
      <input>
        <param type="CSTRING" name="Key">The name of a key value.</param>
        <param type="STRING" name="Value">Pointer to a buffer space large enough to hold the retrieved value.</param>
        <param type="INT" name="Size">Indicates the byte size of the Buffer.</param>
      </input>
      <description>
<p>The XML class uses key-values for the execution of XPath queries.  Documentation of the XPath standard is out of the scope for this document, however the following examples illustrate the majority of uses for this query language and a number of special instructions that we support:</p>
<types type="Path">
<type name="/menu/submenu">Return the content of the submenu tag whose parent is the first menu.</type>
<type name="xpath:/menu[2]/submenu">Return the content of the submenu tag whose parent is the third menu.</type>
<type name="count:/menu">Return a count of all menu tags at the root level.</type>
<type name="xml:/menu/window/@title">Return the value of the title attribute from the window tag.</type>
<type name="content:/menu/window(@title='foo')">Return the content of the window tag which has title <code>foo</code>.</type>
<type name="extract:/menu/window(@title='bar')">Extract all XML from the window tag which has title <code>bar</code>.</type>
<type name="extract:/menu//window(=apple)">Extract all XML from the first window tag found anywhere inside <code>&lt;menu&gt;</code> that contains content <code>apple</code>.</type>
<type name="exists:/menu/@title">Return <code>1</code> if a menu with a title attribute can be matched, otherwise <code>0</code>.</type>
<type name="contentexists:/menu">Return <code>1</code> if if the immediate child tags of the XPath contain text (white space is ignored).</type>
<type name="//window">Return content of the first window discovered at any branch of the XML tree (double-slash enables flat scanning of the XML tree).</type>
</types>
<p>The <code>xpath</code>, <code>xml</code> and <code>/</code> prefixes are all identical in identifying the start of an xpath.  The <code>content</code> prefix is used to specifically extract the content of the tag that matches the xpath.  Square brackets and round brackets may be used interchangeably for lookups and filtering clauses.</p>
      </description>
    </action>

    <action>
      <name>Reset</name>
      <comment>Clears the information held in an XML object.</comment>
      <prototype>ERR acRefresh(*Object)</prototype>
    </action>

    <action>
      <name>SaveToObject</name>
      <comment>Saves XML data to a storage object (e.g. <class name="File">File</class>).</comment>
      <prototype>ERR acSaveToObject(*Object, OBJECTID Dest, CLASSID ClassID)</prototype>
      <input>
        <param type="OBJECTID" name="Dest">Refers to an object that will receive the encoded data.</param>
        <param type="CLASSID" name="ClassID">Can refer to a sub-class that should be used when encoding the data.</param>
      </input>
    </action>

    <action>
      <name>SetKey</name>
      <comment>Sets attributes and content in the XML tree using XPaths.</comment>
      <prototype>ERR acSetKey(*Object, CSTRING Key, CSTRING Value)</prototype>
      <input>
        <param type="CSTRING" name="Key">The name of the target key.</param>
        <param type="CSTRING" name="Value">The string value to associate with Key.</param>
      </input>
      <description>
<p>Use SetKey to add tag attributes and content using XPaths.  The XPath is specified in the <code>Key</code> parameter and the data is specified in the <code>Value</code> parameter.  Setting the Value to <code>NULL</code> will remove the attribute or existing content, while an empty string will keep an attribute but eliminate any associated data.</p>
<p>It is not possible to add new tags using this action - it is only possible to update existing tags.</p>
<p>Please note that making changes to the XML tree will render all previously obtained tag pointers and indexes invalid.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Search">Failed to find the tag referenced by the XPath.</error>
        <error code="ReadOnly">Changes to the XML structure are not permitted.</error>
      </result>
    </action>

  </actions>

  <methods>
    <method>
      <name>Count</name>
      <comment>Count all tags that match a given XPath.</comment>
      <prototype>ERR xml::Count(OBJECTPTR Object, CSTRING XPath, INT * Result)</prototype>
      <input>
        <param type="CSTRING" name="XPath">The XPath on which to perform the count.</param>
        <param type="INT *" name="Result">The total number of matching tags is returned here.</param>
      </input>
      <description>
<p>This method will count all tags that match a given <code>XPath</code> and return the value in the <code>Result</code> parameter.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>Filter</name>
      <comment>Filters the XML data down to a single tag and its children.</comment>
      <prototype>ERR xml::Filter(OBJECTPTR Object, CSTRING XPath)</prototype>
      <input>
        <param type="CSTRING" name="XPath">Refers to a valid XPath string.</param>
      </input>
      <description>
<p>The Filter() method is used to reduce the amount of data in an XML tree, filtering out all data exclusive to the targeted tag and its children.  This is useful for speeding up XPath queries where interest is limited to only one area of the XML tree, or for reducing the memory footprint of large trees.</p>
<p>Data that has been filtered out by this method is permanently removed.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Search">A matching tag could not be found.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>FindTag</name>
      <comment>Searches for a tag via XPath.</comment>
      <prototype>ERR xml::FindTag(OBJECTPTR Object, CSTRING XPath, FUNCTION * Callback, INT * Result)</prototype>
      <input>
        <param type="CSTRING" name="XPath">An XPath string.</param>
        <param type="FUNCTION *" name="Callback">Optional reference to a function that should be called for each matching tag.</param>
        <param type="INT *" name="Result">The index of the first matching tag is returned in this parameter (not valid if a <code>Callback</code> is defined).</param>
      </input>
      <description>
<p>This method will return the first tag that matches the search string specified in <code>XPath</code>.  Optionally, if the <code>XPath</code> uses wildcards or would match multiple tags, a <code>Callback</code> function may be passed that will be called for each matching tag that is discovered.  The prototype for the callback function is <code>ERR Function(*XML, XMLTag &amp;Tag, CSTRING Attrib)</code>.</p>
<p>The <code>Callback</code> routine can terminate the search early by returning <code>ERR::Terminate</code>.  All other error codes are ignored.</p>
      </description>
      <result>
        <error code="Okay">A matching tag was found.</error>
        <error code="Search">A matching tag could not be found.</error>
        <error code="NoData">No data is available for use.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>GetAttrib</name>
      <comment>Retrieves the value of an XML attribute.</comment>
      <prototype>ERR xml::GetAttrib(OBJECTPTR Object, INT Index, CSTRING Attrib, CSTRING * Value)</prototype>
      <input>
        <param type="INT" name="Index">The index of the XML tag to search.</param>
        <param type="CSTRING" name="Attrib">The name of the attribute to search for (case insensitive).  If <code>NULL</code> or an empty string, the tag name is returned as the result.</param>
        <param type="CSTRING *" name="Value">The value of the attribute is returned here, or <code>NULL</code> if the named <code>Attrib</code> does not exist.</param>
      </input>
      <description>
<p>The GetAttrib method scans a tag for a specific attribute and returns it. A tag <code>Index</code> and name of the required <code>Attrib</code> must be specified.  If found, the attribute value is returned in the <code>Value</code> parameter.</p>
<p>It is recommended that C/C++ programs bypass this method and access the <st>XMLAttrib</st> structure directly.</p>
      </description>
      <result>
        <error code="Okay">The attribute was found.</error>
        <error code="NotFound">The <code>Attrib</code> name was not found.</error>
        <error code="Args">The required arguments were not specified.</error>
      </result>
    </method>

    <method>
      <name>GetContent</name>
      <comment>Extracts the content of an XML tag.</comment>
      <prototype>ERR xml::GetContent(OBJECTPTR Object, INT Index, STRING Buffer, INT Length)</prototype>
      <input>
        <param type="INT" name="Index">Index of a tag that contains content.</param>
        <param type="STRING" name="Buffer">Pointer to a buffer that will receive the string data.</param>
        <param type="INT" name="Length">The length of the <code>Buffer</code> in bytes.</param>
      </input>
      <description>
<p>The GetContent method is used to extract the string content from an XML tag.  It will extract content that is immediately embedded within the XML tag and will not perform deep analysis of the tag structure (refer to <method>Serialise</method> for deep extraction).  Consider the following structure:</p>
<pre>&lt;body&gt;
  Hello
  &lt;bold&gt;my&lt;/bold&gt;
  friend!
&lt;/body&gt;
</pre>
<p>This will produce the result <code>Hello friend!</code> and omit everything encapsulated within the bold tag.</p>
      </description>
      <result>
        <error code="Okay">The content string was successfully extracted.</error>
        <error code="NotFound">The tag identified by <code>Index</code> was not found.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="BufferOverflow">The <code>Buffer</code> was not large enough to hold the content (the resulting string will be valid but truncated).</error>
      </result>
    </method>

    <method>
      <name>GetTag</name>
      <comment>Returns a pointer to the <st>XMLTag</st> structure for a given tag index.</comment>
      <prototype>ERR xml::GetTag(OBJECTPTR Object, INT Index, struct XMLTag ** Result)</prototype>
      <input>
        <param type="INT" name="Index">The index of the tag that is being retrieved.</param>
        <param type="struct XMLTag **" name="Result">The <st>XMLTag</st> is returned in this parameter.</param>
      </input>
      <description>
<p>This method will return the <st>XMLTag</st> structure for a given tag <code>Index</code>.  The <code>Index</code> is checked to ensure it is valid prior to retrieval, and an <code>ERR::OutOfRange</code> error will be returned if it is invalid.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="NotFound">The Index is not recognised.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>InsertContent</name>
      <comment>Inserts XML content into the XML tree.</comment>
      <prototype>ERR xml::InsertContent(OBJECTPTR Object, INT Index, XMI Where, CSTRING Content, INT * Result)</prototype>
      <input>
        <param type="INT" name="Index">Identifies the target XML tag.</param>
        <param type="XMI" name="Where" lookup="XMI">Use <code>PREV</code> or <code>NEXT</code> to insert behind or ahead of the target tag.  Use <code>CHILD</code> for a child insert.</param>
        <param type="CSTRING" name="Content">The content to insert.</param>
        <param type="INT *" name="Result">The index of the new tag is returned here.</param>
      </input>
      <description>
<p>The InsertContent method will insert content strings into any position within the XML tree.  A content string must be provided in the <code>Content</code> parameter and the target insertion point is specified in the <code>Index</code> parameter. An insertion point relative to the target index must be specified in the <code>Where</code> parameter.  The new tags can be inserted as a child of the target by using a <code>Where</code> value of <code>XMI::CHILD</code>.  To insert behind or after the target, use <code>XMI::PREV</code> or <code>XMI::NEXT</code>.</p>
<p>To modify existing content, call <method>SetAttrib</method> instead.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="ReadOnly">A delete or write operation failed due to read-only status.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>InsertXML</name>
      <comment>Parse an XML string and insert it in the XML tree.</comment>
      <prototype>ERR xml::InsertXML(OBJECTPTR Object, INT Index, XMI Where, CSTRING XML, INT * Result)</prototype>
      <input>
        <param type="INT" name="Index">The new data will target the tag specified here.</param>
        <param type="XMI" name="Where" lookup="XMI">Use <code>PREV</code> or <code>NEXT</code> to insert behind or ahead of the target tag.  Use <code>CHILD</code> or <code>CHILD_END</code> for a child insert.</param>
        <param type="CSTRING" name="XML">An XML statement to parse.</param>
        <param type="INT *" name="Result">The resulting tag index.</param>
      </input>
      <description>
<p>The InsertXML() method is used to translate and insert a new set of XML tags into any position within the XML tree.  A standard XML statement must be provided in the XML parameter and the target insertion point is specified in the Index parameter.  An insertion point relative to the target index must be specified in the <code>Where</code> parameter.  The new tags can be inserted as a child of the target by using a <code>Where</code> value of <code>XMI::CHILD</code>.  Use <code>XMI::CHILD_END</code> to insert at the end of the child list.  To insert behind or after the target, use <code>XMI::PREV</code> or <code>XMI::NEXT</code>.</p>
      </description>
      <result>
        <error code="Okay">The statement was added successfully.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="OutOfRange">A specified number is outside of the valid range.</error>
        <error code="ReadOnly">Changes to the XML data are not permitted.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>InsertXPath</name>
      <comment>Inserts an XML statement in an XML tree.</comment>
      <prototype>ERR xml::InsertXPath(OBJECTPTR Object, CSTRING XPath, XMI Where, CSTRING XML, INT * Result)</prototype>
      <input>
        <param type="CSTRING" name="XPath">An XPath string that refers to the target insertion point.</param>
        <param type="XMI" name="Where" lookup="XMI">Use <code>PREV</code> or <code>NEXT</code> to insert behind or ahead of the target tag.  Use <code>CHILD</code> for a child insert.</param>
        <param type="CSTRING" name="XML">The statement to process.</param>
        <param type="INT *" name="Result">The index of the new tag is returned here.</param>
      </input>
      <description>
<p>The InsertXPath method is used to translate and insert a new set of XML tags into any position within the XML tree.  A standard XML statement must be provided in the XML parameter and the target insertion point is referenced as a valid <code>XPath</code> location string.  An insertion point relative to the <code>XPath</code> target must be specified in the <code>Where</code> parameter.  The new tags can be inserted as a child of the target by using an Insert value of <code>XMI::CHILD</code> or <code>XMI::CHILD_END</code>.  To insert behind or after the target, use <code>XMI::PREV</code> or <code>XMI::NEXT</code>.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Search">The <code>XPath</code> could not be resolved.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>MoveTags</name>
      <comment>Move an XML tag group to a new position in the XML tree.</comment>
      <prototype>ERR xml::MoveTags(OBJECTPTR Object, INT Index, INT Total, INT DestIndex, XMI Where)</prototype>
      <input>
        <param type="INT" name="Index">Index of the source tag to be moved.</param>
        <param type="INT" name="Total">The total number of sibling tags to be moved from the source index.  Minimum value of 1.</param>
        <param type="INT" name="DestIndex">The destination tag index.  If the index exceeds the total number of tags, the value will be automatically limited to the last tag index.</param>
        <param type="XMI" name="Where" lookup="XMI">Use <code>PREV</code> or <code>NEXT</code> to insert behind or ahead of the target tag.  Use <code>CHILD</code> for a child insert.</param>
      </input>
      <description>
<p>This method is used to move XML tags within the XML tree structure.  It supports the movement of single and groups of tags from one index to another.  The client must supply the index of the tag that will be moved and the index of the target tag.  All child tags of the source will be included in the move.</p>
<p>An insertion point relative to the target index must be specified in the <code>Where</code> parameter.  The source tag can be inserted as a child of the destination by using a <code>Where</code> of <code>XMI::CHILD</code>.  To insert behind or after the target, use <code>XMI::PREV</code> or <code>XMI::NEXT</code>.</p>
      </description>
      <result>
        <error code="Okay">Tags were moved successfully.</error>
        <error code="NotFound">A search routine in this function failed.</error>
        <error code="ReadOnly">A delete or write operation failed due to read-only status.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>RemoveTag</name>
      <comment>Removes tag(s) from the XML structure.</comment>
      <prototype>ERR xml::RemoveTag(OBJECTPTR Object, INT Index, INT Total)</prototype>
      <input>
        <param type="INT" name="Index">Reference to the tag that will be removed.</param>
        <param type="INT" name="Total">The total number of sibling (neighbouring) tags that should also be deleted.  A value of one or less will remove only the indicated tag and its children.  The total may exceed the number of tags actually available, in which case all tags up to the end of the branch will be affected.</param>
      </input>
      <description>
<p>The RemoveTag method is used to remove one or more tags from an XML structure.  Child tags will automatically be discarded as a consequence of using this method, in order to maintain a valid XML structure.</p>
<p>This method is capable of deleting multiple tags if the <code>Total</code> parameter is set to a value greater than 1.  Each consecutive tag and its children following the targeted tag will be removed from the XML structure until the count is exhausted. This is useful for mass delete operations.</p>
<p>This method is volatile and will destabilise any cached address pointers that have been acquired from the XML object.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="OutOfRange">A specified number is outside of the valid range.</error>
        <error code="ReadOnly">A delete or write operation failed due to read-only status.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>RemoveXPath</name>
      <comment>Removes tag(s) from the XML structure, using an xpath lookup.</comment>
      <prototype>ERR xml::RemoveXPath(OBJECTPTR Object, CSTRING XPath, INT Limit)</prototype>
      <input>
        <param type="CSTRING" name="XPath">An XML path string.</param>
        <param type="INT" name="Limit">The maximum number of matching tags that should be deleted.  A value of one or less will remove only the indicated tag and its children.  The total may exceed the number of tags actually available, in which case all matching tags up to the end of the tree will be affected.</param>
      </input>
      <description>
<p>The RemoveXPath method is used to remove one or more tags from an XML structure.  Child tags will automatically be discarded as a consequence of using this method, in order to maintain a valid XML structure.</p>
<p>Individual tag attributes can also be removed if an attribute is referenced at the end of the <code>XPath</code>.</p>
<p>The removal routine will be repeated so that each tag that matches the XPath will be deleted, or the <code>Limit</code> is reached.</p>
<p>This method is volatile and will destabilise any cached address pointers that have been acquired from the XML object.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="ReadOnly">A delete or write operation failed due to read-only status.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>Serialise</name>
      <comment>Serialise part of the XML tree to an XML string.</comment>
      <prototype>ERR xml::Serialise(OBJECTPTR Object, INT Index, XMF Flags, STRING * Result)</prototype>
      <input>
        <param type="INT" name="Index">Index to a source tag for which serialisation will start.  Set to zero to serialise the entire tree.</param>
        <param type="XMF" name="Flags" lookup="XMF">Use <code>INCLUDE_SIBLINGS</code> to include siblings of the tag found at Index.</param>
        <param type="STRING *" name="Result">The resulting string is returned in this parameter.</param>
      </input>
      <description>
<p>The Serialise() method will serialise all or part of the XML data tree to a string.</p>
<p>The string will be allocated as a memory block and stored in the Result parameter.  It must be freed once the data is no longer required.</p>
      </description>
      <result>
        <error code="Okay">The XML string was retrieved.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="NoData">No information has been loaded into the XML object.</error>
        <error code="AllocMemory">Failed to allocate an XML string for the result.</error>
      </result>
    </method>

    <method>
      <name>SetAttrib</name>
      <comment>Adds, updates and removes XML attributes.</comment>
      <prototype>ERR xml::SetAttrib(OBJECTPTR Object, INT Index, XMS Attrib, CSTRING Name, CSTRING Value)</prototype>
      <input>
        <param type="INT" name="Index">Identifies the tag that is to be updated.</param>
        <param type="XMS" name="Attrib" lookup="XMS">Either the index number of the attribute that is to be updated, or set to <code>NEW</code>, <code>UPDATE</code> or <code>UPDATE_ONLY</code>.</param>
        <param type="CSTRING" name="Name">String containing the new name for the attribute.  If <code>NULL</code>, the name will not be changed.  If Attrib is <code>UPDATE</code> or <code>UPDATE_ONLY</code>, the <code>Name</code> is used to find the attribute.</param>
        <param type="CSTRING" name="Value">String containing the new value for the attribute.  If <code>NULL</code>, the attribute is removed.</param>
      </input>
      <description>
<p>This method is used to update and add attributes to existing XML tags, as well as adding or modifying content.</p>
<p>The data for the attribute is defined in the <code>Name</code> and <code>Value</code> parameters.  Use an empty string if no data is to be associated with the attribute.  Set the <code>Value</code> pointer to <code>NULL</code> to remove the attribute. If both <code>Name</code> and <code>Value</code> are <code>NULL</code>, an error will be returned.</p>
<p>NOTE: The attribute at position 0 declares the name of the tag and should not normally be accompanied with a value declaration.  However, if the tag represents content within its parent, then the Name must be set to <code>NULL</code> and the <code>Value</code> string will determine the content.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Search">The attribute, identified by <code>Name</code>, could not be found.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="OutOfRange">The <code>Index</code> or <code>Attrib</code> value is out of range.</error>
        <error code="ReadOnly">The XML object is read-only.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>Sort</name>
      <comment>Sorts XML tags to your specifications.</comment>
      <prototype>ERR xml::Sort(OBJECTPTR Object, CSTRING XPath, CSTRING Sort, XSF Flags)</prototype>
      <input>
        <param type="CSTRING" name="XPath">Sort everything under the specified tag, or <code>NULL</code> to sort the entire top level.</param>
        <param type="CSTRING" name="Sort">Pointer to a sorting instruction string.</param>
        <param type="XSF" name="Flags" lookup="XSF">Optional flags.</param>
      </input>
      <description>
<p>The Sort method is used to sort a single branch of XML tags in ascending or descending order.  An <code>XPath</code> is required that refers to the tag containing each item that will be sorted.  To sort the root level, use an <code>XPath</code> of <code>NULL</code>.</p>
<p>The <code>Sort</code> parameter is used to specify a list of sorting instructions.  The format for the <code>Sort</code> string is <code>Tag:Attrib,Tag:Attrib,...</code>.  The <code>Tag</code> indicates the tag name that should be identified for sorting each node, and child tags are supported for this purpose.  Wildcard filtering is allowed and a <code>Tag</code> value of <code>*</code> will match every tag at the requested <code>XPath</code> level.  The optional <code>Attrib</code> value names the attribute containing the sort string.  To sort on content, do not define an <code>Attrib</code> value (use the format <code>Tag,Tag,...</code>).</p>
      </description>
      <result>
        <error code="Okay">The XML object was successfully sorted.</error>
        <error code="Search">The provided <code>XPath</code> failed to locate a tag.</error>
        <error code="AllocMemory">A call to AllocMemory() failed to create a new memory block.</error>
        <error code="ReadOnly">A delete or write operation failed due to read-only status.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="XMF">XMF</type>
      <description>
<types lookup="XMF"/>
      </description>
    </field>

    <field>
      <name>Modified</name>
      <comment>A timestamp of when the XML data was last modified.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>The Modified field provides an artificial timestamp value of when the XML data was last modified (e.g. by a tag insert or update).  Storing the current Modified value and making comparisons later makes it easy to determine that a change has been made.  A rough idea of the total number of change requests can also be calculated by subtracting out the difference.</p>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>Set this field if the XML document originates from a file source.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>XML documents can be loaded from the file system by specifying a file path in this field.  If set post-initialisation, all currently loaded data will be cleared and the file will be parsed automatically.</p>
<p>The XML class supports <function module="Core">LoadFile</function>, so an XML file can be pre-cached by the program if it is frequently used during a program's life cycle.</p>
      </description>
    </field>

    <field>
      <name>ReadOnly</name>
      <comment>Prevents modifications and enables caching for a loaded XML data source.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>This field can be set to <code>true</code> prior to initialisation of an XML object that will use an existing data source.  It prevents modifications to the XML object.  If the data originates from a file path, the data may be cached to optimise parsing where the same data is used across multiple XML objects.</p>
      </description>
    </field>

    <field>
      <name>Source</name>
      <comment>Set this field if the XML data is to be sourced from another object.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>OBJECTPTR</type>
      <description>
<p>An XML document can be loaded from another object by referencing it here, on the condition that the object's class supports the Read action.</p>
<p>If set post-initialisation, all currently loaded data will be cleared and the source object will be parsed automatically.</p>
      </description>
    </field>

    <field>
      <name>Start</name>
      <comment>Set a starting cursor to affect the starting point for some XML operations.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>When using any XML function that creates an XML string (e.g. SaveToObject), the XML object will include the entire XML tree by default.  Defining the Start value will restrict processing to a specific tag and its children.</p>
<p>The Start field currently affects the <action>SaveToObject</action> action and the <fl>Statement</fl> field.</p>
      </description>
    </field>

    <field>
      <name>Statement</name>
      <comment>XML data is processed through this field.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Set the Statement field to parse an XML formatted data string through the object.  If this field is set after initialisation then the XML object will clear any existing data first.</p>
<p>Be aware that setting this field with an invalid statement will result in an empty XML object.</p>
<p>Reading the Statement field will return a serialised string of XML data.  By default all tags will be included in the statement unless a predefined starting position is set by the <fl>Start</fl> field.  The string result is an allocation that must be freed.</p>
      </description>
    </field>

    <field>
      <name>Tags</name>
      <comment>Points to an array of tags loaded into an XML object.</comment>
      <access read="G">Get</access>
      <type>STRUCT []</type>
      <description>
<p>The successful parsing of XML data will make the information available via the Tags array.  The array is presented as a series of <st>XMLTag</st> structures.</p>
<p>Each <st>XMLTag</st> will also have at least one attribute set in the <code>Attribs</code> array.  The first attribute will either reflect the tag name or a content string if the <code>Name</code> is undefined.  The <code>Children</code> array provides access to all child elements.</p>
<p>Developers may treat the entire tag hierarchy as readable, but writes should be accomplished with the available XML methods.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="XMF" comment="Standard flags for the XML class.">
      <const name="INCLUDE_COMMENTS">By default, comments are stripped when parsing XML input unless this flag is specified.</const>
      <const name="INCLUDE_SIBLINGS">Include siblings when building an XML string (<action>GetXMLString</action> only)</const>
      <const name="INCLUDE_WHITESPACE">By default the XML parser will trim whitespace (such as return codes, spaces and tabs) found in the XML content between tags.  Setting this flag turns off this feature, allowing all whitespace to be included.</const>
      <const name="INDENT">Indent the output of serialised XML to improve readability.</const>
      <const name="LOCK_REMOVE">Prevents removal of tags from the XML tree.  This specifically affects the RemoveTag and RemoveXPath methods.</const>
      <const name="LOG_ALL">Print extra log messages.</const>
      <const name="NEW">Creates an empty XML object on initialisation - if the <fl>Path</fl> field has been set, the source file will not be loaded.</const>
      <const name="NO_ESCAPE">Turns off escape code conversion.</const>
      <const name="OMIT_TAGS">Prevents tags from being output when the XML is serialised (output content only).</const>
      <const name="PARSE_ENTITY">Entity references in the DTD will be parsed automatically.</const>
      <const name="PARSE_HTML">Automatically parse HTML escape codes.</const>
      <const name="READABLE">Indent the output of serialised XML to improve readability.</const>
      <const name="STRIP_CDATA">Do not echo <code>CDATA</code> sections.  Note that this option is used as a parameter, not an object flag.</const>
      <const name="STRIP_CONTENT">Strip all content from incoming XML data.</const>
      <const name="STRIP_HEADERS">XML headers found in the source data will not be included in the parsed results.</const>
      <const name="WELL_FORMED">By default, the XML class will accept badly structured XML data.  This flag requires that XML statements must be well-formed (tags must balance) or an <code>ERR::BadData</code> error will be returned during processing.</const>
    </constants>

    <constants lookup="XMI" comment="Tag insertion options.">
      <const name="CHILD">Insert as the first child of the target.</const>
      <const name="CHILD_END">Insert as the last child of the target.</const>
      <const name="NEXT">Insert as the next tag of the target.</const>
      <const name="PREV">Insert as the previous tag of the target.</const>
    </constants>

    <constants lookup="XMS" comment="For SetAttrib()">
      <const name="NEW">Adds a new attribute.  Note that if the attribute already exists, this will result in at least two attributes of the same name in the tag.</const>
      <const name="UPDATE">As for <code>UPDATE_ONLY</code>, but if the attribute does not exist, it will be created.</const>
      <const name="UPDATE_ONLY">SetAttrib will find the target attribute and update it.  It is not possible to rename the attribute when using this technique.  <code>ERR::Search</code> is returned if the attribute cannot be found.</const>
    </constants>

    <constants lookup="XSF" comment="Options for the Sort method.">
      <const name="CHECK_SORT">Tells the algorithm to check for a 'sort' attribute in each analysed tag and if found, the algorithm will use that as the sort value instead of that indicated in the <code>Attrib</code> field.</const>
      <const name="DESC">Sort in descending order.</const>
    </constants>

  </types>
  <structs>
    <struct name="XMLAttrib" typeName="XMLATTRIB">
      <field name="Name" type="std::string">Name of the attribute</field>
      <field name="Value" type="std::string">Value of the attribute</field>
    </struct>

    <struct name="XMLTag" typeName="XMLTAG">
      <field name="ID" type="INT">Unique ID assigned to the tag on creation</field>
      <field name="ParentID" type="INT">Unique ID of the parent tag</field>
      <field name="LineNo" type="INT">Line number on which this tag was encountered</field>
      <field name="Flags" type="XTF" lookup="XTF">Optional flags</field>
      <field name="Attribs" type="pf::vector&lt;XMLAttrib&gt;">Array of attributes for this tag</field>
      <field name="Children" type="pf::vector&lt;XMLTag&gt;">Array of child tags</field>
    </struct>

  </structs>
</book>
