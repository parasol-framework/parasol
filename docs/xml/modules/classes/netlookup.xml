<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>NetLookup</name>
    <type>class</type>
    <module>Network</module>
    <comment>Resolve network IP addresses and names using Domain Name Servers.</comment>
    <version>1</version>
    <id>1af615e6</id>
    <idstring>NETLOOKUP</idstring>
    <category>Network</category>
    <copyright>Paul Manias Â© 2005-2024</copyright>
    <description>
<p>Use the NetLookup class for resolving network names to IP addresses and vice versa.</p></description>
    <source>
      <file>class_netlookup.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Free</name>
      <comment>Terminate the object.</comment>
      <prototype>ERR FreeResource(*Object)</prototype>
      <description>
<p>This routine may block temporarily if there are unresolved requests awaiting completion in separate threads.</p>
      </description>
    </action>

  </actions>

  <methods>
    <method>
      <name>BlockingResolveAddress</name>
      <comment>Resolves an IP address to a host name.</comment>
      <prototype>ERR nl::BlockingResolveAddress(OBJECTPTR Object, CSTRING Address)</prototype>
      <input>
        <param type="CSTRING" name="Address">IP address to be resolved, e.g. 123.111.94.82.</param>
      </input>
      <description>
<p>BlockingResolveAddress() performs an IP address resolution, converting an address to an official host name and list of IP addresses.  The resolution process requires contact with a DNS server and this will cause the routine to block until a response is received.</p>
<p>The results can be read from the <fl>HostName</fl> field or received via the <fl>Callback</fl> function.</p>
      </description>
      <result>
        <error code="Okay">The IP address was resolved successfully.</error>
        <error code="Failed">The address could not be resolved</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>BlockingResolveName</name>
      <comment>Resolves a domain name to an official host name and a list of IP addresses.</comment>
      <prototype>ERR nl::BlockingResolveName(OBJECTPTR Object, CSTRING HostName)</prototype>
      <input>
        <param type="CSTRING" name="HostName">The host name to be resolved.</param>
      </input>
      <description>
<p>BlockingResolveName() performs a domain name resolution, converting a domain name to its official host name and IP addresses.  The resolution process requires contact with a DNS server and the function will block until a response is received or a timeout occurs.</p>
<p>The results can be read from the <fl>Addresses</fl> field or received via the <fl>Callback</fl> function.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Failed">General failure.</error>
        <error code="AllocMemory">A call to AllocMemory() failed to create a new memory block.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>ResolveAddress</name>
      <comment>Resolves an IP address to a host name.</comment>
      <prototype>ERR nl::ResolveAddress(OBJECTPTR Object, CSTRING Address)</prototype>
      <input>
        <param type="CSTRING" name="Address">IP address to be resolved, e.g. "123.111.94.82".</param>
      </input>
      <description>
<p>ResolveAddress() performs a IP address resolution, converting an address to an official host name and list of IP addresses.  The resolution process involves contacting a DNS server.  To prevent delays, asynchronous communication is used so that the function can return immediately.  The <fl>Callback</fl> function will be called on completion of the process.</p>
<p>If synchronous (blocking) operation is desired then use the <method>BlockingResolveAddress</method> method.</p>
      </description>
      <result>
        <error code="Okay">The IP address was resolved successfully.</error>
        <error code="Failed">The address could not be resolved</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>ResolveName</name>
      <comment>Resolves a domain name to an official host name and a list of IP addresses.</comment>
      <prototype>ERR nl::ResolveName(OBJECTPTR Object, CSTRING HostName)</prototype>
      <input>
        <param type="CSTRING" name="HostName">The host name to be resolved.</param>
      </input>
      <description>
<p>ResolveName() performs a domain name resolution, converting a domain name to an official host name and IP addresses. The resolution process involves contacting a DNS server.  To prevent delays, asynchronous communication is used so that the function can return immediately.  The <fl>Callback</fl> function will be called on completion of the process.</p>
<p>If synchronous (blocking) operation is desired then use the <method>BlockingResolveName</method> method.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Failed">General failure.</error>
        <error code="AllocMemory">A call to AllocMemory() failed to create a new memory block.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>Addresses</name>
      <comment>List of resolved IP addresses.</comment>
      <access read="G">Get</access>
      <type>STRUCT []</type>
      <description>
<p>A list of the most recently resolved IP addresses can be read from this field.</p>
      </description>
    </field>

    <field>
      <name>Callback</name>
      <comment>This function will be called on the completion of any name or address resolution.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The function referenced here will receive the results of the most recently resolved name or address.  The C/C++ prototype is <code>Function(*NetLookup, ERR Error, const std::string &amp;HostName, const std::vector&lt;IPAddress&gt; &amp;Addresses)</code>.</p>
<p>The Fluid prototype is as follows, with results readable from the <fl>HostName</fl> and <fl>Addresses</fl> fields: <code>function(NetLookup, Error)</code>.</p>
      </description>
    </field>

    <field>
      <name>ClientData</name>
      <comment>Optional user data storage</comment>
      <access read="R" write="W">Read/Write</access>
      <type>BIGINT</type>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="NLF">NLF</type>
      <description>
<types lookup="NLF"/>
      </description>
    </field>

    <field>
      <name>HostName</name>
      <comment>Name of the most recently resolved host.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
      <description>
<p>The name of the most recently resolved host is readable from this field.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="NLF" comment="Options for NetLookup">
      <const name="NO_CACHE">Contact the name service and do not use the local DNS cache.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
