<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>RemapFX</name>
    <type>class</type>
    <module>Vector</module>
    <comment>Provides pixel remapping; equivalent to feComponentTransfer in SVG.</comment>
    <version>1</version>
    <id>3eb33c98</id>
    <idstring>ID_REMAPFX</idstring>
    <category>Graphics</category>
    <include>modules/remapfx.h</include>
    <copyright>Paul Manias Â© 2010-2023</copyright>
    <description>
<p>The RemapFX class provides an implementation of the feComponentTransfer functionality in SVG.</p>
<p>Internally the pixel rendering process is implemented using pixel lookup tables.  As such this particular effect carries minimal overhead compared to most other effect classes.</p></description>
    <source>
      <file path="filters/">filter_remap.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Draw</name>
      <comment>Render the effect to the target bitmap.</comment>
    </action>

  </actions>

  <methods>
    <method>
      <name>SelectDiscrete</name>
      <comment>Apply the discrete function to a pixel component.</comment>
      <prototype>ERROR rfSelectDiscrete(OBJECTPTR Object, CMP Component, DOUBLE * Values, LONG Size)</prototype>
      <input>
        <param type="CMP" name="Component" lookup="CMP">The pixel component to which the discrete function must be applied.</param>
        <param type="DOUBLE *" name="Values">A list of values for the discrete function.</param>
        <param type="LONG" name="Size">Total number of elements in the value list.</param>
      </input>
      <description>
<p>This method will apply the table function to a selected RGBA pixel component.  A list of values is required with a minimum size of 1.</p>
      </description>
    </method>

    <method>
      <name>SelectGamma</name>
      <comment>Apply the gamma function to a pixel component.</comment>
      <prototype>ERROR rfSelectGamma(OBJECTPTR Object, CMP Component, DOUBLE Amplitude, DOUBLE Offset, DOUBLE Exponent)</prototype>
      <input>
        <param type="CMP" name="Component" lookup="CMP">The pixel component to which the gamma function must be applied.</param>
        <param type="DOUBLE" name="Amplitude">The amplitude of the gamma function.</param>
        <param type="DOUBLE" name="Offset">The offset of the gamma function.</param>
        <param type="DOUBLE" name="Exponent">The exponent of the gamma function.</param>
      </input>
      <description>
<p>This method will apply the gamma function to a selected RGBA pixel component.  The gamma function is written as <code>C' = Amplitude * pow(C, Exponent) + Offset</code>.</p>
      </description>
    </method>

    <method>
      <name>SelectIdentity</name>
      <comment>Apply the identity function to a pixel component.</comment>
      <prototype>ERROR rfSelectIdentity(OBJECTPTR Object, CMP Component)</prototype>
      <input>
        <param type="CMP" name="Component" lookup="CMP">The pixel component to which the identity function must be applied.</param>
      </input>
      <description>
<p>Selecting the identity function for a pixel component will render it as its original value.  By default, all pixels will use this function if no other option is chosen.</p>
      </description>
    </method>

    <method>
      <name>SelectInvert</name>
      <comment>Apply the invert function to a pixel component.</comment>
      <prototype>ERROR rfSelectInvert(OBJECTPTR Object, CMP Component)</prototype>
      <input>
        <param type="CMP" name="Component" lookup="CMP">The pixel component to which the function must be applied.</param>
      </input>
      <description>
<p>This method will apply the invert function to a selected RGBA pixel component.  The function is written as <code>C' = 1.0 - C</code>.</p>
<p>This feature is not compatible with SVG.</p>
      </description>
    </method>

    <method>
      <name>SelectLinear</name>
      <comment>Apply the linear function to a pixel component.</comment>
      <prototype>ERROR rfSelectLinear(OBJECTPTR Object, CMP Component, DOUBLE Slope, DOUBLE Intercept)</prototype>
      <input>
        <param type="CMP" name="Component" lookup="CMP">The pixel component to which the function must be applied.</param>
        <param type="DOUBLE" name="Slope">The slope of the linear function.</param>
        <param type="DOUBLE" name="Intercept">The intercept of the linear function.</param>
      </input>
      <description>
<p>This method will apply the linear function to a selected RGBA pixel component.  The function is written as <code>C' = (Slope * C) + Intercept</code>.</p>
      </description>
    </method>

    <method>
      <name>SelectMask</name>
      <comment>Apply the mask function to a pixel component.</comment>
      <prototype>ERROR rfSelectMask(OBJECTPTR Object, CMP Component, LONG Mask)</prototype>
      <input>
        <param type="CMP" name="Component" lookup="CMP">The pixel component to which the function must be applied.</param>
        <param type="LONG" name="Mask">The bit mask to be AND'd with each value.</param>
      </input>
      <description>
<p>This method will apply the mask function to a selected RGBA pixel component.  The function is written as <code>C' = C &amp; Mask</code>.  This algorithm is particularly useful for lowering the bit depth of colours, e.g. a value of <code>0xf0</code> will reduce 8 bit colours to 4 bit.</p>
<p>This feature is not compatible with SVG.</p>
      </description>
    </method>

    <method>
      <name>SelectTable</name>
      <comment>Apply the table function to a pixel component.</comment>
      <prototype>ERROR rfSelectTable(OBJECTPTR Object, CMP Component, DOUBLE * Values, LONG Size)</prototype>
      <input>
        <param type="CMP" name="Component" lookup="CMP">The pixel component to which the table function must be applied.</param>
        <param type="DOUBLE *" name="Values">A list of values for the table function.</param>
        <param type="LONG" name="Size">Total number of elements in the value list.</param>
      </input>
      <description>
<p>This method will apply the table function to a selected RGBA pixel component.  A list of values is required with a minimum size of 1.</p>
<p>If a single table value is supplied then the component will be output as a constant with no interpolation applied.</p>
      </description>
    </method>

  </methods>

  <fields>
    <field>
      <name>XMLDef</name>
      <comment>Returns an SVG compliant XML string that describes the filter.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
    </field>

  </fields>
  <types>
    <constants lookup="CMP" comment="Component selection for RemapFX methods.">
      <const name="ALL">All colour channels.</const>
      <const name="ALPHA">The alpha channel.</const>
      <const name="BLUE">The blue colour channel.</const>
      <const name="GREEN">The green colour channel.</const>
      <const name="RED">The red colour channel.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
