<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Picture</name>
    <type>class</type>
    <module>Picture</module>
    <comment>Loads and saves picture files in a variety of different data formats.</comment>
    <fileExtension>*.png</fileExtension>
    <fileDescription>PNG Picture</fileDescription>
    <version>1</version>
    <id>ad68f281</id>
    <idstring>PICTURE</idstring>
    <category>Graphics</category>
    <copyright>Paul Manias Â© 2001-2025</copyright>
    <description>
<p>The Picture class provides a standard API for programs to load picture files of any supported data type.  It is future proof in that future data formats can be supported by installing class drivers on the user's system.</p>
<p>The default file format for loading and saving pictures is PNG.  Other formats such as JPEG are supported via sub-classes, which can be loaded into the system at boot time or on demand.  Some rare formats such as TIFF are also supported, but user preference may dictate whether or not the necessary driver is installed.</p>
<header>Technical Notes</header>
<p>To find out general information about a picture before initialising it, <action>Query</action> it first so that the picture object can load initial details on the file format.</p>
<p>Images are also remapped automatically if the source palette and destination palettes do not match, or if there are significant differences between the source and destination bitmap types.</p>
<p>Dynamically sized image formats like SVG will use the <fl>DisplayWidth</fl> and <fl>DisplayHeight</fl> values to determine the rendered image size.</p></description>
    <source>
      <file>picture.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Loads image data into a picture object.</comment>
      <prototype>ERR acActivate(*Object)</prototype>
      <description>
<p>Loading an image file requires a call to Activate() after initialisation.  The <fl>Path</fl> field will be used to source the image file.</p>
<p>Pre-setting picture field values will place restrictions on the image file that is to be loaded.  For example, if the source image is wider than a preset <class name="Bitmap" field="Width">Bitmap.Width</class>, the image will have its right edge clipped.  The same is true for the <class name="Bitmap" field="Height">Bitmap.Height</class> and other restrictions apply to fields such as the <class name="Bitmap" field="Palette">Bitmap.Palette</class>.</p>
<p>Once the picture is loaded, the image data will be held in the picture's <fl>Bitmap</fl> object.  Manipulating the <fl>Bitmap</fl> object is permitted.</p>
      </description>
    </action>

    <action>
      <name>Init</name>
      <comment>Prepares the object for use.</comment>
      <prototype>ERR InitObject(*Object)</prototype>
      <description>
<p>Objects that belong to the Picture class can be initialised in two possible ways.  If you have not set the <fl>Path</fl> field or have chosen to use the <code>NEW</code> flag, the initialisation routine will create a <fl>Bitmap</fl> area that contains no image data.  This allows you to fill the picture with your own image data and save it using the <action>SaveImage</action> or <action>SaveToObject</action> actions.  You must set the <class name="Bitmap" field="Width">Bitmap.Width</class>, <class name="Bitmap" field="Height">Bitmap.Height</class> and colour specifications at a minimum, or the initialisation process will fail.</p>
<p>If you have set the <fl>Path</fl> field and avoided the <code>NEW</code> flag, the initialisation process will analyse the file location to determine whether or not the data is in fact a valid image file.  If the file does not match up with a registered data format, an error code of <code>ERR::NoSupport</code> is returned.  You will need to use the <action>Activate</action> or <action>Query</action> actions to load or find out more information about the image format.</p>
      </description>
    </action>

    <action>
      <name>Query</name>
      <comment>Retrieves the latest information from an object.</comment>
      <prototype>ERR acQuery(*Object)</prototype>
    </action>

    <action>
      <name>Read</name>
      <comment>Reads raw image data from a Picture object.</comment>
      <prototype>ERR acRead(*Object, APTR Buffer, LONG Length, LONG *Result)</prototype>
      <input>
        <param type="APTR" name="Buffer">Points a buffer that will receive the data.</param>
        <param type="LONG" name="Length">The total number of bytes to read from the object.  This value cannot exceed the size of the Buffer.</param>
        <param type="LONG" name="Result">The Read action will write this parameter with the total number of bytes read into the Buffer.</param>
      </input>
    </action>

    <action>
      <name>Refresh</name>
      <comment>Refreshes a loaded picture - draws the next frame.</comment>
      <prototype>ERR acRefresh(*Object)</prototype>
    </action>

    <action>
      <name>SaveImage</name>
      <comment>Saves the picture image to a data object.</comment>
      <prototype>ERR acSaveImage(*Object, OBJECTID Dest, CLASSID ClassID)</prototype>
      <input>
        <param type="OBJECTID" name="Dest">Refers to an object that will receive the encoded image data.</param>
        <param type="CLASSID" name="ClassID">The Picture class to use for encoding the image data.</param>
      </input>
      <description>
<p>If no destination is specified then the image will be saved as a new file targeting <fl>Path</fl>.</p>
      </description>
    </action>

    <action>
      <name>SaveToObject</name>
      <comment>Saves the picture image to a data object.</comment>
      <prototype>ERR acSaveToObject(*Object, OBJECTID Dest, CLASSID ClassID)</prototype>
      <input>
        <param type="OBJECTID" name="Dest">Refers to an object that will receive the encoded data.</param>
        <param type="CLASSID" name="ClassID">Can refer to a sub-class that should be used when encoding the data.</param>
      </input>
    </action>

    <action>
      <name>Seek</name>
      <comment>Seeks to a new read/write position within a Picture object.</comment>
      <prototype>ERR acSeek(*Object, DOUBLE Offset, LONG Position)</prototype>
      <input>
        <param type="DOUBLE" name="Offset">The desired offset to seek to, relative to the Position parameter.</param>
        <param type="POS" name="Position">The position that defines the starting point for Offset.</param>
      </input>
    </action>

    <action>
      <name>Write</name>
      <comment>Writes raw image data to a picture object.</comment>
      <prototype>ERR acWrite(*Object, APTR Buffer, LONG Length, LONG Result)</prototype>
      <input>
        <param type="APTR" name="Buffer">A buffer containing the data that will be written to the object.</param>
        <param type="LONG" name="Length">The total number of bytes to write to the object.</param>
        <param type="LONG" name="Result">This parameter with be updated with the total number of bytes written from the Buffer.</param>
      </input>
    </action>

  </actions>

  <fields>
    <field>
      <name>Author</name>
      <comment>The name of the person or company that created the image.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
    </field>

    <field>
      <name>Bitmap</name>
      <comment>Represents a picture's image data.</comment>
      <access read="R">Read</access>
      <type class="Bitmap">*Bitmap</type>
      <description>
<p>The details of a picture's graphical image and data are defined in its associated bitmap object.  It contains information on the image dimensions and palette for example.  The <class name="Bitmap" field="Palette">Bitmap.Palette</class> can be preset if you want to remap the  source image to a specific set of colour values.</p>
<p>Please refer to the <class name="Bitmap">Bitmap</class> class for more details on the structure of bitmap objects.</p>
      </description>
    </field>

    <field>
      <name>Copyright</name>
      <comment>Copyright details of an image.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Copyright details related to an image may be specified here.  The copyright should be short and to the point, for example <code>Copyright J. Bloggs (c) 1992.</code></p>
      </description>
    </field>

    <field>
      <name>Description</name>
      <comment>Long description for an image.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>A long description for an image may be entered in this field.  There is no strict limit on the length of the description.</p>
      </description>
    </field>

    <field>
      <name>Disclaimer</name>
      <comment>The disclaimer associated with an image.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>If it is necessary to associate a disclaimer with an image, the legal text may be entered in this field.</p>
      </description>
    </field>

    <field>
      <name>DisplayHeight</name>
      <comment>The preferred height to use when displaying the image.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The <fl>DisplayWidth</fl> and DisplayHeight fields define the preferred pixel dimensions to use for the display when viewing the image in a 96DPI environment.  Both fields will be set automatically when the picture source is loaded.  If the source does not specify a suitable value for these fields, they may be initialised to a value based on the picture's <class name="Bitmap" field="Width">Bitmap.Width</class> and <class name="Bitmap" field="Height">Bitmap.Height</class>.</p>
<p>In the case of a scalable image source such as SVG, the <fl>DisplayWidth</fl> and DisplayHeight can be pre-configured by the client, and the loader will scale the source image to the preferred dimensions on load.</p>
      </description>
    </field>

    <field>
      <name>DisplayWidth</name>
      <comment>The preferred width to use when displaying the image.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The DisplayWidth and <fl>DisplayHeight</fl> fields define the preferred pixel dimensions to use for the display when viewing the image in a 96DPI environment.  Both fields will be set automatically when the picture source is loaded.  If the source does not specify a suitable value for these fields, they may be initialised to a value based on the picture's <class name="Bitmap" field="Width">Bitmap.Width</class> and <class name="Bitmap" field="Height">Bitmap.Height</class>.</p>
<p>In the case of a scalable image source such as SVG, the DisplayWidth and <fl>DisplayHeight</fl> can be pre-configured by the client, and the loader will scale the source image to the preferred dimensions on load.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional initialisation flags.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="PCF">PCF</type>
      <description>
<types lookup="PCF"/>
      </description>
    </field>

    <field>
      <name>Header</name>
      <comment>Contains the first 32 bytes of data in a picture's file header.</comment>
      <access read="G" write="I">Get/Init</access>
      <type>APTR</type>
      <description>
<p>The Header field is a pointer to a 32 byte buffer that contains the first 32 bytes of information read from a picture file on initialisation.  This special field is considered to be helpful only to developers writing add on components for the picture class.</p>
<p>The buffer that is referred to by the Header field is not populated until the Init action is called on the picture object.</p>
      </description>
    </field>

    <field>
      <name>Mask</name>
      <comment>Refers to a Bitmap that imposes a mask on the image.</comment>
      <access read="R">Read</access>
      <type class="Bitmap">*Bitmap</type>
      <description>
<p>If a source picture includes a mask, the Mask field will refer to a Bitmap object that contains the mask image once the picture source has been loaded.  The mask will be expressed as either a 256 colour alpha bitmap, or a 1-bit mask with 8 pixels per byte.</p>
<p>If creating a picture from scratch that needs to support a mask, set the <code>MASK</code> flag prior to initialisation and the picture class will allocate the mask bitmap automatically.</p>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>The location of source image data.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
    </field>

    <field>
      <name>Quality</name>
      <comment>Defines the quality level to use when saving the image.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The quality level to use when saving the image is defined here.  The value is expressed as a percentage between 0 and 100%, with 100% being of the highest quality.  If the picture format is loss-less, such as PNG, then the quality level may be used to determine the compression factor.</p>
<p>In all cases, the impact of selecting a high level of quality will increase the time it takes to save the image.</p>
      </description>
    </field>

    <field>
      <name>Software</name>
      <comment>The name of the application that was used to draw the image.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
    </field>

    <field>
      <name>Title</name>
      <comment>The title of the image.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
    </field>

  </fields>
  <types>
    <constants lookup="PCF" comment="Flags for the Picture class.">
      <const name="ALPHA">If a picture supports an alpha channel, this field will be set (if you will be saving a Picture with an alpha channel, set this flag prior to initialisation and build the channel using the object provided in the <fl>Mask</fl> field).</const>
      <const name="FORCE_ALPHA_32">If the picture source includes an alpha channel mask, it will normally be separated out and stored in the <fl>Mask</fl> field.  If you set the <code>FORCE_ALPHA_32</code> option before loading, the image will be forced into 32-bit graphics mode with alpha channel.  The mask information will be stored in the alpha byte and the <fl>Mask</fl> field will not be set.</const>
      <const name="LAZY">Prevents automatic loading of the picture image.  Use the Query action to process the picture header or Activate to load the image data.</const>
      <const name="MASK">A mask has been generated for the image.</const>
      <const name="NEW">Indicates that the picture image will be created from scratch.</const>
      <const name="NO_PALETTE">Automatically upgrade palette based images to 32 bit colour.</const>
      <const name="SCALABLE">This read-only flag is automatically set if the image source is scalable (such as SVG).</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
