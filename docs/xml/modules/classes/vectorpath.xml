<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>VectorPath</name>
    <type>class</type>
    <module>Vector</module>
    <comment>Extends the Vector class with support for generating custom paths.</comment>
    <version>1</version>
    <id>51b8d205</id>
    <idstring>ID_VECTORPATH</idstring>
    <category>Graphics</category>
    <include>modules/vectorpath.h</include>
    <copyright>Paul Manias Â© 2010-2023</copyright>
    <description>
<p>VectorPath provides support for parsing SVG styled path strings.</p></description>
    <source>
      <file path="vectors/">path.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Clear</name>
      <comment>Clears an object's data.</comment>
    </action>

    <action>
      <name>Flush</name>
      <comment>Flush buffered data from an object.</comment>
    </action>

  </actions>

  <methods>
    <method>
      <name>AddCommand</name>
      <comment>Add one or more commands to the end of the path sequence.</comment>
      <prototype>ERROR vpAddCommand(OBJECTPTR Object, struct PathCommand * Commands, LONG Size)</prototype>
      <input>
        <param type="struct PathCommand *" name="Commands">Array of commands to add to the path.</param>
        <param type="LONG" name="Size">The size of the Command buffer, in bytes.</param>
      </input>
      <description>
<p>This method will add a series of commands to the end of a Vector's existing path sequence.  The commands must be provided as a sequential array.  No checks will be performed to confirm the validity of the sequence.</p>
<p>Calling this method will also result in the path being recomputed for the next redraw.</p>
      </description>
    </method>

    <method>
      <name>GetCommand</name>
      <comment>Retrieve a specific command from the path sequence.</comment>
      <prototype>ERROR vpGetCommand(OBJECTPTR Object, LONG Index, struct PathCommand ** Command)</prototype>
      <input>
        <param type="LONG" name="Index">The index of the command to retrieve.</param>
        <param type="struct PathCommand **" name="Command">The requested command will be returned in this parameter.</param>
      </input>
      <description>
<p>Calling GetCommand will return a direct pointer to the command identified at Index.  The pointer will remain valid for as long as the VectorPath is not modified.</p>
      </description>
    </method>

    <method>
      <name>RemoveCommand</name>
      <comment>Remove at least one command from the path sequence.</comment>
      <prototype>ERROR vpRemoveCommand(OBJECTPTR Object, LONG Index, LONG Total)</prototype>
      <input>
        <param type="LONG" name="Index">The index of the command to remove.</param>
        <param type="LONG" name="Total">The total number of commands to remove, starting from the given Index.</param>
      </input>
      <description>
<p>This method will remove a series of commands from the current path, starting at the given Index.  The total number of commands to remove is indicated by the Total parameter.</p>
      </description>
    </method>

    <method>
      <name>SetCommand</name>
      <comment>Copies one or more commands into an existing path.</comment>
      <prototype>ERROR vpSetCommand(OBJECTPTR Object, LONG Index, struct PathCommand * Command, LONG Size)</prototype>
      <input>
        <param type="LONG" name="Index">The index of the command that is to be set.</param>
        <param type="struct PathCommand *" name="Command">An array of commands to set in the path.</param>
        <param type="LONG" name="Size">The size of the Command buffer, in bytes.</param>
      </input>
      <description>
<p>Use SetCommand to copy one or more commands into an existing path.</p>
      </description>
    </method>

    <method>
      <name>SetCommandList</name>
      <comment>The fastest available mechanism for setting a series of path instructions.</comment>
      <prototype>ERROR vpSetCommandList(OBJECTPTR Object, APTR Commands, LONG Size)</prototype>
      <input>
        <param type="APTR" name="Commands">An array of PathCommand structures.</param>
        <param type="LONG" name="Size">The byte size of the Commands buffer.</param>
      </input>
      <description>
<p>Use SetCommandList to copy a series of path commands to a VectorPath object.  All existing commands will be cleared as a result of this process.</p>
<p>NOTE: This method is not compatible with Fluid calls.</p>
      </description>
    </method>

  </methods>

  <fields>
    <field>
      <name>Commands</name>
      <comment>Direct pointer to the PathCommand array.</comment>
      <access read="G">Get</access>
      <type>STRUCT []</type>
      <description>
<p>Read the Commands field to obtain a direct pointer to the PathCommand array.  This will allow the path to be modified directly.  After making changes to the path, call <action>Flush</action> to register the changes for the next redraw.</p>
      </description>
    </field>

    <field>
      <name>PathLength</name>
      <comment>Calibrates the user agent's distance-along-a-path calculations with that of the author.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The author's computation of the total length of the path, in user units. This value is used to calibrate the user agent's own distance-along-a-path calculations with that of the author. The user agent will scale all distance-along-a-path computations by the ratio of PathLength to the user agent's own computed value for total path length.  This feature potentially affects calculations for text on a path, motion animation and various stroke operations.</p>
      </description>
    </field>

    <field>
      <name>Sequence</name>
      <comment>A sequence of points and instructions that will define the path.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The Sequence is a string of points and instructions that define the path.  It is based on the SVG standard for the path element 'd' attribute, but also provides some additional features that are present in the vector engine.  Commands are case insensitive.</p>
<p>The following commands are supported:</p>
<pre>M: Move To
L: Line To
V: Vertical Line To
H: Horizontal Line To
Q: Quadratic Curve To
T: Quadratic Smooth Curve To
C: Curve To
S: Smooth Curve To
A: Arc
Z: Close Path
</pre>
<p>The use of lower case characters will indicate that the provided coordinates are relative (based on the coordinate of the previous command).</p>
<p>To terminate a path without joining it to the first coordinate, omit the 'Z' from the end of the sequence.</p>
      </description>
    </field>

    <field>
      <name>TotalCommands</name>
      <comment>The total number of points defined in the path sequence.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>The total number of points defined in the path <field>Sequence</field> is reflected in this field.  Modifying the total directly is permitted, although this should be used for shrinking the list because expansion will create uninitialised command entries.</p>
      </description>
    </field>

  </fields>
  <structs>
    <struct name="PathCommand" comment="Base structure for path commands.">
      <field name="Type" type="PE" lookup="PE">The command type (PE value)</field>
      <field name="Curved" type="UBYTE">Private</field>
      <field name="LargeArc" type="UBYTE">Equivalent to the large-arc-flag in SVG, it ensures that the arc follows the longest drawing path when TRUE.</field>
      <field name="Sweep" type="UBYTE">Equivalent to the sweep-flag in SVG, it inverts the default behaviour in generating arc paths.</field>
      <field name="Pad1" type="UBYTE">Private</field>
      <field name="X" type="DOUBLE">The targeted X coordinate (absolute or relative) for the command</field>
      <field name="Y" type="DOUBLE">The targeted Y coordinate (absolute or relative) for the command</field>
      <field name="AbsX" type="DOUBLE">Private</field>
      <field name="AbsY" type="DOUBLE">Private</field>
      <field name="X2" type="DOUBLE">The X2 coordinate for curve commands, or RX for arcs</field>
      <field name="Y2" type="DOUBLE">The Y2 coordinate for curve commands, or RY for arcs</field>
      <field name="X3" type="DOUBLE">The X3 coordinate for curve-to or smooth-curve-to</field>
      <field name="Y3" type="DOUBLE">The Y3 coordinate for curve-to or smooth-curve-to</field>
      <field name="Angle" type="DOUBLE">Arc angle</field>
    </struct>

  </structs>
</book>
