<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>VectorImage</name>
    <type>class</type>
    <module>Vector</module>
    <comment>Provides support for the filling and stroking of vectors with bitmap images.</comment>
    <version>1</version>
    <id>885aab1b</id>
    <idstring>ID_VECTORIMAGE</idstring>
    <category>Graphics</category>
    <include>modules/vectorimage.h</include>
    <copyright>Paul Manias Â© 2010-2023</copyright>
    <description>
<p>The VectorImage class is used by Vector painting algorithms to fill and stroke vectors with bitmap images.  This is achieved by initialising a VectorImage object with the desired settings and then registering it with a <class name="VectorScene">VectorScene</class> via the <class name="VectorScene" index="AddDef()">VectorScene:AddDef()</class> method.</p>
<p>Any vector within the target scene will be able to utilise the image for filling or stroking by referencing its name through the <class name="Vector" index="Fill">Vector:Fill</class> and <class name="Vector" index="Stroke">Vector:Stroke</class> fields.  For instance 'url(#logo)'.</p>
<p>It is strongly recommended that the VectorImage is owned by the <class name="VectorScene">VectorScene</class> that is handling the definition.  This will ensure that the VectorImage is de-allocated when the scene is destroyed.</p></description>
    <source>
      <file path="defs/">image.cpp</file>
    </source>
  </info>

  <fields>
    <field>
      <name>AspectRatio</name>
      <comment>Flags that affect the aspect ratio of the image within its target vector.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="ARF">ARF</type>
      <description>
<p>Defining an aspect ratio allows finer control over the position and scale of the image within its target vector.</p>
<types lookup="ARF"/>
      </description>
    </field>

    <field>
      <name>Bitmap</name>
      <comment>Reference to a source bitmap for the rendering algorithm.</comment>
      <access read="R" write="S">Read/Set</access>
      <type class="Bitmap">*Bitmap</type>
      <description>
<p>This field must be set prior to initialisation.  It will refer to a source bitmap that will be used by the rendering algorithm.</p>
      </description>
    </field>

    <field>
      <name>Dimensions</name>
      <comment>Dimension flags define whether individual dimension fields contain fixed or relative values.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="DMF">INT</type>
      <description>
<p>Of the Dimension flags that are available, only FIXED_X, FIXED_Y, RELATIVE_X and RELATIVE_Y are applicable.</p>
<types lookup="DMF"/>
      </description>
    </field>

    <field>
      <name>Picture</name>
      <comment>Refers to a <class name="Picture">Picture</class> from which the source <field>Bitmap</field> is acquired.</comment>
      <access read="R" write="S">Read/Set</access>
      <type class="Picture">*Picture</type>
      <description>
<p>If an image bitmap is sourced from a <class name="Picture">Picture</class> then this field may be used to refer to the <class name="Picture">Picture</class> object.  The picture will not be used directly by the VectorImage, as only the bitmap is of interest.</p>
      </description>
    </field>

    <field>
      <name>SpreadMethod</name>
      <comment>Defines the drawing mode.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="VSPREAD">VSPREAD</type>
      <description>
<p>The SpreadMethod defines the way in which the image is drawn within the target area.  The default setting is PAD.</p>
<types lookup="VSPREAD"/>
      </description>
    </field>

    <field>
      <name>Units</name>
      <comment>Declares the coordinate system to use for the <field>X</field> and <field>Y</field> values.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="VUNIT">VUNIT</type>
      <description>
<p>This field declares the coordinate system that is used for values in the <field>X</field> and <field>Y</field> fields.  The default is BOUNDING_BOX.</p>
<types lookup="VUNIT"/>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>Apply a horizontal offset to the image, the origin of which is determined by the <field>Units</field> value.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>DOUBLE</type>
    </field>

    <field>
      <name>Y</name>
      <comment>Apply a vertical offset to the image, the origin of which is determined by the <field>Units</field> value.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>DOUBLE</type>
    </field>

  </fields>
  <types>
    <constants lookup="ARF" comment="Aspect ratios control alignment, scaling and clipping.">
      <const name="MEET">Aspect ratio is preserved. The entire viewbox will be visible in the viewport.  The viewbox is scaled up as much as possible.</const>
      <const name="NONE">Scale the viewbox to match the size of the viewport.  Aspect ratio is not preserved.</const>
      <const name="SLICE">Aspect ratio is preserved. The viewbox can extend beyond the viewport's edges on one axis.  The viewbox is scaled up as much as possible.</const>
      <const name="X_MAX">Align to the right.</const>
      <const name="X_MID">Align to the horizontal center.</const>
      <const name="X_MIN">Align to the left.</const>
      <const name="Y_MAX">Align to the bottom.</const>
      <const name="Y_MID">Align to the vertical center.</const>
      <const name="Y_MIN">Align to the top.</const>
    </constants>

    <constants lookup="VSPREAD" comment="Spread method options define the method to use for tiling filled graphics.">
      <const name="CLIP">Do not scale the graphic.  Clip it if it extends past imposed boundaries.</const>
      <const name="PAD">Scale the graphic to the object bounds.</const>
      <const name="REFLECT">Tile the graphic, reflecting the image alternately on the X and Y axis.</const>
      <const name="REFLECT_X">Tile the graphic, reflecting the image alternately on the X axis only.</const>
      <const name="REFLECT_Y">Tile the graphic, reflecting the image alternately on the Y axis only.</const>
      <const name="REPEAT">Tile the graphic repeatedly.</const>
      <const name="UNDEFINED">Either the default setting will be applied or the setting will be inherited from a parent object.</const>
    </constants>

    <constants lookup="VUNIT">
      <const name="BOUNDING_BOX">Coordinates are relative to the object's bounding box.</const>
      <const name="UNDEFINED"/>
      <const name="USERSPACE">Coordinates are relative to the current viewport.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
