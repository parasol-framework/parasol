<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>FilterEffect</name>
    <type>class</type>
    <module>Vector</module>
    <comment>FilterEffect is a support class for managing effects hosted by the VectorFilter class.</comment>
    <version>1</version>
    <id>79e93e58</id>
    <idstring>ID_FILTEREFFECT</idstring>
    <category>Graphics</category>
    <include>modules/filtereffect.h</include>
    <copyright>Paul Manias Â© 2010-2024</copyright>
    <description>
<p>The FilterEffect class provides base-class functionality for effect classes.  FilterEffect objects mut not be instantiated directly by the client.</p>
<p>The documented fields and actions here are integral to all effects that utilise this class.</p></description>
    <source>
      <file path="filters/">filter_effect.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>MoveToBack</name>
      <comment>Move an effect to the front of the VectorFilter's list order.</comment>
    </action>

    <action>
      <name>MoveToFront</name>
      <comment>Move an object to the front of its current location.</comment>
    </action>

  </actions>

  <fields>
    <field>
      <name>Dimensions</name>
      <comment>Dimension flags are stored here.</comment>
      <access read="R">Read</access>
      <type lookup="DMF">INT</type>
      <description>
<p>Dimension flags are automatically defined when setting the <fl>X</fl>, <fl>Y</fl>, <fl>Width</fl> and <fl>Height</fl> fields.</p>
<types lookup="DMF"/>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>Primitive height of the effect area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The <code>(Width, Height)</code> field values define the dimensions of the effect within the target clipping area.</p>
      </description>
    </field>

    <field>
      <name>Input</name>
      <comment>Reference to another effect to be used as an input source.</comment>
      <access read="R" write="S">Read/Set</access>
      <type class="FilterEffect">*FilterEffect</type>
      <description>
<p>If another effect should be used as a source input, it must be referenced here.  The <fl>SourceType</fl> will be automatically set to <code>REFERENCE</code> as a result.</p>
<p>This field is the SVG equivalent to <code>in</code>.  If the Input is not defined by the client then it will default to the previous effect if available, otherwise the source graphic is used.</p>
      </description>
    </field>

    <field>
      <name>Mix</name>
      <comment>Reference to another effect to be used a mixer with Input.</comment>
      <access read="R" write="S">Read/Set</access>
      <type class="FilterEffect">*FilterEffect</type>
      <description>
<p>If another effect should be used as a mixed source input, it must be referenced here.  The <fl>MixType</fl> will be automatically set to <code>REFERENCE</code> as a result.</p>
<p>This field is the SVG equivalent to <code>in2</code>.  It does nothing if the effect does not supported a mixed source input.</p>
      </description>
    </field>

    <field>
      <name>MixType</name>
      <comment>If a secondary mix input is required for the effect, specify it here.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="VSF">VSF</type>
      <description>
<p>Some effects support a secondary mix input for compositing, such as the <class name="CompositeFX">CompositeFX</class> class.  If the mixing source is a reference to another effect, set the <fl>Mix</fl> field instead and this field will be set to <code>REFERENCE</code> automatically.</p>
<types lookup="VSF"/>
      </description>
    </field>

    <field>
      <name>Next</name>
      <comment>Next filter in the chain.</comment>
      <access read="R" write="W">Read/Write</access>
      <type class="FilterEffect">*FilterEffect</type>
    </field>

    <field>
      <name>Prev</name>
      <comment>Previous filter in the chain.</comment>
      <access read="R" write="W">Read/Write</access>
      <type class="FilterEffect">*FilterEffect</type>
    </field>

    <field>
      <name>SourceType</name>
      <comment>Specifies an input source for the effect algorithm, if required.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="VSF">VSF</type>
      <description>
<p>If an effect requires an input source for processing, it must be specified here.  If the source is a reference to another effect, set the <fl>Input</fl> field instead and this field will be set to <code>REFERENCE</code> automatically.</p>
<types lookup="VSF"/>
      </description>
    </field>

    <field>
      <name>Target</name>
      <comment>Target bitmap for rendering the effect.</comment>
      <access read="R" write="W">Read/Write</access>
      <type class="Bitmap">*Bitmap</type>
    </field>

    <field>
      <name>Width</name>
      <comment>Primitive width of the effect area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The (Width,Height) field values define the dimensions of the effect within the target clipping area.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>Primitive X coordinate for the effect.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The (X,Y) field values define the offset of the effect within the target clipping area.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>Primitive Y coordinate for the effect.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The (X,Y) field values define the offset of the effect within the target clipping area.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="DMF">
      <const name="FIXED_CENTER_X">The CenterX field is a fixed size.</const>
      <const name="FIXED_CENTER_Y">The CenterY field is a fixed size.</const>
      <const name="FIXED_DEPTH">The Depth field is a fixed size.</const>
      <const name="FIXED_HEIGHT">The Height field is a fixed size.</const>
      <const name="FIXED_RADIUS">Synonym for <code>FIXED_RADIUS_X | FIXED_RADIUS_Y</code></const>
      <const name="FIXED_RADIUS_X">The RadiusX field is a fixed size.</const>
      <const name="FIXED_RADIUS_Y">The RadiusY field is a fixed size.</const>
      <const name="FIXED_WIDTH">The Width field is a fixed suze.</const>
      <const name="FIXED_X">The X field is a fixed coordinate.</const>
      <const name="FIXED_X_OFFSET">The XOffset field is a fixed coordinate.</const>
      <const name="FIXED_Y">The Y field is a fixed coordinate.</const>
      <const name="FIXED_Y_OFFSET">The YOffset field is a fixed coordinate.</const>
      <const name="FIXED_Z">The Z field is a fixed coordinate.</const>
      <const name="HEIGHT">Synonym for <code>FIXED_HEIGHT | SCALED_HEIGHT</code></const>
      <const name="HEIGHT_FLAGS">Synonym for <code>FIXED_HEIGHT | SCALED_HEIGHT | FIXED_Y_OFFSET | SCALED_Y_OFFSET</code></const>
      <const name="HORIZONTAL_FLAGS">Synonym for <code>FIXED_WIDTH | SCALED_WIDTH | FIXED_X_OFFSET | SCALED_X_OFFSET | FIXED_X | SCALED_X</code></const>
      <const name="SCALED_CENTER_X">The CenterX field is scaled to this object's parent.</const>
      <const name="SCALED_CENTER_Y">The CenterY field is scaled to this object's parent.</const>
      <const name="SCALED_DEPTH">The Depth field is scaled to this object's parent.</const>
      <const name="SCALED_HEIGHT">The Height field is scaled to this object's parent.</const>
      <const name="SCALED_RADIUS">Synonym for <code>SCALED_RADIUS_X | SCALED_RADIUS_Y</code></const>
      <const name="SCALED_RADIUS_X">The RadiusX field is scaled to this object's parent.</const>
      <const name="SCALED_RADIUS_Y">The RadiusY field is a scaled size to this object's parent.</const>
      <const name="SCALED_WIDTH">The Width field is scaled to this object's parent.</const>
      <const name="SCALED_X">The X field is scaled to this object's parent.</const>
      <const name="SCALED_X_OFFSET">The XOffset field is scaled to this object's parent.</const>
      <const name="SCALED_Y">The Y field is scaled to this object's parent.</const>
      <const name="SCALED_Y_OFFSET">The YOffset field is scaled to this object's parent.</const>
      <const name="SCALED_Z">The Z field is a scaled coordinate to this object's parent.</const>
      <const name="STATUS_CHANGE">Synonym for <code>STATUS_CHANGE_H | STATUS_CHANGE_V</code></const>
      <const name="STATUS_CHANGE_H"/>
      <const name="STATUS_CHANGE_V"/>
      <const name="VERTICAL_FLAGS">Synonym for <code>FIXED_HEIGHT | SCALED_HEIGHT | FIXED_Y_OFFSET | SCALED_Y_OFFSET | FIXED_Y | SCALED_Y</code></const>
      <const name="WIDTH">Synonym for <code>FIXED_WIDTH | SCALED_WIDTH</code></const>
      <const name="WIDTH_FLAGS">Synonym for <code>FIXED_WIDTH | SCALED_WIDTH | FIXED_X_OFFSET | SCALED_X_OFFSET</code></const>
      <const name="X">Synonym for <code>FIXED_X | SCALED_X</code></const>
      <const name="X_OFFSET">Synonym for <code>FIXED_X_OFFSET | SCALED_X_OFFSET</code></const>
      <const name="Y">Synonym for <code>FIXED_Y | SCALED_Y</code></const>
      <const name="Y_OFFSET">Synonym for <code>FIXED_Y_OFFSET | SCALED_Y_OFFSET</code></const>
    </constants>

    <constants lookup="VSF" comment="Filter source types - these are used internally">
      <const name="ALPHA">As for <code>GRAPHIC</code> except that only the alpha channel is used.</const>
      <const name="BKGD">An image snapshot of the SVG document under the filter region at the time that the filter element was invoked.</const>
      <const name="BKGD_ALPHA">As for <code>BKGD</code> but only the alpha channel is used.</const>
      <const name="FILL">The value of the fill property on the target element for the filter effect.</const>
      <const name="GRAPHIC">Represents the graphics elements that were the original input into the filter element.</const>
      <const name="IGNORE">The filter does not require an input source.</const>
      <const name="PREVIOUS">Use the previous effect as input, or source graphic if no previous effect.</const>
      <const name="REFERENCE">This value is an assigned name for the filter primitive in the form of a custom-ident. If supplied, then graphics that result from processing this filter primitive can be referenced by an in attribute on a subsequent filter primitive within the same filter element. If no value is provided, the output will only be available for re-use as the implicit input into the next filter primitive if that filter primitive provides no value for its in attribute.</const>
      <const name="STROKE">The value of the stroke property on the target element for the filter effect.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
