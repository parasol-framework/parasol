<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>VectorViewport</name>
    <type>class</type>
    <module>Vector</module>
    <comment>Provides support for viewport definitions within a vector tree.</comment>
    <version>1</version>
    <id>15da8fb8</id>
    <idstring>VECTORVIEWPORT</idstring>
    <category>Graphics</category>
    <copyright>Paul Manias Â© 2010-2025</copyright>
    <description>
<p>This class is used to declare a viewport within a vector scene graph.  A master viewport is required as the first object in a <class name="VectorScene">VectorScene</class> and it must contain all vector graphics content.</p>
<p>The size of the viewport is initially set to <code>(0,0,100%,100%)</code> so as to be all inclusive.  Setting the <fl>X</fl>, <fl>Y</fl>, <fl>Width</fl> and <fl>Height</fl> fields will determine the position and clipping of the displayed content (the 'target area').  The <fl>ViewX</fl>, <fl>ViewY</fl>, <fl>ViewWidth</fl> and <fl>ViewHeight</fl> fields declare the viewbox ('source area') that will be sampled for the target.</p>
<p>To configure the scaling and alignment method that is applied to the viewport content, set the <fl>AspectRatio</fl> field.</p></description>
    <source>
      <file path="vectors/">viewport.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Clear</name>
      <comment>Free all child objects contained by the viewport.</comment>
      <prototype>ERR acClear(*Object)</prototype>
    </action>

    <action>
      <name>Move</name>
      <comment>Move the position of the viewport by delta X, Y.</comment>
      <prototype>ERR acMove(*Object, DOUBLE DeltaX, DOUBLE DeltaY, DOUBLE DeltaZ)</prototype>
      <input>
        <param type="DOUBLE" name="DeltaX">The number of units to move along the X axis.</param>
        <param type="DOUBLE" name="DeltaY">The number of units to move along the Y axis.</param>
        <param type="DOUBLE" name="DeltaZ">The number of units to move along the Z axis.</param>
      </input>
    </action>

    <action>
      <name>MoveToPoint</name>
      <comment>Move the position of the viewport to a fixed point.</comment>
      <prototype>ERR acMoveToPoint(*Object, DOUBLE X, DOUBLE Y, DOUBLE Z, MTF Flags)</prototype>
      <input>
        <param type="DOUBLE" name="X">The new X position to move the object to.</param>
        <param type="DOUBLE" name="Y">The new Y position to move the object to.</param>
        <param type="DOUBLE" name="Z">The new Z position to move the object to.</param>
        <param type="MTF" name="Flags" lookup="MTF">Set the relevant MTF flag for each provided parameter.</param>
      </input>
    </action>

    <action>
      <name>Redimension</name>
      <comment>Reposition and resize a viewport to a fixed size.</comment>
      <prototype>ERR acRedimension(*Object, DOUBLE X, DOUBLE Y, DOUBLE Z, DOUBLE Width, DOUBLE Height, DOUBLE Depth)</prototype>
      <input>
        <param type="DOUBLE" name="X">The new X position to apply to the target object.</param>
        <param type="DOUBLE" name="Y">The new Y position to apply to the target object.</param>
        <param type="DOUBLE" name="Z">The new Z position to apply to the target object.</param>
        <param type="DOUBLE" name="Width">The new width of the target object.</param>
        <param type="DOUBLE" name="Height">The new height of the target object.</param>
        <param type="DOUBLE" name="Depth">The new depth of the target object.</param>
      </input>
    </action>

    <action>
      <name>Resize</name>
      <comment>Resize a viewport to a fixed size.</comment>
      <prototype>ERR acResize(*Object, DOUBLE Width, DOUBLE Height, DOUBLE Depth)</prototype>
      <input>
        <param type="DOUBLE" name="Width">The new width of the object.</param>
        <param type="DOUBLE" name="Height">The new height of the object.</param>
        <param type="DOUBLE" name="Depth">The new depth of the object.</param>
      </input>
    </action>

  </actions>

  <fields>
    <field>
      <name>AbsX</name>
      <comment>The horizontal position of the viewport, relative to <code>(0, 0)</code>.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>This field will return the left-most boundary of the viewport, relative to point <code>(0, 0)</code> of the scene graph.  Transforms are taken into consideration when calculating this value.</p>
      </description>
    </field>

    <field>
      <name>AbsY</name>
      <comment>The vertical position of the viewport, relative to <code>(0, 0)</code>.</comment>
      <access read="G">Get</access>
      <type>INT</type>
      <description>
<p>This field will return the top-most boundary of the viewport, relative to point <code>(0, 0)</code> of the scene graph.  Transforms are taken into consideration when calculating this value.</p>
      </description>
    </field>

    <field>
      <name>AspectRatio</name>
      <comment>Flags that affect the aspect ratio of vectors within the viewport.</comment>
      <access read="G" write="S">Get/Set</access>
      <type lookup="ARF">INT</type>
      <description>
<p>Defining an aspect ratio allows finer control over the position and scale of the viewport's content within its target area.</p>
<types lookup="ARF"/>
      </description>
    </field>

    <field>
      <name>Buffer</name>
      <comment>Returns the bitmap buffer that the viewport is using.</comment>
      <access read="G">Get</access>
      <type>OBJECTPTR</type>
    </field>

    <field>
      <name>Buffered</name>
      <comment>Set to true if the viewport should buffer its content.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Viewport buffering is enabled by setting this field to <code>true</code> prior to initialisation.  A <class name="Bitmap">Bitmap</class> buffer will be created at the first drawing operation, and is available for the client to read from the <fl>Buffer</fl> field.</p>
<p>Potential reasons for enabling viewport buffering include: 1. Allows the client to read the rendered graphics directly from the <fl>Buffer</fl>; 2. Overall rendering will be faster if the content of the viewport rarely changes; 3. The use of multiple buffers can improve threaded rendering.</p>
<p>Buffering comes at a cost of using extra memory, and rendering may be less efficient if the buffered content changes frequently (e.g. is animated).  Buffering also enforces overflow (clipping) restrictions, equivalent to <fl>Overflow</fl> being permanently set to <code>HIDDEN</code>.</p>
      </description>
    </field>

    <field>
      <name>Dimensions</name>
      <comment>Dimension flags define whether individual dimension fields contain fixed or scaled values.</comment>
      <access read="G" write="S">Get/Set</access>
      <type lookup="DMF">INT</type>
      <description>
<types lookup="DMF"/>
      </description>
    </field>

    <field>
      <name>DragCallback</name>
      <comment>Receiver for drag requests originating from the viewport.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>Set the DragCallback field with a callback function to receive drag requests from the viewport's user input.  When the user drags the viewport, the callback will receive the user's desired <code>(X, Y)</code> target coordinates.  For unimpeded dragging, have the callback set the viewport's <fl>X</fl> and <fl>Y</fl> values to match the incoming coordinates, then redraw the scene.</p>
<p>The prototype for the callback function is as follows, where <code>OriginX</code> and <code>OriginY</code> refer to the (<fl>X</fl>,<fl>Y</fl>) position of the vector at initiation of the drag.</p>
<p>
<code>void function(*VectorViewport, DOUBLE X, DOUBLE Y, DOUBLE OriginX, DOUBLE OriginY)</code></p>
<p>Setting this field to <code>NULL</code> will turn off the callback.</p>
<p>It is required that the parent <class name="VectorScene">VectorScene</class> is associated with a <class name="Surface">Surface</class> for this feature to work.</p>
      </description>
    </field>

    <field>
      <name>Height</name>
      <comment>The height of the viewport's target area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The height of the viewport's target area is defined here as a fixed or scaled value.  The default value is <code>100%</code> for full coverage.</p>
<p>The fixed value is always returned when retrieving the height.</p>
      </description>
    </field>

    <field>
      <name>Overflow</name>
      <comment>Clipping options for the viewport's boundary.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Choose an overflow option to enforce or disable clipping of the viewport's content.  The default state is <code>VISIBLE</code>. Altering the overflow state affects both the X and Y axis.  To set either axis independently, set <fl>OverflowX</fl> and <fl>OverflowY</fl>.</p>
<p>If the viewport's <fl>AspectRatio</fl> is set to <code>SLICE</code> then it will have priority over the overflow setting.</p>
      </description>
    </field>

    <field>
      <name>OverflowX</name>
      <comment>Clipping options for the viewport's boundary on the x axis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Choose an overflow option to enforce or disable clipping of the viewport's content.  The default state is <code>VISIBLE</code>. If the viewport's <fl>AspectRatio</fl> is set to <code>SLICE</code> then it will have priority over the overflow setting.</p>
<p>This option controls the x axis only.</p>
      </description>
    </field>

    <field>
      <name>OverflowY</name>
      <comment>Clipping options for the viewport's boundary on the y axis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Choose an overflow option to enforce or disable clipping of the viewport's content.  The default state is <code>VISIBLE</code>. If the viewport's <fl>AspectRatio</fl> is set to <code>SLICE</code> then it will have priority over the overflow setting.</p>
<p>This option controls the y axis only.</p>
      </description>
    </field>

    <field>
      <name>ViewHeight</name>
      <comment>The height of the viewport's source area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The area defined by (<fl>ViewX</fl>,<fl>ViewY</fl>) and (<fl>ViewWidth</fl>,<fl>ViewHeight</fl>) declare the source area covered by the viewport.  The rendered graphics in the source area will be repositioned and scaled to the area defined by <code>(X,Y)</code> and <code>(Width,Height)</code>.</p>
      </description>
    </field>

    <field>
      <name>ViewWidth</name>
      <comment>The width of the viewport's source area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The area defined by (<fl>ViewX</fl>,<fl>ViewY</fl>) and (<fl>ViewWidth</fl>,<fl>ViewHeight</fl>) declare the source area covered by the viewport.  The rendered graphics in the source area will be repositioned and scaled to the area defined by (<fl>X</fl>,<fl>Y</fl>) and (<fl>Width</fl>,<fl>Height</fl>).</p>
      </description>
    </field>

    <field>
      <name>ViewX</name>
      <comment>The horizontal position of the viewport's source area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The area defined by (<fl>ViewX</fl>,<fl>ViewY</fl>) and (<fl>ViewWidth</fl>,<fl>ViewHeight</fl>) declare the source area covered by the viewport.  The rendered graphics in the source area will be repositioned and scaled to the area defined by (<fl>X</fl>,<fl>Y</fl>) and (<fl>Width</fl>,<fl>Height</fl>).</p>
      </description>
    </field>

    <field>
      <name>ViewY</name>
      <comment>The vertical position of the viewport's source area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The area defined by (<fl>ViewX</fl>,<fl>ViewY</fl>) and (<fl>ViewWidth</fl>,<fl>ViewHeight</fl>) declare the source area covered by the viewport.  The rendered graphics in the source area will be repositioned and scaled to the area defined by (<fl>X</fl>,<fl>Y</fl>) and (<fl>Width</fl>,<fl>Height</fl>).</p>
      </description>
    </field>

    <field>
      <name>Width</name>
      <comment>The width of the viewport's target area.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The width of the viewport's target area is defined here as a fixed or scaled value.  The default value is <code>100%</code> for full coverage.</p>
      </description>
    </field>

    <field>
      <name>X</name>
      <comment>Positions the viewport on the x-axis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The display position targeted by the viewport is declared by the (<fl>X</fl>,<fl>Y</fl>) field values.  Coordinates can be expressed as fixed or scaled pixel units.</p>
<p>If an offset from the edge of the parent is desired, the <fl>XOffset</fl> field must be defined.  If a X and <fl>XOffset</fl> value are defined together, the width of the viewport is computed on-the-fly and will change in response to the parent's width.</p>
      </description>
    </field>

    <field>
      <name>XOffset</name>
      <comment>Positions the viewport on the x-axis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The display position targeted by the viewport is declared by the (<fl>X</fl>,<fl>Y</fl>) field values.  Coordinates can be expressed as fixed or scaled pixel units.</p>
<p>If an offset from the edge of the parent is desired, the <fl>XOffset</fl> field must be defined.  If the <fl>X</fl> and XOffset values are defined together, the width of the viewport is computed on-the-fly and will change in response to the parent's width.</p>
      </description>
    </field>

    <field>
      <name>Y</name>
      <comment>Positions the viewport on the y-axis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The display position targeted by the viewport is declared by the (<fl>X</fl>,<fl>Y</fl>) field values.  Coordinates can be expressed as fixed or scaled pixel units.</p>
<p>If an offset from the edge of the parent is desired, the <fl>YOffset</fl> must be defined.  If the Y and <fl>YOffset</fl> values are defined together, the height of the viewport is computed on-the-fly and will change in response to the parent's height.</p>
      </description>
    </field>

    <field>
      <name>YOffset</name>
      <comment>Positions the viewport on the y-axis.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>DOUBLE</type>
      <description>
<p>The display position targeted by the viewport is declared by the (<fl>X</fl>,<fl>Y</fl>) field values.  Coordinates can be expressed as fixed or scaled pixel units.</p>
<p>If an offset from the edge of the parent is desired, the <fl>YOffset</fl> must be defined.  If a <fl>Y</fl> and YOffset value are defined together, the height of the viewport is computed on-the-fly and will change in response to the parent's height.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="ARC" comment="Options for drawing arcs.">
      <const name="LARGE">The arc will take the longest available drawing path rather than the shortest.</const>
      <const name="SWEEP">Inverts the default behaviour in generating the arc path (go clockwise).</const>
    </constants>

    <constants lookup="ARF" comment="Aspect ratios control alignment, scaling and clipping.">
      <const name="MEET">Aspect ratio is preserved. The entire viewbox will be visible in the viewport.  The viewbox is scaled up as much as possible.</const>
      <const name="NONE">Scale the viewbox to match the size of the viewport.  Aspect ratio is not preserved.</const>
      <const name="SLICE">Aspect ratio is preserved. The viewbox can extend beyond the viewport's edges on one axis.  The viewbox is scaled up as much as possible.</const>
      <const name="X_MAX">Align to the right.</const>
      <const name="X_MID">Align to the horizontal center.</const>
      <const name="X_MIN">Align to the left.</const>
      <const name="Y_MAX">Align to the bottom.</const>
      <const name="Y_MID">Align to the vertical center.</const>
      <const name="Y_MIN">Align to the top.</const>
    </constants>

    <constants lookup="DMF">
      <const name="FIXED_CENTER_X">The CenterX field is a fixed size.</const>
      <const name="FIXED_CENTER_Y">The CenterY field is a fixed size.</const>
      <const name="FIXED_DEPTH">The Depth field is a fixed size.</const>
      <const name="FIXED_HEIGHT">The Height field is a fixed size.</const>
      <const name="FIXED_RADIUS_X">The RadiusX field is a fixed size.</const>
      <const name="FIXED_RADIUS_Y">The RadiusY field is a fixed size.</const>
      <const name="FIXED_WIDTH">The Width field is a fixed suze.</const>
      <const name="FIXED_X">The X field is a fixed coordinate.</const>
      <const name="FIXED_X_OFFSET">The XOffset field is a fixed coordinate.</const>
      <const name="FIXED_Y">The Y field is a fixed coordinate.</const>
      <const name="FIXED_Y_OFFSET">The YOffset field is a fixed coordinate.</const>
      <const name="FIXED_Z">The Z field is a fixed coordinate.</const>
      <const name="SCALED_CENTER_X">The CenterX field is scaled to this object's parent.</const>
      <const name="SCALED_CENTER_Y">The CenterY field is scaled to this object's parent.</const>
      <const name="SCALED_DEPTH">The Depth field is scaled to this object's parent.</const>
      <const name="SCALED_HEIGHT">The Height field is scaled to this object's parent.</const>
      <const name="SCALED_RADIUS_X">The RadiusX field is scaled to this object's parent.</const>
      <const name="SCALED_RADIUS_Y">The RadiusY field is a scaled size to this object's parent.</const>
      <const name="SCALED_WIDTH">The Width field is scaled to this object's parent.</const>
      <const name="SCALED_X">The X field is scaled to this object's parent.</const>
      <const name="SCALED_X_OFFSET">The XOffset field is scaled to this object's parent.</const>
      <const name="SCALED_Y">The Y field is scaled to this object's parent.</const>
      <const name="SCALED_Y_OFFSET">The YOffset field is scaled to this object's parent.</const>
      <const name="SCALED_Z">The Z field is a scaled coordinate to this object's parent.</const>
      <const name="STATUS_CHANGE_H"/>
      <const name="STATUS_CHANGE_V"/>
    </constants>

  </types>
  <structs>
    <struct name="FontMetrics" comment="Font metrics, measured in pixels relative to the display">
      <field name="Height" type="INT">Capitalised font height</field>
      <field name="LineSpacing" type="INT">Vertical advance from one line to the next</field>
      <field name="Ascent" type="INT">Height from the baseline to the top of the font, including accents.</field>
      <field name="Descent" type="INT">Height from the baseline to the bottom of the font</field>
    </struct>

    <struct name="VectorMatrix" comment="Vector transformation matrix.">
      <field name="Next" type="struct VectorMatrix *">The next transform in the list.</field>
      <field name="Vector" type="objVector *">The vector associated with the transform.</field>
      <field name="ScaleX" type="DOUBLE">Matrix value A</field>
      <field name="ShearY" type="DOUBLE">Matrix value B</field>
      <field name="ShearX" type="DOUBLE">Matrix value C</field>
      <field name="ScaleY" type="DOUBLE">Matrix value D</field>
      <field name="TranslateX" type="DOUBLE">Matrix value E</field>
      <field name="TranslateY" type="DOUBLE">Matrix value F</field>
      <field name="Tag" type="INT">An optional tag value defined by the client for matrix identification.</field>
    </struct>

    <struct name="VectorPainter" comment="Deserialised painter information; compliant with SVG painter definitions.">
      <field name="Pattern" type="objVectorPattern *">A <class name="VectorPattern">VectorPattern</class> object, suitable for pattern based fills.</field>
      <field name="Image" type="objVectorImage *">A <class name="VectorImage">VectorImage</class> object, suitable for image fills.</field>
      <field name="Gradient" type="objVectorGradient *">A <class name="VectorGradient">VectorGradient</class> object, suitable for gradient fills.</field>
      <field name="Colour" type="struct FRGB">A single RGB colour definition, suitable for block colour fills.</field>
    </struct>

  </structs>
</book>
