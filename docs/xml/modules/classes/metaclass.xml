<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>MetaClass</name>
    <type>class</type>
    <module>Core</module>
    <comment>The MetaClass is used to manage all classes supported by the system core.</comment>
    <version>1</version>
    <id>8bf5f002</id>
    <idstring>ID_METACLASS</idstring>
    <category>System</category>
    <include>modules/metaclass.h</include>
    <copyright>Paul Manias 1996-2024</copyright>
    <description>
<p>The MetaClass is responsible for managing the construction of new classes.  Each MetaClass object remains active for the lifetime of the running program, and provides the benefit of run-time introspection so that detailed class information can be retrieved at any time.  This enables scripting languages such as Fluid to interact with all class types without needing active knowledge of their capabilities.</p>
<p>A number of additional functions are available in the Core for the purpose of class management and introspection. <function>FindClass</function> allows all registered classes to be scanned.  <function>CheckAction</function> verifies if a specific action is supported by a class.  <function>FindField</function> confirms if a specific field is declared in the class specification.</p>
<p>Classes are typically declared in modules, but if a class is intended to be private for an executable then declaring it within the application code is feasible also.</p>
<p>Further discussion on classes and their technical aspects can be found in the Parasol Wiki.</p></description>
    <source>
      <file path="../classes/">class_metaclass.cpp</file>
    </source>
  </info>

  <methods>
    <method>
      <name>FindField</name>
      <comment>Search a class definition for a specific field.</comment>
      <prototype>ERR mcFindField(OBJECTPTR Object, LONG ID, struct Field ** Field, objMetaClass ** Source)</prototype>
      <input>
        <param type="LONG" name="ID">The field ID to search for.  Field names can be converted to ID's by using the <function>StrHash</function> function.</param>
        <param type="struct Field **" name="Field">Pointer to the <st>Field</st> if discovered, otherwise <code>NULL</code>.</param>
        <param type="objMetaClass **" name="Source">Pointer to the class that is associated with the <code>Field</code> (which can match the caller), or <code>NULL</code> if the field was not found.</param>
      </input>
      <description>
<p>This method checks if a class has defined a given field by scanning its blueprint for a matching <code>ID</code>.  If found, a direct pointer to the <code>Field</code> struct will be returned to the client.</p>
<p>In some clases the field might not be present in the main class spec, but does appear in an integral class.  In that case, a reference to the class will be returned in the <code>Source</code> parameter.</p>
      </description>
    </method>

  </methods>

  <fields>
    <field>
      <name>ActionTable</name>
      <comment>This field can be read to retrieve a MetaClass object's internal action table.</comment>
      <access read="G">Get</access>
      <type>APTR []</type>
      <description>
<p>This field retrieves the internal action table of a class. The action table is arranged into a jump table of action routines, with each routine pointing directly to the object support functions.  The size of the jump table is defined by the global constant <code>AC_END</code>.  The table is sorted by action ID.</p>
<p>It is possible to check if an action is supported by a class by looking up its index within the ActionTable, for example <code>Routine[AC_Read]</code>.  Calling an action routine directly from client code is an illegal operation.</p>
      </description>
    </field>

    <field>
      <name>Actions</name>
      <comment>Defines the actions supported by the class.</comment>
      <access write="I">Init</access>
      <type>APTR</type>
      <description>
<p>Action routines are associated with a new class by referring to a list of <st>ActionArray</st> items in this field. Each provided action ID must be paired with its associated routine.</p>
<p>Internally, the provided list is copied to the <fl>ActionTable</fl> and the original values will serve no further purpose.</p>
<p>The following example shows a list of <st>ActionArray</st> structures borrowed from the <class name="Picture">Picture</class> class.  Note that such lists can also be auto-generated using our IDL scripts - an approach that we strongly recommend.</p>
<pre>ActionArray clActions[] = {
   { AC_Free,          PIC_Free },
   { AC_NewObject,     PIC_NewObject },
   { AC_Init,          PIC_Init },
   { AC_Query,         PIC_Query },
   { AC_Read,          PIC_Read },
   { AC_SaveToObject,  PIC_SaveToObject },
   { AC_Seek,          PIC_Seek },
   { AC_Write,         PIC_Write },
   { 0, NULL }
};
</pre>
<p>Note: Never refer to method ID's in an action list - the <fl>Methods</fl> field is provided for this purpose.</p>
      </description>
    </field>

    <field>
      <name>BaseClassID</name>
      <comment>Specifies the base class ID of a class object.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>CLASSID</type>
      <description>
<p>The BaseClassID must always be set prior to the initialisation of a new MetaClass object unless <fl>ClassName</fl> is considered sufficient.  If the BaseClassID is zero then the hash of <fl>ClassName</fl> is computed and set as the value of BaseClassID.</p>
<p>When defining a sub-class, it is required that the BaseClassID refers to the class that is being supported.</p>
      </description>
    </field>

    <field>
      <name>Category</name>
      <comment>The system category that a class belongs to.</comment>
      <access read="R" write="I">Read/Init</access>
      <type lookup="CCF">CCF</type>
      <description>
<p>When designing a new class it is recommended that a suitable category is chosen and declared in this field. It is acceptable for a class to be a member of multiple categories by combining category flags together.</p>
<types lookup="CCF"/>
      </description>
    </field>

    <field>
      <name>ClassID</name>
      <comment>Specifies the ID of a class object.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>CLASSID</type>
      <description>
<p>The ClassID uniquely identifies a class.  If this value differs from the BaseClassID, then the class is determined to be a sub-class.  The ClassID value always reflects the <function>StrHash</function> computation of the <fl>ClassName</fl>, and is automatically set on initialisation if not already set by the client.</p>
      </description>
    </field>

    <field>
      <name>ClassName</name>
      <comment>The name of the represented class.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>CSTRING</type>
      <description>
<p>This field specifies the name of the represented class.  Characters should be limited to those in the range of A-Z and written in camel case, e.g. <code>KeyValue</code> and not <code>Keyvalue</code> or <code>KEYVALUE</code>.  Setting this field value is compulsory prior to initialisation.</p>
      </description>
    </field>

    <field>
      <name>ClassVersion</name>
      <comment>The version number of the class.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>DOUBLE</type>
      <description>
<p>This field value must reflect the version of the class structure.  Legal version numbers start from 1.0 and ascend. Revision numbers can be used to indicate bug-fixes or very minor changes.</p>
<p>If declaring a sub-class then this value can be <code>0</code>, but base classes must set a value here.</p>
      </description>
    </field>

    <field>
      <name>Dictionary</name>
      <comment>Returns a field lookup table sorted by field IDs.</comment>
      <access read="G">Get</access>
      <type>struct Field *</type>
      <description>
<p>Following initialisation of the MetaClass, the Dictionary can be read to retrieve the internal field lookup table. For base-classes, the client can use the binary search technique to find fields by their ID.  For sub-classes, use linear scanning.</p>
      </description>
    </field>

    <field>
      <name>Fields</name>
      <comment>Points to a <st>FieldArray</st> that describes the class' object structure.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>const struct FieldArray *</type>
      <description>
<p>This field points to an array that describes the structure of objects that will be generated for this class.  It is compulsory that base classes define this array.  Sub-classes will inherit the structure of their base, but they may set Fields with additional virtual fields if desired.</p>
<p>Refer to the Parasol Wiki on class development for more information.</p>
      </description>
    </field>

    <field>
      <name>FileDescription</name>
      <comment>Describes the file type represented by the class.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>CSTRING</type>
      <description>
<p>This field allows you to specify a description of the class' file type, if the class is designed to be file related. This setting can be important, as it helps to distinguish your class from the other file based classes.  Always make sure that your file description is short, descriptive and unique.  A file description such as <code>JPEG</code> is not acceptable, but <code>JPEG Picture</code> would be appropriate.</p>
      </description>
    </field>

    <field>
      <name>FileExtension</name>
      <comment>Describes the file extension represented by the class.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>CSTRING</type>
      <description>
<p>This field describes the file extension/s that the class will recognise.  For example: <code>*.wav|*.wave|*.snd</code>.</p>
<p>Use of the vertical bar allows more than one file extension to be supported by the class. The file extension that is preferred for saving data must come first.</p>
      </description>
    </field>

    <field>
      <name>FileHeader</name>
      <comment>Defines a string expression that will allow relevant file data to be matched to the class.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>CSTRING</type>
      <description>
<p>If a class supports file data, then the FileHeader field is used to identify the types of data that the class supports. This feature is used by routines that need to analyse files and determine which classes support them.</p>
<p>For example, the JPEG class supports files that start with a 32-bit token to identify them as JPEG.  Declaring a FileHeader expression to match these tokens will allow the FileView feature to detect JPEG files and display an appropriate icon for each JPEG entry in the file list.</p>
<p>The expression format is <code>[Offset:Value]...</code></p>
<p>The offset is an integer that identifies the byte position at which the given Value will be present.  The Value is expressed as a hexadecimal number if it is prefixed with a dollar sign $, otherwise the Value is treated as case-sensitive text.  Multiple expressions can be specified in sequence if there is more than one comparison to be made - so <code>[0:$ff][8:$fe]</code> would require $ff at offset 0 and $fe at offset 8 in order to generate a match.</p>
<p>In some cases, a series of unrelated token sequences may need to be used to match against files.  This is true for the JPEG class, which supports three different tokens all at offset 0 for identification.  Each matching sequence must be separated with an OR symbol | as demonstrated in this example for the JPEG header: <code>[0:$ffd8ffe0]|[0:$ffd8ffe1]|[0:$ffd8fffe]</code>.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flag settings.</comment>
      <access read="R" write="I">Read/Init</access>
      <type lookup="CLF">CLF</type>
      <description>
<types lookup="CLF"/>
      </description>
    </field>

    <field>
      <name>Location</name>
      <comment>Returns the path from which the class binary is loaded.</comment>
      <access read="R">Read</access>
      <type>STRING</type>
      <description>
<p>The path from which the class binary was loaded is readable from this field.  The path may not necessarily include the file extension of the source binary.</p>
      </description>
    </field>

    <field>
      <name>Methods</name>
      <comment>Set this field to define the methods supported by the class.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRUCT []</type>
      <description>
<p>If a class design will include support for methods, create a MethodEntry list and set this field prior to initialisation.  The array must provide information on each method's ID, name, parameters, and structure size.</p>
<p>Note that method lists can be auto-generated using our IDL scripts - an approach that we strongly recommend.</p>
      </description>
    </field>

    <field>
      <name>Module</name>
      <comment>The name of the module binary that initialised the class.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
    </field>

    <field>
      <name>Objects</name>
      <comment>Returns an allocated list of all objects that belong to this class.</comment>
      <access read="G">Get</access>
      <type>LONG []</type>
      <description>
<p>This field will compile a list of all objects that belong to the class.  The list is sorted with the oldest object appearing first.</p>
<p>The resulting array must be terminated with <function>FreeResource</function> after use.</p>
      </description>
    </field>

    <field>
      <name>OpenCount</name>
      <comment>The total number of active objects that are linked back to the MetaClass.</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>This field reveals the total number of objects that reference the class.  This figure will fluctuate over time as new objects are created and old ones are destroyed.  When the OpenCount reaches zero, the Core may flush the <class name="Module">Module</class> that the class is related to, so long as no more programs are using it or any other classes created by the module.</p>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>The path to the module binary that represents the class.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>CSTRING</type>
      <description>
<p>The Path field must be set on initialisation and refers to the default location of the class' module binary, for example <code>modules:display</code>. For reasons of platform portability, the file extension must not be specified at the end of the file name.</p>
      </description>
    </field>

    <field>
      <name>RootModule</name>
      <comment>Returns a direct reference to the RootModule object that hosts the class.</comment>
      <access read="G">Get</access>
      <type>OBJECTPTR</type>
    </field>

    <field>
      <name>Size</name>
      <comment>The total size of the object structure represented by the MetaClass.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>This field value must indicate the byte size of the objects that will be created from the MetaClass.  For example, the <class name="Picture">Picture</class> class defines this value as <code>sizeof(objPicture)</code>.</p>
<p>If the size is not explicitly defined, the initialisation process will determine the structure size by evaluating the field definitions that have been provided.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="CCF" comment="Class categories">
      <const name="AUDIO">Audio classes interface with audio hardware and drivers for audio playback and recording purposes.</const>
      <const name="COMMAND">Command classes perform specific procedures, like copying or moving a file, managing volumes or executing a program.</const>
      <const name="DATA">Data classes parse, query and manipulate data.</const>
      <const name="FILESYSTEM">FileSystem classes are based on file management and interaction with file based data.</const>
      <const name="GRAPHICS">Graphics classes provide graphics management and drawing services.</const>
      <const name="GUI">GUI classes are used in the development of graphical user interfaces.</const>
      <const name="IO">I/O classes manage hardware and software based input and output.</const>
      <const name="MISC">Miscellaneous classes do not fit into any of the other available categories.</const>
      <const name="MULTIMEDIA">Classes that represent more than one media type, e.g. video files.</const>
      <const name="NETWORK">Network classes interface with system drivers to simplify network communications.</const>
      <const name="SYSTEM">System classes are designed to provide low-level services related to system management.</const>
      <const name="TOOL">Tools provide interactive services for the user.</const>
    </constants>

    <constants lookup="CLF" comment="Flags for the MetaClass.">
      <const name="INHERIT_LOCAL">Inherit the functionality of local objects defined in the class spec.</const>
      <const name="NO_OWNERSHIP">Objects created will not be tracked to the creating process, nor any parent object (<function module="Core">SetOwner</function> will not work either).</const>
    </constants>

  </types>
  <structs>
    <struct name="ActionArray">
      <field name="Routine" type="APTR">Pointer to the function entry point</field>
      <field name="ActionCode" type="LONG">Action identifier</field>
    </struct>

    <struct name="Field" comment="Used to describe the public fields of a class.">
      <field name="Arg" type="MAXINT">An option to complement the field type.  Can be a pointer or an integer value</field>
      <field name="GetValue" type="FUNCTION *" prototype="ERR (*GetValue)(APTR, APTR)">A virtual function that will retrieve the value for this field.</field>
      <field name="SetValue" type="APTR">A virtual function that will set the value for this field.</field>
      <field name="WriteValue" type="FUNCTION *" prototype="ERR (*WriteValue)(OBJECTPTR, struct Field *, LONG, const void *, LONG)">An internal function for writing to this field.</field>
      <field name="Name" type="CSTRING">The English name for the field, e.g. <code>Width</code></field>
      <field name="FieldID" type="ULONG">Provides a fast way of finding fields, e.g. <code>FID_Width</code></field>
      <field name="Offset" type="UWORD">Field offset within the object</field>
      <field name="Index" type="UWORD">Field array index</field>
      <field name="Flags" type="ULONG">Special flags that describe the field</field>
    </struct>

    <struct name="FieldArray" comment="Used to construct class blueprints for the MetaClass.">
      <field name="Name" type="CSTRING">The name of the field, e.g. <code>Width</code></field>
      <field name="GetField" type="APTR"><code>void GetField(*Object, APTR Result);</code></field>
      <field name="SetField" type="APTR"><code>ERR SetField(*Object, APTR Value);</code></field>
      <field name="Arg" type="MAXINT">Can be a pointer or an integer value</field>
      <field name="Flags" type="ULONG">Special flags that describe the field</field>
    </struct>

  </structs>
</book>
