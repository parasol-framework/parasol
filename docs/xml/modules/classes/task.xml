<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Task</name>
    <type>class</type>
    <module>Core</module>
    <comment>System processes are managed by the Task class.</comment>
    <fileExtension>*.exe|*.bat|*.com</fileExtension>
    <fileDescription>Executable File</fileDescription>
    <version>1</version>
    <id>7c9e5758</id>
    <idstring>ID_TASK</idstring>
    <category>System</category>
    <include>modules/task.h</include>
    <copyright>Paul Manias 1996-2024</copyright>
    <description>
<p>Tasks, also known as processes, form the basis of process execution in an operating system.  By creating a task object, it is possible to execute a program from within the host system.</p>
<p>To execute a compiled program, set the <fl>Location</fl> field to point to the executable file before initialising the task.  Arguments can be passed to the executable by setting the <fl>Parameters</fl> field.  After initialising the task, use the <action>Activate</action> action to run the executable.  If the program executes successfully, the task object can be removed and this will not impact the running program.</p>
<p>The task object that represents the active process can be acquired from <function>CurrentTask</function>.</p></description>
    <source>
      <file path="../classes/">class_task.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Activating a task object will execute it.</comment>
      <prototype>ERR acActivate(*Object)</prototype>
      <description>
<p>Activating a task results in the execution of the file referenced in the <fl>Location</fl> field.</p>
<p>On successful execution, the ProcessID will refer to the ID of the executed process.  This ID is compatible with the hosting platform's unique process numbers.</p>
<p>If the <code>WAIT</code> flag is specified, this action will not return until the executed process has returned or the <fl>TimeOut</fl> (if specified) has expired.  Messages are processed as normal during this time, ensuring that your process remains responsive while waiting.</p>
<p>The process' return code can be read from the <fl>ReturnCode</fl> field after the process has completed its execution.</p>
<p>In Microsoft Windows, output can be redirected to a file if the redirection symbol is used to direct output in one of the task arguments.  For instance <code>&gt;C:\output.txt</code> will redirect both stderr and stdout to <code>c:\output.txt</code>.  The use of <code>1&gt;</code> to redirect stdout and <code>2&gt;</code> to redirect stderr independently of each other is also acceptable.</p>
<p>When running a DOS program in Microsoft Windows, the <code>SHELL</code> flag can be set in the <fl>Flags</fl> field to prevent the DOS window from appearing.  The DOS window will also be hidden if the stdout or stderr pipes are redirected.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Failed">General failure.</error>
        <error code="TimeOut">Can be returned if the <code>WAIT</code> flag is used.  Indicates that the process was launched, but the timeout expired before the process returned.</error>
        <error code="FieldNotSet">The Location field has not been set.</error>
      </result>
    </action>

    <action>
      <name>GetKey</name>
      <comment>Retrieves custom key values.</comment>
      <prototype>ERR acGetKey(*Object, CSTRING Key, STRING Value, LONG Size)</prototype>
      <input>
        <param type="CSTRING" name="Key">The name of a key value.</param>
        <param type="STRING" name="Value">Pointer to a buffer space large enough to hold the retrieved value.</param>
        <param type="LONG" name="Size">Indicates the byte size of the Buffer.</param>
      </input>
    </action>

    <action>
      <name>SetKey</name>
      <comment>Variable fields are supported for the general storage of program variables.</comment>
      <prototype>ERR acSetKey(*Object, CSTRING Key, CSTRING Value)</prototype>
      <input>
        <param type="CSTRING" name="Key">The name of the target key.</param>
        <param type="CSTRING" name="Value">The string value to associate with Key.</param>
      </input>
    </action>

    <action>
      <name>Write</name>
      <comment>Send raw data to a launched process' stdin descriptor.</comment>
      <prototype>ERR acWrite(*Object, APTR Buffer, LONG Length, LONG Result)</prototype>
      <input>
        <param type="APTR" name="Buffer">A buffer containing the data that will be written to the object.</param>
        <param type="LONG" name="Length">The total number of bytes to write to the object.</param>
        <param type="LONG" name="Result">This parameter with be updated with the total number of bytes written from the Buffer.</param>
      </input>
      <description>
<p>If a process is successfully launched with the <code>PIPE</code> set in <fl>Flags</fl>, data can be sent to its stdin pipe by calling the Write() action.  Setting the <code>Buffer</code> parameter to <code>NULL</code> will result in the pipe being closed (this will signal to the process that no more data is incoming).</p>
      </description>
    </action>

  </actions>

  <methods>
    <method>
      <name>AddArgument</name>
      <comment>Adds a new argument to the Parameters field.</comment>
      <prototype>ERR task::AddArgument(OBJECTPTR Object, CSTRING Argument)</prototype>
      <input>
        <param type="CSTRING" name="Argument">The new argument string.</param>
      </input>
      <description>
<p>This method will add a new argument to the end of the <fl>Parameters</fl> field array.  If the string is surrounded by quotes, they will be removed automatically.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>Expunge</name>
      <comment>Forces a Task to expunge unused code.</comment>
      <prototype>ERR task::Expunge(OBJECTPTR Object)</prototype>
      <description>
<p>The Expunge() method releases all loaded libraries that are no longer in use by the active process.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>GetEnv</name>
      <comment>Retrieves environment variables for the active process.</comment>
      <prototype>ERR task::GetEnv(OBJECTPTR Object, CSTRING Name, CSTRING * Value)</prototype>
      <input>
        <param type="CSTRING" name="Name">The name of the environment variable to retrieve.</param>
        <param type="CSTRING *" name="Value">The value of the environment variable is returned in this parameter.</param>
      </input>
      <description>
<p>On platforms that support environment variables, GetEnv() returns the value of the environment variable matching the <code>Name</code> string.  If there is no matching variable, <code>ERR::DoesNotExist</code> is returned.</p>
<p>In Windows, it is possible to look up registry keys if the string starts with one of the following (in all other cases, the system's environment variables are queried):</p>
<pre>\HKEY_LOCAL_MACHINE\
\HKEY_CURRENT_USER\
\HKEY_CLASSES_ROOT\
\HKEY_USERS\
</pre>
<p>Here is a valid example for reading the 'Parasol' key value <code>\HKEY_CURRENT_USER\Software\Parasol</code></p>
<p>Caution: If your programming language uses backslash as an escape character (true for Fluid developers), remember to use double-backslashes as the key value separator in your Name string.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="NoSupport">The platform does not support environment variables.</error>
        <error code="DoesNotExist">The environment variable is undefined.</error>
      </result>
    </method>

    <method>
      <name>Quit</name>
      <comment>Sends a quit message to a task.</comment>
      <prototype>ERR task::Quit(OBJECTPTR Object)</prototype>
      <description>
<p>The Quit() method can be used as a convenient way of sending a task a quit message.  This will normally result in the destruction of the task, so long as it is still functioning correctly and has been coded to respond to the <code>MSGID_QUIT</code> message type.  It is legal for a task to ignore a quit request if it is programmed to stay alive.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
      </result>
    </method>

    <method>
      <name>SetEnv</name>
      <comment>Sets environment variables for the active process.</comment>
      <prototype>ERR task::SetEnv(OBJECTPTR Object, CSTRING Name, CSTRING Value)</prototype>
      <input>
        <param type="CSTRING" name="Name">The name of the environment variable to set.</param>
        <param type="CSTRING" name="Value">The value to assign to the environment variable.</param>
      </input>
      <description>
<p>On platforms that support environment variables, SetEnv() is used for defining values for named variables.  A <code>Name</code> and accompanying <code>Value</code> string are required.  If the <code>Value</code> is <code>NULL</code>, the environment variable is removed if it already exists.</p>
<p>In Windows, it is possible to set registry keys if the string starts with one of the following (in all other cases, the system's environment variables are queried):</p>
<pre>\HKEY_LOCAL_MACHINE\
\HKEY_CURRENT_USER\
\HKEY_CLASSES_ROOT\
\HKEY_USERS\
</pre>
<p>When setting a registry key, the function will always set the Value as a string type unless the key already exists.  If the existing key value is a number such as <code>DWORD</code> or <code>QWORD</code>, then the Value will be converted to an integer before the key is set.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="NoSupport">The platform does not support environment variables.</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>Actions</name>
      <comment>Used to gain direct access to a task's actions.</comment>
      <access read="G">Get</access>
      <type>APTR</type>
      <description>
<p>This field provides direct access to the actions of a task, and is intended for use with the active task object returned from <function>CurrentTask</function>.  Hooking into the action table allows the running executable to 'blend-in' with Parasol's object oriented design.</p>
<p>The Actions field points to a lookup table of ActionEntry items.  Hooking into an action involves writing its <code>AC</code> index in the table with a pointer to the action routine.  For example:</p>
<pre>if (!AccessObject(CurrentTask(), 5000, &amp;task)) {
   task-&gt;getPtr(FID_Actions, &amp;actions);
   actions[AC::Seek] = PROGRAM_Seek;
   ReleaseObject(task);
}
</pre>
      </description>
    </field>

    <field>
      <name>Args</name>
      <comment>Command line arguments (string format).</comment>
      <access write="S">Set</access>
      <type>STRING</type>
      <description>
<p>This field allows command line arguments to be set using a single string, whereby each value is separated by whitespace. The string will be disassembled and the arguments will be available to read from the <fl>Parameters</fl> field.</p>
<p>If an argument needs to include whitespace, use double-quotes to encapsulate the value.</p>
      </description>
    </field>

    <field>
      <name>ErrorCallback</name>
      <comment>This callback returns incoming data from STDERR.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The ErrorCallback field can be set with a function reference that will be called when an active process sends data via STDERR.  The callback must follow the prototype <code>Function(*Task, APTR Data, LONG Size)</code></p>
<p>The information read from STDERR will be returned in the Data pointer and the byte-length of the data will be indicated by the <code>Size</code>.  The data pointer is temporary and will be invalid once the callback function has returned.</p>
      </description>
    </field>

    <field>
      <name>ExitCallback</name>
      <comment>The callback is activated when the process is terminated.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The ExitCallback field can be set with a function reference that will be called when the executed process is terminated.  The callback must follow the prototype <code>Function(*Task)</code>.</p>
<p>Please keep in mind that if the <code>Task</code> is freed when the process is still executing, the ExitCallback routine will not be called on termination because the <code>Task</code> object no longer exists for the control of the process.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="I">Read/Init</access>
      <type lookup="TSF">TSF</type>
      <description>
<types lookup="TSF"/>
      </description>
    </field>

    <field>
      <name>InputCallback</name>
      <comment>This callback returns incoming data from STDIN.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The InputCallback field is available to the active task object only (i.e. the current process). The referenced function will be called when process receives data from STDIN.  The callback must follow the prototype <code>Function(*Task, APTR Data, LONG Size, ERR Status)</code></p>
<p>The information read from STDOUT will be returned in the <code>Data</code> pointer and the byte-length of the data will be indicated by the <code>Size</code>.  The data buffer is temporary and will be invalid once the callback function has returned.</p>
<p>A status of <code>ERR::Finished</code> is sent if the stdinput handle has been closed.</p>
      </description>
    </field>

    <field>
      <name>LaunchPath</name>
      <comment>Launched executables will start in the path specified here.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>Use the LaunchPath field to specify the folder that a launched executable will start in when the task object is activated.  This will override all other path options, such as the <code>RESET_PATH</code> flag.</p>
      </description>
    </field>

    <field>
      <name>Location</name>
      <comment>Location of an executable file to launch.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>When a task object is activated, the Location field will be checked for a valid filename.  If the path is valid, the executable code will be loaded from this source.  The source must be in an executable format recognised by the native platform.</p>
<p>Leading spaces will be ignored by the string parser.  The Location string can be enclosed with quotes, in which case only the quoted portion of the string will be used as the source path.</p>
      </description>
    </field>

    <field>
      <name>Name</name>
      <comment>Name of the task.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>This field specifies the name of the task or program that has been initialised. It is up to the developer of the program to set the Name which will appear in this field.  If there is no name for the task then the system may assign a randomly generated name.</p>
      </description>
    </field>

    <field>
      <name>OutputCallback</name>
      <comment>This callback returns incoming data from STDOUT.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The OutputCallback field can be set with a function reference that will be called when an active process sends data via STDOUT.  The callback must follow the prototype <code>Function(*Task, APTR Data, LONG Size)</code></p>
<p>The information read from STDOUT will be returned in the <code>Data</code> pointer and the byte-length of the data will be indicated by the <code>Size</code>.  The <code>Data</code> pointer is temporary and will be invalid once the callback function has returned.</p>
      </description>
    </field>

    <field>
      <name>Parameters</name>
      <comment>Command line arguments (list format).</comment>
      <access read="G" write="S">Get/Set</access>
      <type>pf::vector&lt;std::string&gt;</type>
      <description>
<p>Command line arguments for a program can be defined here as a vector list, whereby each argument is an independent string.  To illustrate, the following command-line string:</p>
<pre>1&gt; YourProgram PREFS MyPrefs -file "documents:readme.txt"</pre>
<p>Would be represented as follows:</p>
<pre>pf::vector&lt;std::string&gt; Args = {
   "PREFS",
   "MyPrefs",
   "-file",
   "documents:readme.txt"
};
</pre>
      </description>
    </field>

    <field>
      <name>Path</name>
      <comment>The current working folder of the active process.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>STRING</type>
      <description>
<p>The Path specifies the 'working folder' that determines where files are loaded from when an absolute path is not otherwise specified for file access.  Initially the working folder is usually set to the folder of the parent process, such as that of a terminal shell.</p>
<p>The working folder can be changed at any time by updating the Path with a new folder location.  If changing to the new folder fails for any reason, the working folder will remain unchanged and the path value will not be updated.</p>
      </description>
    </field>

    <field>
      <name>Priority</name>
      <comment>The task priority in relation to other tasks is be defined here.</comment>
      <access write="S">Set</access>
      <type>INT</type>
      <description>
<p>Set the Priority field to change the priority of the process associated with the task.  The default value for all processes is zero.  High positive values will give the process more CPU time while negative values will yield CPU time to other active processes.</p>
<p>Note that depending on the platform, there may be limits as to whether one process can change the priority level of a foreign process.  Other factors such as the scheduler used by the host system should be considered in the effect of prioritisation.</p>
      </description>
    </field>

    <field>
      <name>ProcessID</name>
      <comment>Reflects the process ID when an executable is launched.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>If a task object launches an executable file via <action>Activate</action>, the ProcessID will be set to the 'pid' that was assigned to the new process by the host system.  At all other times the ProcessID is set to zero.</p>
      </description>
    </field>

    <field>
      <name>ProcessPath</name>
      <comment>The path of the executable that is associated with the task.</comment>
      <access read="G">Get</access>
      <type>STRING</type>
      <description>
<p>The ProcessPath is set to the path of the executable file that is associated with the task (not including the executable file name).  This value is managed internally and cannot be altered.</p>
<p>In Microsoft Windows it is not always possible to determine the origins of an executable, in which case the ProcessPath is set to the working folder in use at the time the process was launched.</p>
      </description>
    </field>

    <field>
      <name>ReturnCode</name>
      <comment>The task's return code can be retrieved following execution.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>INT</type>
      <description>
<p>Once a process has completed execution then its return code can be read from this field.  If process is still running, the error code <code>ERR::TaskStillExists</code> will be returned.</p>
      </description>
    </field>

    <field>
      <name>TimeOut</name>
      <comment>Limits the amount of time to wait for a launched process to return.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>DOUBLE</type>
      <description>
<p>This field can be set in conjunction with the <code>WAIT</code> flag to define the time limit when waiting for a launched process to return.  The time out is defined in seconds.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="TSF" comment="Task flags">
      <const name="ATTACHED">Forces the new process to be attached to the parent (child will close when parent closes).</const>
      <const name="DETACHED">Forces the new process to be detached from the parent.</const>
      <const name="PIPE">Enable the output pipe to the launched process so that it can read data.</const>
      <const name="PRIVILEGED">The child process will inherit the system privileges of its parent.</const>
      <const name="QUIET">Divert all process output to <code>/dev/null</code> or the nearest equivalent for non-Unix systems.</const>
      <const name="RESET_PATH">The new process will start in its own folder and not the folder of the parent process.</const>
      <const name="SHELL">Enables shell mode.  On Unix systems, this means that a shell (usually BASH) will be used to launch the process.</const>
      <const name="VERBOSE">Enable verbose logging.</const>
      <const name="WAIT">The parent process will halt when the task is running.  Control is returned to the parent process once the child process terminates.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
