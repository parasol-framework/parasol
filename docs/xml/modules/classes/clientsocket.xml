<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>ClientSocket</name>
    <type>class</type>
    <module>Network</module>
    <comment>Represents a single socket connection to a client IP address.</comment>
    <version>1</version>
    <id>a14972ed</id>
    <idstring>CLIENTSOCKET</idstring>
    <category>Network</category>
    <copyright>Paul Manias Â© 2005-2025</copyright>
    <description>
<p>If a <class name="Netsocket">Netsocket</class> is running in server mode then it will create a new ClientSocket object every time that a new connection is opened by a client.  This is a very simple class that assists in the management of I/O between the client and server.</p></description>
    <source>
      <file path="clientsocket/">clientsocket.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Read</name>
      <comment>Read incoming data from a client socket.</comment>
      <prototype>ERR acRead(*Object, APTR Buffer, INT Length, INT *Result)</prototype>
      <input>
        <param type="APTR" name="Buffer">Points a buffer that will receive the data.</param>
        <param type="INT" name="Length">The total number of bytes to read from the object.  This value cannot exceed the size of the Buffer.</param>
        <param type="INT" name="Result">The Read action will write this parameter with the total number of bytes read into the Buffer.</param>
      </input>
      <description>
<p>The Read() action will read incoming data from the socket and write it to the provided buffer.  If the socket connection is safe, success will always be returned by this action regardless of whether or not data was available.  Almost all other return codes indicate permanent failure, and the socket connection will be closed when the action returns.</p>
      </description>
      <result>
        <error code="Okay">Read successful (if no data was on the socket, success is still indicated).</error>
        <error code="Failed">A permanent failure has occurred and socket has been closed.</error>
        <error code="Disconnected">The socket connection is closed.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </action>

    <action>
      <name>Write</name>
      <comment>Writes data to the socket.</comment>
      <prototype>ERR acWrite(*Object, APTR Buffer, INT Length, INT Result)</prototype>
      <input>
        <param type="APTR" name="Buffer">A buffer containing the data that will be written to the object.</param>
        <param type="INT" name="Length">The total number of bytes to write to the object.</param>
        <param type="INT" name="Result">This parameter with be updated with the total number of bytes written from the Buffer.</param>
      </input>
      <description>
<p>Write raw data to a client socket with this action.  Write connections are buffered, so any data overflow generated in a call to this action will be buffered into a software queue.  Resource limits placed on the software queue are governed by the <class name="NetSocket" field="MsgLimit">NetSocket.MsgLimit</class> value.</p>
      </description>
    </action>

  </actions>

  <fields>
    <field>
      <name>Client</name>
      <comment>Parent client object (IP address).</comment>
      <access read="R">Read</access>
      <type class="NetClient">*NetClient</type>
    </field>

    <field>
      <name>ClientData</name>
      <comment>Available for client data storage.</comment>
      <access read="R">Read</access>
      <type>APTR</type>
    </field>

    <field>
      <name>ConnectTime</name>
      <comment>System time for the creation of this socket.</comment>
      <access read="R">Read</access>
      <type>INT64</type>
    </field>

    <field>
      <name>Next</name>
      <comment>Next socket in the chain.</comment>
      <access read="R">Read</access>
      <type class="ClientSocket">*ClientSocket</type>
    </field>

    <field>
      <name>Prev</name>
      <comment>Previous socket in the chain.</comment>
      <access read="R">Read</access>
      <type class="ClientSocket">*ClientSocket</type>
    </field>

    <field>
      <name>State</name>
      <comment>The current connection state of the ClientSocket object.</comment>
      <access read="R" write="S">Read/Set</access>
      <type lookup="NTC">NTC</type>
      <description>
<p>The State reflects the connection state of the NetSocket.  If the #Feedback field is defined with a function, it will be called automatically whenever the state is changed.  Note that the ClientSocket parameter will be NULL when the Feedback function is called.</p>
<p>Note that in server mode this State value should not be used as it cannot reflect the state of all connected client sockets.  Each <class name="ClientSocket">ClientSocket</class> carries its own independent State value for use instead.</p>
<types lookup="NTC"/>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="NTC" comment="NetSocket states">
      <const name="CONNECTED">There is an active connection at present.</const>
      <const name="CONNECTING">A connection is being established.</const>
      <const name="DISCONNECTED">There is no connection.</const>
      <const name="HANDSHAKING">An SSL connection is being established.</const>
      <const name="MULTISTATE">In server mode the NetSocket will be set to MULTISTATE to indicate one or more client connections.</const>
      <const name="RESOLVING">The host name is being resolved.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
