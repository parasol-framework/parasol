<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>NetSocket</name>
    <type>class</type>
    <module>Network</module>
    <comment>Manages network connections via TCP/IP sockets.</comment>
    <version>1</version>
    <id>2b439bb5</id>
    <idstring>NETSOCKET</idstring>
    <category>Network</category>
    <copyright>Paul Manias Â© 2005-2025</copyright>
    <description>
<p>The NetSocket class provides a simple way of managing TCP/IP socket communications.  Connections from a single client to the server and from the server to multiple clients are supported.  SSL functionality is also integrated.</p>
<p>The design of the NetSocket class caters to asynchronous (non-blocking) communication.  This is achieved primarily through callback fields - connection alerts are managed by <fl>Feedback</fl>, incoming data is received through <fl>Incoming</fl> and readiness for outgoing data is supported by <fl>Outgoing</fl>.</p>
<header>Client-Server Connections</header>
<p>After a connection has been established, data may be written using any of the following methods:</p>
<list type="bullet">
<li>Write directly to the socket with the <action>Write</action> action.</li>
<li>Subscribe to the socket by referring to a routine in the <fl>Outgoing</fl> field.  The routine will be called to
initially fill the internal write buffer, thereafter it will be called whenever the buffer is empty.</li>
</list>
<p>It is possible to write to a NetSocket object before the connection to a server is established.  Doing so will buffer the data in the socket until the connection with the server has been initiated, at which point the data will be immediately sent.</p>
<header>Server-Client Connections</header>
<p>To accept incoming client connections, create a NetSocket object with the <code>SERVER</code> flag set and define the <fl>Port</fl> value on which to listen for new clients.  If multiple connections from a single client IP address are allowed, set the <code>MULTI_CONNECT</code> flag.</p>
<p>When a new connection is detected, the <fl>Feedback</fl> function will be called as <code>Feedback(*NetSocket, *ClientSocket, LONG State)</code></p>
<p>The NetSocket parameter refers to the original NetSocket object, <class name="ClientSocket">ClientSocket</class> applies if a client connection is involved and the State value will be set to <code>NTC::CONNECTED</code>.  If a client disconnects, the <fl>Feedback</fl> function will be called in the same manner but with a State value of <code>NTC::DISCONNECTED</code>.</p>
<p>Information on all active connections can be read from the <fl>Clients</fl> field.  This contains a linked list of IP addresses and their connections to the server port.</p>
<p>To send data to a client, write it to the target <class name="ClientSocket">ClientSocket</class>.</p>
<p>All data that is received from client sockets will be passed to the <fl>Incoming</fl> feedback routine with a reference to a <class name="ClientSocket">ClientSocket</class>.</p>
<header>SSL Server Certificates</header>
<p>For SSL server sockets, custom certificates can be specified using the <fl>SSLCertificate</fl> field. Both PEM and PKCS#12 formats are supported across all platforms.</p>
<p>Example with PKCS#12 certificate:</p>
<p>
<code/><code> netsocket = obj.new('netsocket', { flags = 'SERVER|SSL', port = 8443, sslCertificate = 'config:ssl/server.p12', sslKeyPassword = 'password123' }) </code><code/></p>
<p>Example with PEM certificate and separate private key:</p>
<p>
<code/><code> netsocket = obj.new('netsocket', { flags = 'SERVER|SSL', port = 8443, sslCertificate = 'config:ssl/server.crt', sslPrivateKey = 'config:ssl/server.key' }) </code><code/></p>
<p>If no custom certificate is specified, the framework will automatically use a localhost self-signed certificate for development purposes.  For production use, always specify a proper certificate signed by a trusted CA.</p></description>
    <source>
      <file path="netsocket/">netsocket.cpp</file>
      <file path="netsocket/">netsocket_fields.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Disable</name>
      <comment>Disables sending and receiving on the socket.</comment>
      <prototype>ERR acDisable(*Object)</prototype>
      <description>
<p>This method will stop all sending and receiving of data over the socket.  This is irreversible.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Failed">Shutdown operation failed.</error>
      </result>
    </action>

    <action>
      <name>Read</name>
      <comment>Read information from the socket.</comment>
      <prototype>ERR acRead(*Object, APTR Buffer, INT Length, INT *Result)</prototype>
      <input>
        <param type="APTR" name="Buffer">Points a buffer that will receive the data.</param>
        <param type="INT" name="Length">The total number of bytes to read from the object.  This value cannot exceed the size of the Buffer.</param>
        <param type="INT" name="Result">The Read action will write this parameter with the total number of bytes read into the Buffer.</param>
      </input>
      <description>
<p>The Read() action will read incoming data from the socket and write it to the provided buffer.  If the socket connection is safe, success will always be returned by this action regardless of whether or not data was available.  Almost all other return codes indicate permanent failure and the socket connection will be closed when the action returns.</p>
<p>Because NetSocket objects are non-blocking, reading from the socket is normally performed in the <fl>Incoming</fl> callback.  Reading from the socket when no data is available will result in an immediate return with no output.</p>
      </description>
      <result>
        <error code="Okay">Read successful (if no data was on the socket, success is still indicated).</error>
        <error code="Failed">A permanent failure has occurred and socket has been closed.</error>
        <error code="InvalidState">The socket is not in a state that allows reading (e.g. during SSL handshake).</error>
        <error code="Disconnected">The socket connection is closed.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </action>

    <action>
      <name>Write</name>
      <comment>Writes data to the socket.</comment>
      <prototype>ERR acWrite(*Object, APTR Buffer, INT Length, INT Result)</prototype>
      <input>
        <param type="APTR" name="Buffer">A buffer containing the data that will be written to the object.</param>
        <param type="INT" name="Length">The total number of bytes to write to the object.</param>
        <param type="INT" name="Result">This parameter with be updated with the total number of bytes written from the Buffer.</param>
      </input>
      <description>
<p>Writing data to a socket will send raw data to the remote client or server.  Write connections are buffered, so any data overflow generated in a call to this action will be buffered into a software queue.  Resource limits placed on the software queue are governed by the <fl>MsgLimit</fl> field setting.</p>
<p>Do not use this action if in server mode.  Instead, write to the <class name="ClientSocket">ClientSocket</class> object that will receive the data.</p>
<p>It is possible to write to a socket in advance of any connection being made. The netsocket will queue the data and automatically send it once the first connection has been made.</p>
      </description>
    </action>

  </actions>

  <methods>
    <method>
      <name>Connect</name>
      <comment>Connects a NetSocket to an address.</comment>
      <prototype>ERR ns::Connect(OBJECTPTR Object, CSTRING Address, INT Port)</prototype>
      <input>
        <param type="CSTRING" name="Address">String containing either a domain name (e.g. <code>www.google.com</code>) or an IP address (e.g. <code>123.123.123.123</code>)</param>
        <param type="INT" name="Port">Remote port to connect to.</param>
      </input>
      <description>
<p>This method initiates the connection process with a target IP address.  The address to connect to can be specified either as a domain name, in which case the domain name is first resolved to an IP address, or the address can be specified in standard IP notation.</p>
<p>This method is non-blocking.  It will return immediately and the connection will be resolved once the server responds to the connection request or an error occurs.  Client code should subscribe to the <fl>State</fl> field to respond to changes to the connection state.</p>
<p>Pre-Condition: Must be in a connection state of <code>NTC::DISCONNECTED</code></p>
<p>Post-Condition: If this method returns <code>ERR::Okay</code>, will be in state <code>NTC::CONNECTING</code>.</p>
      </description>
      <result>
        <error code="Okay">The NetSocket connecting process was successfully started.</error>
        <error code="Failed">The connect failed for some other reason.</error>
        <error code="Args">Address was NULL, or Port was not in the required range.</error>
        <error code="InvalidState">The NetSocket was not in the state <code>NTC::DISCONNECTED</code>.</error>
        <error code="HostNotFound">Host name resolution failed.</error>
      </result>
    </method>

    <method>
      <name>DisconnectClient</name>
      <comment>Disconnects all sockets connected to a specific client IP.</comment>
      <prototype>ERR ns::DisconnectClient(OBJECTPTR Object, objNetClient * Client)</prototype>
      <input>
        <param type="objNetClient *" name="Client">The client to be disconnected.</param>
      </input>
      <description>
<p>For server sockets with client IP connections, this method will terminate all socket connections made to a specific client IP and free the resources allocated to it.  If <fl>Feedback</fl> is defined, a <code>DISCONNECTED</code> state message will also be issued for each socket connection.</p>
<p>If only one socket connection needs to be disconnected, please use <method>DisconnectSocket</method>.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
        <error code="WrongClass">The Client object is not of type <code>NetClient</code>.</error>
      </result>
    </method>

    <method>
      <name>DisconnectSocket</name>
      <comment>Disconnects a single socket that is connected to a client IP address.</comment>
      <prototype>ERR ns::DisconnectSocket(OBJECTPTR Object, objClientSocket * Socket)</prototype>
      <input>
        <param type="objClientSocket *" name="Socket">The client socket to be disconnected.</param>
      </input>
      <description>
<p>This method will disconnect a socket connection for a given client.  If <fl>Feedback</fl> is defined, a <code>DISCONNECTED</code> state message will also be issued.</p>
<p>NOTE: To terminate the connection of a socket acting as the client, either free the object or return/raise <code>ERR::Terminate</code> during <fl>Incoming</fl> feedback.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

    <method>
      <name>GetLocalIPAddress</name>
      <comment>Returns the IP address that the socket is locally bound to.</comment>
      <prototype>ERR ns::GetLocalIPAddress(OBJECTPTR Object, struct IPAddress * Address)</prototype>
      <input>
        <param type="struct IPAddress *" name="Address">Pointer to an IPAddress structure which will be set to the result of the query if successful.</param>
      </input>
      <description>
<p>This method performs the POSIX equivalent of <code>getsockname()</code>.  It returns the current address to which the NetSocket is bound.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Failed">General failure.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>Address</name>
      <comment>An IP address or domain name to connect to.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>If this field is set with an IP address or domain name prior to initialisation, an attempt to connect to that location will be made when the NetSocket is initialised.  Post-initialisation this field cannot be set by the client, however calls to <method>Connect</method> will result in it being updated so that it always reflects the named address of the current connection.</p>
      </description>
    </field>

    <field>
      <name>Backlog</name>
      <comment>The maximum number of connections that can be queued against the socket.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>Incoming connections to NetSocket objects are queued until they are answered by the object.  Setting the Backlog adjusts the maximum number of connections on the queue, which otherwise defaults to 10.</p>
<p>If the backlog is exceeded, subsequent connections to the socket should expect a connection refused error.</p>
      </description>
    </field>

    <field>
      <name>ClientData</name>
      <comment>A client-defined value that can be useful in action notify events.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>APTR</type>
      <description>
<p>This is a free-entry field value that can store client data for future reference.</p>
      </description>
    </field>

    <field>
      <name>ClientLimit</name>
      <comment>The maximum number of clients (unique IP addresses) that can be connected to a server socket.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The ClientLimit value limits the maximum number of IP addresses that can be connected to the socket at any one time. For socket limits per client, see the <fl>SocketLimit</fl> field.</p>
      </description>
    </field>

    <field>
      <name>Clients</name>
      <comment>For server sockets, lists all clients connected to the server.</comment>
      <access read="R">Read</access>
      <type class="NetClient">*NetClient</type>
    </field>

    <field>
      <name>Error</name>
      <comment>Information about the last error that occurred during a NetSocket operation</comment>
      <access read="R">Read</access>
      <type>ERR</type>
      <description>
<p>This field describes the last error that occurred during a NetSocket operation:</p>
<p>In the case where a NetSocket object enters the <code>NTC::DISCONNECTED</code> state from the <code>NTC::CONNECTED</code> state, this field can be used to determine how a TCP connection was closed.</p>
<types type="Error">
<type name="ERR::Okay">The connection was closed gracefully.  All data sent by the peer has been received.</type>
<type name="ERR::Disconnected">The connection was broken in a non-graceful fashion. Data may be lost.</type>
<type name="ERR::TimeOut">The connect operation timed out.</type>
<type name="ERR::ConnectionRefused">The connection was refused by the remote host.  Note: This error will not occur on Windows, and instead the Error field will be set to <code>ERR::Failed</code>.</type>
<type name="ERR::NetworkUnreachable">The network was unreachable.  Note: This error will not occur on Windows, and instead the Error field will be set to <code>ERR::Failed</code>.</type>
<type name="ERR::HostUnreachable">No path to host was found.  Note: This error will not occur on Windows, and instead the Error field will be set to <code>ERR::Failed</code>.</type>
<type name="ERR::Failed">An unspecified error occurred.</type>
</types>
      </description>
    </field>

    <field>
      <name>Feedback</name>
      <comment>A callback trigger for when the state of the NetSocket is changed.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The client can define a function in this field to receive notifications whenever the state of the socket changes - typically connection messages.</p>
<p>In server mode, the function must follow the prototype <code>Function(*NetSocket, *ClientSocket, NTC State)</code>.  Otherwise <code>Function(*NetSocket, NTC State)</code>.</p>
<p>The <code>NetSocket</code> parameter refers to the NetSocket object to which the function is subscribed.  In server mode, <code>ClientSocket</code> refers to the <class name="ClientSocket">ClientSocket</class> on which the state has changed.</p>
      </description>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags.</comment>
      <access read="R" write="W">Read/Write</access>
      <type lookup="NSF">NSF</type>
      <description>
<types lookup="NSF"/>
      </description>
    </field>

    <field>
      <name>Handle</name>
      <comment>Platform specific reference to the network socket handle.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>APTR</type>
    </field>

    <field>
      <name>Incoming</name>
      <comment>Callback that is triggered when the socket receives data.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The Incoming field can be set with a custom function that will be called whenever the socket receives data.  The function prototype for C++ is <code>ERR Incoming(*NetSocket, APTR Meta)</code>.  For Fluid use <code>function Incoming(NetSocket)</code>.</p>
<p>The <code>NetSocket</code> parameter refers to the NetSocket object.  <code>Meta</code> is optional userdata from the <code>FUNCTION</code>.</p>
<p>Retrieve data from the socket with the <action>Read</action> action. Reading at least some of the data from the socket is compulsory - if the function does not do this then the data will be cleared from the socket when the function returns. If the callback function returns/raises <code>ERR::Terminate</code> then the Incoming field will be cleared and the function will no longer be called.  All other error codes are ignored.</p>
      </description>
    </field>

    <field>
      <name>MsgLimit</name>
      <comment>Limits the size of incoming and outgoing data packets.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
      <description>
<p>This field limits the size of incoming and outgoing message queues (each socket connection receives two queues assigned to both incoming and outgoing messages).  The size is defined in bytes.  Sending or receiving messages that overflow the queue results in the connection being terminated with an error.</p>
<p>The default setting is 1 megabyte.</p>
      </description>
    </field>

    <field>
      <name>OutQueueSize</name>
      <comment>The number of bytes on the socket's outgoing queue.</comment>
      <access read="G">Get</access>
      <type>INT</type>
    </field>

    <field>
      <name>Outgoing</name>
      <comment>Callback that is triggered when a socket is ready to send data.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The Outgoing field can be set with a custom function that will be called whenever the socket is ready to send data. In client mode the function must be in the format <code>ERR Outgoing(*NetSocket, APTR Meta)</code>.  In server mode the function format is <code>ERR Outgoing(*NetSocket, *ClientSocket, APTR Meta)</code>.</p>
<p>To send data to the NetSocket object, call the <action>Write</action> action.  If the callback function returns an error other than <code>ERR::Okay</code> then the Outgoing field will be cleared and the function will no longer be called.</p>
      </description>
    </field>

    <field>
      <name>Port</name>
      <comment>The port number to use for initiating a connection.</comment>
      <access read="R" write="I">Read/Init</access>
      <type>INT</type>
    </field>

    <field>
      <name>SSLCertificate</name>
      <comment>SSL certificate file to use if in server mode.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>Set SSLCertificate to the path of an SSL certificate file to use when the NetSocket is in server mode.  The certificate file must be in a supported format such as PEM, CRT, or P12.  If no certificate is defined, the NetSocket will either self-sign or use a localhost certificate, if available.</p>
      </description>
    </field>

    <field>
      <name>SSLKeyPassword</name>
      <comment>SSL private key password.</comment>
      <access read="R" write="S">Read/Set</access>
      <type>STRING</type>
      <description>
<p>If the SSL private key is encrypted, set this field to the password required to decrypt it.  If the private key is not encrypted, this field can be left empty.</p>
      </description>
    </field>

    <field>
      <name>SocketLimit</name>
      <comment>Limits the number of connected sockets per client IP address.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
    </field>

    <field>
      <name>State</name>
      <comment>The current connection state of the NetSocket object.</comment>
      <access read="G" write="S">Get/Set</access>
      <type lookup="NTC">NTC</type>
      <description>
<p>The State reflects the connection state of the NetSocket.  If the <fl>Feedback</fl> field is defined with a function, it will be called automatically whenever the state is changed.  Note that the ClientSocket parameter will be NULL when the Feedback function is called.</p>
<p>Note that in server mode this State value should not be used as it cannot reflect the state of all connected client sockets.  Each <class name="ClientSocket">ClientSocket</class> carries its own independent State value for use instead.</p>
<types lookup="NTC"/>
      </description>
    </field>

    <field>
      <name>TotalClients</name>
      <comment>Indicates the total number of clients currently connected to the socket (if in server mode).</comment>
      <access read="R">Read</access>
      <type>INT</type>
      <description>
<p>In server mode, the NetSocket will maintain a count of the total number of clients currently connected to the socket. You can read the total number of connections from this field.</p>
<p>In client mode, this field is always set to zero.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="NSF">
      <const name="DISABLE_SERVER_VERIFY">Disable SSL certificate verification (for testing only).</const>
      <const name="LOG_ALL">Print extra log messages.</const>
      <const name="MULTI_CONNECT">Allow multiple connections from the same IP when in server mode.</const>
      <const name="SERVER">Puts the socket into server mode.  In this state the netsocket object will wait for incoming connections from clients.</const>
      <const name="SSL">Use Secure Sockets Layer for all communication.</const>
      <const name="SYNCHRONOUS">Use synchronous (blocking) network calls.</const>
    </constants>

    <constants lookup="NTC" comment="NetSocket states">
      <const name="CONNECTED">There is an active connection at present.</const>
      <const name="CONNECTING">A connection is being established.</const>
      <const name="DISCONNECTED">There is no connection.</const>
      <const name="HANDSHAKING">An SSL connection is being established.</const>
      <const name="MULTISTATE">In server mode the NetSocket will be set to MULTISTATE to indicate one or more client connections.</const>
      <const name="RESOLVING">The host name is being resolved.</const>
    </constants>

  </types>
  <structs>
    <struct name="IPAddress">
      <field name="Data" type="INT" size="4">128-bit array for supporting both V4 and V6 IP addresses.</field>
      <field name="Type" type="IPADDR" lookup="IPADDR">Identifies the address Data value as a V4 or V6 address type.</field>
      <field name="Pad" type="INT">Unused padding for 64-bit alignment</field>
    </struct>

  </structs>
</book>
