<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="class.xsl"?>

<book>
  <info>
    <name>Thread</name>
    <type>class</type>
    <module>Core</module>
    <comment>Threads are created and managed by the Thread class.</comment>
    <version>1</version>
    <id>1e0f9fdd</id>
    <idstring>THREAD</idstring>
    <category>System</category>
    <copyright>Paul Manias 1996-2025</copyright>
    <description>
<p>The Thread class provides the means to execute and manage threads within an application.</p>
<p>The following code illustrates how to create a temporary thread that is automatically destroyed after the <code>thread_entry()</code> function has completed:</p>
<pre>static ERR thread_entry(objThread *Thread) {
   return ERR::Okay;
}

objThread::create thread = { fl::Routine(thread_entry), fl::Flags(THF::AUTO_FREE) };
if (thread.ok()) thread-&gt;activate(thread);
</pre>
<p>To initialise the thread with data, call <method>SetData</method> prior to execution and read the <fl>Data</fl> field from within the thread routine.</p></description>
    <source>
      <file path="../classes/">class_thread.cpp</file>
    </source>
  </info>

  <actions>
    <action>
      <name>Activate</name>
      <comment>Spawn a new thread that calls the function referenced in the <fl>Routine</fl> field.</comment>
      <prototype>ERR acActivate(*Object)</prototype>
    </action>

    <action>
      <name>Deactivate</name>
      <comment>Stops a thread.</comment>
      <prototype>ERR acDeactivate(*Object)</prototype>
      <description>
<p>Deactivating an active thread will cause it to stop immediately.  Stopping a thread in this manner is dangerous and could result in an unstable application.</p>
      </description>
    </action>

    <action>
      <name>Free</name>
      <comment>Remove the object and its resources.</comment>
      <prototype>ERR FreeResource(*Object)</prototype>
      <description>
<p>Terminating a thread object will destroy the object unless the thread is currently active.  If an attempt to free an active thread is made then it will be marked for termination so as to avoid the risk of system corruption.</p>
      </description>
    </action>

  </actions>

  <methods>
    <method>
      <name>SetData</name>
      <comment>Attaches data to the thread.</comment>
      <prototype>ERR th::SetData(OBJECTPTR Object, APTR Data, INT Size)</prototype>
      <input>
        <param type="APTR" name="Data">Pointer to the data buffer.</param>
        <param type="INT" name="Size">Size of the data buffer.  If zero, the pointer is stored directly, with no copy operation taking place.</param>
      </input>
      <description>
<p>Use the SetData() method prior to activating a thread so that it can be initialised with user data.  The thread will be able to read the data from the <fl>Data</fl> field.</p>
<p>A copy of the provided data buffer will be stored with the thread object, so there is no need to retain the original data after this method has returned.  In some cases it may be desirable to store a direct pointer value and bypass the copy operation.  To do this, set the Size parameter to zero.</p>
      </description>
      <result>
        <error code="Okay">Operation successful.</error>
        <error code="Args">Invalid arguments passed to function.</error>
        <error code="AllocMemory">A call to AllocMemory() failed to create a new memory block.</error>
        <error code="NullArgs">Function call missing argument value(s)</error>
      </result>
    </method>

  </methods>

  <fields>
    <field>
      <name>Callback</name>
      <comment>A function reference that will be called when the thread is started.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>Set a function reference here to receive a notification when the thread finishes processing.  The callback will be executed in the context of the main program loop to minimise resource locking issues.</p>
<p>The prototype for the callback routine is <code>void Callback(objThread *Thread)</code>.</p>
      </description>
    </field>

    <field>
      <name>Data</name>
      <comment>Pointer to initialisation data for the thread.</comment>
      <access read="G">Get</access>
      <type>APTR</type>
      <description>
<p>The Data field will point to a data buffer if the <method>SetData</method> method has previously been called to store data in the thread object.  It is paired with the <fl>DataSize</fl> field, which reflects the size of the data buffer.</p>
      </description>
    </field>

    <field>
      <name>DataSize</name>
      <comment>The size of the buffer referenced in the Data field.</comment>
      <access read="R">Read</access>
      <type>INT</type>
    </field>

    <field>
      <name>Error</name>
      <comment>Reflects the error code returned by the thread routine.</comment>
      <access read="R">Read</access>
      <type>ERR</type>
    </field>

    <field>
      <name>Flags</name>
      <comment>Optional flags can be defined here.</comment>
      <access read="R" write="I">Read/Init</access>
      <type lookup="THF">THF</type>
      <description>
<types lookup="THF"/>
      </description>
    </field>

    <field>
      <name>Routine</name>
      <comment>A function reference that will be called when the thread is started.</comment>
      <access read="G" write="S">Get/Set</access>
      <type>FUNCTION</type>
      <description>
<p>The routine that will be executed when the thread is activated must be specified here.  The function prototype is <code>ERR routine(objThread *Thread)</code>.</p>
<p>When the routine is called, a reference to the thread object is passed as a parameter.  Once the routine has finished processing, the resulting error code will be stored in the thread object's <fl>Error</fl> field.</p>
      </description>
    </field>

    <field>
      <name>StackSize</name>
      <comment>The stack size to allocate for the thread.</comment>
      <access read="R" write="W">Read/Write</access>
      <type>INT</type>
      <description>
<p>The initial size of the thread's stack can be modified by setting this field.  It may also be read prior to activation in order to check the default stack size.  Changes to the stack size when the thread is active will have no effect.</p>
<p>On some platforms it may not be possible to preset the stack size and the provided value will be ignored.</p>
      </description>
    </field>

  </fields>
  <types>
    <constants lookup="THF" comment="Thread flags">
      <const name="AUTO_FREE">Automatically destroy the Thread object when the user routine has completed.</const>
    </constants>

  </types>
  <structs>
  </structs>
</book>
