<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="module.xsl"?>

<book>
  <info>
    <name>Font</name>
    <type>module</type>
    <version>1</version>
    <copyright>Paul Manias Â© 1998-2024</copyright>
    <classes>
      <class>Font</class>
    </classes>
  </info>

  <function>
    <name>CharWidth</name>
    <comment>Returns the width of a character.</comment>
    <prototype>LONG fntCharWidth(objFont * Font, ULONG Char, ULONG KChar, LONG * Kerning)</prototype>
    <input>
      <param type="objFont *" name="Font">The font to use for calculating the character width.</param>
      <param type="ULONG" name="Char">A unicode character.</param>
      <param type="ULONG" name="KChar">A unicode character to use for calculating the font kerning (optional).</param>
      <param type="LONG *" name="Kerning">The resulting kerning value (optional).</param>
    </input>
    <description>
<p>This function will return the pixel width of a font character.  The character is specified as a unicode value in the Char parameter. Kerning values can also be returned, which affect the position of the character along the horizontal. The previous character in the word is set in KChar and the kerning value will be returned in the Kerning parameter.  If kerning information is not required, set the KChar and Kerning parameters to zero.</p>
<p>The font's GlyphSpacing value is not used in calculating the character width.</p>
    </description>
    <result type="LONG">The pixel width of the character will be returned.</result>
  </function>

  <function>
    <name>GetList</name>
    <comment>Returns a list of all available system fonts.</comment>
    <prototype>ERROR fntGetList(struct FontList ** Result)</prototype>
    <input>
      <param type="struct FontList **" name="Result">The font list is returned here.</param>
    </input>
    <description>
<p>This function returns a linked list of all available system fonts.</p>
    </description>
    <result type="ERROR">
      <error code="Okay">Operation successful.</error>
      <error code="AccessObject">An attempt to gain exclusive access to a shared object failed.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>InstallFont</name>
    <comment>Installs a new font.</comment>
    <prototype>ERROR fntInstallFont(CSTRING Files)</prototype>
    <input>
      <param type="CSTRING" name="Files">A list of the font files that are to be installed must be specified here.  If there is more than one data file, separate each file name with a semi-colon.</param>
    </input>
    <description>
<p>The InstallFont() function is used to install new fonts on a system running Parasol.  While it is possible for users to download new font files and install them by hand, this is a process that is too difficult for novices and is open to mistakes on the part of the user.  By using a program that uses the InstallFont() function, the installation process can take place automatically.</p>
<p>To install a new font, you only need to know the location of the font file(s).  The rest of the information about the font will be derived after an analysis of the data.</p>
<p>Once this function is called, the data files will be copied into the correct sub-directory and the font registration files will be updated to reflect the presence of the new font.  The font will be available immediately thereafter, so there is no need to reset the system to acknowledge the presence of the font.</p>
    </description>
    <result type="ERROR">
      <error code="Okay">Operation successful.</error>
      <error code="NoSupport">This request is not supported.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>RemoveFont</name>
    <comment>Removes an installed font from the system.</comment>
    <prototype>ERROR fntRemoveFont(CSTRING Name)</prototype>
    <input>
      <param type="CSTRING" name="Name">The name of the font face (family name) that is to be removed.</param>
    </input>
    <description>
<p>RemoveFont() will remove any font that is installed in the system.  Once a font has been removed, the data is permanently destroyed and it cannot be recovered.  To remove a font, specify its family name only. All associated styles for that font will be deleted.</p>
<p>This function may fail if attempting to remove a font that is currently in use.</p>
    </description>
    <result type="ERROR">
      <error code="Okay">Operation successful.</error>
      <error code="Args">Invalid arguments passed to function.</error>
      <error code="DeleteFile">Deletion of a folder or file failed (e.g. permissions, read-only media).</error>
    </result>
  </function>

  <function>
    <name>SelectFont</name>
    <comment>Searches for a 'best fitting' font file based on select criteria.</comment>
    <prototype>ERROR fntSelectFont(CSTRING Name, CSTRING Style, LONG Point, FTF Flags, CSTRING * Path)</prototype>
    <input>
      <param type="CSTRING" name="Name">The name of a font face, or multiple faces in CSV format.  Using camel-case for each word is compulsory.</param>
      <param type="CSTRING" name="Style">The required style, e.g. Bold or Italic.  Using camel-case for each word is compulsory.</param>
      <param type="LONG" name="Point">Preferred point size.</param>
      <param type="FTF" name="Flags" lookup="FTF">Optional flags.</param>
      <param type="CSTRING *" name="Path">The location of the best-matching font file is returned in this parameter.</param>
    </input>
    <description>
<p>This function searches for the closest matching font based on the details provided by the client.  The details that can be searched for include the name, point size and style of the desired font.</p>
<p>It is possible to list multiple faces in order of their preference in the Name parameter.  For instance <code>Sans Serif,Source Sans,*</code> will give preference to <code>Sans Serif</code> and will look for <code>Source Sans</code> if the first choice font is unavailable.  The use of the <code>*</code> wildcard indicates that the default system font should be used in the event that neither of the other choices are available.  Note that omitting this wildcard will raise the likelihood of <code>ERR_Search</code> being returned in the event that neither of the preferred choices are available.</p>
<p>Flags that alter the search behaviour are <code>FTF::PREFER_SCALED</code>, <code>FTF::PREFER_FIXED</code> and <code>FTF::ALLOW_SCALE</code>.</p>
    </description>
    <result type="ERROR">
      <error code="Okay">Operation successful.</error>
      <error code="Search">A search routine in this function failed.</error>
      <error code="AccessObject">An attempt to gain exclusive access to a shared object failed.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>SetDefaultSize</name>
    <comment>Sets the default font size for the application.</comment>
    <prototype>DOUBLE fntSetDefaultSize(DOUBLE Size)</prototype>
    <input>
      <param type="DOUBLE" name="Size">The new default point size.  If zero, nothing is done and the current size is returned.</param>
    </input>
    <description>
<p>This function is used to set the default font size for the application.  This will affect fonts that are created with proportional sizes (e.g. a point size of 150% and a default point of 10 would result in a 15 point font).  Also, Font objects with no preset size will be set to the default size.</p>
<p>Please note that the default size is defined by the global style value on the xpath <code>/interface/@fontsize</code>.  This can also be overridden by the user's style preference.  We recommend against calling SetDefaultSize() unless absolutely necessary.</p>
    </description>
    <result type="DOUBLE">The previous font size is returned.</result>
  </function>

  <function>
    <name>StringWidth</name>
    <comment>Returns the pixel width of any given string in relation to a font's settings.</comment>
    <prototype>LONG fntStringWidth(objFont * Font, CSTRING String, LONG Chars)</prototype>
    <input>
      <param type="objFont *" name="Font">An initialised font object.</param>
      <param type="CSTRING" name="String">The string to be calculated.</param>
      <param type="LONG" name="Chars">The number of characters (not bytes, so consider UTF-8 serialisation) to be used in calculating the string length, or -1 to use the entire string.</param>
    </input>
    <description>
<p>This function calculates the pixel width of any string in relation to a font's object definition.  The routine takes into account any line feeds that might be specified in the String, so if the String contains 8 lines, then the width of the longest line will be returned.</p>
<p>Word wrapping will not be taken into account, even if it has been enabled in the font object.</p>
    </description>
    <result type="LONG">The pixel width of the string is returned - this will be zero if there was an error or the string is empty.</result>
  </function>

  <types>
    <constants lookup="FSS" comment="Options for the StringSize() function.">
      <const name="ALL">Process all characters.</const>
      <const name="LINE">Terminate operation at the first line feed or word-wrap.</const>
    </constants>

    <constants lookup="FTF" comment="Font flags">
      <const name="ALLOW_SCALE">Allows switching to a suitable scalable font if a fixed point size is unavailable.  Equivalent to ending a font face with the '*' wildcard.</const>
      <const name="BASE_LINE">The Font's Y coordinate is the base line.</const>
      <const name="BOLD">Font is described as having a bold weight (read only).</const>
      <const name="HEAVY_LINE">Underline the font with a double-sized line, using the colour defined in UnderlineRGB.</const>
      <const name="ITALIC">Font is described as using italics (read only).</const>
      <const name="KERNING">The loaded font is embedded with kerning information (read only).</const>
      <const name="PREFER_FIXED">A fixed size font (monochrome, no transforms) is preferred to the equivalent scalable font.</const>
      <const name="PREFER_SCALED">A scaled font is preferred over the equivalent fixed size font.</const>
      <const name="REQUIRE_FIXED">A fixed size font is required and not a scalable font.</const>
      <const name="REQUIRE_SCALED">A scaled font is required and not a fixed size font.</const>
      <const name="SCALABLE">This is set if the font is scalable, otherwise assume fixed.</const>
    </constants>

  </types>
  <structs>
    <struct name="FontList" comment="For GetList(), describes a system font.">
      <field name="Next" type="struct FontList *">Pointer to the next entry in the list.</field>
      <field name="Name" type="STRING">The name of the font face.</field>
      <field name="Points" type="LONG *" size="0">Pointer to an array of fixed point sizes supported by the font.</field>
      <field name="Styles" type="STRING">Supported styles are listed here in CSV format.</field>
      <field name="Scalable" type="BYTE">TRUE if the font is scalable.</field>
      <field name="Reserved1" type="BYTE">Do not use.</field>
      <field name="Reserved2" type="WORD">Do not use.</field>
    </struct>

  </structs>
</book>
