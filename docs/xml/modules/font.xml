<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="module.xsl"?>

<book>
  <info>
    <name>Font</name>
    <type>module</type>
    <version>1</version>
    <copyright>Paul Manias Â© 1998-2024</copyright>
    <classes>
      <class>Font</class>
    </classes>
  </info>

  <function>
    <name>CharWidth</name>
    <comment>Returns the width of a character.</comment>
    <prototype>LONG fnt::CharWidth(objFont * Font, ULONG Char)</prototype>
    <input>
      <param type="objFont *" name="Font">The font to use for calculating the character width.</param>
      <param type="ULONG" name="Char">A unicode character.</param>
    </input>
    <description>
<p>This function will return the pixel width of a bitmap font character.  The character is specified as a unicode value in the Char parameter.</p>
<p>The font's GlyphSpacing value is not used in calculating the character width.</p>
    </description>
    <result type="LONG">The pixel width of the character will be returned.</result>
  </function>

  <function>
    <name>GetList</name>
    <comment>Returns a list of all available system fonts.</comment>
    <prototype>ERR fnt::GetList(struct FontList ** Result)</prototype>
    <input>
      <param type="struct FontList **" name="Result">The font list is returned here.</param>
    </input>
    <description>
<p>This function returns a linked list of all available system fonts.  The list must be terminated once it is no longer required.</p>
    </description>
    <result type="ERR">
      <error code="Okay">Operation successful.</error>
      <error code="AccessObject">Access to the font database was denied, or the object does not exist.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>RefreshFonts</name>
    <comment>Refreshes the system font list with up-to-date font information.</comment>
    <prototype>ERR fnt::RefreshFonts()</prototype>
    <description>
<p>This function scans the <code>fonts:</code> volume and refreshes the font database.</p>
<p>Refreshing fonts can take an extensive amount of time as each font file needs to be completely analysed for information.  The <code>fonts:fonts.cfg</code> file will be re-written on completion to reflect current font settings.</p>
    </description>
    <result type="ERR">
      <error code="Okay">Fonts were successfully refreshed.</error>
      <error code="AccessObject">Access to the font database was denied, or the object does not exist.</error>
    </result>
  </function>

  <function>
    <name>ResolveFamilyName</name>
    <comment>Convert a CSV family string to a single family name.</comment>
    <prototype>ERR fnt::ResolveFamilyName(CSTRING String, CSTRING * Result)</prototype>
    <input>
      <param type="CSTRING" name="String">A CSV family string to resolve.</param>
      <param type="CSTRING *" name="Result">The nominated family name is returned in this parameter.</param>
    </input>
    <description>
<p>Use ResolveFamilyName() to convert complex CSV family strings to a single family name.  The provided String will be parsed in sequence, with priority given from left to right.  If a single asterisk is used to terminate the list, it is guaranteed that the system default will be returned if no valid match is made.</p>
<p>It is valid for individual names to utilise the common wildcards <code>?</code> and <code>*</code> to make a match.  E.g. <code>Times New *</code> would be able to match to <code>Times New Roman</code> if available.</p>
    </description>
    <result type="ERR">
      <error code="Okay">Operation successful.</error>
      <error code="Search">It was not possible to resolve the String to a known font family.</error>
      <error code="AccessObject">Access to the font database was denied, or the object does not exist.</error>
      <error code="GetField">A call to GetField() failed to retrieve a field value.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>SelectFont</name>
    <comment>Searches for a 'best fitting' font file, based on family name and style.</comment>
    <prototype>ERR fnt::SelectFont(CSTRING Name, CSTRING Style, CSTRING * Path, FMETA * Meta)</prototype>
    <input>
      <param type="CSTRING" name="Name">The name of a font face to search for (case insensitive).</param>
      <param type="CSTRING" name="Style">The required style, e.g. Bold or Italic.  Using camel-case for each word is compulsory.</param>
      <param type="CSTRING *" name="Path">The location of the best-matching font file is returned in this parameter.</param>
      <param type="FMETA *" name="Meta" lookup="FMETA">Optional, returns additional meta information about the font file.</param>
    </input>
    <description>
<p>This function resolves a font family Name and Style to a font file path.  It works on a best efforts basis; the Name must exist but the Style is a non-mandatory preference.</p>
<p>The resulting Path must be freed once it is no longer required.</p>
    </description>
    <result type="ERR">
      <error code="Okay">Operation successful.</error>
      <error code="Search">Unable to find a suitable font.</error>
      <error code="AccessObject">Access to the font database was denied, or the object does not exist.</error>
      <error code="NullArgs">Function call missing argument value(s)</error>
    </result>
  </function>

  <function>
    <name>StringWidth</name>
    <comment>Returns the pixel width of any given string in relation to a font's settings.</comment>
    <prototype>LONG fnt::StringWidth(objFont * Font, CSTRING String, LONG Chars)</prototype>
    <input>
      <param type="objFont *" name="Font">An initialised font object.</param>
      <param type="CSTRING" name="String">The string to be calculated.</param>
      <param type="LONG" name="Chars">The number of characters (not bytes, so consider UTF-8 serialisation) to be used in calculating the string length, or -1 to use the entire string.</param>
    </input>
    <description>
<p>This function calculates the pixel width of any string in relation to a font's object definition.  The routine takes into account any line feeds that might be specified in the String, so if the String contains 8 lines, then the width of the longest line will be returned.</p>
<p>Word wrapping will not be taken into account, even if it has been enabled in the font object.</p>
    </description>
    <result type="LONG">The pixel width of the string is returned - this will be zero if there was an error or the string is empty.</result>
  </function>

  <types>
    <constants lookup="ALIGN" comment="Universal values for alignment of graphics and text">
      <const name="BOTTOM">Align to bottom</const>
      <const name="CENTER">Synonym for <code>HORIZONTAL | VERTICAL</code></const>
      <const name="HORIZONTAL">Align to horizontal center</const>
      <const name="LEFT">Align to left</const>
      <const name="MIDDLE">Synonym for <code>HORIZONTAL | VERTICAL</code></const>
      <const name="RIGHT">Align to right</const>
      <const name="TOP">Align to top</const>
      <const name="VERTICAL">Align to vertical center</const>
    </constants>

    <constants lookup="FMETA" comment="Result flags for the SelectFont() function.">
      <const name="HIDDEN">The font should not appear in any named list shown to the user.</const>
      <const name="HINT_INTERNAL">The Freetype hinter should be used.</const>
      <const name="HINT_LIGHT">The light version of the Freetype hinter should be used.</const>
      <const name="HINT_NORMAL">The hinting information provided by the font should be given preference.</const>
      <const name="SCALED">The font is scalable (assume fixed otherwise).</const>
      <const name="VARIABLE">This is a scalable font featuring variable metrics.</const>
    </constants>

    <constants lookup="FSS" comment="Options for the StringSize() function.">
      <const name="ALL">Process all characters.</const>
      <const name="LINE">Terminate operation at the first line feed or word-wrap.</const>
    </constants>

    <constants lookup="FTF" comment="Font flags">
      <const name="BASE_LINE">The Font's <fl>Y</fl> coordinate is the base line.</const>
      <const name="BOLD">Font is described as having a bold weight (read only).</const>
      <const name="HEAVY_LINE">Underline the font with a double-sized line, using the colour defined in <fl>Underline</fl>.</const>
      <const name="ITALIC">Font is described as using italics (read only).</const>
    </constants>

    <constants lookup="HINT" comment="Force hinting options for a font.">
      <const name="INTERNAL">The Freetype hinter will be forcibly imposed.</const>
      <const name="LIGHT">The light version of the Freetype hinter will be forcibly imposed.</const>
      <const name="NORMAL">The hinting information provided by the font will be given preference.</const>
    </constants>

  </types>
  <structs>
    <struct name="FontList" comment="For GetList(), describes a system font.">
      <field name="Next" type="struct FontList *">Pointer to the next entry in the list.</field>
      <field name="Name" type="STRING">The name of the font face.</field>
      <field name="Alias" type="STRING">Reference to another font Name if this is an alias.</field>
      <field name="Points" type="LONG *" size="0">Pointer to an array of fixed point sizes supported by the font.</field>
      <field name="Styles" type="STRING">Supported styles are listed here in CSV format.</field>
      <field name="Axes" type="STRING">For variable fonts, lists all supported axis codes in CSV format</field>
      <field name="Scalable" type="BYTE"><code>TRUE</code> if the font is scalable.</field>
      <field name="Variable" type="BYTE"><code>TRUE</code> if the font has variable metrics.</field>
      <field name="Hinting" type="HINT" lookup="HINT">Hinting options</field>
      <field name="Hidden" type="BYTE"><code>TRUE</code> if the font should be hidden from user font lists.</field>
    </struct>

    <struct name="RGB8" comment="8-bit RGB colour value." typeName="RGB8">
      <field name="Red" type="UBYTE">Red component value</field>
      <field name="Green" type="UBYTE">Green component value</field>
      <field name="Blue" type="UBYTE">Blue component value</field>
      <field name="Alpha" type="UBYTE">Alpha component value</field>
    </struct>

  </structs>
</book>
