-- $FLUID
-- Flute tests for the Audio server and associated classes.
-- These are audible tests that require human verification to confirm a full pass.

-----------------------------------------------------------------------------------------------------------------------
-- This test must result in playback of a low-tone, then followed by a high tone.

function testSequentialPlayback()
   local proc = processing.new()

   local snd = obj.new('sound', { path=glFolder .. 'low-tone.wav' })
   assert(snd, 'Failed to process low-tone wav file.')

   snd.subscribe('deactivate', function(SoundID)
      proc.signal()
   end)

   local time = mSys.preciseTime()

   err = snd.acActivate()
   assert(err == ERR_Okay, 'Failed to playback low-tone sound sample.')

   proc.sleep()

   local time_taken = mSys.preciseTime() - time

   assert(time_taken >= 480000, 'Sound sample played faster than the anticipated time scale.')
   assert(time_taken <  550000, 'Sound sample played longer than the anticipated time scale.')

   -- Second sample

   local snd = obj.new('sound', { path=glFolder .. 'high-tone.wav' })
   assert(snd, 'Failed to process high-tone wav file.')

   snd.subscribe('deactivate', function(SoundID)
      proc.signal()
   end)

   time = mSys.preciseTime()

   err = snd.acActivate()
   assert(err == ERR_Okay, 'Failed to playback low-tone sound sample.')

   proc.sleep()

   time_taken = mSys.preciseTime() - time

   assert(time_taken >= 480000, 'Second sound sample played faster than the anticipated time scale.')
   assert(time_taken <  550000, 'Second sound sample played longer than the anticipated time scale.')

   print('Time taken: ' .. time_taken)
end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
        'testSequentialPlayback'
      },
      init = function(Folder)
         glFolder = Folder
         glAudio = obj.new('audio', { name='SystemAudio' })
         if not glAudio then error('Failed to create audio object.')
         if glAudio.acActivate() != ERR_Okay then
            error('Failed to initialise audio server.')
         end
      end,
      cleanup = function()

      end
   }
