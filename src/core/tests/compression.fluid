-- $FLUID
-- Flute tests for the Compression module

-----------------------------------------------------------------------------------------------------------------------
-- This test takes advantage of the icon archive to test our compatibility levels (icons are compressed by the host
-- system rather than our compression API).

function testIconArchive()
   local file_count = 0
   local cmp = obj.new('compression', {
      path     = 'styles:icons/Default.zip',
      feedback = function(Compression, Info)
         if (Info.progress == 0) then
            file_count = file_count + 1
         end
      end
   })

   if not cmp then return end -- Non-existance of the icon archive means this test is skipped

   err = cmp.mtDecompressFile('devices/harddisk.svg', 'temp:cmp_icons/')
   assert(err == ERR_Okay, 'DecompressFile() failed: ' .. mSys.GetErrorMsg(err))

   err = cmp.mtDecompressFile('nature/*', 'temp:cmp_icons/')
   assert(err == ERR_Okay, 'DecompressFile() failed: ' .. mSys.GetErrorMsg(err))

   assert(file_count == 5, 'Decompressed file count is ' .. file_count)
end

-----------------------------------------------------------------------------------------------------------------------
-- Compress a few files and then decompress them.

function testCreateCompress()
   local cmp = obj.new('compression', { path='temp:cmp_test_json.zip', flags='!NEW' } )

   err = cmp.mtCompressFile('config:fonts/fixed/clean.fon', '')
   if (err != ERR_Okay) then error('CompressFile() failed: ' .. mSys.GetErrorMsg(err)) end

   err = cmp.mtCompressFile('fonts:fonts.cfg', '')
   if (err != ERR_Okay) then error('CompressFile() failed: ' .. mSys.GetErrorMsg(err)) end

   cmp = null
   collectgarbage()  // Flush the compressed file to disk
end

function testDecompressWild()
   local cmp = obj.new('compression', { path='temp:cmp_test_json.zip' } )

   err = cmp.mtDecompressFile('*.fon', 'temp:')
   assert(err == ERR_Okay, 'DecompressFile() failed: ' .. mSys.GetErrorMsg(err))
end

-----------------------------------------------------------------------------------------------------------------------
-- Compress an entire folder and then decompress it to a new location.

function testCompressFolder()
   local file_count = 0
   glCompressedFiles = { }

   local cmp = obj.new('compression', {
      path     = 'temp:cmp_test_scripts.zip',
      flags    = '!NEW',
      feedback = function(Compression, Info)
         if (Info.progress == 0) then
            print('Compressing file #' .. Info.index .. ', Path: \"' .. nz(Info.dest, 'NIL') .. '"')
            glCompressedFiles[Info.dest] = Info
            file_count = file_count + 1
         end
      end
   } )

   err = cmp.mtCompressFile('system:scripts/dev/', 'scripts')
   assert(err == ERR_Okay, 'CompressFile() failed: ' .. mSys.GetErrorMsg(err))

   print('Compressed ' .. file_count .. ' files.')
   glCompressedFiles['COUNT'] = file_count

   cmp = null
   collectgarbage() // Flush the compressed file to disk
end

function testDecompressFolder()
   local file_count = 0
   local cmp = obj.new('compression', {
      path     = 'temp:cmp_test_scripts.zip',
      feedback = function(Compression, Info)
         if (Info.progress == 0) then
            file_count = file_count + 1
            if (glCompressedFiles[Info.path]) then
               glCompressedFiles[Info.path].found = true
            else
               print('File "' .. Info.path .. '" not registered.')
            end
         end
      end
   } )

   err = cmp.mtDecompressFile('*', 'temp:cmp_test/')
   assert(err == ERR_Okay, 'DecompressFile() failed: ' .. mSys.GetErrorMsg(err))
   assert(file_count == glCompressedFiles['COUNT'], 'Decompressed file count of ' .. file_count .. ' != ' .. glCompressedFiles['COUNT'])
end

-----------------------------------------------------------------------------------------------------------------------
-- Test streamed compression

function testStreamedCompression()
   local cmp = obj.new('compression' , { } )

   local file = obj.new('file', { src='fonts:truetype/OpenSans-Regular.ttf', flags='!READ' } )
   assert(file, 'Failed to open source file.')

   glOutFile = obj.new('file', { src='temp:fonts.gz', flags='!WRITE|NEW' } )
   if nz(glOutFile) then
      if (cmp.mtCompressStreamStart() == ERR_Okay) then
         local input = string.rep(' ', 16384)
         while (err == ERR_Okay) do
            local len
            err, len = file.acRead(input)
            if (err != ERR_Okay) or (len <= 0) then break end
            err = cmp.mtCompressStream(input, len, 'streamedOutput')
         end

         if (err == ERR_Okay) then
            err = cmp.mtCompressStreamEnd('streamedOutput')
         else
            error('Inner compression loop failed.')
         end
      end
   end

   assert(glOutFile.size > 0, "The size of the compressed output file is zero.")
end

-----------------------------------------------------------------------------------------------------------------------

function testArchiveVolume()
   local cmp = obj.new('compression', { path='temp:cmp_test_scripts.zip', archiveName='test' } )
   local file = obj.new('file', { path='system:scripts/dev/flute.fluid' } )
   local file_size = file.size

   local cmpbuffer = string.rep(' ', file_size)
   local cmpsrc = string.rep(' ', file_size)

   local err = mSys.ReadFileToBuffer('system:scripts/dev/flute.fluid', cmpsrc)
   assert(err == ERR_Okay, 'Failed to read original source file for comparison: ' .. mSys.GetErrorMsg(err))

   -- Big buffer test

   local cmpfile = obj.new('file', { src='archive:test/scripts/flute.fluid', flags='!READ' })
   local err, len = cmpfile.acRead(cmpbuffer)
   assert(err == ERR_Okay, 'Failed to read decompressed data from file archive: ' .. mSys.GetErrorMsg(err))
   assert(cmpbuffer == cmpsrc, "The decompressed data does not match the original file.")

   -- Small buffer test

   cmpfile.acSeek(0, SEEK_START)
   local smallbuffer = string.rep(' ', 256)
   local len
   local cmpbuffer = ''
   repeat
      err, len = cmpfile.acRead(smallbuffer)
      assert(err == ERR_Okay, 'Failed to read decompressed data from file archive: ' .. mSys.GetErrorMsg(err))
      if (len < smallbuffer:len()) then smallbuffer = smallbuffer:sub(1, len) end
      cmpbuffer = cmpbuffer .. smallbuffer
   until (len == 0)

   assert(mSys.StrCompare(cmpbuffer, cmpsrc, 0, STR_MATCH_LEN) == ERR_Okay, "The decompressed data does not match the original file.")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test streamed decompression

function testStreamedDecompression()
   local cmp = obj.new('compression' , { } )

   local file = obj.new('file', { src='temp:fonts.gz', flags='!READ' } )
   assert(file, 'Failed to open source file.')

   glOutFile = obj.new('file', { src='temp:OpenSans-Regular.ttf', flags='!WRITE|NEW' } )
   if nz(glOutFile) then
      if (cmp.mtDecompressStreamStart() == ERR_Okay) then
         local input = string.rep(' ', 16384)
         while (err == ERR_Okay) do
            local len
            err, len = file.acRead(input)
            if (err == ERR_Okay) then
               if (len <= 0) then break end
               err = cmp.mtDecompressStream(input, len, 'streamedOutput')
            end
         end

         if (err == ERR_Okay) then
            err = cmp.mtDecompressStreamEnd('streamedOutput')
         else
            error('Inner decompression loop failed.')
         end
      else
         error('Failed to initialise decompression.')
      end
   end
   glOutFile = nil
end

function streamedOutput(CompressedID, Data)
   local err, len = glOutFile.acWrite(Data)
   if (err != ERR_Okay) then return ERR_Write end
   return ERR_Okay
end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
        'testCreateCompress', 'testDecompressWild',
        'testCompressFolder', 'testDecompressFolder',
        'testStreamedCompression', 'testStreamedDecompression',
        'testArchiveVolume',
        'testIconArchive'
      },
      init = nil,
      cleanup = function()
         mSys.DeleteFile('temp:compression.def')
         mSys.DeleteFile('temp:core.def')
         mSys.DeleteFile('temp:cmp_test/')
         mSys.DeleteFile('temp:cmp_icons/')
         mSys.DeleteFile('temp:cmp_test_json.zip')
         mSys.DeleteFile('temp:cmp_test_scripts.zip')
         mSys.DeleteFile('temp:fonts.gz')
         mSys.DeleteFile('temp:OpenSans-Regular.ttf')
      end
   }
