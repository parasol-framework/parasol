-- LUnit tests not covered by other test files.

-----------------------------------------------------------------------------------------------------------------------
-- Print a list of all actions returned by ActionList()

function testActionList()
   for id, actions in ipairs(mSys.ActionList()) do
      if nz(actions) and nz(actions.name) then
         print(string.format('%d: $%.8x: %s', id-1, actions.hash, actions.name))
      end
   end
end

-----------------------------------------------------------------------------------------------------------------------
-- Test the ability to inspect the MetaClass Fields array.

function testMetaClassArrays()
   local metaFile = mSys.FindClass(mSys.StrHash('File', false), 0)
   for k,f in ipairs(metaFile.fields) do
      print(k .. ' ' .. f.name)
   end
end

-----------------------------------------------------------------------------------------------------------------------

function testEnvPath()
   local task = mSys.CurrentTask()
   local err, path = task.mtGetEnv('PATH')
   if (err == ERR_Okay) then
      print('PATH: ' .. path)
   else
      error('Failed to read PATH variable.')
   end
end

-----------------------------------------------------------------------------------------------------------------------

function testPreciseTime()
   local time = mSys.PreciseTime()
   print(time)
   assert(time > 0, 'PreciseTime() did not return a positive value.')

   -- Wait for 1 second

   mSys.WaitTime(1, 0)

   -- Acquire a new timestamp and check that the difference is between 1 and 1.5 seconds.

   local endTime = mSys.PreciseTime()
   print(endTime, ' = ', endTime - time, ' elapsed microseconds')
   assert(((endTime - time) > 1000000) and ((endTime - time) < 1500000), 'Incorrect elapsed time measurement over a 1 second time interval.')
end

-----------------------------------------------------------------------------------------------------------------------

function testRegistry()
   local state = mSys.GetSystemState()
   if (state.platform == 'Windows') then
      local task = mSys.CurrentTask()
      local err, progfiles = task.mtGetEnv('\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ProgramFilesDir')

      if (err == ERR_Okay) then
         print('The Windows registry key for program files is "' .. progfiles .. '"')
      else
         error('Failed to read Windows registry.')
      end
   end
end

-----------------------------------------------------------------------------------------------------------------------

function testFindObject()
   glSet = { }
   for i=1,10 do
      local obj = obj.new('xml', { name='TestFO', flags='NEW' })
      table.insert(glSet, obj)
   end

   local objlist = array.new(10, 'long')
   local err, count = mSys.FindObject('TestFO', 0, 0, objlist)
   assert(err == ERR_Okay, 'Failed to list created objects: ' .. mSys.GetErrorMsg(err))
   assert(count == 10, 'Expected 10 objects, listed ' .. count)
   assert(objlist[1] < objlist[10], 'Expected the oldest object to come first in the sort order.')

   local err, obj = mSys.FindPrivateObject('TestFO')
   assert(err == ERR_Okay, 'Failed to find private object: ' .. mSys.GetErrorMsg(err))
   assert(obj.id == objlist[10], 'Expected the most recently created object of #' .. objlist[10] .. ', got ' .. obj.id)
end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = { 'testActionList', 'testMetaClassArrays', 'testEnvPath', 'testPreciseTime', 'testRegistry', 'testFindObject' },
      init = function()
      end,
      cleanup = function()
      end
   }
