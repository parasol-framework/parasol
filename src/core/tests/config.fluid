-- Tests relating to the Config class

glLegalData = [[
# Useless comment
[Clean]ignored
Name = Clean
Fixed:Regular = fonts:fixed/clean.fon
Fixed:Bold Italic = fonts:fixed/clean.fon
# Useless comment
  Points = 8
Styles = Bold,Bold Italic,Italic,Regular
Sort = 3

  [Courier Sans]
Name = Courier Sans
Scalable=Yes
Scale:Bold    = fonts:truetype/Courier Prime Sans Bold.ttf
Scale:Bold Italic = fonts:truetype/Courier Prime Sans Bold Italic.ttf
Styles = Bold,Bold Italic,Italic,Regular
Sort = 2

[Alpha]
Name = Beta
Sort = 1
]]

glMerge = 'Ignore this\r\n[MergedGroup]\r\nHello=World\r\n'

--=====================================================================================================================

function testKeyFilter()
   local cfg = obj.new('config', { })
   local err = cfg.acDataFeed(0, DATA_TEXT, glLegalData, 0)
   assert(err == ERR_Okay, 'DataFeed() returned ' .. mSys.GetErrorMsg(err))

   cfg.keyFilter = 'Name=Clean' -- Keep the clean font and filter out Courier Sans

   -- Expect success
   local err, value = cfg.mtReadInt('Clean', 'Points')
   assert(err == ERR_Okay, 'ReadInt() returned ' .. mSys.GetErrorMsg(err))
   assert(value == 8, 'Did not read the expected [Clean].Points key-value, got ' .. nz(value,'NIL'))

   -- Expect failure
   local err, value = cfg.mtReadValue('Courier Sans', 'Scalable')
   assert(err != ERR_Okay, 'ReadValue() returned ' .. mSys.GetErrorMsg(err))
   assert(value != 'Yes', 'The [Courier Sans].Scalable value was not filtered out as expected.')
end

--=====================================================================================================================

function testGroupFilter()
   local cfg = obj.new('config', { })
   local err = cfg.acDataFeed(0, DATA_TEXT, glLegalData, 0)
   assert(err == ERR_Okay, 'DataFeed() returned ' .. mSys.GetErrorMsg(err))

   cfg.groupFilter = 'Courier Sans' -- Keep Courier Sans

   -- Expect success
   local err, value = cfg.mtReadValue('Courier Sans', 'Scalable')
   assert(err == ERR_Okay, 'ReadValue() returned ' .. mSys.GetErrorMsg(err))
   assert(value == 'Yes', 'Did not read the expected [Courier Sans].Scalable key-value, got ' .. nz(value,'NIL'))

   -- Expect failure
   local err, value = cfg.mtReadFloat('Clean', 'Points')
   assert(err != ERR_Okay, 'ReadFloat() returned ' .. mSys.GetErrorMsg(err))
   assert(value != 8, 'The [Clean].Points value was not filtered out as expected.')
end

--=====================================================================================================================

function testDeleteKeyAndGroup()
   local cfg = obj.new('config', { })
   local err = cfg.acDataFeed(0, DATA_TEXT, glLegalData, 0)
   assert(err == ERR_Okay, 'DataFeed() returned ' .. mSys.GetErrorMsg(err))

   local err, value = cfg.mtReadValue('Clean', 'Styles')
   assert(err == ERR_Okay, 'ReadValue() returned ' .. mSys.GetErrorMsg(err))

   local err, value = cfg.mtDeleteKey('Clean', 'Styles')
   assert(err == ERR_Okay, 'DeleteKey() returned ' .. mSys.GetErrorMsg(err))

   local err, value = cfg.mtReadValue('Clean', 'Styles')
   assert(err != ERR_Okay, 'ReadValue() returned ' .. mSys.GetErrorMsg(err))

   local err, value = cfg.mtDeleteGroup('Clean')
   assert(err == ERR_Okay, 'DeleteKey() returned ' .. mSys.GetErrorMsg(err))

   local err, value = cfg.mtReadValue('Clean', 'Name')
   assert(err != ERR_Okay, 'ReadValue() returned ' .. mSys.GetErrorMsg(err))
end

--=====================================================================================================================

function testMerge()
   local cfg = obj.new('config', { })
   local err = cfg.acDataFeed(0, DATA_TEXT, glLegalData, 0)
   assert(err == ERR_Okay, 'DataFeed() returned ' .. mSys.GetErrorMsg(err))

   local cfgMerge = obj.new('config', { })
   local err = cfg.acDataFeed(0, DATA_TEXT, glMerge, 0)

   local err = cfg.mtMerge(cfgMerge);
   assert(err == ERR_Okay, 'Merge() returned ' .. mSys.GetErrorMsg(err))

   local err, value = cfg.mtReadValue(nil, 'Styles')
   assert(err == ERR_Okay, 'ReadValue() returned ' .. mSys.GetErrorMsg(err))

   local err, value = cfg.mtReadValue('MergedGroup', 'Hello')
   assert(err == ERR_Okay, 'ReadValue() returned ' .. mSys.GetErrorMsg(err))
   assert(value == 'World', 'Expected the World, received ' .. nz(value,'NIL'))
end

--=====================================================================================================================

function testWriteValues()
   local cfg = obj.new('config', { })
   local err = cfg.acDataFeed(0, DATA_TEXT, glLegalData, 0)
   assert(err == ERR_Okay, 'DataFeed() returned ' .. mSys.GetErrorMsg(err))

   local err = cfg.mtWriteValue('Clean', 'New', 'Value')
   assert(err == ERR_Okay, 'WriteValue() returned ' .. mSys.GetErrorMsg(err))

   local err = cfg.mtWriteValue('NewGroup', 'fruit', 'orange')
   assert(err == ERR_Okay, 'WriteValue() returned ' .. mSys.GetErrorMsg(err))

   local err, value = cfg.mtReadValue('Clean', 'New')
   assert(err == ERR_Okay, 'ReadValue() returned ' .. mSys.GetErrorMsg(err))
   assert(value == 'Value', 'Expected a Value, received ' .. nz(value,'NIL'))

   local err, value = cfg.mtReadValue('NewGroup', 'fruit')
   assert(err == ERR_Okay, 'ReadValue() returned ' .. mSys.GetErrorMsg(err))
   assert(value == 'orange', 'Expected an orange, received ' .. nz(value,'NIL'))
end

--=====================================================================================================================

function testSorting()
   local cfg = obj.new('config', { })
   local err = cfg.acDataFeed(0, DATA_TEXT, glLegalData, 0)
   assert(err == ERR_Okay, 'DataFeed() returned ' .. mSys.GetErrorMsg(err))

   local err = cfg.acSort()
   assert(err == ERR_Okay, 'Sort() returned ' .. mSys.GetErrorMsg(err))

   local err, groupName = cfg.mtGetGroupFromIndex(0)
   assert(groupName == 'Alpha', 'First group is incorrect, returned ' .. groupName)

   local err = cfg.mtSortByKey('Sort', true)
   assert(err == ERR_Okay, 'SortByKey() returned ' .. mSys.GetErrorMsg(err))

   local err, groupName = cfg.mtGetGroupFromIndex(0)
   assert(groupName == 'Clean', 'First group is incorrect, returned ' .. groupName)
   local err, groupName = cfg.mtGetGroupFromIndex(1)
   assert(groupName == 'Courier Sans', 'Second group is incorrect, returned ' .. groupName)
   local err, groupName = cfg.mtGetGroupFromIndex(2)
   assert(groupName == 'Alpha', 'Third group is incorrect, returned ' .. groupName)
end

--=====================================================================================================================

   return {
      tests = {
         'testKeyFilter', 'testGroupFilter', 'testDeleteKeyAndGroup',
         'testMerge', 'testWriteValues', 'testSorting'
      },
      init = function()

      end,
      cleanup = function()
      end
   }
