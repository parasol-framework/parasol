// Auto-generated by idl-c.fluid

extern "C" {
ERR AccessMemory(MEMORYID Memory, MEM Flags, LONG MilliSeconds, APTR * Result);
ERR Action(LONG Action, OBJECTPTR Object, APTR Parameters);
void ActionList(struct ActionTable ** Actions, LONG * Size);
ERR ActionMsg(LONG Action, OBJECTID Object, APTR Args);
CSTRING ResolveClassID(CLASSID ID);
LONG AllocateID(IDTYPE Type);
ERR AllocMemory(LONG Size, MEM Flags, APTR * Address, MEMORYID * ID);
ERR AccessObject(OBJECTID Object, LONG MilliSeconds, OBJECTPTR * Result);
ERR CheckAction(OBJECTPTR Object, LONG Action);
ERR CheckMemoryExists(MEMORYID ID);
ERR CheckObjectExists(OBJECTID Object);
ERR InitObject(OBJECTPTR Object);
ERR VirtualVolume(CSTRING Name, ...);
OBJECTPTR CurrentContext();
ERR GetFieldArray(OBJECTPTR Object, FIELD Field, APTR * Result, LONG * Elements);
LONG AdjustLogLevel(LONG Adjust);
ERR ReadFileToBuffer(CSTRING Path, APTR Buffer, LONG BufferSize, LONG * Result);
ERR FindObject(CSTRING Name, CLASSID ClassID, FOF Flags, OBJECTID * ObjectID);
objMetaClass * FindClass(CLASSID ClassID);
ERR AnalysePath(CSTRING Path, LOC * Type);
LONG UTF8Copy(CSTRING Src, STRING Dest, LONG Chars, LONG Size);
ERR FreeResource(MEMORYID ID);
CLASSID GetClassID(OBJECTID Object);
OBJECTID GetOwnerID(OBJECTID Object);
ERR GetField(OBJECTPTR Object, FIELD Field, APTR Result);
ERR GetFieldVariable(OBJECTPTR Object, CSTRING Field, STRING Buffer, LONG Size);
ERR CompareFilePaths(CSTRING PathA, CSTRING PathB);
const struct SystemState * GetSystemState();
ERR ListChildren(OBJECTID Object, pf::vector<ChildEntry> * List);
ERR Base64Decode(struct pfBase64Decode * State, CSTRING Input, LONG InputSize, APTR Output, LONG * Written);
ERR RegisterFD(HOSTHANDLE FD, RFD Flags, void (*Routine)(HOSTHANDLE, APTR) , APTR Data);
ERR ResolvePath(CSTRING Path, RSF Flags, STRING * Result);
ERR MemoryIDInfo(MEMORYID ID, struct MemInfo * MemInfo, LONG Size);
ERR MemoryPtrInfo(APTR Address, struct MemInfo * MemInfo, LONG Size);
ERR NewObject(LARGE ClassID, NF Flags, OBJECTPTR * Object);
void NotifySubscribers(OBJECTPTR Object, LONG Action, APTR Args, ERR Error);
ERR StrReadLocale(CSTRING Key, CSTRING * Value);
CSTRING UTF8ValidEncoding(CSTRING String, CSTRING Encoding);
ERR ProcessMessages(PMF Flags, LONG TimeOut);
ERR IdentifyFile(CSTRING Path, CLASSID * Class, CLASSID * SubClass);
ERR ReallocMemory(APTR Memory, ULONG Size, APTR * Address, MEMORYID * ID);
ERR GetMessage(LONG Type, MSF Flags, APTR Buffer, LONG Size);
ERR ReleaseMemory(MEMORYID MemoryID);
CLASSID ResolveClassName(CSTRING Name);
ERR SendMessage(LONG Type, MSF Flags, APTR Data, LONG Size);
ERR SetOwner(OBJECTPTR Object, OBJECTPTR Owner);
OBJECTPTR SetContext(OBJECTPTR Object);
ERR SetField(OBJECTPTR Object, FIELD Field, ...);
CSTRING FieldName(ULONG FieldID);
ERR ScanDir(struct DirInfo * Info);
ERR SetName(OBJECTPTR Object, CSTRING Name);
void LogReturn();
ERR StrCompare(CSTRING String1, CSTRING String2, LONG Length, STR Flags);
ERR SubscribeAction(OBJECTPTR Object, LONG Action, FUNCTION * Callback);
ERR SubscribeEvent(LARGE Event, FUNCTION * Callback, APTR Custom, APTR * Handle);
ERR SubscribeTimer(DOUBLE Interval, FUNCTION * Callback, APTR * Subscription);
ERR UpdateTimer(APTR Subscription, DOUBLE Interval);
ERR UnsubscribeAction(OBJECTPTR Object, LONG Action);
void UnsubscribeEvent(APTR Handle);
ERR BroadcastEvent(APTR Event, LONG EventSize);
void WaitTime(LONG Seconds, LONG MicroSeconds);
LARGE GetEventID(EVG Group, CSTRING SubGroup, CSTRING Event);
ULONG GenCRC32(ULONG CRC, APTR Data, ULONG Length);
LARGE GetResource(RES Resource);
LARGE SetResource(RES Resource, LARGE Value);
ERR ScanMessages(LONG * Handle, LONG Type, APTR Buffer, LONG Size);
STT StrDatatype(CSTRING String);
void UnloadFile(struct CacheFile * Cache);
ERR CreateFolder(CSTRING Path, PERMIT Permissions);
ERR LoadFile(CSTRING Path, LDF Flags, struct CacheFile ** Cache);
ERR SetVolume(CSTRING Name, CSTRING Path, CSTRING Icon, CSTRING Label, CSTRING Device, VOLUME Flags);
ERR DeleteVolume(CSTRING Name);
ERR MoveFile(CSTRING Source, CSTRING Dest, FUNCTION * Callback);
ERR UpdateMessage(LONG Message, LONG Type, APTR Data, LONG Size);
ERR AddMsgHandler(APTR Custom, LONG MsgType, FUNCTION * Routine, struct MsgHandler ** Handle);
ERR QueueAction(LONG Action, OBJECTID Object, APTR Args);
LARGE PreciseTime();
ERR OpenDir(CSTRING Path, RDF Flags, struct DirInfo ** Info);
OBJECTPTR GetObjectPtr(OBJECTID Object);
struct Field * FindField(OBJECTPTR Object, ULONG FieldID, OBJECTPTR * Target);
CSTRING GetErrorMsg(ERR Error);
struct Message * GetActionMsg();
ERR FuncError(CSTRING Header, ERR Error);
ERR SetArray(OBJECTPTR Object, FIELD Field, APTR Array, LONG Elements);
ULONG StrHash(CSTRING String, LONG CaseSensitive);
ERR LockObject(OBJECTPTR Object, LONG MilliSeconds);
void ReleaseObject(OBJECTPTR Object);
ERR ActionThread(LONG Action, OBJECTPTR Object, APTR Args, FUNCTION * Callback, LONG Key);
ERR AddInfoTag(struct FileInfo * Info, CSTRING Name, CSTRING Value);
void SetDefaultPermissions(LONG User, LONG Group, PERMIT Permissions);
void VLogF(VLF Flags, CSTRING Header, CSTRING Message, va_list Args);
LONG Base64Encode(struct pfBase64Encode * State, const void * Input, LONG InputSize, STRING Output, LONG OutputSize);
ERR ReadInfoTag(struct FileInfo * Info, CSTRING Name, CSTRING * Value);
ERR SetResourcePath(RP PathType, CSTRING Path);
objTask * CurrentTask();
CSTRING ResolveGroupID(LONG Group);
CSTRING ResolveUserID(LONG User);
ERR CreateLink(CSTRING From, CSTRING To);
ERR DeleteFile(CSTRING Path, FUNCTION * Callback);
LONG UTF8CharOffset(CSTRING String, LONG Offset);
LONG UTF8Length(CSTRING String);
LONG UTF8OffsetToChar(CSTRING String, LONG Offset);
LONG UTF8PrevLength(CSTRING String, LONG Offset);
LONG UTF8CharLength(CSTRING String);
ULONG UTF8ReadValue(CSTRING String, LONG * Length);
LONG UTF8WriteValue(LONG Value, STRING Buffer, LONG Size);
ERR CopyFile(CSTRING Source, CSTRING Dest, FUNCTION * Callback);
ERR WaitForObjects(PMF Flags, LONG TimeOut, struct ObjectSignal * ObjectSignals);

} // extern c
