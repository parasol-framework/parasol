--[[
A simple test program for confirming that our fonts and reported metrics values are in-line with what we would expect.
--]]

   require 'gui/window'
   require 'gui/combobox'

   mFont = mod.load('font')

glFontSize = 30

function setFont(Face, Size)
   if glText then glText.free() end

   local err, font = mVec.getFontHandle(Face, "Regular", 0, Size)
   local metrics = struct.new('FontMetrics')
   local err = mVec.getFontMetrics(font, metrics)

   if not glInitialised then
      -- METRICS HEIGHT: RED
      glHeight = glViewport.new('vectorrectangle', {
         x = '50%', width='100%', y=0, height=1, fill='rgb(255,0,0,64)'
      })

      -- SIZE: YELLOW
      glSize = glViewport.new('vectorrectangle', {
         x = 0, width='50%', y=0, height=1, fill='rgb(255,255,0,128)'
      })

      -- METRICS LINE SPACING: BLUE
      glNextLine = glViewport.new('vectorrectangle', {
         x = 0, width='100%', y=0, height=1, fill='rgb(0,0,255,128)'
      })

      glNextHeight = glViewport.new('vectorrectangle', {
         x = 0, width='100%', y=0, height=1, fill='rgb(0,0,255,128)'
      })

      -- METRICS DESCENT: GREEN
      glDescent = glViewport.new('vectorrectangle', {
         x = 0, width='100%', y=0, height=1, fill='rgb(0,255,0,64)'
      })

      -- METRICS ASCENT: BLUE
      glAscent = glViewport.new('vectorrectangle', {
         x = 0, width='100%', y=0, height=1, fill='rgb(0,0,255,128)'
      })
   end

   glText = glViewport.new('vectortext', {
      x        = glWindow.margins.left,
      y        = glTextY + Size,
      face     = Face,
      fontSize = Size,
      fill     = 'rgb(0,0,0)',
      string   = Face .. '; ÄĆÃÊ; Size: ' .. Size .. '; ' ..
      'Height: ' .. metrics.height .. '; ' ..
      'Ascent: ' .. metrics.ascent .. '; ' ..
      'Descent: ' .. metrics.descent .. '; ' ..
      'LineSpacing: ' .. metrics.lineSpacing .. '; ' ..
      'ÄĆÃÊ ' ..
      '\nÄĆÃÊ The quick brown Fox jumped Over the lazy Dog'
   })

   glHeight.y = glText.y
   glHeight.height = -metrics.height

   -- FONTSIZE MATCHES THE CAP HEIGHT WHEN * 0.75
   glSize.y = glText.y
   glSize.height = -glText.fontSize * 0.75

   glNextLine.y = glText.y + metrics.lineSpacing

   glNextHeight.y = glText.y + metrics.lineSpacing - metrics.ascent

   glDescent.y = glText.y
   glDescent.height = metrics.descent

   glAscent.y = glText.y - metrics.ascent

   glInitialised = true
   collectgarbage()
end

   --mFont.refreshFonts()

   glWindow = gui.window({ title='Widget Examples', insideWidth=600, insideHeight=400, center=true })
   glViewport = glWindow:clientViewport({ aspectRatio = ARF_MEET })

   local y = 6

   local items = { }
   local err, list = mFont.GetList()

   while (list) do
      table.insert(items, { item=list.name })
      list = list.next
   end

   local combobox = gui.combobox({
      target = glViewport,
      label  = 'Font:',
      string = 'Noto Sans',
      x      = glWindow.margins.left, y = y,
      items  = items,
      events = {
         activate = function(Widget, Text)
            setFont(Widget.text.string, glFontSize)
         end
      }
   })
   y = y + combobox.viewport.height + 12

   glTextY = y

   setFont(items[1].item, glFontSize)

   glWindow:show()
   processing.sleep() -- Will sleep until the window sends MSGID_QUIT

