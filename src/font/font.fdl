--$FLUID:Include

module({ name="Font", copyright="Paul Manias Â© 1998-2020", version=1.0 }, function()
  restrict(function()
    loadFile(glPath .. 'common-graphics.fdl')
  end)

  c_include("<parasol/modules/display.h>")

  flags("FTF", { comment="Font flags" },
    "PREFER_SCALED: A scaled font is preferred over the equivalent fixed size font.",
    "PREFER_FIXED: A fixed size font (monochrome, no transforms) is preferred to the equivalent scalable font.",
    "ANTIALIAS|SMOOTH: Smooth the edges of scalable fonts.",
    "HEAVY_LINE: Underline the font with a double-sized line, using the colour defined in UnderlineRGB.",
    "QUICK_ALIAS: Quick anti-aliasing is useful for games and can be enabled if the background is black.",
    "CHAR_CLIP: Clip words by adding dots to the end of the string.",
    "BASE_LINE: The Font's Y coordinate is the base line.",
    "ALLOW_SCALE: Allows switching to a suitable scalable font if a fixed point size is unavailable.  Same as ending a font face with the '*' wildcard.",
    { KERNING  = "0x80000000: The loaded font is embedded with kerning information (read only)." },
    { ITALIC   = "0x40000000: Font is described as using italics (read only)." },
    { BOLD     = "0x20000000: Font is described as having a bold weight (read only)." },
    { SCALABLE = "0x10000000: This is set if the font is scalable, otherwise assume fixed." }
  )

  struct("FontList", { comment="For GetList(), describes a system font." }, [[
    struct(*FontList) Next  # Pointer to the next entry in the list.
    str   Name              # The name of the font face.
    array(uchar,0) Points   # Pointer to an array of fixed point sizes supported by the font.
    str   Styles            # Supported styles are listed here in CSV format.
    char  Scalable          # TRUE if the font is scalable.
    char  Reserved1         # Do not use.
    short Reserved2         # Do not use.
  ]])

  const("FSS", { comment="Options for the StringSize() function." }, {
    ALL  = "-1: Process all characters.",
    LINE = "-2: Terminate operation at the first line feed or word-wrap."
  })

  class("Font", { version=1, src="class_font.cpp", output="class_font_def.c" }, [[
   double Angle        # Rotation angle to use when drawing the font.
   double Point        # The Point/Height of the font (arbitrary size, non-exact)
   double StrokeSize   # For scalable fonts only.  Indicates the strength of the stroked outline if Outline.Alpha > 0
   obj(Bitmap) Bitmap  # Pointer to destination Bitmap
   str String          # String for drawing etc
   str Path            # The location of the font file as derived from the name of the face.  Field may be set directly if the font source is unregistered
   str Style           # The font style (Regular, Bold, Italic, Condensed, Light etc)
   str Face            # The face of the font
   fptr(error obj(Font) ptr(int) ptr(int)) WrapCallback # Callback on encountering wordwrap
   ptr   EscapeCallback   # Callback on encountering an escape character
   ptr   UserData         # User relevant data
   struct(RGB8) Outline   # Outline colour
   struct(RGB8) Underline # Underline colour
   struct(RGB8) Colour    # Colour
   int(FTF) Flags         # Optional flags
   int   Gutter           # "External leading" in pixels (fixed fonts only)
   int   GlyphSpacing     # Amount of spacing between characters (additional to normal horizontal spacing)
   int   LineSpacing      # Vertical spacing between lines
   int   X                # X Coordinate
   int   Y                # Y Coordinate
   int   TabSize          # Tab differential
   int   TotalChars       # Total number of characters / glyphs supported by the font
   int   WrapEdge         # Point at which word-wrap is encountered
   int   FixedWidth       # Force fixed width
   int   Height           # The point size of the font (vertical bearing), expressed in pixels.  Does not include leading (see Ascent if you want leading included)
   int   Leading          # "Internal leading" in pixels (fixed fonts only)
   int   MaxHeight        # Maximum possible pixel height per character, covering the entire character set at the chosen point size
   int(ALIGN) Align       # Alignment options when drawing the font.
   int   AlignWidth       # Width to use for right alignment
   int   AlignHeight      # Height to use for bottom alignment
   int   Ascent           # The total number of pixels above the baseline, including leading
   int   EndX             # Finished horizontal coordinate after drawing
   int   EndY             # Finished vertical coordinate after drawing
   int   VDPI             # Target DPI - this might be used if targeting DPI on paper rather than the display.
   int   HDPI
  ]],
  [[
   WORD *prvTabs;                // Array of tab stops
   UBYTE *prvData;
   struct font_cache *Cache;     // Truetype cache
   struct glyph_cache *Glyph;    // Truetype glyph cache
   struct FontCharacter *prvChar;
   struct BitmapCache *BmpCache;
   struct font_glyph prvTempGlyph;
   LONG prvLineCount;
   LONG prvStrWidth;
   WORD prvSpaceWidth;          // Pixel width of word breaks
   WORD prvBitmapHeight;
   WORD prvLineCountCR;
   #ifdef FT_FREETYPE_H
      FT_Face FTFace;
   #else
      LONG FTFace;
   #endif
   char prvEscape[2];
   char prvFace[32];
   char prvBuffer[80];
   char prvStyle[20];
   char prvDefaultChar;
   UBYTE prvTotalTabs;
  ]])

  functionNames("fnt",
    "GetList",
    "StringWidth",
    "StringSize",
    "ConvertCoords",
    "CharWidth",
    "SetDefaultSize",
    "FreetypeHandle",
    "InstallFont",
    "RemoveFont",
    "SelectFont")

end)
