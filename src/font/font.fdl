--$FLUID:Include

module({ name="Font", copyright="Paul Manias Â© 1998-2025", version=1.0, timestamp=20240611 }, function()
  restrict(function()
    loadFile(glPath .. 'common-graphics.fdl')
  end)

  c_include("<parasol/modules/display.h>")

  flags("FTF", { comment="Font flags for controlling rendering behaviour and style detection" },
    "HEAVY_LINE: Draw an underline with double thickness using the colour specified in the #Underline field. This creates a more prominent underline effect than standard underlining.",
    "BASE_LINE: Interpret the Font's #Y coordinate as the baseline position rather than the top of the character. This is useful for precise typographical positioning.",
    { ITALIC   = "0x40000000: Indicates that the font has italic styling (read-only flag). This flag is automatically set when an italic font face is loaded." },
    { BOLD     = "0x20000000: Indicates that the font has bold weight styling (read-only flag). This flag is automatically set when a bold font face is loaded." }
  )

  flags("FMETA", { comment="Result flags returned by the SelectFont() function, providing metadata about font capabilities" },
    "SCALED: The font is scalable to any size (vector-based). If not set, assume the font is a fixed-size bitmap font with limited size options.",
    "VARIABLE: The font supports variable metrics and axes, allowing for dynamic adjustment of weight, width, slant, and other design parameters.",
    "HINT_NORMAL: Font rendering should prioritise the hinting information embedded in the font file for optimal character display.",
    "HINT_LIGHT: Font rendering should use the lighter version of the FreeType hinter, which provides gentler adjustments to character shapes.",
    "HINT_INTERNAL: Font rendering should use the internal FreeType hinter, which may provide stronger grid-fitting for improved clarity.",
    "HIDDEN: The font should be excluded from user-visible font lists and selection interfaces, typically used for system or internal fonts."
  )

  enum("HINT", { type="char", start=1, comment="Font hinting options that control character shape adjustment for improved screen display" },
     "NORMAL: Use the hinting information embedded within the font file. This typically provides the best balance between accuracy and screen clarity as intended by the font designer.",
     "INTERNAL: Force the use of FreeType's internal auto-hinter, which analyses character shapes and applies mathematical grid-fitting. Useful for fonts with poor or missing hinting data.",
     "LIGHT: Apply FreeType's light hinting algorithm, which makes minimal adjustments to preserve the original character shapes while improving alignment to pixel boundaries.")

  struct("FontList", { comment="Font metadata structure returned by GetList() function, describing system font capabilities and properties" }, [[
    struct(*FontList) Next  # Pointer to the next entry in the linked list. NULL indicates the end of the list.
    str   Name              # The canonical name of the font face (e.g., 'Arial', 'Times New Roman'). Used for font selection and identification.
    str   Alias             # Alternative name reference to another font Name if this entry represents an alias. NULL if this is the primary font entry.
    array(int,0) Points     # Array of available point sizes for bitmap fonts. For scalable fonts, this may contain recommended sizes or be empty.
    str   Styles            # Comma-separated list of available font styles (e.g., 'Regular,Bold,Italic,Bold Italic'). Indicates which variations are installed.
    str   Axes              # For variable fonts, contains comma-separated list of axis codes (e.g., 'wght,wdth,ital') that can be dynamically adjusted.
    char  Scalable          # TRUE if the font can be rendered at any size, FALSE if limited to specific bitmap sizes.
    char  Variable          # TRUE if the font supports variable metrics allowing real-time adjustment of weight, width, and other design parameters.
    char(HINT) Hinting      # Recommended hinting method for optimal rendering: HINT::NORMAL, HINT::LIGHT, or HINT::INTERNAL.
    char  Hidden            # TRUE if the font should be excluded from user interface font lists, typically reserved for system or special-purpose fonts.
  ]])

  const("FSS", { comment="String processing options for the StringSize() function, controlling how text measurement is performed" }, {
    ALL  = "-1: Process and measure all characters in the string, including line breaks and formatting codes. Use this for complete string width calculation.",
    LINE = "-2: Stop processing at the first line feed character or word-wrap boundary. Use this to measure only the first line of multi-line text."
  })

  class("Font", { version=1, src="class_font.cpp", output="class_font_def.c", references={ 'ALIGN', 'RGB8' } }, [[
   double Point           # The point size of the font, defined at a ratio of 1:72 DPI. For bitmap fonts, the closest matching size will be selected.
   double GlyphSpacing    # Additional spacing between characters in pixels, added to normal horizontal spacing. Default is 1.0.
   obj(Bitmap) Bitmap     # Reference to the destination @Bitmap object where the font will be drawn.
   str   String           # The UTF-8 text string to be drawn. Line feeds are supported for multi-line text.
   str   Path             # The filesystem path to the font file. Automatically determined during initialisation from the face name.
   str   Style            # The font style name such as 'Regular', 'Bold', 'Italic', 'Bold Italic', 'Condensed', or 'Light'.
   str   Face             # The name of the font face to load. Can include extended parameters in format 'face:pointsize:style:colour'.
   struct(RGB8) Outline   # Outline colour for drawing a border around characters. Set alpha to 0 to disable outlining.
   struct(RGB8) Underline # Underline colour for drawing lines beneath text. Set alpha to 0 to disable underlining.
   struct(RGB8) Colour    # The primary font colour in RGB format with alpha channel for transparency.
   int(FTF) Flags         # Optional font flags such as FTF::BOLD, FTF::ITALIC, FTF::BASE_LINE, and FTF::HEAVY_LINE.
   int   Gutter           # External leading space in pixels below the baseline for descenders like 'g' and 'y'.
   int   LineSpacing      # Vertical spacing between lines in pixels. Automatically set during initialisation but can be adjusted.
   int   X                # Horizontal coordinate for text positioning. Used with #Y to define the drawing start point.
   int   Y                # Vertical coordinate for text positioning. Used with #X to define the drawing start point.
   int   TabSize          # Tab stop interval measured in character positions. Default is 8 characters.
   int   WrapEdge         # Horizontal boundary in pixels where word wrapping occurs. Set to 0 to disable wrapping.
   int   FixedWidth       # Forces all characters to use this pixel width instead of their natural spacing. Useful for monospaced layouts.
   int   Height           # The vertical bearing (point size) of the font in pixels, excluding leading space.
   int   Leading          # Internal leading space in pixels at the top of characters, included in the font height calculation.
   int   MaxHeight        # Maximum pixel height of any character in the font set at the current point size.
   int(ALIGN) Align       # Text alignment options for positioning within the target area (e.g., ALIGN::CENTER, ALIGN::RIGHT).
   int   AlignWidth       # Width dimension used for horizontal alignment calculations when using ALIGN::RIGHT or ALIGN::HORIZONTAL.
   int   AlignHeight      # Height dimension used for vertical alignment calculations when using ALIGN::BOTTOM or ALIGN::VERTICAL.
   int   Ascent           # Total pixels above the baseline, including both character height and internal leading.
   int   EndX             # Final horizontal coordinate after the last drawn character, updated after each draw operation.
   int   EndY             # Final vertical coordinate after the last drawn character, updated after each draw operation.
  ]])

  functionNames("fnt",
    "GetList",
    "StringWidth",
    "CharWidth",
    "RefreshFonts",
    "SelectFont",
    "ResolveFamilyName")

end)
