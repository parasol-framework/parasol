-- Core construction and metadata behaviour for Fluid regex bindings

function testConstructionMetadata()
   local matcher = regex.new("abc")
   assert(matcher.pattern == "abc", "Pattern property should mirror constructor input")
   assert(matcher.flags == 0, "Flags should default to zero when omitted")
   assert(matcher.error == nil, "Error property should be nil on successful compilation")
end

function testFlagPersistence()
   local combined = regex.new("abc", regex.ICASE + regex.MULTILINE)
   assert(combined.flags == (regex.ICASE + regex.MULTILINE), "Combined flags should be preserved")
   assert(combined.test("A\nB\nABC"), "Case insensitive test should succeed")
end

function testToStringOutput()
   local matcher = regex.new("words?", regex.ICASE)
   local description = tostring(matcher)
   assert(description:find("regex(words?)"), "Description should contain pattern")
   assert(description:find("flags="), "Description should include flag summary when flags are set")
end

function testInvalidPatternRaises()
   local err, message = catch(function() return regex.new("(broken") end)
   assert(err != nil, "Invalid pattern should raise an error")
   assert(tostring(message):find("Regex compilation failed"), "Error message should mention compilation failure")
end

return {
   tests = {
      'testConstructionMetadata',
      'testFlagPersistence',
      'testToStringOutput',
      'testInvalidPatternRaises'
   }
}
