-- Lookahead and lookbehind feature verification

function testPositiveLookahead()
   local matcher = regex.new("foo(?=bar)")
   local match = matcher.match("foobar")
   assert(match and match[1] == "foo", "Positive lookahead should match prefix without consuming suffix")
   assert(not matcher.test("foobaz"), "Lookahead condition should prevent mismatched suffix")
end

function testNegativeLookahead()
   local matcher = regex.new("foo(?!bar)")
   assert(matcher.test("foobaz"), "Negative lookahead should allow alternate suffix")
   assert(not matcher.test("foobar"), "Negative lookahead should block forbidden suffix")
end

function testPositiveLookbehind()
   local matcher = regex.new("(?<=EUR)\\d+")
   local match = matcher.match("EUR250")
   assert(match and match[1] == "250", "Lookbehind should capture digits following currency prefix")
   assert(not matcher.test("USD250"), "Lookbehind should require preceding currency")
end

function testNegativeLookbehind()
   local matcher = regex.new("(?<!USD)\\d+")
   assert(matcher.test("EUR99"), "Negative lookbehind should allow alternative prefix")
   assert(not matcher.test("USD99"), "Negative lookbehind should block matching digits after USD")
end

function testLookaroundDoesNotConsume()
   local matcher = regex.new("(?<=@)([a-z]+)(?=\.)")
   local match = matcher.match("Contact @support.example")
   assert(match and match[1] == "support", "Lookarounds should not consume delimiter characters")
end

function testInvalidVariableWidthLookbehind()
   local err = catch(function() return regex.new("(?<=\\w+)x") end)
   assert(err != ERR_Okay, "Variable width lookbehind should raise compilation error")
end

return {
   tests = {
      'testPositiveLookahead',
      'testNegativeLookahead',
      'testPositiveLookbehind',
      'testNegativeLookbehind',
      'testLookaroundDoesNotConsume',
      'testInvalidVariableWidthLookbehind'
   }
}
