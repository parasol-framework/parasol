-- Search iteration behaviour and result normalisation

function testSearchFindsAllMatches()
   local matcher = regex.new("\\d+")
   local results = matcher.search("a1b22c333")
   assert(results and #results == 3, "Search should locate all numeric runs")
   assert(results[1][1] == "1", "First match should be the smallest run")
   assert(results[2][1] == "22", "Second match should keep encounter order")
   assert(results[3][1] == "333", "Third match should capture final run")
end

function testSearchReturnsNilWhenMissing()
   local matcher = regex.new("xyz")
   local results = matcher.search("abc")
   assert(results == nil, "Search should return nil when no results are found")
end

function testSearchProvidesFullAndGroup()
   local matcher = regex.new("(ab)c?")
   local results = matcher.search("ab cab abc")
   assert(results and #results == 2, "Search should record both matches")
   assert(results[1][1] == "ab" and results[1][2] == "ab", "First match should supply full text and capture")
   assert(results[2][1] == "abc" and results[2][2] == "ab", "Second match should show shared capture")
end

function testSearchNotNullFlag()
   local matcher = regex.new("a*")
   local results = matcher.search("bbb", regex.NOT_NULL)
   assert(results == nil, "NOT_NULL should filter out zero length matches in search")
end

function testSearchContinuousFlag()
   local matcher = regex.new("\\w+")
   local results = matcher.search("skip this", regex.CONTINUOUS)
   assert(results and #results == 1, "CONTINUOUS should only match from start of string")
   assert(results[1][1] == "skip", "Match should represent prefix token")
end

return {
   tests = {
      'testSearchFindsAllMatches',
      'testSearchReturnsNilWhenMissing',
      'testSearchProvidesFullAndGroup',
      'testSearchNotNullFlag',
      'testSearchContinuousFlag'
   }
}
