// Auto-generated by idl-c.fluid

extern "C" {
objPointer * gfxAccessPointer();
ERR gfxCheckIfChild(OBJECTID Parent, OBJECTID Child);
ERR gfxCopyArea(extBitmap * Bitmap, extBitmap * Dest, BAF Flags, LONG X, LONG Y, LONG Width, LONG Height, LONG XDest, LONG YDest);
ERR gfxCopyRawBitmap(struct BitmapSurfaceV2 * Surface, extBitmap * Bitmap, CSRF Flags, LONG X, LONG Y, LONG Width, LONG Height, LONG XDest, LONG YDest);
ERR gfxCopySurface(OBJECTID Surface, extBitmap * Bitmap, BDF Flags, LONG X, LONG Y, LONG Width, LONG Height, LONG XDest, LONG YDest);
void gfxDrawPixel(extBitmap * Bitmap, LONG X, LONG Y, ULONG Colour);
void gfxDrawRGBPixel(extBitmap * Bitmap, LONG X, LONG Y, struct RGB8 * RGB);
void gfxDrawRectangle(extBitmap * Bitmap, LONG X, LONG Y, LONG Width, LONG Height, ULONG Colour, BAF Flags);
ERR gfxExposeSurface(OBJECTID Surface, LONG X, LONG Y, LONG Width, LONG Height, EXF Flags);
void gfxFlipBitmap(extBitmap * Bitmap, FLIP Orientation);
void gfxGetColourFormat(struct ColourFormat * Format, LONG BitsPerPixel, LONG RedMask, LONG GreenMask, LONG BlueMask, LONG AlphaMask);
ERR gfxGetCursorInfo(struct CursorInfo * Info, LONG Size);
ERR gfxGetCursorPos(DOUBLE * X, DOUBLE * Y);
ERR gfxGetDisplayInfo(OBJECTID Display, struct DisplayInfoV3 ** Info);
DT gfxGetDisplayType();
CSTRING gfxGetInputTypeName(JET Type);
OBJECTID gfxGetModalSurface();
ERR gfxGetRelativeCursorPos(OBJECTID Surface, DOUBLE * X, DOUBLE * Y);
ERR gfxGetSurfaceCoords(OBJECTID Surface, LONG * X, LONG * Y, LONG * AbsX, LONG * AbsY, LONG * Width, LONG * Height);
ERR gfxGetSurfaceFlags(OBJECTID Surface, RNF * Flags);
ERR gfxGetSurfaceInfo(OBJECTID Surface, struct SurfaceInfoV2 ** Info);
OBJECTID gfxGetUserFocus();
ERR gfxGetVisibleArea(OBJECTID Surface, LONG * X, LONG * Y, LONG * AbsX, LONG * AbsY, LONG * Width, LONG * Height);
ERR gfxLockBitmap(OBJECTID Surface, objBitmap ** Bitmap, LVF * Info);
ERR gfxLockCursor(OBJECTID Surface);
ULONG gfxReadPixel(extBitmap * Bitmap, LONG X, LONG Y);
void gfxReadRGBPixel(extBitmap * Bitmap, LONG X, LONG Y, struct RGB8 ** RGB);
ERR gfxResample(extBitmap * Bitmap, struct ColourFormat * ColourFormat);
ERR gfxRestoreCursor(PTC Cursor, OBJECTID Owner);
DOUBLE gfxScaleToDPI(DOUBLE Value);
ERR gfxScanDisplayModes(CSTRING Filter, struct DisplayInfoV3 * Info, LONG Size);
void gfxSetClipRegion(extBitmap * Bitmap, LONG Number, LONG Left, LONG Top, LONG Right, LONG Bottom, LONG Terminate);
ERR gfxSetCursor(OBJECTID Surface, CRF Flags, PTC Cursor, CSTRING Name, OBJECTID Owner);
ERR gfxSetCursorPos(DOUBLE X, DOUBLE Y);
ERR gfxSetCustomCursor(OBJECTID Surface, CRF Flags, objBitmap * Bitmap, LONG HotX, LONG HotY, OBJECTID Owner);
ERR gfxSetHostOption(HOST Option, LARGE Value);
OBJECTID gfxSetModalSurface(OBJECTID Surface);
ERR gfxStartCursorDrag(OBJECTID Source, LONG Item, CSTRING Datatypes, OBJECTID Surface);
ERR gfxSubscribeInput(FUNCTION * Callback, OBJECTID SurfaceFilter, JTYPE Mask, OBJECTID DeviceFilter, LONG * Handle);
void gfxSync(extBitmap * Bitmap);
ERR gfxUnlockBitmap(OBJECTID Surface, extBitmap * Bitmap);
ERR gfxUnlockCursor(OBJECTID Surface);
ERR gfxUnsubscribeInput(LONG Handle);
ERR gfxWindowHook(OBJECTID SurfaceID, WH Event, FUNCTION * Callback);

} // extern c
