// Auto-generated by idl-c.fluid

#ifdef  __cplusplus
extern "C" {
#endif

struct SurfaceControl * gfxAccessList(LONG Flags);
struct rkPointer * gfxAccessPointer();
ERROR gfxCheckIfChild(OBJECTID Parent, OBJECTID Child);
ERROR gfxCompress(struct rkBitmap * Bitmap, LONG Level);
ERROR gfxCopyArea(struct rkBitmap * Bitmap, struct rkBitmap * Dest, LONG Flags, LONG X, LONG Y, LONG Width, LONG Height, LONG XDest, LONG YDest);
ERROR gfxCopyRawBitmap(struct BitmapSurfaceV2 * Surface, struct rkBitmap * Bitmap, LONG Flags, LONG X, LONG Y, LONG Width, LONG Height, LONG XDest, LONG YDest);
ERROR gfxCopySurface(OBJECTID Surface, struct rkBitmap * Bitmap, LONG Flags, LONG X, LONG Y, LONG Width, LONG Height, LONG XDest, LONG YDest);
ERROR gfxDecompress(struct rkBitmap * Bitmap, LONG RetainData);
void gfxDrawLine(struct rkBitmap * Bitmap, LONG X, LONG Y, LONG XEnd, LONG YEnd, ULONG Colour);
void gfxDrawPixel(struct rkBitmap * Bitmap, LONG X, LONG Y, ULONG Colour);
void gfxDrawRGBPixel(struct rkBitmap * Bitmap, LONG X, LONG Y, struct RGB8 * RGB);
void gfxDrawRectangle(struct rkBitmap * Bitmap, LONG X, LONG Y, LONG Width, LONG Height, ULONG Colour, LONG Flags);
ERROR gfxExposeSurface(OBJECTID Surface, LONG X, LONG Y, LONG Width, LONG Height, LONG Flags);
void gfxFlipBitmap(struct rkBitmap * Bitmap, LONG Orientation);
void gfxGetColourFormat(struct ColourFormat * Format, LONG BitsPerPixel, LONG RedMask, LONG GreenMask, LONG BlueMask, LONG AlphaMask);
ERROR gfxGetCursorInfo(struct CursorInfo * Info, LONG Size);
ERROR gfxGetCursorPos(DOUBLE * X, DOUBLE * Y);
ERROR gfxGetDisplayInfo(OBJECTID Display, struct DisplayInfoV3 ** Info);
LONG gfxGetDisplayType();
CSTRING gfxGetInputTypeName(LONG Type);
OBJECTID gfxGetModalSurface(OBJECTID Task);
ERROR gfxGetRelativeCursorPos(OBJECTID Surface, DOUBLE * X, DOUBLE * Y);
ERROR gfxGetSurfaceCoords(OBJECTID Surface, LONG * X, LONG * Y, LONG * AbsX, LONG * AbsY, LONG * Width, LONG * Height);
ERROR gfxGetSurfaceFlags(OBJECTID Surface, LONG * Flags);
ERROR gfxGetSurfaceInfo(OBJECTID Surface, struct SurfaceInfoV2 ** Info);
OBJECTID gfxGetUserFocus();
ERROR gfxGetVisibleArea(OBJECTID Surface, LONG * X, LONG * Y, LONG * AbsX, LONG * AbsY, LONG * Width, LONG * Height);
ERROR gfxLockBitmap(OBJECTID Surface, struct rkBitmap ** Bitmap, LONG * Info);
ERROR gfxLockCursor(OBJECTID Surface);
ULONG gfxReadPixel(struct rkBitmap * Bitmap, LONG X, LONG Y);
void gfxReadRGBPixel(struct rkBitmap * Bitmap, LONG X, LONG Y, struct RGB8 ** RGB);
void gfxReleaseList(LONG Flags);
ERROR gfxResample(struct rkBitmap * Bitmap, struct ColourFormat * ColourFormat);
ERROR gfxRestoreCursor(LONG Cursor, OBJECTID Owner);
DOUBLE gfxScaleToDPI(DOUBLE Value);
ERROR gfxScanDisplayModes(CSTRING Filter, struct DisplayInfoV3 * Info, LONG Size);
void gfxSetClipRegion(struct rkBitmap * Bitmap, LONG Number, LONG Left, LONG Top, LONG Right, LONG Bottom, LONG Terminate);
ERROR gfxSetCursor(OBJECTID Surface, LONG Flags, LONG Cursor, CSTRING Name, OBJECTID Owner);
ERROR gfxSetCursorPos(DOUBLE X, DOUBLE Y);
ERROR gfxSetCustomCursor(OBJECTID Surface, LONG Flags, struct rkBitmap * Bitmap, LONG HotX, LONG HotY, OBJECTID Owner);
ERROR gfxSetHostOption(LONG Option, LARGE Value);
OBJECTID gfxSetModalSurface(OBJECTID Surface);
ERROR gfxStartCursorDrag(OBJECTID Source, LONG Item, CSTRING Datatypes, OBJECTID Surface);
ERROR gfxSubscribeInput(FUNCTION * Callback, OBJECTID SurfaceFilter, LONG Mask, OBJECTID DeviceFilter, LONG * Handle);
void gfxSync(struct rkBitmap * Bitmap);
ERROR gfxUnlockBitmap(OBJECTID Surface, struct rkBitmap * Bitmap);
ERROR gfxUnlockCursor(OBJECTID Surface);
ERROR gfxUnsubscribeInput(LONG Handle);
ERROR gfxWindowHook(OBJECTID SurfaceID, LONG Event, FUNCTION * Callback);

#ifdef  __cplusplus
}
#endif
