// Auto-generated by idl-c.fluid

namespace gfx {
extern objPointer * AccessPointer();
extern ERR CheckIfChild(OBJECTID Parent, OBJECTID Child);
extern ERR CopyArea(objBitmap * Bitmap, objBitmap * Dest, BAF Flags, LONG X, LONG Y, LONG Width, LONG Height, LONG XDest, LONG YDest);
extern ERR CopyRawBitmap(struct BitmapSurfaceV2 * Surface, objBitmap * Dest, CSRF Flags, LONG X, LONG Y, LONG Width, LONG Height, LONG XDest, LONG YDest);
extern ERR CopySurface(OBJECTID Surface, objBitmap * Bitmap, BDF Flags, LONG X, LONG Y, LONG Width, LONG Height, LONG XDest, LONG YDest);
extern void DrawPixel(objBitmap * Bitmap, LONG X, LONG Y, ULONG Colour);
extern void DrawRGBPixel(objBitmap * Bitmap, LONG X, LONG Y, struct RGB8 * RGB);
extern void DrawRectangle(objBitmap * Bitmap, LONG X, LONG Y, LONG Width, LONG Height, ULONG Colour, BAF Flags);
extern ERR ExposeSurface(OBJECTID Surface, LONG X, LONG Y, LONG Width, LONG Height, EXF Flags);
extern void FlipBitmap(objBitmap * Bitmap, FLIP Orientation);
extern void GetColourFormat(struct ColourFormat * Format, LONG BitsPerPixel, LONG RedMask, LONG GreenMask, LONG BlueMask, LONG AlphaMask);
extern ERR GetCursorInfo(struct CursorInfo * Info, LONG Size);
extern ERR GetCursorPos(DOUBLE * X, DOUBLE * Y);
extern ERR GetDisplayInfo(OBJECTID Display, struct DisplayInfoV3 ** Info);
extern DT GetDisplayType();
extern CSTRING GetInputTypeName(JET Type);
extern OBJECTID GetModalSurface();
extern ERR GetRelativeCursorPos(OBJECTID Surface, DOUBLE * X, DOUBLE * Y);
extern ERR GetSurfaceCoords(OBJECTID Surface, LONG * X, LONG * Y, LONG * AbsX, LONG * AbsY, LONG * Width, LONG * Height);
extern ERR GetSurfaceFlags(OBJECTID Surface, RNF * Flags);
extern ERR GetSurfaceInfo(OBJECTID Surface, struct SurfaceInfoV2 ** Info);
extern OBJECTID GetUserFocus();
extern ERR GetVisibleArea(OBJECTID Surface, LONG * X, LONG * Y, LONG * AbsX, LONG * AbsY, LONG * Width, LONG * Height);
extern ERR LockBitmap(OBJECTID Surface, objBitmap ** Bitmap, LVF * Info);
extern ERR LockCursor(OBJECTID Surface);
extern ULONG ReadPixel(objBitmap * Bitmap, LONG X, LONG Y);
extern void ReadRGBPixel(objBitmap * Bitmap, LONG X, LONG Y, struct RGB8 ** RGB);
extern ERR Resample(objBitmap * Bitmap, struct ColourFormat * ColourFormat);
extern ERR RestoreCursor(PTC Cursor, OBJECTID Owner);
extern DOUBLE ScaleToDPI(DOUBLE Value);
extern ERR ScanDisplayModes(CSTRING Filter, struct DisplayInfoV3 * Info, LONG Size);
extern void SetClipRegion(objBitmap * Bitmap, LONG Number, LONG Left, LONG Top, LONG Right, LONG Bottom, LONG Terminate);
extern ERR SetCursor(OBJECTID Surface, CRF Flags, PTC Cursor, CSTRING Name, OBJECTID Owner);
extern ERR SetCursorPos(DOUBLE X, DOUBLE Y);
extern ERR SetCustomCursor(OBJECTID Surface, CRF Flags, objBitmap * Bitmap, LONG HotX, LONG HotY, OBJECTID Owner);
extern ERR SetHostOption(HOST Option, LARGE Value);
extern OBJECTID SetModalSurface(OBJECTID Surface);
extern ERR StartCursorDrag(OBJECTID Source, LONG Item, CSTRING Datatypes, OBJECTID Surface);
extern ERR SubscribeInput(FUNCTION * Callback, OBJECTID SurfaceFilter, JTYPE Mask, OBJECTID DeviceFilter, LONG * Handle);
extern void Sync(objBitmap * Bitmap);
extern ERR UnlockBitmap(OBJECTID Surface, objBitmap * Bitmap);
extern ERR UnlockCursor(OBJECTID Surface);
extern ERR UnsubscribeInput(LONG Handle);
extern ERR WindowHook(OBJECTID SurfaceID, WH Event, FUNCTION * Callback);

} // namespace
