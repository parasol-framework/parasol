--$FLUID:Include

module({ name="Display", copyright="Paul Manias 2003-2023", version=1.0, status="stable", prefix="gfx" }, function()

  restrict(function()
    loadFile(glPath .. 'common.fdl')
    loadFile(glPath .. 'common-graphics.fdl')
  end)

  platform("X11", function()
    c_include("<X11/Xlib.h>", "<X11/extensions/XShm.h>")
  end)

  enum("DRAG", { start=0, flags="Flags for the DragStatus field." },
    "NONE: The surface is not being dragged.",
    "ANCHOR: The surface is being dragged and the mouse pointer is anchored to the surface.",
    "NORMAL: The surface is being dragged.")

  enum("WH", { start=1, comment="Events for WindowHook()" },
    "CLOSE")

  enum("CS", { start=1, comment="Colour space options." },
    "SRGB: The default colour-space is sRGB.",
    "LINEAR_RGB: Linear RGB is used to improve colour balance in blending operations.",
    "CIE_LAB: Cartesian L*a*b* colour space defined by CIE 15.",
    "CIE_LCH: Polar L*CHab colour space defined by CIE 15.")

  flags("EXF", { comment="Optional flags for the ExposeSurface() function." },
    "CHILDREN: If set, all child surfaces that intersect with exposed region will be included in the expose operation.",
    "REDRAW_VOLATILE: Redraw every volatile object that intersects with the expose region, including internal volatile children.",
    "REDRAW_VOLATILE_OVERLAP: Only redraw volatile objects that obscure the expose region from a position outside of the target surface and its children.  Useful if no redrawing has occurred in the surface, but the surface has moved to a new position and the parents need to be redrawn.",
    "ABSOLUTE_COORDS|ABSOLUTE: The supplied coordinates for exposure are absolute (relative to the display).",
    "CURSOR_SPLIT: Internal flag used to reduce screen flickering when a software cursor is in use.")

  flags("RT", { },
     "ROOT: Can be used by window surfaces to identify themselves as a root layer.")

  flags("LVF", { comment="drwLockBitmap() result flags" },
     "EXPOSE_CHANGES")

  flags("IRF", { comment="Flags for RedrawSurface()." },
    "IGNORE_NV_CHILDREN: Do not draw child surfaces unless they are volatile.",
    "IGNORE_CHILDREN: Do not draw child surfaces (this includes volatile children).",
    "SINGLE_BITMAP: Only draw children and/or siblings when they share our bitmap space.",
    "RELATIVE: Coordinate arguments are expressed in relative format.  Right and Bottom reflect Width and Height respectively.",
    "FORCE_DRAW: Forces redrawing to the surface buffer (overrides visibility checks).")

  flags("BDF", { comment="CopySurface() flags" },
    "REDRAW: Redraw the surface before performing the copy operation.",
    "DITHER: Allow the use of dithering to improve image quality at a cost of speed.")

  flags("DSF", { },
    "NO_DRAW: Drawing and exposures are disabled",
    "NO_EXPOSE: Drawing is enabled, exposures are disabled")

  enum("SWIN", { start=0, comment="Options for the Surface WindowType field." },
    "HOST: Default to the standard hosted window mode with full titlebar, borders and taskbar representation.",
    "TASKBAR: Create a borderless (custom) window with taskbar representation.",
    "ICON_TRAY: Create a borderless (custom) window with icon tray representation.",
    "NONE: Create a borderless (custom) window with no UI representation.")

  flags("RNF", { "Switches for the Surface class' Flags field." },
    "TRANSPARENT: Enables transparency, which means that the internal graphics routines will ignore this surface during redraws.  It is typically used when creating containers that will host other surfaces.",
    "STICK_TO_BACK: Enable if the surface object must stick to the back of its container.",
    "STICK_TO_FRONT: Enable if the surface object must stick to the front of its container.",
    "VISIBLE: If a surface object is visible to the user, the VISIBLE flag will be set.  If the flag is not set, the surface object is hidden.",
    "STICKY: Prevents any response to the Move action.  It can be circumvented by writing to coordinate fields directly.",
    "GRAB_FOCUS: Helps application windows manage the user's focus within the window",
    "HAS_FOCUS: Read-only.  If set, this flag indicates that the surface object currently has the focus.",
    "DISABLED: This flag is set if the Disable action has been called on a surface object.  Calling the Enable action will turn off the flag setting.",
    "AUTO_QUIT: The surface object will send a quit message to its supporting process when and if the Close method is called.  This flag is typically used when a surface object represents a core window for an application.",
    "HOST: Define host on initialisation to create a container that can host surfaces from other processes.",
    "PRECOPY: Enables pre-copy mode, which means that all graphics behind the surface object are copied into the bitmap buffer prior to any redraw.  This mode can have a noticable impact on CPU time when drawing.",
    "VIDEO|WRITE_ONLY: Set this flag if you would like the surface object's data to be managed in video memory only.  While this can give some speed advantages, be warned that video based surfaces are limited to write-only operations.",
    "NO_HORIZONTAL: Turns off all horizontal movement (applies to the Move action only).",
    "NO_VERTICAL: Turns off all vertical movement (applies to the Move action only).",
    "CURSOR|POINTER: Private - Surface is a mouse cursor",
    "SCROLL_CONTENT: If set, the surface object will send Move and MoveToPoint messages if the Scroll and ScrollToPoint actions are ever called on the object.",
    "AFTER_COPY: Read-only.  Indicates that after-copy mode has been enabled.",
    "FIXED_BUFFER: Passes the NEVER_SHRINK option to the surface bitmap",
    "PERVASIVE_COPY: This flag can be set in conjunction with after-copy mode.  It forces the after-copy support routine to copy graphics over the entire surface area, rather than avoiding the graphics of child surfaces.",
    "NO_FOCUS: Prevents any kind of focussing on this object; no circumvention is possible",
    "FIXED_DEPTH: The target buffer always remains at the same depth",
    "TOTAL_REDRAW: Perform a total redraw of the entire surface when drawing - no partial draws",
    "COMPOSITE|NO_PRECOMPOSITE|POST_COMPOSITE: Do not copy background information into the surface buffer - composite on the fly instead",
    "FULL_SCREEN: Allow the surface to open as a new screen display",
    "IGNORE_FOCUS: Focus is diverted directly to the parent",
    "ASPECT_RATIO: When resizing, enforce the aspect ratio as defined by MinWidth and MinHeight.",
    { VOLATILE = "PRECOPY|AFTER_COPY|CURSOR" },
    { READ_ONLY = "HAS_FOCUS|CURSOR|AFTER_COPY" },
    { INIT_ONLY = "HOST|TRANSPARENT|DISABLED|PRECOPY|VIDEO|FIXED_BUFFER|PERVASIVE_COPY|FIXED_DEPTH|FULL_SCREEN|IGNORE_FOCUS" })

  enum("HOST", { start=1 },
    "TRAY_ICON: All new displays are represented in the system tray when this option is active.",
    "TASKBAR: The hosted display is given a taskbar button.",
    "STICK_TO_FRONT: The hosted display sticks to the front.",
    "TRANSLUCENCE: Change the alpha channel level for the entire window.",
    "TRANSPARENT: Defines an RGB colour that is to be used as transparent."
  )

  flags("PF", { comment="Flags for the Pointer class." },
     "UNUSED",  -- TBD
     "VISIBLE: Indicates that the pointer is currently visible.  Read-only.",
     "ANCHOR: Allow the pointer to be anchored.")

  flags("ACF", { comment="Acceleration flags for GetDisplayInfo()." },
     "VIDEO_BLIT: Video blitting is supported for this display.",
     "SOFTWARE_BLIT: Software blitting is used (or forced) for this display.")

  flags("CRF", { comment="Flags for the SetCursor() function." },
     "LMB: Release the cursor after the left mouse button is held and released.",
     "MMB: Release the cursor after the middle mouse button is held and released.",
     "RMB: Release the cursor after the right mouse button is held and released.",
     "RESTRICT: Similar to the anchor option, but allows the pointer to move within the surface referred to by ObjectID.",
     "BUFFER: Use of the BUFFER option allows the cursor request to be buffered in the event that the cursor is locked at the time of calling the SetCursor() function.  Use of this flag is highly recommended in most circumstances, but may not be used in conjunction with the ANCHOR option.",
     "NO_BUTTONS: Set the cursor only on the condition that the user is not holding down any buttons.  ERR_NothingDone is returned if the user has a button held down."
  )

  flags("BAF", { comment="Instructions for basic graphics operations." },
    { DITHER = "0x1: Perform dithering if the colour formats differ between the source and destination." },
    { BLEND  = "0x2: Enable alpha blending to the destination if the source supports an alpha channel." },
    { FILL   = "0x1: For primitive operations such as DrawRectangle(), this will fill the shape with a solid colour or texture." },
    { COPY   = "0x4: Special CopyArea() option that avoids blending when the destination pixel is empty." },
    { LINEAR = "0x8: Use linear interpolation to improve the quality of alpha blending." }
  )

  flags("CSRF", { comment="Flags for CopySurface()." },
    "TRANSPARENT: Enable transparent copying, whereby colours matching the source's Colour field will be ignored.",
    "ALPHA: Enable alpha blending if the source is in 32-bit colour format with an alpha channel.",
    "TRANSLUCENT: Perform a translucent copy operation, using the strength value specified in the Surface Opacity field.",
    "DEFAULT_FORMAT: Ignore the colour format defined in the source surface (if any) and generate a default format based on the BitsPerPixel value.",
    "CLIP: Enable clipping of the source coordinates.",
    "OFFSET: Adjust X and Y coordinates by the offset values defined in the Surface' XOffset and YOffset fields.")

  enum("BMP", { start=2, comment="Bitmap types" },
     "PLANAR: Planar pixel mode separates pixel bits across multiple planes.  Commonly used for single bit bitmap masks.",
     "CHUNKY: Chunky pixel mode (default).")

  flags("BMF", { comment="Bitmap flags" },
    "BLANK_PALETTE: Forces a blank/black palette on initialisation.",
    "COMPRESSED: The bitmap data is compressed.",
    "NO_DATA: Do not allocate memory in the Data field on initialisation.",
    "TRANSPARENT: Indicates that the bitmap utilises a transparent colour.  This is automatically set if the ColourRGB field is set and support exists in functions such as CopyArea().",
    "MASK: Declare the Bitmap as a 1 or 8 bit mask.  Must be set in conjunction with the BitsPerPixel field on initialisation.",
    "INVERSE_ALPHA: Indicates reverse alpha blending, higher values are transparent.",
    "QUERIED: Automatically set after a Query on the bitmap.",
    "CLEAR: Clear graphics on initialisation and when resizing.",
    "USER: This user flag can be used to tag bitmaps with special meaning.  Not used internally.",
    "ACCELERATED_2D: 2D video acceleration is available.",
    "ACCELERATED_3D: 3D video acceleration is available.",
    "ALPHA_CHANNEL: For 32-bit images, indicates that an alpha channel is present.",
    "NEVER_SHRINK: Ignore resize requests that would shrink the size of the bitmap.",
    "X11_DGA: Private DGA indicator.",
    "FIXED_DEPTH: Prevent changing of bitmap depth after initialisation (e.g. via acResize()).",
    "NO_BLEND: Drawing routines that support this flag will not blend pixels.",
    "PREMUL: The RGB values are premultiplied (32-bit only)."
  )

  enum("FLIP", { start=1, comment="Flags for the bitmap Flip method." },
    "HORIZONTAL: Flip the bitmap from top to bottom.",
    "VERTICAL: Flip the bitmap from left to right.")

  flags("SCR", { comment="Display flags." },
    "VISIBLE: Set if the screen is on display.",
    "AUTO_SAVE: Saves settings to the global display state when the object is freed.",
    "BUFFER: Set if you would like a complementing buffer in video RAM.",
    "NO_ACCELERATION: 2D graphics card acceleration is not available.",
    "BIT_6: Display is limited to 6-bit output per colour gun.",
    "BORDERLESS: If display is hosted, create it as a popup / borderless window.",
    "ALPHA_BLEND|COMPOSITE: Enables alpha channel blending (if display is hosted and 32-bit).",
    { MAXIMISE        = "0x80000000: Special win32 flag." },
    { CUSTOM_WINDOW   = "0x40000000: The display has been created with a custom window reference." },
    { FLIPPABLE       = "0x20000000: If SCR_BUFFER is used, this flag may be set by the display manager if it is possible to flip the buffer." },
    { GTF_ENABLED     = "0x10000000: GTF frequency timings are supported." },
    { DPMS_ENABLED    = "0x08000000: Power saving through DPMS is supported." },
    { POWERSAVE       = "0x04000000: Power saving is active (read-only)." },
    { HOSTED          = "0x02000000: The display is a desktop hosted window." },
    { MAXSIZE         = "0x00100000: For GetDisplayInfo() only, indicates that the width and height values indicate the display's maximum size." },
    { REFRESH         = "0x00200000: For GetDisplayInfo() only, used to indicate that a display change has recently occurred and cache refresh is required." },
    { READ_ONLY       = "MAXIMISE|CUSTOM_WINDOW|FLIPPABLE|GTF_ENABLED|DPMS_ENABLED|POWERSAVE|HOSTED|MAXSIZE|REFRESH|BIT_6|VISIBLE|NO_ACCELERATION" }
  )

  flags("SMF", { comment="Flags for the Display class SetMonitor() method." },
     "AUTO_DETECT: Monitor settings to be auto-detected on startup.",
     "BIT_6: The device is limited to 6-bit colour production in real terms.")

  flags("GMF", { comment="Flags for gamma operations." },
     "SAVE: Save the provided settings permanently.")

  enum("DT", { start=1, comment="Flags for GetDisplayType()." },
    "NATIVE: The display is native (supported by internal drivers).",
    "X11: The display is driven by the X Window System (X11, X.Org, XFree86)",
    "WINDOWS: The display is driven by Microsoft Windows drivers.",
    "GLES: The display is driven by OpenGLES.")

  enum("DPMS", { start=0, comment="Possible modes for the Display class' DPMS field." },
    "DEFAULT: Use the default DPMS mode as defined by the display driver.",
    "OFF: Stop sending power to the display in order to turn it off (it may not be possible to restart the display without the user's intervention).",
    "SUSPEND: Puts the display into suspend mode (blanks the display output while maintaining normal power levels).",
    "STANDBY: Puts the display into standby (reduced power) mode.")

  enum('CT', { start=0 }, 'DATA', 'AUDIO', 'IMAGE', 'FILE', 'OBJECT', 'TEXT', 'END')

  -- Note: It is intentional that the CLIP types are expressed as flags and not constants.

  flags('CLIPTYPE', { comment='Clipboard types' },
    'DATA: Raw information that is uncategorised can be defined as a data clip.',
    'AUDIO: An audio clip that is recognised by the Sound class (such as wav\'s and mp3\'s).',
    'IMAGE: Images that are recognised by the Picture class may be stored as this type (such as jpeg\'s and png files).',
    'FILE: Pure file references are stored as file clips.  This type is typically used by file managers for moving and copying files.',
    'OBJECT: An object that has been deserialised into binary form.',
    'TEXT: Plain text files such as ASCII and UTF-8 must be identified through this clip type.')

  flags('CPF', { strict=true, comment='Clipboard flags' },
    'DRAG_DROP: Enables drag and drop mode.  The clipboard content will be private and not share data with the host system in this mode.',
    'HOST: This indicator is automatically set when a clipboard was created due to incoming content from the host system.',
    'HISTORY_BUFFER: Enables the history buffer.  Note that this results in active clipboard monitoring and the program will make copies of all potential clipboard content - whether it is used or not.')

  flags('CEF', { },
    'DELETE: Requests that the original file source is deleted if a successful paste operation takes place.',
    'EXTEND: Instead of replacing existing clipboard data, add the new data to the group.')

  struct("SurfaceInfo", { version=2, type="surfaceinfo" }, [[
    ptr Data            # Bitmap data memory ID
    oid ParentID        # Object that contains the surface area
    oid BitmapID        # Surface bitmap buffer
    oid DisplayID       # Refers to the display if this object is at root level
    int(RNF) Flags      # Surface flags
    int X               # Horizontal coordinate
    int Y               # Vertical coordinate
    int Width           # Width of the surface area
    int Height          # Height of the surface area
    int AbsX            # Absolute X coordinate
    int AbsY            # Absolute Y coordinate
    short Level         # Branch level within the tree
    char BitsPerPixel   # Bits per pixel of the bitmap
    char BytesPerPixel  # Bytes per pixel of the bitmap
    int LineWidth       # Line width of the bitmap, in bytes
  ]])

  struct("SurfaceCallback", { restrict="c", comment="Private structure for managing surface callbacks." }, [[
    obj Object    # Context to use for the function.
    func Function # void (*Routine)(OBJECTPTR, struct Surface *, objBitmap *);
  ]])

  struct("SurfaceCoords", { }, [[
    int X      # Horizontal coordinate
    int Y      # Vertical coordinate
    int Width  # Width
    int Height # Height
    int AbsX   # Absolute X
    int AbsY   # Absolute Y
  ]])

  -- PixelFormat duplicates the Core module's ColourFormat structure.

  struct("PixelFormat", { type="pixelformat", comment="Carries instructions to pack or unpack RGBA colours." }, [[
    uchar  RedShift    # Right shift value
    uchar  GreenShift  # Green shift value
    uchar  BlueShift   # Blue shift value
    uchar  AlphaShift  # Alpha shift value
    uchar  RedMask     # The unshifted red mask value (ranges from 0x00 to 0xff)
    uchar  GreenMask   # The unshifted green mask value (ranges from 0x00 to 0xff)
    uchar  BlueMask    # The unshifted blue mask value (ranges from 0x00 to 0xff)
    uchar  AlphaMask   # The unshifted alpha mask value (ranges from 0x00 to 0xff)
    uchar  RedPos      # Left shift/positional value for red
    uchar  GreenPos    # Left shift/positional value for green
    uchar  BluePos     # Left shift/positional value for blue
    uchar  AlphaPos    # Left shift/positional value for alpha
  ]])

  struct("DisplayInfo", { type="displayinfo", version=3 }, [[
    oid   Display         # Object ID related to the display
    int(SCR) Flags        # Display flags
    short Width           # Pixel width of the display
    short Height          # Pixel height of the display
    short BitsPerPixel    # Bits per pixel
    short BytesPerPixel   # Bytes per pixel
    large(ACF) AccelFlags # Flags describing supported hardware features.
    int   AmtColours      # Total number of supported colours.
    struct(PixelFormat) PixelFormat # The colour format to use for each pixel.
    float MinRefresh     # Minimum refresh rate
    float MaxRefresh     # Maximum refresh rate
    float RefreshRate    # Recommended refresh rate
    int   Index          # Display mode ID (internal)
    int   HDensity       # Horizontal pixel density per inch.
    int   VDensity       # Vertical pixel density per inch.
  ]])

  struct("CursorInfo", { }, [[
    int Width           # Maximum cursor width for custom cursors
    int Height          # Maximum cursor height for custom cursors
    int Flags           # Currently unused
    short BitsPerPixel  # Preferred bits-per-pixel setting for custom cursors
  ]])

  struct("BitmapSurface", { type="bitmapsurface", version=2 }, [[
    ptr   Data           # Pointer to the bitmap graphics data.
    short Width          # Pixel width of the bitmap.
    short Height         # Pixel height of the bitmap.
    int   LineWidth      # The distance between bitmap lines, measured in bytes.
    uchar BitsPerPixel   # The number of bits per pixel (8, 15, 16, 24, 32).
    uchar BytesPerPixel  # The number of bytes per pixel (1, 2, 3, 4).
    uchar Opacity        # Opacity level of the source if CSRF_TRANSLUCENT is used.
    uchar Version        # Version of this structure.
    int   Colour         # Colour index to use if CSRF_TRANSPARENT is used.
    struct(ClipRectangle) Clip  # A clipping rectangle will restrict drawing operations to this region if CSRF_CLIP is used.
    short XOffset        # Offset all X coordinate references by the given value.
    short YOffset        # Offset all Y coordinate references by the given value.
    struct(ColourFormat) Format  # The colour format of this bitmap's pixels, or alternatively use CSRF_DEFAULT_FORMAT.
    ptr  Private        # A private pointer reserved for internal usage
  ]])

  methods("Bitmap", "Bmp", {
    { id=1, name="CopyArea" },
    { id=2, name="Compress" },
    { id=3, name="Decompress" },
    { id=4, name="Flip" },
    { id=6, name="DrawRectangle" },
    { id=7, name="SetClipRegion" },
    { id=8, name="GetColour", inline=false },
    { id=10, name="Premultiply" },
    { id=11, name="Demultiply" },
    { id=12, name="ConvertToLinear" },
    { id=13, name="ConvertToRGB" }
  })

  class("Bitmap", { version=2.0, src="class_bitmap.cpp", output="class_bitmap_def.c" }, [[
    struct(*RGBPalette) Palette          # Pointer to the Bitmap's palette
    struct(*ColourFormat) ColourFormat   # Pointer to colour information
    fptr(void obj(Bitmap) int int uint) DrawUCPixel
    fptr(void obj(Bitmap) int int struct(*RGB8)) DrawUCRPixel
    fptr(uint obj(Bitmap) int int) ReadUCPixel
    fptr(void obj(Bitmap) int int struct(*RGB8)) ReadUCRPixel
    fptr(void obj(Bitmap) ptr(uchar) struct(*RGB8)) ReadUCRIndex
    fptr(void obj(Bitmap) ptr(uchar) struct(*RGB8)) DrawUCRIndex
    ptr(uchar) Data             # Pointer to bitmap data area
    int   Width                 # Width
    int   ByteWidth             # ByteWidth (not including padding - see LineWidth)
    int   Height                # Height
    int(BMP) Type               # Bitmap type
    int   LineWidth             # Line differential in bytes
    int   PlaneMod              # Plane differential in bytes
    struct(ClipRectangle) Clip  # Clipping rectangle
    int   Size                  # Total size of the bitmap in bytes
    int(MEM) DataFlags          # Memory flags to use in allocation
    int   AmtColours            # Maximum amount of colours available
    int(BMF) Flags              # Optional flags
    int   TransIndex            # Colour index or packed colour value that acts as the background/transparency
    int   BytesPerPixel         # 1, 2, 3, 4
    int   BitsPerPixel          # 1, 8, 15, 16, 24, 32
    int   Position              # Current byte position for reading and writing
    int   XOffset               # Horizontal offset to apply to graphics coordinates
    int   YOffset               # Vertical offset to apply to graphics coordinates
    int   Opacity               # Opacity setting to use in drawing operations
    struct(RGB8) TransRGB       # The transparent colour of the bitmap, in RGB format.
    struct(RGB8) BkgdRGB        # Background colour (for clearing, resizing)
    int BkgdIndex               # Colour index or packed colour of the background.
    int(CS) ColourSpace         # Defines the colour space for RGB values.
  ]],
  nil,
  [[
   inline ULONG getColour(UBYTE Red, UBYTE Green, UBYTE Blue, UBYTE Alpha) {
      if (BitsPerPixel > 8) return packPixel(Red, Green, Blue, Alpha);
      else {
         struct bmpGetColour args = { Red, Green, Blue, Alpha };
         if (!Action(MT_BmpGetColour, this, &args)) return args.Colour;
         return 0;
      }
   }

   inline ULONG getColour(struct RGB8 &RGB) {
      if (BitsPerPixel > 8) return packPixel(RGB);
      else {
         struct bmpGetColour args = { RGB.Red, RGB.Green, RGB.Blue, RGB.Alpha };
         if (!Action(MT_BmpGetColour, this, &args)) return args.Colour;
         return 0;
      }
   }

   inline ULONG packPixel(UBYTE R, UBYTE G, UBYTE B) {
      return
         (((R>>ColourFormat->RedShift) & ColourFormat->RedMask) << ColourFormat->RedPos) |
         (((G>>ColourFormat->GreenShift) & ColourFormat->GreenMask) << ColourFormat->GreenPos) |
         (((B>>ColourFormat->BlueShift) & ColourFormat->BlueMask) << ColourFormat->BluePos) |
         (((255>>ColourFormat->AlphaShift) & ColourFormat->AlphaMask) << ColourFormat->AlphaPos);
   }

   inline ULONG packPixel(UBYTE R, UBYTE G, UBYTE B, UBYTE A) {
      return
         (((R>>ColourFormat->RedShift) & ColourFormat->RedMask) << ColourFormat->RedPos) |
         (((G>>ColourFormat->GreenShift) & ColourFormat->GreenMask) << ColourFormat->GreenPos) |
         (((B>>ColourFormat->BlueShift) & ColourFormat->BlueMask) << ColourFormat->BluePos) |
         (((A>>ColourFormat->AlphaShift) & ColourFormat->AlphaMask) << ColourFormat->AlphaPos);
   }

   inline ULONG packPixel(struct RGB8 &RGB, UBYTE Alpha) {
      return
         (((RGB.Red>>ColourFormat->RedShift) & ColourFormat->RedMask) << ColourFormat->RedPos) |
         (((RGB.Green>>ColourFormat->GreenShift) & ColourFormat->GreenMask) << ColourFormat->GreenPos) |
         (((RGB.Blue>>ColourFormat->BlueShift) & ColourFormat->BlueMask) << ColourFormat->BluePos) |
         (((Alpha>>ColourFormat->AlphaShift) & ColourFormat->AlphaMask) << ColourFormat->AlphaPos);
   }

   inline ULONG packPixel(struct RGB8 &RGB) {
      return
         (((RGB.Red>>ColourFormat->RedShift) & ColourFormat->RedMask) << ColourFormat->RedPos) |
         (((RGB.Green>>ColourFormat->GreenShift) & ColourFormat->GreenMask) << ColourFormat->GreenPos) |
         (((RGB.Blue>>ColourFormat->BlueShift) & ColourFormat->BlueMask) << ColourFormat->BluePos) |
         (((RGB.Alpha>>ColourFormat->AlphaShift) & ColourFormat->AlphaMask) << ColourFormat->AlphaPos);
   }

   // Pack pixel 'whole-byte' version, for faster 24/32 bit formats

   inline ULONG packPixelWB(UBYTE R, UBYTE G, UBYTE B, UBYTE A = 255) {
      return (R << ColourFormat->RedPos) | (G << ColourFormat->GreenPos) | (B << ColourFormat->BluePos) | (A << ColourFormat->AlphaPos);
   }

   inline ULONG packPixelWB(struct RGB8 &RGB) {
      return (RGB.Red << ColourFormat->RedPos) | (RGB.Green << ColourFormat->GreenPos) | (RGB.Blue << ColourFormat->BluePos) | (RGB.Alpha << ColourFormat->AlphaPos);
   }

   // Colour unpacking routines

   template <class T> inline UBYTE unpackRed(T Packed)   { return (((Packed >> ColourFormat->RedPos) & ColourFormat->RedMask) << ColourFormat->RedShift); }
   template <class T> inline UBYTE unpackGreen(T Packed) { return (((Packed >> ColourFormat->GreenPos) & ColourFormat->GreenMask) << ColourFormat->GreenShift); }
   template <class T> inline UBYTE unpackBlue(T Packed)  { return (((Packed >> ColourFormat->BluePos) & ColourFormat->BlueMask) << ColourFormat->BlueShift); }
   template <class T> inline UBYTE unpackAlpha(T Packed) { return (((Packed >> ColourFormat->AlphaPos) & ColourFormat->AlphaMask)); }
  ]])

  methods("Display", "Gfx", {
    { id=1, name="WaitVBL" },
    { id=2, name="UpdatePalette" },
    { id=3, name="SetDisplay" },
    { id=4, name="SizeHints" },
    { id=5, name="SetGamma" },
    { id=6, name="SetGammaLinear" },
    { id=7, name="SetMonitor" },
    { id=8, name="Minimise" },
    { id=9, name="UpdateDisplay" },
    { id=10, name="CheckXWindow" }
  })

  class("Display", { version=1.0, src="class_display.cpp", output="class_display_def.c" }, [[
    double RefreshRate   # The active refresh rate
    obj(Bitmap) Bitmap   # Reference to the display's bitmap information.
    int(SCR) Flags       # Optional flags
    int Width            # The width of the visible display
    int Height           # The height of the visible display
    int X                # Hardware co-ordinate for vertical offset, or position of host window
    int Y                # Hardware co-ordinate for horizontal offset, or position of host window
    int BmpX             # Current offset of the horizontal axis
    int BmpY             # Current offset of the vertical axis
    oid Buffer           # Double buffer bitmap
    int TotalMemory      # The total amount of accessible RAM installed on the video card.
    int MinHScan         # The minimum horizontal scan rate of the display output device.
    int MaxHScan         # The maximum horizontal scan rate of the display output device.
    int MinVScan         # The minimum vertical scan rate of the display output device.
    int MaxVScan         # The maximum vertical scan rate of the display output device.
    int(DT) DisplayType  # Indicates the display type.
    int(DPMS) DPMS       # Optional display power modes.
    oid PopOver          # For hosted displays, PopOver can refer to another display that should always remain behind us
    int LeftMargin       # Left window margin, if hosted
    int RightMargin      # Right window margin, if hosted
    int TopMargin        # Top window margin, if hosted
    int BottomMargin     # Bottom window margin, if hosted
  ]])

  methods('clipboard', 'Clip', {
    { id=1, name='AddFile' },
    { id=2, name='AddObjects' },
    { id=3, name='GetFiles' },
    { id=4, name='AddText' },
    { id=5, name='Remove' }
  })

  class('Clipboard', { src='class_clipboard.cpp', output='class_clipboard_def.c' }, [[
    int(CPF) Flags      # Optional flags
  ]],
  [[
   FUNCTION RequestHandler;
  ]])

  class("Pointer", { version=1.0, src="class_pointer.cpp", output="class_pointer_def.c" }, [[
    double Speed           # Speed multiplier (%)
    double Acceleration    # Acceleration level - keep between 0.0 and 3.0
    double DoubleClick     # Double click speed
    double WheelSpeed      # Mouse-wheel speed
    double X               # Current x coordinate
    double Y               # Current y coordinate
    double OverX           # The X coord relative to the closest object
    double OverY           # The Y coord relative to the closest object
    double OverZ           # The Z distance relative to the closest object
    int    MaxSpeed        # Maximum speed
    oid    Input           # Indicates where pointer input comes from (usually SystemMouse)
    oid    Surface         # Top-most surface that contains the pointer
    oid    Anchor          # Surface object that the pointer is anchored to
    int(PTC) CursorID      # Current cursor image
    oid    CursorOwner     # Who owns the currently active cursor status
    int(PF) Flags          # Optional flags
    oid    Restrict        # Surface object that the pointer is restricted to
    int    HostX           # Indicates the current position of the host cursor on Windows or X11
    int    HostY           # Indicates the current position of the host cursor on Windows or X11
    obj(Bitmap) Bitmap     # Bitmap to use for custom cursor images
    oid    DragSource      # If drag & drop is active, refers to the object managing the draggable item
    int    DragItem        # If drag & drop is active, refers to the custom ID of the item being dragged
    oid    OverObject      # Object positioned under the pointer
    int    ClickSlop       # Leniency value for determining whether the user intended to make a click or drag.
  ]])

  methods("surface", "Drw", {
    { id=1, name="InheritedFocus" },
    { id=2, name="Expose" },
    { id=3, name="InvalidateRegion" },
    { id=4, name="SetDisplay" },
    { id=5, name="SetOpacity" },
    { id=6, name="AddCallback", inline=false },
    { id=7, name="Minimise" },
    { id=8, name="ResetDimensions" },
    { id=9, name="RemoveCallback", inline=false },
    { id=10, name="ScheduleRedraw" }
  })

  class("Surface", { src={
      "class_surface/class_surface.cpp",
      "class_surface/surface_dimensions.cpp",
      "class_surface/surface_drawing.cpp",
      "class_surface/surface_fields.cpp",
      "class_surface/surface_resize.cpp"
    }, output="class_surface/surface_def.c" }, [[
    oid Drag              # Drag the object that this field points to
    oid Buffer            # Buffer bitmap (backing store)
    oid Parent            # Graphical container of the Surface object, if any
    oid PopOver           # Keeps a surface in front of another surface in the Z order.
    int TopMargin         # Top movement limit
    int BottomMargin      # Bottom movement limit
    int LeftMargin        # Left movement limit
    int RightMargin       # Right movement limit
    int MinWidth          # Minimum width setting
    int MinHeight         # Minimum height setting
    int MaxWidth          # Maximum width setting
    int MaxHeight         # Maximum height setting
    int LeftLimit         # Limits the surface area from moving too far left
    int RightLimit        # Limits the surface area from moving too far right
    int TopLimit          # Limits the surface area from moving too far up
    int BottomLimit       # Limits the surface area from moving too far down
    oid Display           # Refers to the Display object that is managing the surface's graphics.
    int(RNF) Flags        # Special flags
    int X                 # Fixed horizontal coordinate
    int Y                 # Fixed vertical coordinate
    int Width             # Fixed width
    int Height            # Fixed height
    oid Root              # Surface that is acting as a root for many surface children (useful when applying translucency)
    int(ALIGN) Align      # Alignment flags
    int(DMF) Dimensions   # Dimension flags
    int(DRAG) DragStatus  # Indicates the draggable state when dragging is enabled.
    int(PTC) Cursor       # The preferred cursor image to use when the pointer is over the surface
    struct(RGB8) Colour   # Background colour specification
    int Type              # Internal surface type flags
    int Modal             # Set to 1 to enable modal mode
  ]],
  [[
   // These coordinate fields are considered private but may be accessed by some internal classes, like Document
   LONG     XOffset, YOffset;     // Fixed horizontal and vertical offset
   DOUBLE   XOffsetPercent;       // Relative horizontal offset
   DOUBLE   YOffsetPercent;       // Relative vertical offset
   DOUBLE   WidthPercent, HeightPercent; // Relative width and height
   DOUBLE   XPercent, YPercent;   // Relative coordinate
  ]])

  functionNames("gfx",
    "AccessPointer",
    "CheckIfChild",
    "CopyArea",
    "CopyRawBitmap",
    "CopySurface",
    "DrawPixel",
    "DrawRGBPixel",
    "DrawRectangle",
    "ExposeSurface",
    "FlipBitmap",
    "GetColourFormat",
    "GetCursorInfo",
    "GetCursorPos",
    "GetDisplayInfo",
    "GetDisplayType",
    "GetInputTypeName",
    "GetModalSurface",
    "GetRelativeCursorPos",
    "GetSurfaceCoords",
    "GetSurfaceFlags",
    "GetSurfaceInfo",
    "GetUserFocus",
    "GetVisibleArea",
    "LockBitmap",
    "LockCursor",
    "ReadPixel",
    "ReadRGBPixel",
    "Resample",
    "RestoreCursor",
    "ScaleToDPI",
    "ScanDisplayModes",
    "SetClipRegion",
    "SetCursor",
    "SetCursorPos",
    "SetCustomCursor",
    "SetHostOption",
    "SetModalSurface",
    "StartCursorDrag",
    "SubscribeInput",
    "Sync",
    "UnlockBitmap",
    "UnlockCursor",
    "UnsubscribeInput",
    "WindowHook")

  c_insert([[
// Direct ColourFormat versions

#define CFPackPixel(a,b,c,d)      ((((b)>>(a)->RedShift) & (a)->RedMask) << (a)->RedPos) | ((((c)>>(a)->GreenShift) & (a)->GreenMask) << (a)->GreenPos) | ((((d)>>(a)->BlueShift) & (a)->BlueMask) << (a)->BluePos)
#define CFPackPixelA(a,b,c,d,e)   ((((b)>>(a)->RedShift) & (a)->RedMask) << (a)->RedPos) | ((((c)>>(a)->GreenShift) & (a)->GreenMask) << (a)->GreenPos) | ((((d)>>(a)->BlueShift) & (a)->BlueMask) << (a)->BluePos) | ((((e)>>(a)->AlphaShift) & (a)->AlphaMask) << (a)->AlphaPos)
#define CFPackAlpha(a,b)          ((((b)>>(a)->AlphaShift) & (a)->AlphaMask) << (a)->AlphaPos)
#define CFPackPixelWB(a,b,c,d)    ((b) << (a)->RedPos) | ((c) << (a)->GreenPos) | ((d) << (a)->BluePos)
#define CFPackPixelWBA(a,b,c,d,e) ((b) << (a)->RedPos) | ((c) << (a)->GreenPos) | ((d) << (a)->BluePos) | ((e) << (a)->AlphaPos)
#define CFUnpackRed(a,b)          ((((b) >> (a)->RedPos) & (a)->RedMask) << (a)->RedShift)
#define CFUnpackGreen(a,b)        ((((b) >> (a)->GreenPos) & (a)->GreenMask) << (a)->GreenShift)
#define CFUnpackBlue(a,b)         ((((b) >> (a)->BluePos) & (a)->BlueMask) << (a)->BlueShift)
#define CFUnpackAlpha(a,b)        ((((b) >> (a)->AlphaPos) & (a)->AlphaMask))

#define gfxReleasePointer(a)    (ReleaseObject(a))

// Stubs

INLINE ERROR drwInvalidateRegionID(OBJECTID ObjectID, LONG X, LONG Y, LONG Width, LONG Height) {
   struct drwInvalidateRegion args = { X, Y, Width, Height };
   return ActionMsg(MT_DrwInvalidateRegion, ObjectID, &args);
}

INLINE ERROR drwExposeID(OBJECTID ObjectID, LONG X, LONG Y, LONG Width, LONG Height, LONG Flags) {
   struct drwExpose args = { X, Y, Width, Height, Flags };
   return ActionMsg(MT_DrwExpose, ObjectID, &args);
}

INLINE ERROR drwSetOpacityID(OBJECTID ObjectID, DOUBLE Value, DOUBLE Adjustment) {
   struct drwSetOpacity args = { Value, Adjustment};
   return ActionMsg(MT_DrwSetOpacity, ObjectID, &args);
}

INLINE ERROR drwAddCallback(OBJECTPTR Surface, APTR Callback) {
   if (Callback) {
      auto call = make_function_stdc(Callback);
      struct drwAddCallback args = { &call };
      return Action(MT_DrwAddCallback, Surface, &args);
   }
   else {
      struct drwAddCallback args = { NULL };
      return Action(MT_DrwAddCallback, Surface, &args);
   }
}

INLINE ERROR drwRemoveCallback(OBJECTPTR Surface, APTR Callback) {
   if (Callback) {
      auto call = make_function_stdc(Callback);
      struct drwRemoveCallback args = { &call };
      return Action(MT_DrwRemoveCallback, Surface, &args);
   }
   else {
      struct drwRemoveCallback args = { NULL };
      return Action(MT_DrwRemoveCallback, Surface, &args);
   }
}
  ]])
end)
