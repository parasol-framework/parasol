--$FLUID:Include

module({ name="Display", copyright="Paul Manias 2003-2022", version=1.0, status="stable", prefix="gfx" }, function()

  restrict(function()
    loadFile(glPath .. 'common.fdl')
    loadFile(glPath .. 'common-graphics.fdl')
  end)

  platform("X11", function()
    c_include("<X11/Xlib.h>", "<X11/extensions/XShm.h>")
    c_insert([[
#undef NULL
#define NULL 0
    ]])
  end)

  enum("HOST", { start=1 },
    "TRAY_ICON: All new displays are represented in the system tray when this option is active.",
    "TASKBAR: The hosted display is given a taskbar button.",
    "STICK_TO_FRONT: The hosted display sticks to the front.",
    "TRANSLUCENCE: Change the alpha channel level for the entire window.",
    "TRANSPARENT: Defines an RGB colour that is to be used as transparent."
  )

  flags("PF", { comment="Flags for the Pointer class." },
     "UNUSED",  -- TBD
     "VISIBLE: Indicates that the pointer is currently visible.  Read-only.",
     "ANCHOR: Allow the pointer to be anchored.")

  flags("ACF", { comment="Acceleration flags for GetDisplayInfo()." },
     "VIDEO_BLIT: Video blitting is supported for this display.",
     "SOFTWARE_BLIT: Software blitting is used (or forced) for this display.")

  flags("CRF", { comment="Flags for the SetCursor() function." },
     "LMB: Release the cursor after the left mouse button is held and released.",
     "MMB: Release the cursor after the middle mouse button is held and released.",
     "RMB: Release the cursor after the right mouse button is held and released.",
     "RESTRICT: Similar to the anchor option, but allows the pointer to move within the surface referred to by ObjectID.",
     "BUFFER: Use of the BUFFER option allows the cursor request to be buffered in the event that the cursor is locked at the time of calling the SetCursor() function.  Use of this flag is highly recommended in most circumstances, but may not be used in conjunction with the ANCHOR option.",
     "NO_BUTTONS: Set the cursor only on the condition that the user is not holding down any buttons.  ERR_NothingDone is returned if the user has a button held down."
  )

  flags("BAF", { comment="Instructions for basic graphics operations." },
    { DITHER = "0x1: Perform dithering if the colour formats differ between the source and destination." },
    { BLEND  = "0x2: Enable alpha blending to the destination if the source supports an alpha channel." },
    { FILL   = "0x1: For primitive operations such as DrawRectangle(), this will fill the shape with a solid colour or texture." },
    { COPY   = "0x4: Special CopyArea() option that avoids blending when the destination pixel is empty." }
  )

  flags("CSRF", { comment="Flags for CopySurface()." },
    "TRANSPARENT: Enable transparent copying, whereby colours matching the source's Colour field will be ignored.",
    "ALPHA: Enable alpha blending if the source is in 32-bit colour format with an alpha channel.",
    "TRANSLUCENT: Perform a translucent copy operation, using the strength value specified in the Surface Opacity field.",
    "DEFAULT_FORMAT: Ignore the colour format defined in the source surface (if any) and generate a default format based on the BitsPerPixel value.",
    "CLIP: Enable clipping of the source coordinates.",
    "OFFSET: Adjust X and Y coordinates by the offset values defined in the Surface' XOffset and YOffset fields.")

  flags("CSTF", { comment="Flags for CopyStretch()." },
    "BILINEAR|GOOD_QUALITY: Enables bilinear resampling of the source image.  This increases the quality of the resize at a cost of speed.",
    "FILTER_SOURCE: If the source bitmap is temporary and will not be required after the stretch operation, you have the option of setting this flag.  By doing so, the stretch routine will pass the source image through a simple filter so that it can improve the resulting image.  This option is available at a speed cost and is best used in conjunction with bilinear resizing.",
    "BRESENHAM: Smooth bresenham.",
    "NEIGHBOUR: Nearest neighbour scaling",
    "CUBIC|BICUBIC: Cubic scaling.",
    "CLAMP: Pixels that are past the edge of the source material will have a default alpha value of 0 unless the CLAMP flag is used, in which case the value is approximated with a bias of 255 if not otherwise calculable."
  )

  enum("BMP", { start=2, comment="Bitmap types" },
     "PLANAR: Planar pixel mode separates pixel bits across multiple planes.  Commonly used for single bit bitmap masks.",
     "CHUNKY: Chunky pixel mode (default).")

  flags("BMF", { comment="Bitmap flags" },
    "BLANK_PALETTE: Forces a blank/black palette on initialisation.",
    "COMPRESSED: The bitmap data is compressed.",
    "NO_DATA: Do not allocate memory in the Data field on initialisation.",
    "TRANSPARENT: Indicates that the bitmap utilises a transparent colour.  This is automatically set if the ColourRGB field is set and support exists in functions such as CopyArea().",
    "MASK: Declare the Bitmap as a 1 or 8 bit mask.  Must be set in conjunction with the BitsPerPixel field on initialisation.",
    "INVERSE_ALPHA: Indicates reverse alpha blending, higher values are transparent.",
    "QUERIED: Automatically set after a Query on the bitmap.",
    "CLEAR: Clear graphics on initialisation and when resizing.",
    "USER: This user flag can be used to tag bitmaps with special meaning.  Not used internally.",
    "ACCELERATED_2D: 2D video acceleration is available.",
    "ACCELERATED_3D: 3D video acceleration is available.",
    "ALPHA_CHANNEL: For 32-bit images, indicates that an alpha channel is present.",
    "NEVER_SHRINK: Ignore resize requests that would shrink the size of the bitmap.",
    "X11_DGA: Private DGA indicator.",
    "FIXED_DEPTH: Prevent changing of bitmap depth after initialisation (e.g. via acResize()).",
    "NO_BLEND: Drawing routines that support this flag will not blend pixels."
  )

  enum("FLIP", { start=1, comment="Flags for the bitmap Flip method." },
    "HORIZONTAL: Flip the bitmap from top to bottom.",
    "VERTICAL: Flip the bitmap from left to right.")

  flags("SCR", { comment="Display flags." },
    "VISIBLE: Set if the screen is on display.",
    "AUTO_SAVE: Saves settings to the global display state when the object is freed.",
    "BUFFER: Set if you would like a complementing buffer in video RAM.",
    "NO_ACCELERATION: 2D graphics card acceleration is not available.",
    "BIT_6: Display is limited to 6-bit output per colour gun.",
    "BORDERLESS: If display is hosted, create it as a popup / borderless window.",
    "ALPHA_BLEND|COMPOSITE: Enables alpha channel blending (if display is hosted and 32-bit).",
    { MAXIMISE        = "0x80000000: Special win32 flag." },
    { CUSTOM_WINDOW   = "0x40000000: The display has been created with a custom window reference." },
    { FLIPPABLE       = "0x20000000: If SCR_BUFFER is used, this flag may be set by the display manager if it is possible to flip the buffer." },
    { GTF_ENABLED     = "0x10000000: GTF frequency timings are supported." },
    { DPMS_ENABLED    = "0x08000000: Power saving through DPMS is supported." },
    { POWERSAVE       = "0x04000000: Power saving is active (read-only)." },
    { HOSTED          = "0x02000000: The display is a desktop hosted window." },
    { MAXSIZE         = "0x00100000: For GetDisplayInfo() only, indicates that the width and height values indicate the display's maximum size." },
    { REFRESH         = "0x00200000: For GetDisplayInfo() only, used to indicate that a display change has recently occurred and cache refresh is required." },
    { READ_ONLY       = "MAXIMISE|CUSTOM_WINDOW|FLIPPABLE|GTF_ENABLED|DPMS_ENABLED|POWERSAVE|HOSTED|MAXSIZE|REFRESH|BIT_6|VISIBLE|NO_ACCELERATION" }
  )

  flags("SMF", { comment="Flags for the Display class SetMonitor() method." },
     "AUTO_DETECT: Monitor settings to be auto-detected on startup.",
     "BIT_6: The device is limited to 6-bit colour production in real terms.")

  flags("GMF", { comment="Flags for gamma operations." },
     "SAVE: Save the provided settings permanently.")

  enum("DT", { start=1, comment="Flags for GetDisplayType()." },
    "NATIVE: The display is native (supported by internal drivers).",
    "X11: The display is driven by the X Window System (X11, X.Org, XFree86)",
    "WINDOWS: The display is driven by Microsoft Windows drivers.",
    "GLES: The display is driven by OpenGLES.")

  enum("DPMS", { start=0, comment="Possible modes for the Display class' DPMS field." },
    "DEFAULT: Use the default DPMS mode as defined by the display driver.",
    "OFF: Stop sending power to the display in order to turn it off (it may not be possible to restart the display without the user's intervention).",
    "SUSPEND: Puts the display into suspend mode (blanks the display output while maintaining normal power levels).",
    "STANDBY: Puts the display into standby (reduced power) mode.")

  -- PixelFormat duplicates the Core module's ColourFormat structure.

  struct("PixelFormat", { type="pixelformat", comment="Carries instructions to pack or unpack RGBA colours." }, [[
    uchar  RedShift    # Right shift value
    uchar  GreenShift
    uchar  BlueShift
    uchar  AlphaShift
    uchar  RedMask     # The unshifted mask value (ranges from 0x00 to 0xff)
    uchar  GreenMask
    uchar  BlueMask
    uchar  AlphaMask
    uchar  RedPos      # Left shift/positional value
    uchar  GreenPos
    uchar  BluePos
    uchar  AlphaPos
  ]])

  struct("DisplayInfo", { type="displayinfo", version=3 }, [[
    oid   Display         # Object ID related to the display
    int(SCR) Flags        # Display flags
    short Width           # Pixel width of the display
    short Height          # Pixel height of the display
    short BitsPerPixel    # Bits per pixel
    short BytesPerPixel   # Bytes per pixel
    large(ACF) AccelFlags # Flags describing supported hardware features.
    int   AmtColours      # Total number of supported colours.
    struct(PixelFormat) PixelFormat # The colour format to use for each pixel.
    float MinRefresh     # Minimum refresh rate
    float MaxRefresh     # Maximum refresh rate
    float RefreshRate    # Recommended refresh rate
    int   Index          # Display mode ID (internal)
    int   HDensity       # Horizontal pixel density per inch.
    int   VDensity       # Vertical pixel density per inch.
  ]])

  struct("CursorInfo", { }, [[
    int Width           # Maximum cursor width for custom cursors
    int Height          # Maximum cursor height for custom cursors
    int Flags           # Currently unused
    short BitsPerPixel  # Preferred bits-per-pixel setting for custom cursors
  ]])

  struct("BitmapSurface", { type="bitmapsurface", version=2 }, [[
    ptr   Data           # Pointer to the bitmap graphics data.
    short Width          # Pixel width of the bitmap.
    short Height         # Pixel height of the bitmap.
    int   LineWidth      # The distance between bitmap lines, measured in bytes.
    uchar BitsPerPixel   # The number of bits per pixel (8, 15, 16, 24, 32).
    uchar BytesPerPixel  # The number of bytes per pixel (1, 2, 3, 4).
    uchar Opacity        # Opacity level of the source if CSRF_TRANSLUCENT is used.
    uchar Version        # Version of this structure.
    int   Colour         # Colour index to use if CSRF_TRANSPARENT is used.
    struct(ClipRectangle) Clip  # A clipping rectangle will restrict drawing operations to this region if CSRF_CLIP is used.
    short XOffset        # Offset all X coordinate references by the given value.
    short YOffset        # Offset all Y coordinate references by the given value.
    struct(ColourFormat) Format  # The colour format of this bitmap's pixels, or alternatively use CSRF_DEFAULT_FORMAT.
    ptr  Private        # A private pointer reserved for internal usage
  ]])

  c_insert([[
// Standard pack pixel for all formats

#define PackPixel(a,b,c,d) ((((b)>>(a)->ColourFormat->RedShift) & (a)->ColourFormat->RedMask) << (a)->ColourFormat->RedPos) | \
                           ((((c)>>(a)->ColourFormat->GreenShift) & (a)->ColourFormat->GreenMask) << (a)->ColourFormat->GreenPos) | \
                           ((((d)>>(a)->ColourFormat->BlueShift) & (a)->ColourFormat->BlueMask) << (a)->ColourFormat->BluePos) | \
                           (((255>>(a)->ColourFormat->AlphaShift) & (a)->ColourFormat->AlphaMask) << (a)->ColourFormat->AlphaPos)

#define PackPixelA(a,b,c,d,e) \
   ((((b)>>(a)->ColourFormat->RedShift) & (a)->ColourFormat->RedMask) << (a)->ColourFormat->RedPos) | \
   ((((c)>>(a)->ColourFormat->GreenShift) & (a)->ColourFormat->GreenMask) << (a)->ColourFormat->GreenPos) | \
   ((((d)>>(a)->ColourFormat->BlueShift) & (a)->ColourFormat->BlueMask) << (a)->ColourFormat->BluePos) | \
   ((((e)>>(a)->ColourFormat->AlphaShift) & (a)->ColourFormat->AlphaMask) << (a)->ColourFormat->AlphaPos)

#define PackAlpha(a,b) ((((b)>>(a)->ColourFormat->AlphaShift) & (a)->ColourFormat->AlphaMask) << (a)->ColourFormat->AlphaPos)

#define PackPixelRGB(a,b) \
   ((((b)->Red>>(a)->ColourFormat->RedShift) & (a)->ColourFormat->RedMask) << (a)->ColourFormat->RedPos) | \
   ((((b)->Green>>(a)->ColourFormat->GreenShift) & (a)->ColourFormat->GreenMask) << (a)->ColourFormat->GreenPos) | \
   ((((b)->Blue>>(a)->ColourFormat->BlueShift) & (a)->ColourFormat->BlueMask) << (a)->ColourFormat->BluePos) | \
   (((255>>(a)->ColourFormat->AlphaShift) & (a)->ColourFormat->AlphaMask) << (a)->ColourFormat->AlphaPos)

#define PackPixelRGBA(a,b) \
   ((((b)->Red>>(a)->ColourFormat->RedShift) & (a)->ColourFormat->RedMask) << (a)->ColourFormat->RedPos) | \
   ((((b)->Green>>(a)->ColourFormat->GreenShift) & (a)->ColourFormat->GreenMask) << (a)->ColourFormat->GreenPos) | \
   ((((b)->Blue>>(a)->ColourFormat->BlueShift) & (a)->ColourFormat->BlueMask) << (a)->ColourFormat->BluePos) | \
   ((((b)->Alpha>>(a)->ColourFormat->AlphaShift) & (a)->ColourFormat->AlphaMask) << (a)->ColourFormat->AlphaPos)

// Pack pixel 'whole-byte' version, for faster 24/32 bit formats

#define PackPixelWB(a,b,c,d) ((b) << (a)->ColourFormat->RedPos) | ((c) << (a)->ColourFormat->GreenPos) | ((d) << (a)->ColourFormat->BluePos)
#define PackPixelWBA(a,b,c,d,e) ((b) << (a)->ColourFormat->RedPos) | ((c) << (a)->ColourFormat->GreenPos) | ((d) << (a)->ColourFormat->BluePos) | ((e) << (a)->ColourFormat->AlphaPos)

// Colour unpacking routines

#define UnpackRed(a,b)   ((((b) >> (a)->ColourFormat->RedPos) & (a)->ColourFormat->RedMask) << (a)->ColourFormat->RedShift)
#define UnpackGreen(a,b) ((((b) >> (a)->ColourFormat->GreenPos) & (a)->ColourFormat->GreenMask) << (a)->ColourFormat->GreenShift)
#define UnpackBlue(a,b)  ((((b) >> (a)->ColourFormat->BluePos) & (a)->ColourFormat->BlueMask) << (a)->ColourFormat->BlueShift)
#define UnpackAlpha(a,b) ((((b) >> (a)->ColourFormat->AlphaPos) & (a)->ColourFormat->AlphaMask))

// Direct ColourFormat versions

#define CFPackPixel(a,b,c,d)      ((((b)>>(a)->RedShift) & (a)->RedMask) << (a)->RedPos) | ((((c)>>(a)->GreenShift) & (a)->GreenMask) << (a)->GreenPos) | ((((d)>>(a)->BlueShift) & (a)->BlueMask) << (a)->BluePos)
#define CFPackPixelA(a,b,c,d,e)   ((((b)>>(a)->RedShift) & (a)->RedMask) << (a)->RedPos) | ((((c)>>(a)->GreenShift) & (a)->GreenMask) << (a)->GreenPos) | ((((d)>>(a)->BlueShift) & (a)->BlueMask) << (a)->BluePos) | ((((e)>>(a)->AlphaShift) & (a)->AlphaMask) << (a)->AlphaPos)
#define CFPackAlpha(a,b)          ((((b)>>(a)->AlphaShift) & (a)->AlphaMask) << (a)->AlphaPos)
#define CFPackPixelWB(a,b,c,d)    ((b) << (a)->RedPos) | ((c) << (a)->GreenPos) | ((d) << (a)->BluePos)
#define CFPackPixelWBA(a,b,c,d,e) ((b) << (a)->RedPos) | ((c) << (a)->GreenPos) | ((d) << (a)->BluePos) | ((e) << (a)->AlphaPos)
#define CFUnpackRed(a,b)          ((((b) >> (a)->RedPos) & (a)->RedMask) << (a)->RedShift)
#define CFUnpackGreen(a,b)        ((((b) >> (a)->GreenPos) & (a)->GreenMask) << (a)->GreenShift)
#define CFUnpackBlue(a,b)         ((((b) >> (a)->BluePos) & (a)->BlueMask) << (a)->BlueShift)
#define CFUnpackAlpha(a,b)        ((((b) >> (a)->AlphaPos) & (a)->AlphaMask))
  ]])

  methods("Bitmap", "Bmp", {
    { id=1, name="CopyArea" },
    { id=2, name="Compress" },
    { id=3, name="Decompress" },
    { id=4, name="Flip" },
    { id=5, name="Flood" },
    { id=6, name="DrawRectangle" },
    { id=7, name="SetClipRegion" },
    { id=8, name="GetColour", inline=false },
    { id=9, name="DrawLine" },
    { id=10, name="CopyStretch" }
  })

  class("Bitmap", { version=2.0, src="class_bitmap.cpp", output="class_bitmap_def.c" }, [[
    struct(*RGBPalette) Palette          # Pointer to the Bitmap's palette
    struct(*ColourFormat) ColourFormat   # Pointer to colour information
    fptr(void obj(Bitmap) int int uint) DrawUCPixel
    fptr(void obj(Bitmap) int int struct(*RGB8)) DrawUCRPixel
    fptr(uint obj(Bitmap) int int) ReadUCPixel
    fptr(void obj(Bitmap) int int struct(*RGB8)) ReadUCRPixel
    fptr(void obj(Bitmap) ptr(uchar) struct(*RGB8)) ReadUCRIndex
    fptr(void obj(Bitmap) ptr(uchar) struct(*RGB8)) DrawUCRIndex
    ptr(uchar) Data             # Pointer to bitmap data area
    int   Width                 # Width
    int   ByteWidth             # ByteWidth (not including padding - see LineWidth)
    int   Height                # Height
    int(BMP) Type               # Bitmap type
    int   LineWidth             # Line differential in bytes
    int   PlaneMod              # Plane differential in bytes
    struct(ClipRectangle) Clip  # Clipping rectangle
    int   Size                  # Total size of the bitmap in bytes
    int   DataFlags             # Memory flags to use in allocation
    int   AmtColours            # Maximum amount of colours available
    int(BMF) Flags              # Optional flags
    int   TransIndex            # Colour index or packed colour value that acts as the background/transparency
    int   BytesPerPixel         # 1, 2, 3, 4
    int   BitsPerPixel          # 1, 8, 15, 16, 24, 32
    int   Position              # Current byte position for reading and writing
    int   XOffset               # Horizontal offset to apply to graphics coordinates
    int   YOffset               # Vertical offset to apply to graphics coordinates
    int   Opacity               # Opacity setting to use in drawing operations
    mem   DataMID               # Memory ID of the bitmap's data, if applicable.
    struct(RGB8) TransRGB       # The transparent colour of the bitmap, in RGB format.
    struct(RGB8) BkgdRGB        # Background colour (for clearing, resizing)
    int BkgdIndex               # Colour index or packed colour of the background.
  ]],
  [[
   ULONG  *Gradients;
   APTR   ResolutionChangeHandle;
   struct RGBPalette prvPaletteArray;
   struct ColourFormat prvColourFormat;
   MEMORYID prvCompressMID;
   LONG   prvAFlags;                  // Private allocation flags
   #ifdef __xwindows__
      struct {
         XImage   ximage;
         Drawable drawable;
         XImage   *readable;
         XShmSegmentInfo ShmInfo;
         BYTE XShmImage;
      } x11;
   #elif _WIN32
      struct {
         APTR Drawable;  // HDC for the Bitmap
      } win;
   #elif _GLES_
      ULONG prvWriteBackBuffer:1;  // For OpenGL surface locking.
      LONG prvGLPixel;
      LONG prvGLFormat;
   #endif
  ]])

  c_insert([[
INLINE ULONG bmpGetColour(APTR Bitmap, UBYTE Red, UBYTE Green, UBYTE Blue, UBYTE Alpha) {
   if (((objBitmap *)Bitmap)->BitsPerPixel > 8) {
      return PackPixelA((objBitmap *)Bitmap, Red, Green, Blue, Alpha);
   }
   else {
      struct bmpGetColour args = { Red, Green, Blue, Alpha };
      if (!Action(MT_BmpGetColour, Bitmap, &args)) return args.Colour;
      return 0;
   }
}

INLINE ULONG bmpGetColourRGB(APTR Bitmap, struct RGB8 *RGB) {
   if (((objBitmap *)Bitmap)->BitsPerPixel > 8) {
      return PackPixelA((objBitmap *)Bitmap, RGB->Red, RGB->Green, RGB->Blue, RGB->Alpha);
   }
   else {
      struct bmpGetColour args = { RGB->Red, RGB->Green, RGB->Blue, RGB->Alpha };
      if (!Action(MT_BmpGetColour, Bitmap, &args)) return args.Colour;
      return 0;
   }
}
  ]])

  methods("Display", "Gfx", {
    { id=1, name="WaitVBL" },
    { id=2, name="UpdatePalette" },
    { id=3, name="SetDisplay" },
    { id=4, name="SizeHints" },
    { id=5, name="SetGamma" },
    { id=6, name="SetGammaLinear" },
    { id=7, name="SetMonitor" },
    { id=8, name="Minimise" },
    { id=9, name="UpdateDisplay" },
    { id=10, name="CheckXWindow" }
  })

  class("Display", { version=1.0, src="class_display.cpp", output="class_display_def.c" }, [[
    double RefreshRate      # The active refresh rate
    obj(Bitmap) Bitmap      # Reference to the display's bitmap information.
    int(SCR) Flags          # Optional flags
    int Width               # The width of the visible display
    int Height              # The height of the visible display
    int X                   # Hardware co-ordinate for vertical offset, or position of host window
    int Y                   # Hardware co-ordinate for horizontal offset, or position of host window
    int BmpX                # Current offset of the horizontal axis
    int BmpY                # Current offset of the vertical axis
    oid Buffer              # Double buffer bitmap
    int TotalMemory         # The total amount of accessible RAM installed on the video card.
    int MinHScan            # The minimum horizontal scan rate of the display output device.
    int MaxHScan            # The maximum horizontal scan rate of the display output device.
    int MinVScan            # The minimum vertical scan rate of the display output device.
    int MaxVScan            # The maximum vertical scan rate of the display output device.
    int(DT) DisplayType     # Indicates the display type.
    int(DPMS) DPMS          # Optional display power modes.
    oid PopOver             # For hosted displays, PopOver can refer to another display that should always remain behind us
    int LeftMargin          # Left window margin, if hosted
    int RightMargin         # Right window margin, if hosted
    int TopMargin           # Top window margin, if hosted
    int BottomMargin        # Bottom window margin, if hosted
  ]],
  [[
   DOUBLE Gamma[3];          // Red, green, blue gamma radioactivity indicator
   struct resolution *Resolutions;
   FUNCTION  ResizeFeedback;
   MEMORYID  ResolutionsMID;
   WORD      TotalResolutions;
   OBJECTID  BitmapID;
   LONG      BmpXOffset;     // X offset for scrolling
   LONG      BmpYOffset;     // Y offset for scrolling
   #ifdef __xwindows__
   union {
      APTR   WindowHandle;
      Window XWindowHandle;
   };
   #elif __ANDROID__
      ANativeWindow *WindowHandle;
   #else
      APTR   WindowHandle;
   #endif
   APTR      UserLoginHandle;
   WORD      Opacity;
   LONG      VDensity;          // Cached DPI value, if calculable.
   LONG      HDensity;
   char      DriverVendor[60];
   char      DriverCopyright[80];
   char      Manufacturer[60];
   char      Chipset[40];
   char      DAC[32];
   char      Clock[32];
   char      DriverVersion[16];
   char      CertificationDate[20];
   char      Display[32];
   char      DisplayManufacturer[60];
   #ifdef _WIN32
      APTR OldProcedure;
   #endif
  ]])

  class("Pointer", { version=1.0, src="class_pointer.cpp", output="class_pointer_def.c" }, [[
    double Speed           # Speed multiplier (%)
    double Acceleration    # Acceleration level - keep between 0.0 and 3.0
    double DoubleClick     # Double click speed
    double WheelSpeed      # Mouse-wheel speed
    int    X               # Current x coordinate
    int    Y               # Current y coordinate
    int    MaxSpeed        # Maximum speed
    int    OverX           # The X coord relative to the closest object
    int    OverY           # The Y coord relative to the closest object
    int    OverZ           # The Z distance relative to the closest object
    oid    Input           # Indicates where pointer input comes from (usually SystemMouse)
    oid    Surface         # Top-most surface that contains the pointer
    oid    Anchor          # Surface object that the pointer is anchored to
    int(PTR) CursorID      # Current cursor image
    oid    CursorOwner     # Who owns the currently active cursor status
    int(PF) Flags          # Optional flags
    oid    Restrict        # Surface object that the pointer is restricted to
    int    HostX           # Indicates the current position of the host cursor on Windows or X11
    int    HostY           # Indicates the current position of the host cursor on Windows or X11
    oid    Bitmap          # Bitmap to use for custom cursor images
    oid    DragSource      # If drag & drop is active, refers to the object managing the draggable item
    int    DragItem        # If drag & drop is active, refers to the custom ID of the item being dragged
    oid    OverObject      # Object positioned under the pointer
    int    ClickSlop       # Leniency value for determining whether the user intended to make a click or drag.
  ]],
  [[
   struct {
      LARGE LastClickTime;      // Timestamp
      OBJECTID LastClicked;     // Most recently clicked object
      UBYTE DblClick:1;         // TRUE if last click was a double-click
   } Buttons[10];
   LARGE    ClickTime;
   LARGE    AnchorTime;
   APTR     UserLoginHandle;
   OBJECTID LastSurfaceID;      // Last object that the pointer was positioned over
   OBJECTID CursorReleaseID;
   OBJECTID DragSurface;        // Draggable surface anchored to the pointer position
   OBJECTID DragParent;         // Parent of the draggable surface
   MEMORYID MessageQueue;       // Message port of the task that holds the cursor
   MEMORYID AnchorMsgQueue;     // Message port of the task that holds the cursor anchor
   LONG     LastClickX, LastClickY;
   LONG     LastReleaseX, LastReleaseY;
   LONG     CursorRelease;
   LONG     BufferCursor;
   LONG     BufferFlags;
   MEMORYID BufferQueue;
   OBJECTID BufferOwner;
   OBJECTID BufferObject;
   char     DragData[8];          // Data preferences for current drag & drop item
   char     Device[32];
   char     ButtonOrder[12];      // The order of the first 11 buttons can be changed here
   WORD     ButtonOrderFlags[12]; // Button order represented as JD flags
   BYTE     PostComposite;        // Enable post-composite drawing (default)
   UBYTE    prvOverCursorID;
   struct {
      WORD HotX;
      WORD HotY;
   } Cursors[PTR_END];
  ]])

  functionNames("gfx",
    "GetDisplayInfo",
    "GetDisplayType",
    "SetCursor",
    "RestoreCursor",
    "GetCursorPos",
    "SetCursorPos",
    "GetRelativeCursorPos",
    "GetCursorInfo",
    "SetCustomCursor",
    "AccessPointer",
    "ScanDisplayModes",
    "LockCursor",
    "UnlockCursor",
    "SetHostOption",
    "StartCursorDrag",
    "CopySurface",
    "Sync",
    "Resample",
    "GetColourFormat",
    "CopyArea",
    "CopyStretch",
    "ReadRGBPixel",
    "ReadPixel",
    "DrawRGBPixel",
    "DrawPixel",
    "DrawLine",
    "DrawRectangle",
    "FlipBitmap",
    "SetClipRegion",
    "Compress",
    "Decompress",
    "Flood",
    "DrawEllipse",
    "SubscribeInput",
    "UnsubscribeInput",
    "GetInputTypeName",
    "ScaleToDPI")

  c_insert([[
#define gfxReleasePointer(a)    (ReleaseObject(a))
  ]])
end)
