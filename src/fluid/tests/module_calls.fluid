--[[
Flute tests for module calls.
Testing all aspects of module function calls for a series of C prototypes.  Note that this is only possible if the
Fluid module is compiled in DEBUG mode.
--]]

   // 0xdeadbeef = 3735928559

   local fluid = mod.load("fluid")

-----------------------------------------------------------------------------------------------------------------------

function testCall1()
   print("Test #1: void flTestCall1(void)")
   fluid.TestCall1();
end

-----------------------------------------------------------------------------------------------------------------------

function testCall2()
   print("Test #2: LONG flTestCall2(void)")
   local result = fluid.TestCall2()
   print("Received: " .. result);
end

-----------------------------------------------------------------------------------------------------------------------

function testCall3()
   print("Test #3: STRING flTestCall3(void)")
   result = fluid.TestCall3()
   print("Received: " .. result)
end

-----------------------------------------------------------------------------------------------------------------------

function testCall4()
   print("Test #4: void flTestCall4(LONG 0xdedbeef, 87654321)")
   fluid.TestCall4(0xdedbeef, 87654321)
end

-----------------------------------------------------------------------------------------------------------------------

function testCall5()
   print("Test #5: LONG flTestCall5(LONG 1, 2, 3, 4, 5, 6)")
   result = fluid.TestCall5(1, 2, 3, 4, 5, 6)
   print("Received: " .. result)
end

-----------------------------------------------------------------------------------------------------------------------

function testCall6()
   print("Test #6: LARGE flTestCall6(LONG 255, LARGE 1, LARGE 2, LONG 3, LARGE 4, DOUBLE 5.678)")
   result = fluid.TestCall6(255, 1, 2, 3, 4, 5.678)
   print("Received: " .. result)
end

-----------------------------------------------------------------------------------------------------------------------

function testCall7()
   print("Test #7: void flTestCall7(STRING goodbye, STRING cruel, STRING world)")
   fluid.TestCall7("goodbye", "cruel", "world")
end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = { 'testCall1', 'testCall2', 'testCall3', 'testCall4', 'testCall5', 'testCall6', 'testCall7' }
   }
