-- Flute tests for array.concat functionality

function testIntegerArrayConcat()
   local int_array = array.new(5, "integer")
   int_array[1] = 10
   int_array[2] = 20
   int_array[3] = 30
   int_array[4] = 40
   int_array[5] = 50

   local result = int_array.concat("%d", ", ")
   if result != "10, 20, 30, 40, 50" then
      error("Integer array concat failed, expected '10, 20, 30, 40, 50', got '" .. result .. "'")
   end

   -- Test without join string
   local result2 = int_array.concat("%d", "")
   if result2 != "1020304050" then
      error("Integer array concat without join failed, expected '1020304050', got '" .. result2 .. "'")
   end
end

function testFloatArrayConcat()
   local float_array = array.new(3, "float")
   float_array[1] = 1.5
   float_array[2] = 2.7
   float_array[3] = 3.14

   local result = float_array.concat("%.2f", " | ")
   if result != "1.50 | 2.70 | 3.14" then
      error("Float array concat failed, expected '1.50 | 2.70 | 3.14', got '" .. result .. "'")
   end
end

function testByteArrayConcat()
   local byte_array = array.new(4, "byte")
   byte_array[1] = 65  -- 'A'
   byte_array[2] = 66  -- 'B'
   byte_array[3] = 67  -- 'C'
   byte_array[4] = 68  -- 'D'

   local result = byte_array.concat("%c", "")
   if result != "ABCD" then
      error("Byte array concat failed, expected 'ABCD', got '" .. result .. "'")
   end

   -- Test with separator
   local result2 = byte_array.concat("%d", "-")
   if result2 != "65-66-67-68" then
      error("Byte array numeric concat failed, expected '65-66-67-68', got '" .. result2 .. "'")
   end
end

function testDoubleArrayConcat()
   local double_array = array.new(2, "double")
   double_array[1] = 3.141592653589793
   double_array[2] = 2.718281828459045

   local result = double_array.concat("%.3f", " and ")
   if result != "3.142 and 2.718" then
      error("Double array concat failed, expected '3.142 and 2.718', got '" .. result .. "'")
   end
end

function testWordArrayConcat()
   local word_array = array.new(3, "word")
   word_array[1] = 1000
   word_array[2] = 2000
   word_array[3] = 3000

   local result = word_array.concat("%04d", ", ")
   if result != "1000, 2000, 3000" then
      error("Word array concat failed, expected '1000, 2000, 3000', got '" .. result .. "'")
   end
end

function testSingleElementConcat()
   local single_array = array.new(1, "integer")
   single_array[1] = 42

   local result = single_array.concat("%d", ", ")
   if result != "42" then
      error("Single element array concat failed, expected '42', got '" .. result .. "'")
   end
end

function testFormatValidation()
   local int_array = array.new(2, "integer")
   int_array[1] = 10
   int_array[2] = 20

   -- Test valid formats work
   local result = int_array.concat("%d", ", ")
   if result != "10, 20" then
      error("Valid format test failed, expected '10, 20', got '" .. result .. "'")
   end

   -- Test multiple format specifiers are rejected
   local success = pcall(function()
      return int_array.concat("%d %s", ", ")
   end)
   if success then
      error("Multiple format specifiers should be rejected")
   end

   -- Test no format specifier is rejected
   local success2 = pcall(function()
      return int_array.concat("no format", ", ")
   end)
   if success2 then
      error("No format specifier should be rejected")
   end

   -- Test incomplete format specifier is rejected
   local success3 = pcall(function()
      return int_array.concat("incomplete %", ", ")
   end)
   if success3 then
      error("Incomplete format specifier should be rejected")
   end

   -- Test escaped %% works
   local result_escaped = int_array.concat("%%d:%d", ", ")
   if result_escaped != "%d:10, %d:20" then
      error("Escaped %% test failed, expected '%d:10, %d:20', got '" .. result_escaped .. "'")
   end
end

function testStringArrayUnsupported()
   -- String arrays should work for concat
   local string_array = array.new(3, "string")
   -- Note: We can't actually set string array values in current implementation
   -- but we can test that the concat method exists and handles the case

   -- This test would need actual string array assignment to work properly
   -- For now, we'll skip this test until string array assignment is implemented
end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
         'testIntegerArrayConcat',
         'testFloatArrayConcat',
         'testByteArrayConcat',
         'testDoubleArrayConcat',
         'testWordArrayConcat',
         'testSingleElementConcat',
         'testFormatValidation',
         'testStringArrayUnsupported'
      }
   }


