-- $FLUID
-- Flute tests for the Lua IO library

local glTestFolder
local glTestFiles = { }

----------------------------------------------------------------------------------------------------------------------
-- Test helper functions

function createTestFile(name, content)
   local path = glTestFolder .. name
   local file = obj.new('file', { path=path, flags='NEW|WRITE' })
   assert(file, 'Failed to create test file: ' .. name)
   if content then
      file.acWrite(content)
   end
   table.insert(glTestFiles, path)
   return path
end

function fileExists(path)
   local err, type = mSys.AnalysePath(path)
   return err == ERR_Okay and type == LOC_FILE
end

function readFileContent(path)
   local file = obj.new('file', { path=path, flags='READ' })
   if not file then return nil end

   local buffer = string.alloc(4096)
   local err, bytes = file.acRead(buffer)
   if err == ERR_Okay and bytes > 0 then
      return buffer:sub(1, bytes)
   end
   return nil
end

----------------------------------------------------------------------------------------------------------------------
-- Basic file operations tests

function testIoOpen()
   print('Testing io.open()...')

   -- Test opening an existing file for reading
   local test_path = createTestFile('test_read.txt', 'Hello, World!')
   local file = io.open(test_path, 'r')
   assert(file, 'Failed to open file for reading')
   assert(io.type(file) == 'file', 'io.type should return "file"')
   file:close()

   -- Test opening a new file for writing
   local write_path = glTestFolder .. 'test_write.txt'
   file = io.open(write_path, 'w')
   assert(file, 'Failed to open file for writing')
   file:write('Test content')
   file:close()
   table.insert(glTestFiles, write_path)
   assert(fileExists(write_path), 'File should exist after writing')

   -- Test append mode
   file = io.open(write_path, 'a')
   assert(file, 'Failed to open file for appending')
   file:write(' - appended')
   file:close()

   local content = readFileContent(write_path)
   assert(content == 'Test content - appended', 'Append mode should add to end of file')

   -- Test opening non-existent file for reading
   local nonexistent_file, err = io.open(glTestFolder .. 'nonexistent.txt', 'r')
   assert(nonexistent_file == nil, 'Should return nil for non-existent file')
   assert(err != nil, 'Should return error message for non-existent file')
end

function testIoClose()
   print('Testing io.close()...')

   local test_path = createTestFile('test_close.txt', 'test')
   local file = io.open(test_path, 'r')
   assert(file, 'Failed to open file')

   local result = io.close(file)
   assert(result == true, 'io.close should return true on success')
   assert(io.type(file) == 'closed file', 'File should be marked as closed')
end

function testIoType()
   print('Testing io.type()...')

   local test_path = createTestFile('test_type.txt', 'test')
   local file = io.open(test_path, 'r')

   assert(io.type(file) == 'file', 'Should return "file" for open file')
   assert(io.type('not a file') == nil, 'Should return nil for non-file object')

   file:close()
   assert(io.type(file) == 'closed file', 'Should return "closed file" for closed file')
end

function testIoTmpfile()
   print('Testing io.tmpfile()...')

   local tmpfile = io.tmpfile()
   assert(tmpfile, 'Failed to create temporary file')
   assert(io.type(tmpfile) == 'file', 'Temporary file should be a valid file object')

   -- Test writing and reading from tmpfile
   tmpfile:write('temporary data')
   tmpfile:seek('set', 0)
   -- Note: file:read() may not be fully implemented yet, so we'll test what we can
   tmpfile:close()
end

----------------------------------------------------------------------------------------------------------------------
-- File handle method tests

function testFileWrite()
   print('Testing file:write()...')

   local test_path = glTestFolder .. 'test_file_write.txt'
   local file = io.open(test_path, 'w')
   assert(file, 'Failed to open file for writing')
   table.insert(glTestFiles, test_path)

   -- Test single string write
   local result = file:write('Hello')
   assert(result == file, 'file:write should return the file handle')

   -- Test multiple string writes
   result = file:write(' ', 'World', '!')
   assert(result == file, 'file:write should handle multiple arguments')

   file:close()

   local content = readFileContent(test_path)
   assert(content == 'Hello World!', 'Written content should match expected')
end

function testFileRead()
   print('Testing file:read()...')

   -- Create test file with various content types
   local test_content = '123\n456.789\nHello World\nLine 4\n'
   local test_path = createTestFile('test_read.txt', test_content)
   local file = io.open(test_path, 'r')
   assert(file, 'Failed to open file for reading')

   -- Test reading a line (default behavior)
   local line = file:read()
   assert(line == '123', 'Should read first line: "123", got "' .. nz(line, 'NIL') .. '"')

   -- Test reading a number
   local num = file:read('*n')
   assert(num == 456.789, 'Should read number 456.789, got ' .. nz(num, 'NIL'))

   -- Test reading specific number of bytes
   file:seek('set', 0) -- Reset to start
   local bytes = file:read(3)
   assert(bytes == '123', 'Should read 3 bytes: "123", got "' .. nz(bytes, 'NIL') .. '"')

   -- Test reading entire file
   file:seek('set', 0) -- Reset to start
   local all = file:read('*a')
   assert(all == test_content, 'Should read entire file content')

   -- Test reading line with *l format
   file:seek('set', 0) -- Reset to start
   local line_l = file:read('*l')
   assert(line_l == '123', 'Should read line with *l format')

   -- Test multiple read operations
   file:seek('set', 0) -- Reset to start
   local first, second = file:read('*l', '*l')
   assert(first == '123', 'First line should be "123"')
   assert(second == '456.789', 'Second line should be "456.789"')

   -- Test reading at end of file
   file:seek('end', 0)
   local eof = file:read()
   assert(eof == nil, 'Should return nil when reading at end of file')

   file:close()
end

function testFileSeek()
   print('Testing file:seek()...')

   local test_path = createTestFile('test_seek.txt', '0123456789')
   local file = io.open(test_path, 'r')
   assert(file, 'Failed to open file for seeking')

   -- Test seeking to start
   local pos = file:seek('set', 0)
   assert(pos == 0, 'Should return position 0 when seeking to start')

   -- Test seeking to specific position
   pos = file:seek('set', 5)
   assert(pos == 5, 'Should return position 5 when seeking to offset 5')

   -- Test seeking to end
   pos = file:seek('end', 0)
   assert(pos == 10, 'Should return file size when seeking to end')

   -- Test relative seeking
   pos = file:seek('cur', -2)
   assert(pos == 8, 'Should return position 8 when seeking back 2 from end')

   file:close()
end

function testFileFlush()
   print('Testing file:flush()...')

   local test_path = glTestFolder .. 'test_flush.txt'
   local file = io.open(test_path, 'w')
   assert(file, 'Failed to open file for flushing')
   table.insert(glTestFiles, test_path)

   file:write('test data')
   local result = file:flush()
   assert(result == true, 'file:flush should return true')

   file:close()
end

----------------------------------------------------------------------------------------------------------------------
-- Lines iteration tests

function testIoLines()
   print('Testing io.lines()...')

   -- Create test file with multiple lines
   local lines_content = 'Line 1\nLine 2\nLine 3\n'
   local test_path = createTestFile('test_lines.txt', lines_content)

   -- Test io.lines with filename
   local line_count = 0
   local collected_lines = {}
   for line in io.lines(test_path) do
      line_count = line_count + 1
      table.insert(collected_lines, line)
   end

   assert(line_count == 3, 'Should read 3 lines, got ' .. line_count)
   assert(collected_lines[1] == 'Line 1', 'First line should be "Line 1", got ' .. nz(collected_lines[1], 'NIL'))
   assert(collected_lines[2] == 'Line 2', 'Second line should be "Line 2"')
   assert(collected_lines[3] == 'Line 3', 'Third line should be "Line 3"')
end

function testFileLines()
   print('Testing file:lines()...')

   local lines_content = 'First\nSecond\nThird\n'
   local test_path = createTestFile('test_file_lines.txt', lines_content)
   local file = io.open(test_path, 'r')
   assert(file, 'Failed to open file for line iteration')

   local line_count = 0
   local collected_lines = {}
   for line in file:lines() do
      line_count = line_count + 1
      table.insert(collected_lines, line)
   end

   assert(line_count == 3, 'Should read 3 lines from file handle')
   assert(collected_lines[1] == 'First', 'First line should be "First", got ' .. nz(collected_lines[1], 'NIL'))
   assert(collected_lines[2] == 'Second', 'Second line should be "Second"')
   assert(collected_lines[3] == 'Third', 'Third line should be "Third"')

   file:close()
end

----------------------------------------------------------------------------------------------------------------------
-- Default input/output tests

function testIoInputOutput()
   print('Testing io.input() and io.output()...')

   -- Test setting default input
   local input_path = createTestFile('test_input.txt', 'input test data')
   local input_file = io.input(input_path)
   assert(input_file, 'io.input should return file handle when setting')

   -- Test getting current default input
   local current_input = io.input()
   assert(current_input, 'io.input() should return current default input')

   -- Test setting default output
   local output_path = glTestFolder .. 'test_output.txt'
   local output_file = io.output(output_path)
   table.insert(glTestFiles, output_path)
   assert(output_file, 'io.output should return file handle when setting')

   -- Test getting current default output
   local current_output = io.output()
   assert(current_output, 'io.output() should return current default output')

   -- Test that we can use io.write with default output
   io.write('Default output test')
   io.output():close()

   local content = readFileContent(output_path)
   assert(content == 'Default output test', 'Default output should work with io.write')

   io.input():close()
end

----------------------------------------------------------------------------------------------------------------------
-- Constants tests

function testIoConstants()
   assert(io.stdin != nil, 'io.stdin not defined')
   assert(io.stdout != nil, 'io.stdout not defined')
   assert(io.stderr != nil, 'io.stderr not defined')

   -- Test that constants can be used with io.input (if supported)
   local err, result = catch(function()
      io.input(io.stdin)
   end)
end

----------------------------------------------------------------------------------------------------------------------
-- Error handling tests

function testErrorHandling()
   print('Testing error handling...')

   -- Test opening invalid file
   local file, err = io.open('/invalid/path/file.txt', 'r')
   assert(file == nil, 'Should return nil for invalid file path')
   assert(err != nil, 'Should return error message for invalid file path')

   -- Test operations on closed file
   local test_path = createTestFile('test_closed.txt', 'test')
   file = io.open(test_path, 'r')
   file:close()

   local success, error_msg = catch(function()
      file:write('should fail')
   end)
   assert(success == nil, 'Writing to closed file should fail')

   success, error_msg = catch(function()
      file:seek('set', 0)
   end)
   assert(success == nil, 'Seeking in closed file should fail')
end

----------------------------------------------------------------------------------------------------------------------
-- Integration tests

function testIoRead()
   print('Testing io.read()...')

   -- Test reading from default input
   local input_path = createTestFile('test_io_read.txt', 'io read test\nsecond line\n')
   io.input(input_path)

   local line = io.read()
   assert(line == 'io read test', 'Should read from default input')

   local line2 = io.read('*l')
   assert(line2 == 'second line', 'Should read second line from default input')

   io.input():close()
end

function testIntegration()
   print('Testing integrated IO operations...')

   -- Create a test file, write data, read it back line by line
   local test_data = 'First line of data\nSecond line of data\nThird line of data\n'
   local test_path = glTestFolder .. 'integration_test.txt'

   -- Write the data
   local write_file = io.open(test_path, 'w')
   assert(write_file, 'Failed to open file for integration test')
   write_file:write(test_data)
   write_file:close()
   table.insert(glTestFiles, test_path)

   -- Read it back and verify
   local lines_read = {}
   for line in io.lines(test_path) do
      table.insert(lines_read, line)
   end

   assert(#lines_read == 3, 'Should read exactly 3 lines')
   assert(lines_read[1] == 'First line of data', 'First line incorrect')
   assert(lines_read[2] == 'Second line of data', 'Second line incorrect')
   assert(lines_read[3] == 'Third line of data', 'Third line incorrect')

   -- Test seek and read operations with file_read() implementation
   local read_file = io.open(test_path, 'r')
   read_file:seek('set', 6) -- Skip "First "

   local partial = read_file:read(4) -- Read "line"
   assert(partial == 'line', 'Should read 4 bytes after seek, got "' .. nz(partial, 'NIL') .. '"')

   -- Test reading entire remaining content
   read_file:seek('set', 0)
   local all_content = read_file:read('*a')
   assert(all_content == test_data, 'Should read entire file content')

   read_file:close()

   -- Test number reading
   local number_path = createTestFile('test_numbers.txt', '42\n3.14159\n')
   local num_file = io.open(number_path, 'r')

   local int_num = num_file:read('*n')
   assert(int_num == 42, 'Should read integer 42, got ' .. nz(int_num, 'NIL'))

   local float_num = num_file:read('*n')
   assert(math.abs(float_num - 3.14159) < 0.00001, 'Should read float 3.14159, got ' .. nz(float_num, 'NIL'))

   num_file:close()
end

----------------------------------------------------------------------------------------------------------------------
-- Test suite definition

return {
   tests = {
      'testIoOpen',
      'testIoClose',
      'testIoType',
      'testIoTmpfile',
      'testFileWrite',
      'testFileRead',
      'testFileSeek',
      'testFileFlush',
      'testIoLines',
      'testFileLines',
      'testIoInputOutput',
      'testIoRead',
      'testIoConstants',
      'testErrorHandling',
      'testIntegration'
   },

   init = function(Folder)
      glTestFolder = 'temp:'
   end,

   cleanup = function()
      for k, v in pairs(glTestFiles) do
         print('Deleting test file ' .. v)
         mSys.DeleteFile(v)
      end
   end
}