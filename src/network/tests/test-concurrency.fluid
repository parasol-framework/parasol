--[[
Concurrent Connections Test

This test verifies multiple client connections to a single NetSocket server.
Tests include:
- NSF::MULTI_CONNECT flag functionality
- Multiple simultaneous client connections
- Client limit enforcement via ClientLimit field
- Per-client message isolation and delivery
- Connection management and cleanup
- Resource allocation under load
- Client identification and tracking

The test creates multiple clients that connect simultaneously and exchange
unique messages to verify proper isolation and delivery.
--]]

   include 'network'

   glPort = 8303
   glActiveClients = 0
   glMaxSockets = 5
   glMessagesPerClient = 3
   glClientResponses = {}
   glServerReceived = {}

-----------------------------------------------------------------------------------------------------------------------

function testMultipleConnections()
   local proc = processing.new({ timeout = 3.0 })

   print('Testing multiple concurrent connections with NSF::MULTI_CONNECT and ' .. glMaxSockets .. ' clients')

   glClientsCreated = 0

   local server = obj.new('netsocket', {
      name = 'ConcurrentServer',
      feedback = function(Socket, Client, State)
         if (State == NTC_CONNECTED) then
            glActiveClients = glActiveClients + 1
            print('[Server] Client connected. Active clients: ' .. glActiveClients)

            -- Send unique welcome message to each client
            local welcome = 'WELCOME:Client-' .. glActiveClients .. ':Connected'
            local err, len = Client.acWrite(welcome)
            assert(err == ERR_Okay, '[Server] Failed to send welcome to client: ' .. mSys.GetErrorMsg(err))

         elseif (State == NTC_DISCONNECTED) then
            glActiveClients = glActiveClients - 1
            print('[Server] Client disconnected. Active clients: ' .. glActiveClients)

            if (glClientsCreated == glMaxSockets) and (glActiveClients == 0) then
               print('[Server] All clients disconnected, test complete')
               proc.signal()
            end
         end
      end,
      incoming = function(Socket, Client)
         local buffer = string.alloc(1024)
         local err, read_len = Client.acRead(buffer)
         if (err == ERR_Disconnected) then return end
         assert(err == ERR_Okay, '[Server] Failed to read from client: ' .. mSys.GetErrorMsg(err))

         local msg = buffer:sub(1, read_len)
         print('[Server] Received: ' .. msg)

         -- Track messages per client
         table.insert(glServerReceived, msg)

         -- Echo back with server prefix
         local response = 'SERVER_ECHO:' .. msg
         local err, len = Client.acWrite(response)
         assert(err == ERR_Okay, '[Server] Failed to echo to client: ' .. mSys.GetErrorMsg(err))
      end,
      port = glPort,
      flags = 'SERVER|MULTI_CONNECT',
      socketLimit = glMaxSockets
   })

   assert(server, 'Failed to create server socket')

   -- Create multiple clients
   local clients = {}
   local client_data = { }
   for i = 1, glMaxSockets do
      clients[i] = obj.new('netsocket', {
         name = 'ConcurrentClient' .. i,
         feedback = function(Socket, Client, State)
            if (State == NTC_CONNECTED) then
               print('[Client ' .. nz(client_data[Socket.id].id, i) .. '] Connected to server')
            elseif (State == NTC_DISCONNECTED) then
               print('[Client ' .. nz(client_data[Socket.id].id, i) .. '] Disconnected from server')
            end
         end,
         incoming = function(Socket, Script)
            local data = client_data[Socket.id]
            local buffer = string.alloc(1024)
            local err, read_len = Socket.acRead(buffer)
            assert(err == ERR_Okay, '[Client ' .. data.id .. '] Failed to read: ' .. mSys.GetErrorMsg(err))

            local msg = buffer:sub(1, read_len)
            data.messagesReceived = data.messagesReceived + 1

            -- Store response for verification
            table.insert(glClientResponses, msg)

            if (string.match(msg, 'WELCOME:')) then
               -- Send first test message
               local test_msg = 'CLIENT_' .. data.id .. '_MSG_1'
               local err, len = Socket.acWrite(test_msg)
               assert(err == ERR_Okay, '[Client ' .. data.id .. '] Failed to send: ' .. mSys.GetErrorMsg(err))
               data.messagesSent = data.messagesSent + 1

            elseif (string.match(msg, 'SERVER_ECHO:')) then
               -- Send next message or disconnect
               if (data.messagesSent < glMessagesPerClient) then
                  data.messagesSent = data.messagesSent + 1
                  local test_msg = 'CLIENT_' .. data.id .. '_MSG_' .. data.messagesSent
                  local err, len = Socket.acWrite(test_msg)
                  assert(err == ERR_Okay, '[Client ' .. data.id .. '] Failed to send: ' .. mSys.GetErrorMsg(err))
               else
                  raise(ERR_Terminate) -- Disconnect
               end
            end

            client_data[Socket.id] = data
         end
      })

      client_data[clients[i].id] = { id = i, messagesSent = 0, messagesReceived = 0 }
      assert(clients[i], 'Failed to create client ' .. i)
   end

   -- Connect all clients as fast as possible

   print('[Test] Connecting all ' .. glMaxSockets .. ' clients...')
   for i = 1, glMaxSockets do
      local err = clients[i].mtConnect('127.0.0.1', glPort)
      assert(err == ERR_Okay, '[Client ' .. i .. '] Failed to connect: ' .. mSys.GetErrorMsg(err))
      glClientsCreated = glClientsCreated + 1
   end

   -- Wait for test completion
   local err = proc.sleep()
   assert(err == ERR_Okay, 'Concurrent connections test failed: ' .. mSys.GetErrorMsg(err))

   -- Verify results
   print('Test Results:')
   print('  Total server messages received: ' .. #glServerReceived)
   print('  Total client responses received: ' .. #glClientResponses)

   local expected_server_messages = glMaxSockets * glMessagesPerClient
   assert(#glServerReceived == expected_server_messages,
      'Server message count mismatch. Expected: ' .. expected_server_messages .. ', Got: ' .. #glServerReceived)

   local expected_client_responses = glMaxSockets * (glMessagesPerClient + 1) -- +1 for welcome
   assert(#glClientResponses >= expected_client_responses,
      'Client response count too low. Expected: >= ' .. expected_client_responses .. ', Got: ' .. #glClientResponses)

   print('Concurrent connections test completed successfully!')
end

-----------------------------------------------------------------------------------------------------------------------

function testClientLimitEnforcement()
   local proc = processing.new({ timeout = 3.0 })
   local limit = 2
   local connectAttempts = 4
   local successfulConnections = 0
   local rejectedConnections = 0

   print('Testing client limit enforcement (limit: ' .. limit .. ', attempts: ' .. connectAttempts .. ')...')

   local server = obj.new('netsocket', {
      name = 'LimitTestServer',
      feedback = function(Socket, Client, State)
         if (State == NTC_CONNECTED) then
            successfulConnections = successfulConnections + 1
            print('[Server] Client connected. Total: ' .. successfulConnections)
         end
      end,
      port = glPort + 1,
      flags = 'SERVER|MULTI_CONNECT',
      socketLimit = limit
   })

   -- Create more clients than the limit allows
   local clients = {}
   for i = 1, connectAttempts do
      clients[i] = obj.new('netsocket', {
         name = 'LimitTestClient' .. i,
         feedback = function(Socket, Client, State)
            if (State == NTC_CONNECTED) then
               print('[Client ' .. i .. '] Connection successful')
            elseif (State == NTC_DISCONNECTED) then
               print('[Client ' .. i .. '] Connection failed or disconnected')
            end
         end
      })
   end

   -- Attempt connections rapidly
   for i = 1, connectAttempts do
      local err = clients[i].mtConnect('127.0.0.1', glPort + 1)
      if (err != ERR_Okay) then
         rejectedConnections = rejectedConnections + 1
         print('[Client ' .. i .. '] Connection rejected: ' .. mSys.GetErrorMsg(err))
      end
      processing.sleep(0.05, false) -- Small delay
   end

   -- Allow time for connections to be processed
   processing.sleep(0.5)

   print('Connection Results:')
   print('  Successful connections: ' .. successfulConnections)
   print('  Rejected connections: ' .. rejectedConnections)
   print('  Server limit: ' .. limit)

   -- Verify limit enforcement
   assert(successfulConnections <= limit,
      'Too many connections accepted. Limit: ' .. limit .. ', Accepted: ' .. successfulConnections)

   assert(successfulConnections > 0,
      'No connections were successful - test setup issue')

   print('Client limit enforcement test completed successfully!')
end

-----------------------------------------------------------------------------------------------------------------------

function testConnectionIsolation()
   local proc = processing.new({ timeout = 3.0 })
   local clientCount = 3
   local clientMessages = {}
   local messagesPerClient = 2

   print('Testing message isolation between concurrent clients...')

   -- Initialize expected messages
   for i = 1, clientCount do
      clientMessages[i] = {}
      for j = 1, messagesPerClient do
         table.insert(clientMessages[i], 'ISOLATED_CLIENT_' .. i .. '_MESSAGE_' .. j)
      end
   end

   local server = obj.new('netsocket', {
      name = 'IsolationTestServer',
      feedback = function(Socket, Client, State)
         if (State == NTC_CONNECTED) then
            print('[Server] Client connected')
            -- Send unique start signal to each client
            local start_msg = 'START:' .. mSys.PreciseTime()
            Client.acWrite(start_msg)
         end
      end,
      incoming = function(Socket, Client)
         local buffer = string.alloc(1024)
         local err, read_len = Client.acRead(buffer)
         local msg = buffer:sub(1, read_len)

         print('[Server] Received isolated message: ' .. msg)

         -- Verify message belongs to expected client
         local client_id = string.match(msg, 'ISOLATED_CLIENT_(%d+)_')
         assert(client_id, 'Invalid message format: ' .. msg)

         -- Echo back to originating client only
         local echo = 'ECHO_TO_CLIENT_' .. client_id .. ':' .. msg
         Client.acWrite(echo)
      end,
      port = glPort + 2,
      flags = 'SERVER|MULTI_CONNECT'
   })

   local clients = {}
   local completedClients = 0

   for i = 1, clientCount do
      clients[i] = { }
      clients[i].socket = obj.new('netsocket', {
         name = 'IsolationClient' .. i,
         incoming = function(Socket, Script)
            local buffer = string.alloc(1024)
            local err, read_len = Socket.acRead(buffer)
            local msg = buffer:sub(1, read_len)
            local clientId = i

            print('[Client ' .. clientId .. '] Received: ' .. msg)

            if (string.match(msg, 'START:')) then
               -- Send first message
               local test_msg = clientMessages[clientId][clients[i].messageIndex]
               print('[Client ' .. clientId .. '] Sending: ' .. test_msg)
               Socket.acWrite(test_msg)

            elseif (string.match(msg, 'ECHO_TO_CLIENT_' .. clientId)) then
               -- Verify echo is for this client
               assert(string.match(msg, 'CLIENT_' .. clientId),
                  'Client ' .. clientId .. ' received message for wrong client: ' .. msg)

               clients[i].messageIndex = clients[i].messageIndex + 1
               if (clients[i].messageIndex <= messagesPerClient) then
                  local test_msg = clientMessages[clientId][clients[i].messageIndex]
                  print('[Client ' .. clientId .. '] Sending: ' .. test_msg)
                  Socket.acWrite(test_msg)
               else
                  print('[Client ' .. clientId .. '] All messages completed')
                  completedClients = completedClients + 1
                  if (completedClients == clientCount) then
                     proc.signal()
                  end
               end
            end
         end
      })

      clients[i].messageIndex = 1
   end

   -- Connect all clients
   for i = 1, clientCount do
      clients[i].socket.mtConnect('127.0.0.1', glPort + 2)
   end

   local err = proc.sleep()
   print('Completed Clients: ' .. completedClients .. ', Client Count: ' .. clientCount)
   assert(err == ERR_Okay, 'Connection isolation test failed: ' .. mSys.GetErrorMsg(err))

   assert(completedClients == clientCount,
      'Not all clients completed. Expected: ' .. clientCount .. ', Completed: ' .. completedClients)

   print('Connection isolation test completed successfully!')
end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
         'testMultipleConnections',
         'testClientLimitEnforcement',
         'testConnectionIsolation'
      },
      cleanup = function()
         glActiveClients = 0
         glClientResponses = {}
         glServerReceived = {}
      end
   }