--[[
UDP IPv6 Communication Test
--]]

   require 'common'
   include 'network'

local glBasePort = 19810  -- Base port for IPv6 UDP tests
local glTestTimeout = 3.0

------------------------------------------------------------------------------------------------------------------------
-- Test basic UDP communication with IPv6

function testUDPIPv6Basic()
   local serverPort = glBasePort + 1
   local proc = processing.new({ timeout = glTestTimeout })
   local messageReceived = false

   local server = obj.new('netsocket', {
      port    = serverPort,
      address = '::1',  -- IPv6 loopback
      flags   = 'SERVER|UDP',
      incoming = function(Socket)
         local buffer = string.alloc(1024)
         local err, bytesRead, sourceAddr, sourcePort = Socket.mtRecvFrom(buffer, 1024)
         assert(err == ERR_Okay, 'Server failed to receive IPv6 UDP data: ' .. mSys.GetErrorMsg(err))

         if (bytesRead > 0) then
            local msg = buffer:sub(1, bytesRead)
            print('[IPv6 UDP Server] Received: "' .. msg .. '" from ' .. sourceAddr .. ':' .. sourcePort)
            assert(string.match(msg, 'Hello IPv6'), 'Unexpected message received')
            messageReceived = true
            proc.signal()
         end
      end
   })

   local client = obj.new('netsocket', { flags = 'UDP' })

   -- Client sends message to IPv6 loopback
   local message = 'Hello IPv6 UDP Server'
   print('[IPv6 UDP Client] Sending: "' .. message .. '" to ::1:' .. serverPort)
   local err, bytesSent = client.mtSendTo('::1', serverPort, message)
   assert(err == ERR_Okay, 'Client failed to send IPv6 UDP data: ' .. mSys.GetErrorMsg(err))
   assert(bytesSent == string.len(message), 'Not all bytes were sent')

   proc.sleep()

   assert(messageReceived, 'Server did not receive IPv6 message')
end

------------------------------------------------------------------------------------------------------------------------
-- Test dual-stack IPv4/IPv6 UDP communication

function testUDPDualStack()
   local serverPort = glBasePort + 2
   local proc = processing.new({ timeout = glTestTimeout })
   local ipv4Received = false
   local ipv6Received = false

   local server = obj.new('netsocket', {
      port = serverPort,
      address = '::',  -- Bind to all interfaces (dual-stack)
      flags = 'SERVER|UDP',
      incoming = function(Socket)
         local buffer = string.alloc(1024)
         local err, bytesRead, sourceAddr, sourcePort = Socket.mtRecvFrom(buffer, 1024)
         assert(err == ERR_Okay, 'Server failed to receive dual-stack UDP data: ' .. mSys.GetErrorMsg(err))

         if (bytesRead > 0) then
            local msg = buffer:sub(1, bytesRead)
            print('[Dual-Stack UDP Server] Received: "' .. msg .. '" from ' .. sourceAddr .. ':' .. sourcePort)

            if (string.match(msg, 'IPv4')) then
               ipv4Received = true
            elseif (string.match(msg, 'IPv6')) then
               ipv6Received = true
            end

            if (ipv4Received and ipv6Received) then
               proc.signal()
            end
         end
      end
   })

   local client = obj.new('netsocket', { flags = 'UDP' })

   -- Send IPv4 message
   local ipv4Message = 'Hello from IPv4'
   print('[Dual-Stack Client] Sending IPv4 message to 127.0.0.1:' .. serverPort)
   local err, bytesSent = client.mtSendTo('127.0.0.1', serverPort, ipv4Message)
   assert(err == ERR_Okay, 'Failed to send IPv4 message: ' .. mSys.GetErrorMsg(err))

   proc.sleep(0.1)  -- Brief pause between messages

   -- Send IPv6 message
   local ipv6Message = 'Hello from IPv6'
   print('[Dual-Stack Client] Sending IPv6 message to ::1:' .. serverPort)
   err, bytesSent = client.mtSendTo('::1', serverPort, ipv6Message)
   assert(err == ERR_Okay, 'Failed to send IPv6 message: ' .. mSys.GetErrorMsg(err))

   proc.sleep()

   assert(ipv4Received, 'Server did not receive IPv4 message')
   assert(ipv6Received, 'Server did not receive IPv6 message')
end

------------------------------------------------------------------------------------------------------------------------
-- Test IPv6 address validation and error handling

function testUDPIPv6ErrorHandling()
   local client = obj.new('netsocket', { flags = 'UDP' })

   -- Test invalid IPv6 addresses
   local invalidAddresses = {
      'gggg::1',           -- Invalid hex digits
      '1::2::3',           -- Double double-colon
      '1:2:3:4:5:6:7:8:9', -- Too many groups
      '',                  -- Empty address
      'not.an.ipv6.address' -- Not an IP address at all
   }

   for i, addr in ipairs(invalidAddresses) do
      local err, bytesSent = client.mtSendTo(addr, 12345, 'test', 4)
      assert(err != ERR_Okay, 'SendTo should fail with invalid IPv6 address: ' .. addr)
      print('Correctly rejected invalid IPv6 address: ' .. addr)
   end

   -- Test valid IPv6 addresses (should not fail due to address parsing)
   local validAddresses = {
      '::1',                   -- Loopback
      '::',                    -- Any address
      '2001:db8::1',           -- Documentation prefix
      'fe80::1',               -- Link-local
      '::ffff:127.0.0.1',      -- IPv4-mapped IPv6
   }

   for i, addr in ipairs(validAddresses) do
      local err, bytesSent = client.mtSendTo(addr, 12345, 'test', 4)
      -- Note: May still fail due to network unreachable, but should not fail due to address parsing
      print('Address parsing accepted valid IPv6 address: ' .. addr .. ' (err: ' .. mSys.GetErrorMsg(err) .. ')')
   end
end

------------------------------------------------------------------------------------------------------------------------
-- Test IPv6 specific socket properties

function testUDPIPv6Properties()
   local ipv6Socket = obj.new('netsocket', { address = '::1', flags = 'UDP', multicastTTL = 5 })

   assert(bit.band(ipv6Socket.flags, NSF_UDP) != 0, 'UDP flag not set on IPv6 socket')
   assert(ipv6Socket.state == NTC_CONNECTED, 'IPv6 UDP socket should be in CONNECTED state')
   assert(ipv6Socket.multicastTTL == 5, 'IPv6 multicast TTL (hops) not set correctly')
end

------------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
         'testUDPIPv6Properties',
         'testUDPIPv6ErrorHandling',
         'testUDPIPv6Basic',
         'testUDPDualStack'
      }
   }
