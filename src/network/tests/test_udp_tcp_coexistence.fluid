--[[
UDP and TCP Coexistence Test

This test verifies that UDP and TCP sockets can coexist and operate independently:
- Simultaneous UDP and TCP servers on different ports
- Mixed UDP/TCP client communication
- No interference between UDP and TCP operations
- Resource sharing validation
--]]

   include 'network'
   if not mNet then mNet = mod.load('network') end

   local glBasePort = 19840  -- Base port for coexistence tests
   local glTestTimeout = 4.0

------------------------------------------------------------------------------------------------------------------------
-- Test UDP and TCP servers running simultaneously

function testUDPTCPCoexistence()
   local udpPort = glBasePort + 1
   local tcpPort = glBasePort + 2
   local proc = processing.new({ timeout = glTestTimeout })
   local udpReceived = false
   local tcpConnected = false
   local tcpReceived = false

   -- Create UDP server
   local udpServer = obj.new('netsocket', {
      port = udpPort,
      address = '127.0.0.1',
      flags = 'SERVER|UDP',
      incoming = function(Socket)
         local buffer = string.alloc(1024)
         local source = struct.new('IPAddress')
         local err, bytesRead = Socket.mtRecvFrom(source, buffer)
         if (err == ERR_Okay) and (bytesRead > 0) then
            local msg = buffer:sub(1, bytesRead)
            print('[UDP Server] Received: "' .. msg .. '"')
            if (string.match(msg, 'UDP Test')) then
               udpReceived = true
               -- Send UDP response
               Socket.mtSendTo(source, 'UDP Response')
            end
         end
      end
   })

   -- Create TCP server
   local tcpServer = obj.new('netsocket', {
      port = tcpPort,
      address = '127.0.0.1',
      flags = 'SERVER',  -- TCP only
      feedback = function(Socket, Client, State)
         if (State == NTC_CONNECTED) then
            print('[TCP Server] Client connected')
            tcpConnected = true
            local err, len = Client.acWrite('TCP Hello')
            assert(err == ERR_Okay, 'TCP server failed to send greeting')
         end
      end,
      incoming = function(Socket, Client)
         local buffer = string.alloc(1024)
         local err, readLen = Client.acRead(buffer)
         if (err == ERR_Okay and readLen > 0) then
            local msg = buffer:sub(1, readLen)
            print('[TCP Server] Received: "' .. msg .. '"')
            if (string.match(msg, 'TCP Test')) then
               tcpReceived = true
               if (udpReceived and tcpReceived) then
                  proc.signal()
               end
            end
         end
      end
   })

   proc.sleep(0.2)  -- Let servers initialize

   -- Create UDP client
   local udpClient = obj.new('netsocket', {
      flags = 'UDP',
      incoming = function(Socket)
         local buffer = string.alloc(1024)
         local source = struct.new('IPAddress')
         local err, bytesRead = Socket.mtRecvFrom(source, buffer)
         if (err == ERR_Okay) and (bytesRead > 0) then
            local msg = buffer:sub(1, bytesRead)
            print('[UDP Client] Received response: "' .. msg .. '"')
         end
      end
   })

   -- Create TCP client
   local tcpClient = obj.new('netsocket', {
      address = '127.0.0.1',
      port = tcpPort,
      feedback = function(Socket, State)
         if (State == NTC_CONNECTED) then
            print('[TCP Client] Connected to server')
            local message = 'TCP Test Message'
            local err, len = Socket.acWrite(message)
            assert(err == ERR_Okay, 'TCP client failed to send message')
         end
      end,
      incoming = function(Socket)
         local buffer = string.alloc(1024)
         local err, readLen = Socket.acRead(buffer)
         if (err == ERR_Okay and readLen > 0) then
            local msg = buffer:sub(1, readLen)
            print('[TCP Client] Received: "' .. msg .. '"')
         end
      end
   })

   -- Send UDP message

   local dest = struct.new('IPAddress')
   check(mNet.StrToAddress('127.0.0.1', dest))
   dest.port = udpServer.port

   local udpMessage = 'UDP Test Message'
   print('[UDP Client] Sending: "' .. udpMessage .. '"')
   local err, bytesSent = udpClient.mtSendTo(dest, udpMessage)
   assert(err == ERR_Okay, 'UDP client failed to send message')

   proc.sleep()

   assert(udpReceived, 'UDP message was not received')
   assert(tcpConnected, 'TCP connection was not established')
   assert(tcpReceived, 'TCP message was not received')
end

------------------------------------------------------------------------------------------------------------------------
-- Test mixed protocol communication patterns

function testMixedProtocolPatterns()
   local basePort = glBasePort + 10
   local proc = processing.new({ timeout = glTestTimeout })
   local results = {}

   -- Create multiple servers of different types
   local servers = {
      udp1 = obj.new('netsocket', {
         port = basePort + 1,
         address = '127.0.0.1',
         flags = 'SERVER|UDP',
         incoming = function(Socket)
            local buffer = string.alloc(256)
            local source = struct.new('IPAddress')
            local err, bytesRead = Socket.mtRecvFrom(source, buffer)
            if (err == ERR_Okay and bytesRead > 0) then
               results.udp1 = true
               print('UDP Server 1 received message')
            end
         end
      }),

      tcp1 = obj.new('netsocket', {
         port = basePort + 2,
         address = '127.0.0.1',
         flags = 'SERVER',
         feedback = function(Socket, Client, State)
            if (State == NTC_CONNECTED) then
               results.tcp1 = true
               print('TCP Server 1 got connection')
            end
         end
      }),

      udp2 = obj.new('netsocket', {
         port = basePort + 3,
         address = '127.0.0.1',
         flags = 'SERVER|UDP|BROADCAST',
         multicastTTL = 2,
         incoming = function(Socket)
            local buffer = string.alloc(256)
            local source = struct.new('IPAddress')
            local err, bytesRead = Socket.mtRecvFrom(source, buffer)
            if (err == ERR_Okay and bytesRead > 0) then
               results.udp2 = true
               print('UDP Server 2 (with broadcast) received message')
            end
         end
      })
   }

   proc.sleep(0.2)  -- Let servers initialize

   -- Create clients and send messages
   local clients = {
      udp1 = obj.new('netsocket', { flags = 'UDP' }),
      tcp1 = obj.new('netsocket', { address = '127.0.0.1', port = basePort + 2 }),
      udp2 = obj.new('netsocket', { flags = 'UDP' })
   }

   local dest = struct.new('IPAddress')
   check(mNet.StrToAddress('127.0.0.1', dest))

   -- Send to UDP server 1
   dest.port = servers.udp1.port
   clients.udp1.mtSendTo(dest, 'test1')

   -- Send to UDP server 2 with broadcast enabled
   dest.port = servers.udp2.port
   clients.udp2.mtSendTo(dest, 'test2')

   proc.sleep(1.0)  -- Allow time for all operations

   -- Check results
   assert(results.udp1, 'UDP Server 1 did not receive message')
   assert(results.tcp1, 'TCP Server 1 did not get connection')
   assert(results.udp2, 'UDP Server 2 did not receive message')
end

------------------------------------------------------------------------------------------------------------------------
-- Test resource cleanup and port reuse

function testResourceCleanup()
   local testPort = glBasePort + 20

   -- Create and destroy UDP socket
   do
      local udpSocket = obj.new('netsocket', { port = testPort, address = '127.0.0.1', flags = 'SERVER|UDP' })
      print('UDP socket created and bound to port ' .. testPort)
   end  -- Socket goes out of scope and should be cleaned up

   -- Create TCP socket on same port (should work after UDP cleanup)
   local tcpSocket = obj.new('netsocket', { port = testPort, address = '127.0.0.1', flags = 'SERVER' })
   print('TCP socket successfully bound to same port after UDP cleanup')
end

------------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
         'testResourceCleanup',
         'testMixedProtocolPatterns',
         'testUDPTCPCoexistence'
      }
   }