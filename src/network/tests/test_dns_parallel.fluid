--[[
Tests for resolving server names in parallel.
--]]

   mNet = mod.load('network')

   local glSelf = obj.find('self')
   local proc = processing.new({ timeout = 5.0 })

function netAddressToString(IP)
   return bit.rshift(bit.band(IP.data[1], 0xff000000), 24) .. '.' ..
      bit.rshift(bit.band(IP.data[1], 0xff0000), 16) .. '.' ..
      bit.rshift(bit.band(IP.data[1], 0xff00), 8) .. '.' ..
      bit.band(IP.data[1], 0xff)
end

function name_resolved(NetLookup, Error)
   local host = nz(NetLookup.hostName,'NIL')

   assert(Error == ERR_Okay, 'Failed to resolve ' .. host .. ', error ' ..mSys.GetErrorMsg(Error))

   local total_ips = 0

   print('Resolved host name "' .. host .. '" (' .. (glTotalResolved+1) .. '/' .. #glDomains .. ')')

   local ip_list = nil
   local addresses = NetLookup.addresses
   if (addresses != nil) then
      total_ips = #addresses
      for index, ip in pairs(addresses) do
         if (ip.type == IPADDR_V4) or (ip.type == IPADDR_V6) then
            if (ip_list == nil) then
               ip_list = mNet.AddressToStr(ip)
            else
               ip_list = ip_list .. ', ' .. mNet.AddressToStr(ip)
            end
         else
            error('Unrecognised TCP/IP address type ' .. ip.type)
         end
      end
   end

   local msg = 'Resolved ' .. host .. ' with ' .. total_ips .. ' IP addresses.'
   if (ip_list) then msg = msg .. '  IPs: ' .. ip_list end
   print(msg)

   glTotalResolved = glTotalResolved + 1

   if (glTotalResolved == #glDomains) then
      proc.signal() // Breaks the proc.sleep() loop
   end
end

-----------------------------------------------------------------------------------------------------------------------
-- This test resolves each name more than once.  The expected response is for the callback to be called multiple times
-- for the same host.  In the log output you may see a thread being created for the first resolve, then the second call
-- will hit the local DNS cache and return immediately.

function testDuplication()
   local resolved = 0

   local domains = { 'google.com', 'reddit.com' }
   function duplicate_resolved(NetLookup, Error)
      assert(Error == ERR_Okay, 'Failed to resolve ' .. NetLookup.hostName .. ', error ' ..mSys.GetErrorMsg(Error))

      print('Resolved: ' .. NetLookup.hostName)

      resolved = resolved + 1

      if (resolved == #domains * 2) then print('All domains resolved.') end

      proc.signal()
   end

   for k,v in pairs(domains) do
      local nlA = obj.new('NetLookup', { callback = duplicate_resolved, flags=NLF_NO_CACHE })
      local nlB = obj.new('NetLookup', { callback = duplicate_resolved })

      local target = resolved + 1
      local err = nlA.mtResolveName(v)
      while (resolved < target) do
         err = proc.sleep()
         assert(err == ERR_Okay, 'Name resolution failed: ' .. mSys.GetErrorMsg(err))
      end
      print('First lookup processed successfully.')

      target = resolved + 1
      err = nlB.mtResolveName(v)
      while (resolved < target) do
         err = proc.sleep()
         assert(err == ERR_Okay, 'Name resolution failed: ' .. mSys.GetErrorMsg(err))
      end
      print('Second lookup processed successfully.')
   end
end

-----------------------------------------------------------------------------------------------------------------------
-- Non-blocking name resolution (default)

function testNameResolutionAsync()
   local nl = obj.new('NetLookup', { callback=name_resolved, flags=NLF_NO_CACHE })

   glTotalResolved = 0
   for k,v in pairs(glDomains) do
      nl.mtResolveName(v)
   end

   local err = proc.sleep(5.0)
   if (err == ERR_TimeOut) then error('Name resolution timed-out.') end
end

-----------------------------------------------------------------------------------------------------------------------
-- Blocking name resolution

function testBlockingNameResolution()
   local nl = obj.new('NetLookup', { callback = name_resolved, flags=NLF_NO_CACHE })

   glTotalResolved = 0
   for k,v in pairs(glDomains) do
      local expected_total = glTotalResolved + 1
      nl.mtBlockingResolveName(v)
      assert(expected_total == glTotalResolved, 'Name was not resolved when ResolveName() had returned')
   end
end

-----------------------------------------------------------------------------------------------------------------------

function testBlockingAddressResolution()
   local address_resolved = false
   local nl = obj.new('NetLookup', {
      callback = function(NetLookup, Error)
         local host = nz(NetLookup.hostName,'NIL')
         assert(Error == ERR_Okay, 'Failed to resolve ' .. host .. ', error ' ..mSys.GetErrorMsg(Error))
         assert(host == 'dns.google', 'IP resolved to ' .. host)
         address_resolved = true
      end
   })
   nl.mtBlockingResolveAddress('8.8.8.8')

   assert(address_resolved == true, 'Failed to resolve the IP address.')
end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
         'testBlockingNameResolution',
         'testNameResolutionAsync',
         'testBlockingAddressResolution',
         'testDuplication'
      },
      init = function()
         glDomains = { 'google.com', 'parasol.ws', 'amazon.co.uk', 'stackoverflow.com', 'theguardian.com', 'www.bbc.co.uk' }
      end,
      cleanup = function()
         glDomains = nil
         glTotalResolved = nil
      end
   }
