--[[
UDP Performance and Stress Test
--]]

   require 'common'
   include 'network'

local glBasePort = 19830  -- Base port for performance tests
local glTestTimeout = 5.0

------------------------------------------------------------------------------------------------------------------------
-- Test high-frequency UDP messaging

function testUDPHighFrequency()
   glBasePort = glBasePort + 1
   local serverPort = glBasePort
   local proc = processing.new({ timeout = glTestTimeout })
   local messagesReceived = 0
   local targetMessages = 100

   print('Testing high-frequency UDP messaging (' .. targetMessages .. ' messages)')

   local server = obj.new('netsocket', {
      port    = serverPort,
      address = '127.0.0.1',
      flags   = 'SERVER|UDP',
      incoming = function(Socket)
         local buffer = string.alloc(1024)
         local err, bytesRead, sourceAddr, sourcePort = Socket.mtRecvFrom(buffer, 1024)
         if (err == ERR_Okay and bytesRead > 0) then
            messagesReceived = messagesReceived + 1
            if (messagesReceived >= targetMessages) then
               proc.signal()
            elseif (messagesReceived % 20 == 0) then
               print('[High-Freq Server] Received ' .. messagesReceived .. ' messages so far')
            end
         end
      end
   })

   local client = obj.new('netsocket', { flags = 'UDP' })

   -- Send messages rapidly
   local startTime = mSys.PreciseTime()
   for i = 1, targetMessages do
      local message = 'Message #' .. i
      local err, bytesSent = client.mtSendTo('127.0.0.1', serverPort, message)
      assert(err == ERR_Okay, 'Failed to send message #' .. i .. ': ' .. mSys.GetErrorMsg(err))

      -- Small delay to prevent overwhelming the system
      if (i % 10 == 0) then
         proc.sleep(0.001)  -- 1ms pause every 10 messages
      end
   end

   local sendTime = mSys.PreciseTime() - startTime
   print('Sent ' .. targetMessages .. ' messages in ' .. sendTime .. ' seconds')

   proc.sleep()

   print('Received ' .. messagesReceived .. ' out of ' .. targetMessages .. ' messages')
   -- Allow some packet loss in high-frequency testing
   local successRate = (messagesReceived / targetMessages) * 100
   assert(successRate >= 80.0, 'Success rate too low: ' .. successRate .. '%')

   print('High-frequency UDP test completed (success rate: ' .. string.format('%.1f', successRate) .. '%)')
end

------------------------------------------------------------------------------------------------------------------------
-- Test large UDP packet transmission

function testUDPLargePackets()
   glBasePort = glBasePort + 1
   local serverPort = glBasePort
   local proc = processing.new({ timeout = glTestTimeout })
   local largePacketReceived = false
   local receivedSize = 0

   local server = obj.new('netsocket', {
      port    = serverPort,
      address = '127.0.0.1',
      flags   = 'SERVER|UDP',
      maxPacketSize = 65507,  -- Maximum UDP payload size
      incoming = function(Socket)
         local buffer = string.alloc(65600)  -- Slightly larger buffer
         local err, bytesRead, sourceAddr, sourcePort = Socket.mtRecvFrom(buffer, 65600)
         if (err == ERR_Okay and bytesRead > 0) then
            print('[Large Packet Server] Received packet of size: ' .. bytesRead)
            receivedSize = bytesRead
            largePacketReceived = true
            proc.signal()
         end
      end
   })

   local client = obj.new('netsocket', { flags = 'UDP' })

   -- Test different large packet sizes
   local packetSizes = { 1024, 8192, 32768, 65507 }  -- Up to maximum UDP size

   for i, size in ipairs(packetSizes) do
      print('Sending packet of size: ' .. size)
      local largeMessage = string.rep('X', size)
      local err, bytesSent = client.mtSendTo('127.0.0.1', serverPort, largeMessage)

      if (err == ERR_Okay) then
         assert(bytesSent == size, 'Not all bytes sent for size ' .. size .. ' (sent: ' .. bytesSent .. ')')
         print('Successfully sent ' .. size .. ' byte packet')
      else
         print('Failed to send ' .. size .. ' byte packet: ' .. mSys.GetErrorMsg(err))
         if (size <= 65507) then
            -- Should not fail for valid UDP sizes
            assert(false, 'Failed to send valid UDP packet size: ' .. size)
         end
      end

      processing.sleep(0.1)  -- Brief pause between packets
   end

   proc.sleep()

   assert(largePacketReceived, 'No large packets were received')
   print('Large packet test completed (largest received: ' .. receivedSize .. ' bytes)')
end

------------------------------------------------------------------------------------------------------------------------
-- Test UDP concurrent connections

function testUDPConcurrency()
   glBasePort = glBasePort + 1
   local serverPort = glBasePort
   local proc = processing.new({ timeout = glTestTimeout })
   local clientsConnected = 0
   local targetClients = 5
   local messagesPerClient = 10
   local totalReceived = 0

   print('Testing UDP concurrency with ' .. targetClients .. ' concurrent clients')

   local server = obj.new('netsocket', {
      port    = serverPort,
      address = '127.0.0.1',
      flags   = 'SERVER|UDP',
      incoming = function(Socket)
         local buffer = string.alloc(1024)
         local err, bytesRead, sourceAddr, sourcePort = Socket.mtRecvFrom(buffer, 1024)
         if (err == ERR_Okay and bytesRead > 0) then
            totalReceived = totalReceived + 1
            local msg = buffer:sub(1, bytesRead)

            if (totalReceived % 10 == 0) then
               print('[Concurrent Server] Received ' .. totalReceived .. ' messages total')
            end

            if (totalReceived >= targetClients * messagesPerClient) then
               proc.signal()
            end
         end
      end
   })

   -- Create multiple client sockets
   local clients = {}
   for i = 1, targetClients do
      clients[i] = obj.new('netsocket', {
         flags = 'UDP'
      })
   end

   -- Each client sends multiple messages
   for clientId = 1, targetClients do
      for msgId = 1, messagesPerClient do
         local message = 'Client' .. clientId .. '_Msg' .. msgId
         local err, bytesSent = clients[clientId].mtSendTo('127.0.0.1', serverPort, message)
         assert(err == ERR_Okay, 'Client ' .. clientId .. ' failed to send message ' .. msgId)
      end
      print('Client ' .. clientId .. ' sent all ' .. messagesPerClient .. ' messages')
   end

   proc.sleep()

   print('Received ' .. totalReceived .. ' out of ' .. (targetClients * messagesPerClient) .. ' messages')
   local successRate = (totalReceived / (targetClients * messagesPerClient)) * 100
   assert(successRate >= 90.0, 'Concurrent success rate too low: ' .. successRate .. '%')

   print('UDP concurrency test completed (success rate: ' .. string.format('%.1f', successRate) .. '%)')
end

------------------------------------------------------------------------------------------------------------------------
-- Test buffer overflow handling

function testUDPBufferHandling()
   glBasePort = glBasePort

   local client = obj.new('netsocket', { flags = 'UDP' })

   -- Test sending when network buffer might be full
   local rapidMessages = 1000
   local successCount = 0
   local bufferOverflowCount = 0

   print('Sending ' .. rapidMessages .. ' messages rapidly to test buffer handling')

   for i = 1, rapidMessages do
      local message = 'Rapid message #' .. i
      local err, bytesSent = client.mtSendTo('127.0.0.1', 12345, message)  -- Non-existent server

      if (err == ERR_Okay) then
         successCount = successCount + 1
      elseif (err == ERR_BufferOverflow) then
         bufferOverflowCount = bufferOverflowCount + 1
      end

      -- No delay - send as fast as possible to test buffer limits
   end

   print('Results: ' .. successCount .. ' successful, ' .. bufferOverflowCount .. ' buffer overflows')

   -- We expect some buffer overflows when sending rapidly
   assert(successCount > 0, 'No messages sent successfully')
end

------------------------------------------------------------------------------------------------------------------------
-- Test UDP performance benchmarks

function testUDPPerformanceBenchmark()
   glBasePort = glBasePort + 1
   local serverPort = glBasePort
   local proc = processing.new({ timeout = 10.0 })  -- Longer timeout for benchmark
   local benchmarkDuration = 2.0  -- 2 seconds
   local messagesSent = 0
   local messagesReceived = 0
   local benchmarkActive = true

   print('Running UDP performance benchmark for ' .. benchmarkDuration .. ' seconds')

   local server = obj.new('netsocket', {
      port = serverPort,
      address = '127.0.0.1',
      flags = 'SERVER|UDP',
      incoming = function(Socket)
         local buffer = string.alloc(1024)
         local err, bytesRead, sourceAddr, sourcePort = Socket.mtRecvFrom(buffer, 1024)
         if (err == ERR_Okay and bytesRead > 0) then
             messagesReceived = messagesReceived + 1
         end
      end
   })

   local client = obj.new('netsocket', { flags = 'UDP' })

   local startTime = mSys.PreciseTime()
   local endTime = startTime + (benchmarkDuration * 1000000)

   -- Send messages continuously for the benchmark duration
   while (mSys.PreciseTime() < endTime) do
      local message = 'Benchmark message ' .. messagesSent
      local err, bytesSent = client.mtSendTo('127.0.0.1', serverPort, message)
      if (err == ERR_Okay) then
         messagesSent = messagesSent + 1
      end

      -- Brief processing break every 100 messages
      if (messagesSent % 100 == 0) then
         proc.sleep(0.1)
      end
   end

   benchmarkActive = false
   proc.sleep(0.5)  -- Allow final messages to be received

   local actualDuration = mSys.PreciseTime() - startTime
   local sendRate = messagesSent / actualDuration
   local receiveRate = messagesReceived / actualDuration

   print('Performance Results:')
   print('  Messages sent: ' .. messagesSent)
   print('  Messages received: ' .. messagesReceived)
   print('  Duration: ' .. string.format('%.2f', actualDuration/1000000) .. ' seconds')
   print('  Send rate: ' .. string.format('%.0f', sendRate) .. ' messages/second')
   print('  Receive rate: ' .. string.format('%.0f', receiveRate) .. ' messages/second')
   print('  Success rate: ' .. string.format('%.1f', (messagesReceived / messagesSent) * 100) .. '%')

   assert(messagesSent > 100, 'Too few messages sent for meaningful benchmark')
   assert(messagesReceived > messagesSent * 0.8, 'Too many messages lost')
end

------------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
         'testUDPBufferHandling',
         'testUDPLargePackets',
         'testUDPConcurrency',
         'testUDPHighFrequency',
         'testUDPPerformanceBenchmark'
      }
   }
