--[[
SSL Communication Test

This test verifies SSL-enabled network communications using the NSF::SSL flag.
Tests include:
- SSL server socket creation and certificate handling
- SSL client connection establishment and handshake
- Encrypted data transfer verification
- SSL-specific error conditions and recovery
- Certificate validation scenarios  
- SSL state transitions (NTC_CONNECTING_SSL)
- Cross-platform SSL implementation testing
- SSL connection termination and cleanup

Note: These tests require SSL support to be compiled into the Network module.
If SSL is not available, tests will be skipped with appropriate messages.
--]]

   include 'network'

   glPort = 8305
   glSSLSupported = false
   glSSLTestData = 'SECRET_SSL_MESSAGE_123'

-----------------------------------------------------------------------------------------------------------------------

function checkSSLSupport()
   -- Test if SSL support is available by attempting to create SSL socket
   local test_socket = obj.new('netsocket', {
      name = 'SSLSupportTest',
      port = glPort,
      flags = 'SERVER|SSL'
   })
   
   if (test_socket) then
      if (test_socket.error == ERR_Okay) then
         glSSLSupported = true
         print('[SSL] SSL support detected and available')
      else
         print('[SSL] SSL socket creation failed: ' .. mSys.GetErrorMsg(test_socket.error))
         print('[SSL] SSL tests will be skipped')
      end
   else
      print('[SSL] SSL socket creation returned nil - SSL not supported')
      print('[SSL] SSL tests will be skipped')
   end
   
   return glSSLSupported
end

-----------------------------------------------------------------------------------------------------------------------

function testBasicSSLCommunication()
   if (!checkSSLSupport()) then
      print('[SSL] Skipping SSL communication test - SSL not supported')
      return
   end
   
   local proc = processing.new({ timeout = 15.0 })
   local ssl_handshake_complete = false
   local ssl_data_received = false
   
   print('Testing basic SSL communication...')
   
   local ssl_server = obj.new('netsocket', {
      name = 'SSLTestServer',
      feedback = function(Socket, Client, State)
         print('[SSL Server] Client state: ' .. State)
         
         if (State == NTC_CONNECTING_SSL) then
            print('[SSL Server] SSL handshake in progress...')
            
         elseif (State == NTC_CONNECTED) then
            print('[SSL Server] SSL handshake completed, client connected securely')
            ssl_handshake_complete = true
            
            -- Send encrypted test message
            print('[SSL Server] Sending encrypted message...')
            local err, len = Client.acWrite(glSSLTestData)
            if (err == ERR_Okay) then
               print('[SSL Server] Encrypted message sent successfully')
            else
               error('[SSL Server] Failed to send encrypted message: ' .. mSys.GetErrorMsg(err))
            end
            
         elseif (State == NTC_DISCONNECTED) then
            print('[SSL Server] SSL client disconnected')
            if (ssl_handshake_complete and ssl_data_received) then
               proc.signal()
            end
         end
      end,
      incoming = function(Socket, Client)
         local buffer = string.rep(' ', 1024)
         local err, read_len = Client.acRead(buffer)
         
         if (err == ERR_Okay) then
            local msg = buffer:sub(1, read_len)
            print('[SSL Server] Received encrypted message: ' .. msg)
            
            -- Verify message integrity over SSL
            if (string.match(msg, 'SSL_ECHO:' .. glSSLTestData)) then
               print('[SSL Server] SSL message integrity verified!')
               ssl_data_received = true
            else
               error('[SSL Server] SSL message integrity check failed. Got: ' .. msg)
            end
         else
            print('[SSL Server] SSL read error: ' .. mSys.GetErrorMsg(err))
         end
      end,
      port = glPort,
      flags = 'SERVER|SSL'
   })
   
   assert(ssl_server, 'Failed to create SSL server socket')
   assert(ssl_server.error == ERR_Okay, 'SSL server error: ' .. mSys.GetErrorMsg(ssl_server.error))
   
   local ssl_client = obj.new('netsocket', {
      name = 'SSLTestClient',
      feedback = function(Socket, Client, State)
         print('[SSL Client] Connection state: ' .. State)
         
         if (State == NTC_CONNECTING_SSL) then
            print('[SSL Client] Performing SSL handshake...')
            
         elseif (State == NTC_CONNECTED) then
            print('[SSL Client] SSL connection established successfully')
            
         elseif (State == NTC_DISCONNECTED) then
            print('[SSL Client] SSL connection closed')
         end
      end,
      incoming = function(Socket, Script)
         local buffer = string.rep(' ', 1024)
         local err, read_len = Socket.acRead(buffer)
         
         if (err == ERR_Okay) then
            local msg = buffer:sub(1, read_len)
            print('[SSL Client] Received encrypted message: ' .. msg)
            
            -- Echo back the message to verify bidirectional SSL
            local echo_msg = 'SSL_ECHO:' .. msg
            print('[SSL Client] Sending encrypted echo...')
            local err, len = Socket.acWrite(echo_msg)
            if (err == ERR_Okay) then
               print('[SSL Client] Encrypted echo sent successfully')
            else
               error('[SSL Client] Failed to send encrypted echo: ' .. mSys.GetErrorMsg(err))
            end
         else
            print('[SSL Client] SSL read error: ' .. mSys.GetErrorMsg(err))
         end
      end,
      flags = 'SSL'
   })
   
   assert(ssl_client, 'Failed to create SSL client socket')
   
   print('[SSL Client] Connecting to SSL server...')
   local err = ssl_client.mtConnect('127.0.0.1', glPort)
   assert(err == ERR_Okay, 'SSL client connection failed: ' .. mSys.GetErrorMsg(err))
   
   local err = proc.sleep()
   assert(err == ERR_Okay, 'SSL communication test failed: ' .. mSys.GetErrorMsg(err))
   
   assert(ssl_handshake_complete, 'SSL handshake did not complete')
   assert(ssl_data_received, 'SSL data exchange did not complete')
   
   print('Basic SSL communication test completed successfully!')
end

-----------------------------------------------------------------------------------------------------------------------

function testSSLErrorConditions()
   if (!checkSSLSupport()) then
      print('[SSL] Skipping SSL error conditions test - SSL not supported')
      return
   end
   
   print('Testing SSL error conditions...')
   
   -- Test 1: SSL client connecting to non-SSL server
   print('[SSL Test 1] Testing SSL client to non-SSL server...')
   
   local non_ssl_server = obj.new('netsocket', {
      name = 'NonSSLServer',
      port = glPort + 1,
      flags = 'SERVER' -- No SSL flag
   })
   
   local ssl_client = obj.new('netsocket', {
      name = 'SSLClientToNonSSL',
      feedback = function(Socket, Client, State)
         print('[SSL Client] State when connecting to non-SSL: ' .. State)
         if (State == NTC_DISCONNECTED) then
            print('[SSL Client] Connection failed as expected (SSL mismatch)')
         end
      end,
      flags = 'SSL'
   })
   
   local err = ssl_client.mtConnect('127.0.0.1', glPort + 1)
   print('[SSL Test 1] SSL to non-SSL connection result: ' .. mSys.GetErrorMsg(err))
   
   mSys.Sleep(2.0) -- Allow time for connection attempt
   
   -- Test 2: Non-SSL client connecting to SSL server  
   print('[SSL Test 2] Testing non-SSL client to SSL server...')
   
   local ssl_server = obj.new('netsocket', {
      name = 'SSLServerForNonSSL',
      feedback = function(Socket, Client, State)
         print('[SSL Server] State with non-SSL client: ' .. State)
      end,
      port = glPort + 2,
      flags = 'SERVER|SSL'
   })
   
   local non_ssl_client = obj.new('netsocket', {
      name = 'NonSSLClientToSSL',
      feedback = function(Socket, Client, State)
         print('[Non-SSL Client] State when connecting to SSL: ' .. State)
      end
      -- No SSL flag
   })
   
   local err = non_ssl_client.mtConnect('127.0.0.1', glPort + 2)
   print('[SSL Test 2] Non-SSL to SSL connection result: ' .. mSys.GetErrorMsg(err))
   
   mSys.Sleep(2.0) -- Allow time for connection attempt
   
   print('SSL error conditions test completed')
end

-----------------------------------------------------------------------------------------------------------------------

function testSSLStateTransitions()
   if (!checkSSLSupport()) then
      print('[SSL] Skipping SSL state transitions test - SSL not supported')
      return
   end
   
   local proc = processing.new({ timeout = 12.0 })
   local state_sequence = {}
   local transitions_complete = false
   
   print('Testing SSL connection state transitions...')
   
   local ssl_server = obj.new('netsocket', {
      name = 'SSLStateServer',
      feedback = function(Socket, Client, State)
         table.insert(state_sequence, 'SERVER:' .. State)
         print('[SSL Server] State transition: ' .. State)
         
         if (State == NTC_CONNECTED) then
            -- SSL handshake complete, send test message
            Client.acWrite('SSL_STATE_TEST_COMPLETE')
         end
      end,
      incoming = function(Socket, Client)
         local buffer = string.rep(' ', 1024)
         local err, read_len = Client.acRead(buffer)
         if (err == ERR_Okay) then
            local msg = buffer:sub(1, read_len)
            print('[SSL Server] Received: ' .. msg)
            transitions_complete = true
            proc.signal()
         end
      end,
      port = glPort + 3,
      flags = 'SERVER|SSL'
   })
   
   local ssl_client = obj.new('netsocket', {
      name = 'SSLStateClient',
      feedback = function(Socket, Client, State)
         table.insert(state_sequence, 'CLIENT:' .. State)
         print('[SSL Client] State transition: ' .. State)
      end,
      incoming = function(Socket, Script)
         local buffer = string.rep(' ', 1024)
         local err, read_len = Socket.acRead(buffer)
         if (err == ERR_Okay) then
            local msg = buffer:sub(1, read_len)
            print('[SSL Client] Received: ' .. msg)
            -- Acknowledge completion
            Socket.acWrite('SSL_STATES_VERIFIED')
         end
      end,
      flags = 'SSL'
   })
   
   ssl_client.mtConnect('127.0.0.1', glPort + 3)
   
   local err = proc.sleep()
   assert(err == ERR_Okay, 'SSL state transitions test failed: ' .. mSys.GetErrorMsg(err))
   
   -- Analyze state transitions
   print('SSL State Sequence:')
   for i, state in ipairs(state_sequence) do
      print('  ' .. i .. '. ' .. state)
   end
   
   -- Verify expected SSL states occurred
   local found_ssl_connecting = false
   local found_ssl_connected = false
   
   for i, state in ipairs(state_sequence) do
      if (string.match(state, 'CONNECTING_SSL')) then
         found_ssl_connecting = true
      elseif (string.match(state, 'CONNECTED')) then
         found_ssl_connected = true
      end
   end
   
   assert(found_ssl_connected, 'SSL CONNECTED state not observed')
   -- Note: CONNECTING_SSL might be very brief and not always captured
   
   assert(transitions_complete, 'SSL state transition test did not complete')
   
   print('SSL state transitions test completed successfully!')
end

-----------------------------------------------------------------------------------------------------------------------

function testSSLDataIntegrity()
   if (!checkSSLSupported()) then
      print('[SSL] Skipping SSL data integrity test - SSL not supported')
      return
   end
   
   local proc = processing.new({ timeout = 10.0 })
   local test_messages = {
      'Binary data: ' .. string.char(0, 1, 2, 3, 255, 254, 253),
      string.rep('Large SSL message ', 500), -- ~9KB message
      'Special chars: àáâãäåæçèéêë',
      'JSON: {"encrypted": true, "secure": "data"}',
      'Empty message test: '
   }
   local messages_verified = 0
   
   print('Testing SSL data integrity with various message types...')
   
   local ssl_server = obj.new('netsocket', {
      name = 'SSLIntegrityServer',
      messageIndex = 1,
      feedback = function(Socket, Client, State)
         if (State == NTC_CONNECTED) then
            -- Send first test message
            local msg = test_messages[Socket.messageIndex]
            print('[SSL Server] Sending message ' .. Socket.messageIndex .. ' (' .. #msg .. ' bytes)')
            Client.acWrite(msg)
         end
      end,
      incoming = function(Socket, Client)
         local buffer = string.rep(' ', 10240) -- Large buffer for big messages
         local err, read_len = Client.acRead(buffer)
         
         if (err == ERR_Okay) then
            local received = buffer:sub(1, read_len)
            local expected = test_messages[Socket.messageIndex]
            
            print('[SSL Server] Received echo ' .. Socket.messageIndex .. ' (' .. read_len .. ' bytes)')
            
            if (received == expected) then
               print('[SSL Server] Message ' .. Socket.messageIndex .. ' integrity verified!')
               messages_verified = messages_verified + 1
               
               Socket.messageIndex = Socket.messageIndex + 1
               if (Socket.messageIndex <= #test_messages) then
                  -- Send next message
                  local next_msg = test_messages[Socket.messageIndex]
                  print('[SSL Server] Sending message ' .. Socket.messageIndex .. ' (' .. #next_msg .. ' bytes)')
                  Client.acWrite(next_msg)
               else
                  print('[SSL Server] All messages verified successfully!')
                  proc.signal()
               end
            else
               error('[SSL Server] Message integrity failed for message ' .. Socket.messageIndex)
            end
         end
      end,
      port = glPort + 4,
      flags = 'SERVER|SSL'
   })
   
   local ssl_client = obj.new('netsocket', {
      name = 'SSLIntegrityClient',
      incoming = function(Socket, Script)
         local buffer = string.rep(' ', 10240)
         local err, read_len = Socket.acRead(buffer)
         
         if (err == ERR_Okay) then
            local msg = buffer:sub(1, read_len)
            print('[SSL Client] Received message (' .. read_len .. ' bytes), echoing back...')
            
            -- Echo back exactly what was received
            local err, len = Socket.acWrite(msg)
            assert(err == ERR_Okay, 'Failed to echo SSL message: ' .. mSys.GetErrorMsg(err))
         end
      end,
      flags = 'SSL'
   })
   
   ssl_client.mtConnect('127.0.0.1', glPort + 4)
   
   local err = proc.sleep()
   assert(err == ERR_Okay, 'SSL data integrity test failed: ' .. mSys.GetErrorMsg(err))
   
   assert(messages_verified == #test_messages,
      'Not all messages verified. Expected: ' .. #test_messages .. ', Verified: ' .. messages_verified)
   
   print('SSL data integrity test completed successfully!')
   print('Verified ' .. messages_verified .. ' different message types over SSL')
end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = { 
         'testBasicSSLCommunication',
         'testSSLErrorConditions', 
         'testSSLStateTransitions',
         'testSSLDataIntegrity'
      },
      init = function()
         glSSLSupported = false
         print('[SSL] Initializing SSL communication tests...')
      end,
      cleanup = function()
         glSSLSupported = false
         glSSLTestData = nil
      end
   }