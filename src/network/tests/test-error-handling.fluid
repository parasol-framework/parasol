--[[
Error Handling and Edge Cases Test

This test verifies robust error handling and edge case management in the Network module:

- Connection failures and invalid addresses
- Port conflicts and binding errors  
- Buffer overflow scenarios and queue limits
- NTE_CLOSE message handling
- Network timeouts and disconnection scenarios
- Resource cleanup under error conditions
- Graceful degradation and recovery
- Invalid parameter handling

The test focuses on ensuring the network stack fails gracefully and provides
meaningful error reporting while maintaining system stability.
--]]

   include 'network'

   glPort = 8304
   glErrorScenarios = {}
   glTestResults = {}

function printableState(State)
   if (State == NTC_CONNECTED) then return 'CONNECTED'
   elseif (State == NTC_CONNECTING) then return 'CONNECTING'
   elseif (State == NTC_DISCONNECTED) then return 'DISCONNECTED'
   elseif (State == NTC_HANDSHAKING) then return 'HANDSHAKING'
   else return tostring(State) end
end

-----------------------------------------------------------------------------------------------------------------------

function testConnectionFailures()
   local proc = processing.new({ timeout = 2.0 })
   
   print('Testing connection failure scenarios...')
   
   -- Test 1: Invalid IP address
   print('[Test 1] Testing connection to invalid IP address...')
   local client1 = obj.new('netsocket', {
      name = 'InvalidIPClient',
      feedback = function(Socket, Client, State)
         print('[Client1] State: ' .. State)
         if (State == NTC_DISCONNECTED) then
            table.insert(glTestResults, 'invalid_ip_handled')
         end
      end
   })
   
   local err = client1.mtConnect('999.999.999.999', 80)
   if (err != ERR_Okay) then
      print('[Client1] Connection correctly failed: ' .. mSys.GetErrorMsg(err))
      table.insert(glTestResults, 'invalid_ip_rejected')
   end
   
   -- Test 2: Connection to non-existent port
   print('[Test 2] Testing connection to closed port...')
   local client2 = obj.new('netsocket', {
      name = 'ClosedPortClient',
      feedback = function(Socket, State)
         print('[Client2] State: ' .. State)
         if (State == NTC_DISCONNECTED) then
            table.insert(glTestResults, 'closed_port_handled')
         end
      end
   })
   
   local err = client2.mtConnect('127.0.0.1', 65432) -- Unlikely to be in use
   if (err != ERR_Okay) then
      print('[Client2] Connection to closed port correctly failed: ' .. mSys.GetErrorMsg(err))
      table.insert(glTestResults, 'closed_port_rejected')
   end
   
   -- Test 3: Port conflict (two servers on same port)
   print('[Test 3] Testing port binding conflicts...')
   local server1 = obj.new('netsocket', {
      name = 'FirstServer',
      port = glPort,
      flags = 'SERVER'
   })
   
   assert(server1, 'Failed to create first server')
   
   local server2
   catch(function()
       server2 = obj.new('netsocket', {
          name = 'ConflictServer',
          port = glPort, -- Same port
          flags = 'SERVER'
       })
   end)

   if (server2 and server2.error != ERR_Okay) then
      print('[Test3] Port conflict correctly detected: ' .. mSys.GetErrorMsg(server2.error))
      table.insert(glTestResults, 'port_conflict_detected')
   elseif (not server2) then
      print('[Test3] Second server creation failed as expected')
      table.insert(glTestResults, 'port_conflict_prevented')
   end
   
   processing.sleep(1.0) -- Allow time for async operations
   
   -- Verify error handling results
   local expected_results = { 'invalid_ip_rejected', 'closed_port_rejected', 'port_conflict_detected' }
   for i, expected in ipairs(expected_results) do
      local found = false
      for j, result in ipairs(glTestResults) do
         if (result == expected or string.match(result, expected)) then
            found = true
            break
         end
      end
      if not found then
         print('Warning: Expected result "' .. expected .. '" not found')
      end
   end
   
   print('Connection failure tests completed with ' .. #glTestResults .. ' results recorded')
end

-----------------------------------------------------------------------------------------------------------------------

function testBufferOverflowHandling()
   local proc = processing.new({ timeout = 10.0 })
   local overflow_handled = false
   
   print('Testing buffer overflow scenarios...')
   
   local server = obj.new('netsocket', {
      name = 'OverflowTestServer',
      feedback = function(Socket, Client, State)
         if (State == NTC_CONNECTED) then
            print('[Server] Client connected, sending large data burst...')
            
            -- Send multiple large messages rapidly to test buffer limits
            for i = 1, 10 do
               local large_msg = string.rep('OVERFLOW_TEST_DATA_', 1000) -- ~18KB per message
               local err, len = Client.acWrite(large_msg)
               if (err != ERR_Okay) then
                  print('[Server] Write failed at message ' .. i .. ': ' .. mSys.GetErrorMsg(err))
                  if (err == ERR_BufferOverflow or err == ERR_ResourceUnavailable) then
                     print('[Server] Buffer overflow correctly detected and handled')
                     overflow_handled = true
                     proc.signal()
                     return
                  end
               end
            end
            
            print('[Server] All large messages sent (may indicate good buffer management)')
         end
      end,
      incoming = function(Socket, Client)
         -- Don't read data to force buffer buildup
         print('[Server] Data available but not reading (simulating slow consumer)')
      end,
      port = glPort + 1,
      flags = 'SERVER'
   })
   
   local client = obj.new('netsocket', {
      name = 'OverflowTestClient',
      feedback = function(Socket, State)
         if (State == NTC_CONNECTED) then
            print('[Client] Connected, waiting for server data...')
         elseif (State == NTC_DISCONNECTED) then
            print('[Client] Disconnected - may indicate buffer overflow handling')
            overflow_handled = true
            proc.signal()
         end
      end,
      incoming = function(Socket)
         -- Simulate slow reading to cause server buffer buildup
         processing.sleep(0.5, false)
         local buffer = string.alloc(1024)
         local err, read_len = Socket.acRead(buffer)
         if (err != ERR_Okay) then
            print('[Client] Read error: ' .. mSys.GetErrorMsg(err))
            if (err == ERR_BufferOverflow) then
               overflow_handled = true
               proc.signal()
            end
         else
            print('[Client] Read ' .. read_len .. ' bytes')
         end
      end
   })
   
   client.mtConnect('127.0.0.1', glPort + 1)
   
   local err = proc.sleep()
   -- Note: This test may timeout if buffers are very large, which is also acceptable
   if (err == ERR_TimeOut) then
      print('[Test] Timeout occurred - may indicate good buffer capacity')
   else
      assert(err == ERR_Okay, 'Buffer overflow test failed: ' .. mSys.GetErrorMsg(err))
   end
   
   print('Buffer overflow handling test completed')
end

-----------------------------------------------------------------------------------------------------------------------

function testNetworkTimeouts()
   local proc = processing.new({ timeout = 8.0 })
   local timeout_handled = false
   
   print('Testing network timeout scenarios...')
   
   -- Create client with very short timeout expectation
   local client = obj.new('netsocket', {
      name = 'TimeoutTestClient',
      feedback = function(Socket, State)
         print('[Client] State: ' .. State)
         if (State == NTC_DISCONNECTED) then
            print('[Client] Disconnection detected')
            timeout_handled = true
            proc.signal()
         end
      end
   })
   
   -- Try to connect to a routable but non-responsive address
   -- Using a reserved test address that should timeout
   print('[Client] Attempting connection to timeout address...')
   local err = client.mtConnect('10.255.255.1', 80) -- Reserved test IP
   
   if (err != ERR_Okay) then
      print('[Client] Connection immediately failed: ' .. mSys.GetErrorMsg(err))
      timeout_handled = true
   else
      print('[Client] Connection attempt started, waiting for timeout...')
      -- Wait for timeout or disconnect
      local err = proc.sleep(1.0) -- Allow time for timeout
      if (err == ERR_TimeOut) then
         print('[Client] Test timeout reached - checking connection state')
         timeout_handled = true
      end
   end
   
   assert(timeout_handled, 'Timeout handling test did not complete as expected')
   print('Network timeout test completed successfully!')
end

-----------------------------------------------------------------------------------------------------------------------

function testNTECloseHandling()
   local proc = processing.new({ timeout = 8.0 })
   local close_handled = false
   
   print('Testing NTE_CLOSE message handling (recent fix)...')
   
   local server = obj.new('netsocket', {
      name = 'CloseTestServer',
      feedback = function(Socket, Client, State)
         if (State == NTC_CONNECTED) then
            print('[Server] Client connected')
            -- Send a message then immediately close
            local err, len = Client.acWrite('CLOSE_TEST_MESSAGE')
            assert(err == ERR_Okay, 'Failed to send close test message')
            
            -- Force close to trigger NTE_CLOSE handling
            print('[Server] Forcibly closing client connection...')
            Socket.mtDisconnectSocket(Client)
            
         elseif (State == NTC_DISCONNECTED) then
            print('[Server] Client disconnect confirmed')
            close_handled = true
            proc.signal()
         end
      end,
      incoming = function(Socket, Client)
         local buffer = string.alloc(1024)
         local err, read_len = Client.acRead(buffer)
         if (err == ERR_Okay) then
            print('[Server] Received: ' .. buffer:sub(1, read_len))
         else
            print('[Server] Read error during close: ' .. mSys.GetErrorMsg(err))
         end
      end,
      port = glPort + 2,
      flags = 'SERVER'
   })
   
   local client = obj.new('netsocket', {
      name = 'CloseTestClient',
      feedback = function(Socket, State)
         print('[Client] State: ' .. State)
         if (State == NTC_DISCONNECTED) then
            print('[Client] Received close notification')
            close_handled = true
            proc.signal()
         end
      end,
      incoming = function(Socket)
         local buffer = string.alloc(1024)
         local err, read_len = Socket.acRead(buffer)
         if (err == ERR_Okay) then
            print('[Client] Received: ' .. buffer:sub(1, read_len))
         else
            print('[Client] Read error (expected during close): ' .. mSys.GetErrorMsg(err))
            if (err == ERR_Disconnected or err == ERR_Failed) then
               close_handled = true
               proc.signal()
            end
         end
      end
   })
   
   client.mtConnect('127.0.0.1', glPort + 2)
   
   local err = proc.sleep()
   assert(err == ERR_Okay, 'NTE_CLOSE handling test failed: ' .. mSys.GetErrorMsg(err))
   assert(close_handled, 'Close handling was not properly detected')
   
   print('NTE_CLOSE handling test completed successfully!')
end

-----------------------------------------------------------------------------------------------------------------------

function testInvalidParameters()
   print('Testing invalid parameter handling...')
   
   -- Test invalid socket creation parameters
   local invalid_socket = obj.new('netsocket', {
      port = -1, -- Invalid port
      flags = 'INVALID_FLAG' -- Invalid flag
   })
   
   if (invalid_socket and invalid_socket.error != ERR_Okay) then
      print('[Test] Invalid socket parameters correctly rejected: ' .. mSys.GetErrorMsg(invalid_socket.error))
   elseif (not invalid_socket) then
      print('[Test] Invalid socket creation correctly failed')
   end
   
   -- Test invalid connection parameters
   local client = obj.new('netsocket', { name = 'InvalidParamClient' })
   if (client) then
      local err = client.mtConnect('', 0) -- Empty address, invalid port
      if (err != ERR_Okay) then
         print('[Test] Invalid connection parameters correctly rejected: ' .. mSys.GetErrorMsg(err))
      end
      
      local err = client.mtConnect(nil, 80) -- Nil address
      if (err != ERR_Okay) then
         print('[Test] Nil address correctly rejected: ' .. mSys.GetErrorMsg(err))
      end
   end
   
   print('Invalid parameter tests completed')
end

-----------------------------------------------------------------------------------------------------------------------

function testResourceCleanup()
   local proc = processing.new({ timeout = 5.0 })
   
   print('Testing resource cleanup under error conditions...')
   
   -- Create and destroy multiple sockets rapidly to test cleanup
   -- (puts pressure on threaded socket closures)

   for i = 1, 100 do
      local server = obj.new('netsocket', {
         name = 'CleanupTestServer' .. i,
         port = glPort + 100 + i,
         flags = 'SERVER'
      })
      
      local client = obj.new('netsocket', {
         name = 'CleanupTestClient' .. i
      })
      
      if (server and client) then
         client.mtConnect('127.0.0.1', glPort + 100 + i)
      end
   end
   
   collectgarbage()
   
   print('Resource cleanup test completed')
end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = { 
         'testConnectionFailures',
         --'testBufferOverflowHandling',
         'testNetworkTimeouts', 
         'testNTECloseHandling',
         'testInvalidParameters',
         'testResourceCleanup'
      },
      cleanup = function()
         glErrorScenarios = {}
         glTestResults = {}
      end
   }