--[[
Client-Server Network Communications test.  Creates a server socket and then starts client sockets to connect to itself.

1. Client initiates connection to server
2. Server responds to the connection with 'Hello from the server'
3. Client responds with 'Reply from the client'
4. Server prints the received message.
--]]

   include 'network'
   
   glTestSteps = 0
   glExpectedSteps = 6
   glServerData = nil
   glClientData = nil

   glPort = 8206
   glTestCompleted = false

-----------------------------------------------------------------------------------------------------------------------

function testClientServer()
   local proc = processing.new({ timeout = 5.0 })

   print('Creating server socket.')

   local sockServer = obj.new('netsocket', {
      name = 'Server',
      feedback = function(Socket, Client, State)
         if (State == NTC_CONNECTED) then
            local err, len = Client.acWrite('Hello from the server')
            assert(err == ERR_Okay, '[Server] Failed to send message to the client: ' .. mSys.GetErrorMsg(err))
         end
      end,
      incoming = function(Socket, Client)
         assert(Socket, 'Socket parameter not defined.')
         local buffer = string.alloc(1024)
         local err, read_len = Client.acRead(buffer)
         assert(err == ERR_Okay, 'Failed to read data from client, error: ' .. mSys.GetErrorMsg(err))
         local msg = buffer:sub(1,read_len)
         print('[Server] Received: ' .. msg)
         if (string.match(msg, 'Reply.*')) then
            glTestCompleted = true
            proc.signal()
         end
      end,
      port  = glPort,
      flags = 'SERVER|MULTICONNECT'
   } )

   print('Creating client socket.')

   local clientSocket = obj.new('netsocket', {
      name = 'Client',
      feedback = function(Socket, Client, State)
         assert(Socket, 'Socket parameter not defined.')
         if (State == NTC_CONNECTED) then
            print('[Client] Writing hello message to the server...')
            local err, len = Socket.acWrite('Hello from the client.')
            assert(err == ERR_Okay, '[Client] Failed to write chars, error: ' .. mSys.GetErrorMsg(err))
         end
      end,
      incoming = function(Socket, Script)
         local buffer = string.alloc(1024)
         local err, read_len = Socket.acRead(buffer)
         assert(err == ERR_Okay, '[Client] Failed to read data from the socket.')
         print('[Client] Received: ' .. buffer:sub(1,read_len))
         local err, len = Socket.acWrite('Reply from the client.')
      end
   } )

   print('Connecting client to the server...')

   if (clientSocket.mtConnect('127.0.0.1', glPort) != ERR_Okay) then error('Failed to connect to server.') end
   local err = proc.sleep()
   assert(err == ERR_Okay, 'Failed to complete the test: ' .. mSys.GetErrorMsg(err))
   assert(glTestCompleted, 'The test did not complete the steps as expected.')
end

-----------------------------------------------------------------------------------------------------------------------

function testBasicCommunication()
   local proc = processing.new({ timeout = 10.0 })

   print('Starting basic client-server communication test on port ' .. glPort)

   -- Create server socket with comprehensive message handling
   local sockServer = obj.new('netsocket', {
      name = 'BasicTestServer',
      feedback = function(Socket, Client, State)
         print('[Server] Client state change: ' .. State)
         if (State == NTC_CONNECTED) then
            print('[Server] Client connected, sending welcome message...')
            local err, len = Client.acWrite('WELCOME:Server ready for communication')
            assert(err == ERR_Okay, '[Server] Failed to send welcome message: ' .. mSys.GetErrorMsg(err))
            glTestSteps = glTestSteps + 1
         elseif (State == NTC_DISCONNECTED) then
            print('[Server] Client disconnected')
            glTestSteps = glTestSteps + 1
            if (glTestSteps >= glExpectedSteps) then
               proc.signal()
            end
         end
      end,
      incoming = function(Socket, Client)
         local buffer = string.alloc(2048)
         local err, read_len = Client.acRead(buffer)
         if (err != ERR_Okay) then
            proc.signal()
            error('[Server] Failed to read data from client: ' .. mSys.GetErrorMsg(err))
         end

         local msg = buffer:sub(1, read_len)
         print('[Server] Received: ' .. msg)

         if (string.match(msg, 'ACK:WELCOME')) then
            print('[Server] Client acknowledged welcome, requesting data...')
            local err, len = Client.acWrite('REQUEST:Send your test data')
            assert(err == ERR_Okay, '[Server] Failed to send data request: ' .. mSys.GetErrorMsg(err))
            glTestSteps = glTestSteps + 1

         elseif (string.match(msg, 'DATA:')) then
            local data = string.match(msg, 'DATA:(.*)')
            glServerData = data
            print('[Server] Received data: ' .. data)
            local err, len = Client.acWrite('CONFIRM:Data received successfully')
            assert(err == ERR_Okay, '[Server] Failed to send confirmation: ' .. mSys.GetErrorMsg(err))
            glTestSteps = glTestSteps + 1

         elseif (string.match(msg, 'COMPLETE:')) then
            print('[Server] Client signaled completion')
            glTestSteps = glTestSteps + 1
         end
      end,
      port = glPort,
      flags = 'SERVER|MULTICONNECT'
   })

   assert(sockServer, 'Failed to create server socket')
   print('[Server] Created and listening on port ' .. glPort)

   -- Create client socket with state-aware message handling
   local clientSocket = obj.new('netsocket', {
      name = 'BasicTestClient',
      feedback = function(Socket, Client, State)
         print('[Client] Connection state: ' .. State)
         if (State == NTC_CONNECTED) then
            print('[Client] Connected to server, waiting for welcome...')
         elseif (State == NTC_DISCONNECTED) then
            print('[Client] Disconnected from server')
         end
      end,
      incoming = function(Socket, Script)
         local buffer = string.alloc(2048)
         local err, read_len = Socket.acRead(buffer)
         assert(err == ERR_Okay, '[Client] Failed to read data from server: ' .. mSys.GetErrorMsg(err))

         local msg = buffer:sub(1, read_len)
         print('[Client] Received: ' .. msg)

         if (string.match(msg, 'WELCOME:')) then
            print('[Client] Received welcome, sending acknowledgment...')
            local err, len = Socket.acWrite('ACK:WELCOME received, client ready')
            assert(err == ERR_Okay, '[Client] Failed to send acknowledgment: ' .. mSys.GetErrorMsg(err))
            glTestSteps = glTestSteps + 1

         elseif (string.match(msg, 'REQUEST:')) then
            print('[Client] Received data request, sending test data...')
            glClientData = 'TestPayload123'
            local err, len = Socket.acWrite('DATA:' .. glClientData)
            assert(err == ERR_Okay, '[Client] Failed to send data: ' .. mSys.GetErrorMsg(err))

         elseif (string.match(msg, 'CONFIRM:')) then
            print('[Client] Server confirmed data receipt, completing test...')
            local err, len = Socket.acWrite('COMPLETE:Test finished')
            assert(err == ERR_Okay, '[Client] Failed to send completion: ' .. mSys.GetErrorMsg(err))
            raise(ERR_Terminate)
         end
      end
   })

   assert(clientSocket, 'Failed to create client socket')

   print('[Client] Attempting connection to server...')
   local err = clientSocket.mtConnect('127.0.0.1', glPort)
   assert(err == ERR_Okay, '[Client] Failed to connect to server: ' .. mSys.GetErrorMsg(err))

   -- Wait for test completion with timeout

   local err = proc.sleep(5)
   assert(err == ERR_Okay, 'Test failed to complete: ' .. mSys.GetErrorMsg(err))

   -- Verify test completion and data integrity
   assert(glTestSteps >= glExpectedSteps,
      'Test did not complete all steps. Expected: ' .. glExpectedSteps .. ', Actual: ' .. glTestSteps)

   assert(glServerData == glClientData and glServerData != nil,
      'Data integrity check failed. Expected: ' .. nz(glClientData, 'nil') .. ', Received: ' .. nz(glServerData, 'nil'))

   print('Basic communication test completed successfully!')
   print('Steps completed: ' .. glTestSteps .. '/' .. glExpectedSteps)
   print('Data verified: ' .. glServerData)
end

-----------------------------------------------------------------------------------------------------------------------

function testConnectionStates()
   local proc = processing.new({ timeout = 5.0 })
   local stateChanges = {}

   print('Testing connection state transitions...')

   local server = obj.new('netsocket', {
      name = 'StateTestServer',
      feedback = function(Socket, Client, State)
         print('Server received state change.')
         table.insert(stateChanges, 'SERVER_CLIENT_' .. State)
      end,
      port = glPort + 1,
      flags = 'SERVER'
   })

   local client = obj.new('netsocket', {
      name = 'StateTestClient',
      feedback = function(Socket, Client, State)
         print('Client received state change.')
         table.insert(stateChanges, 'CLIENT_' .. State)
         if (State == NTC_CONNECTED) then
            proc.signal()
         end
      end
   })

   client.mtConnect('127.0.0.1', glPort + 1)
   local err = proc.sleep()
   assert(err == ERR_Okay, 'Connection state test failed: ' .. mSys.GetErrorMsg(err))

   -- Verify expected state transitions occurred
   assert(#stateChanges >= 2, 'Expected at least 2 state changes, got: ' .. #stateChanges)

   local foundClientConnected = false
   local foundServerConnected = false
   for i, state in ipairs(stateChanges) do
      print('State change ' .. i .. ': ' .. state)
      if (string.match(state, 'CLIENT.*' .. NTC_CONNECTED)) then foundClientConnected = true end
      if (string.match(state, 'SERVER.*' .. NTC_CONNECTED)) then foundServerConnected = true end
   end

   assert(foundClientConnected, 'Client connection state change not detected')
   assert(foundServerConnected, 'Server client connection state change not detected')

   print('Connection state test completed successfully!')
end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = { 'testClientServer', 'testBasicCommunication', 'testConnectionStates' },
      cleanup = function()
         glTestSteps = 0
         glServerData = nil
         glClientData = nil
      end
   }
