--$FLUID:Include

module({ name='XQuery', src='xquery.cpp', copyright='Paul Manias Â© 2025', version=1.0, timestamp=20240611 }, function()
  c_include('<parasol/modules/xml.h>')
  cpp_include('<functional>', '<optional>', '<sstream>', '<parasol/strings.hpp>')

enum('XQueryNodeType', { type='int', start=0 },
   -- Location path components
   'LOCATION_PATH',
   'STEP',
   'NODE_TEST',
   'PREDICATE',
   'ROOT',

   -- Expressions
   'EXPRESSION',
   'FILTER',
   'BINARY_OP',
   'UNARY_OP',
   'CAST_EXPRESSION',
   'CONDITIONAL',
   'FOR_EXPRESSION',
   'FOR_BINDING',
   'LET_EXPRESSION',
   'LET_BINDING',
   -- FLWOR clauses are emitted in declaration order so the evaluator can stream them without reordering.
   'FLWOR_EXPRESSION',
   'WHERE_CLAUSE',
   'GROUP_CLAUSE',
   'GROUP_KEY',
   'ORDER_CLAUSE',
   'ORDER_SPEC',
   'COUNT_CLAUSE',
   'QUANTIFIED_EXPRESSION',
   'QUANTIFIED_BINDING',
   'FUNCTION_CALL',
   'LITERAL',
   'VARIABLE_REFERENCE',

   -- Node tests
   'NAME_TEST',
   'NODE_TYPE_TEST',
   'PROCESSING_INSTRUCTION_TEST',
   'WILDCARD',

   -- Axes
   'AXIS_SPECIFIER',

   -- Union / set expressions
   'UNION',

   -- Primary expressions
   'NUMBER',
   'STRING',
   'PATH',

   -- Constructor expressions
   'DIRECT_ELEMENT_CONSTRUCTOR',
   'DIRECT_ATTRIBUTE_CONSTRUCTOR',
   'DIRECT_TEXT_CONSTRUCTOR',
   'COMPUTED_ELEMENT_CONSTRUCTOR',
   'COMPUTED_ATTRIBUTE_CONSTRUCTOR',
   'TEXT_CONSTRUCTOR',
   'COMMENT_CONSTRUCTOR',
   'PI_CONSTRUCTOR',
   'DOCUMENT_CONSTRUCTOR',
   'CONSTRUCTOR_CONTENT',
   'ATTRIBUTE_VALUE_TEMPLATE',
   'EMPTY_SEQUENCE',
   'INSTANCE_OF_EXPRESSION',
   'TREAT_AS_EXPRESSION',
   'CASTABLE_EXPRESSION',
   'TYPESWITCH_EXPRESSION',
   'TYPESWITCH_CASE',
   'TYPESWITCH_DEFAULT_CASE')
   
  flags('XQF', { comment='Flags indicating the features of a compiled XQuery expression.' },
    'XPATH: The expression is an XPath location string.',
    'HAS_PROLOG: The XQuery declares a prolog.',
    'LIBRARY_MODULE: Prolog declares a module namespace (library module).',
    'MODULE_IMPORTS: One or more module imports are declared.',
    'DEFAULT_FUNCTION_NS: Default function namespace declared.',
    'DEFAULT_ELEMENT_NS: Default element namespace declared.',
    'BASE_URI_DECLARED: Static base URI declared.',
    'DEFAULT_COLLATION_DECLARED: Default collation declared.',
    'BOUNDARY_PRESERVE: Boundary-space preserve mode.',
    'CONSTRUCTION_PRESERVE: Construction preserve mode.',
    'ORDERING_UNORDERED: Ordering mode is unordered.',
    'HAS_WILDCARD_TESTS: Wildcard name tests present.'
  )

  methods('xquery', 'XQ', {
    { id=1, name='Evaluate' },
    { id=2, name='Search' }
  })

  class('XQuery', { 
    src='xquery_class.cpp', output='xquery_class_def.cpp', references={ 'XQF' }, 
    comment='Provides an interface for XQuery evaluation and execution.' }, [[
  ]])

  functionNames('xq',
     'UnitTest')
end)
