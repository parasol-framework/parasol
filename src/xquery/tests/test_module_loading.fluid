-- XQuery module loading integration tests

   include 'xml'

-----------------------------------------------------------------------------------------------------------------------
-- Basic module import and function call

function testBasicModuleImport()
   local xml = obj.new('xml', { statement = '<root/>', path=glScriptFolder })

   -- Initial verification of module file existence and that it is compilable

   local mod_content = file.readAll(glScriptFolder .. '/modules/math_utils.xq')
   assert(mod_content, 'Module file not found: modules/math_utils.xq')

   -- Prove the module is compilable on its own

   local compiled_mod = obj.new('xquery', { statement = mod_content })

   -- Test the ability to import the module and run it

   local query = [[
      import module namespace math = "http://example.com/math"
         at "modules/math_utils.xq";

      math:square(5)
   ]]

   local err, result = xml.mtEvaluate(query)
   assert(err == ERR_Okay, 'Module import compilation failed: ' .. tostring(xml.errorMsg))
   assert(tonumber(result) == 25, 'Should compute 5^2 = 25, got ' .. tostring(result))
end

-----------------------------------------------------------------------------------------------------------------------
-- Return multiple results from more than one function

function testMultipleFunctions()
   local xml = obj.new('xml', { statement = '<root/>', path=glScriptFolder })

   local query = [[
      import module namespace math = "http://example.com/math"
         at "modules/math_utils.xq";

      (math:square(3), math:cube(2))
   ]]

   local err, result = xml.mtEvaluate(query)
   assert(err == ERR_Okay, 'Multiple function calls failed: ' .. tostring(xml.errorMsg))
   -- Result should be a sequence: "9:8" or similar representation
   local result_str = tostring(result)
   assert(string.find(result_str, '9', 1, true) and string.find(result_str, '8', 1, true),
      'Should return both 3^2=9 and 2^3=8, got ' .. result_str)
end

-----------------------------------------------------------------------------------------------------------------------
-- Access module variables

function testModuleVariables()
   local xml = obj.new('xml', { statement = '<root/>', path=glScriptFolder })

   local query = [[
      import module namespace math = "http://example.com/math"
         at "modules/math_utils.xq";

      $math:pi
   ]]

   local err, result = xml.mtEvaluate(query)
   assert(err == ERR_Okay, 'Module variable access failed: ' .. tostring(xml.errorMsg))
   local pi_value = tonumber(result)
   assert(pi_value and math.abs(pi_value - 3.14159) < 0.00001, 'Should return pi value 3.14159, got ' .. tostring(result))
end

-----------------------------------------------------------------------------------------------------------------------
-- Import and use multiple modules

function testMultipleModuleImports()
   local xml = obj.new('xml', { statement = '<root/>', path=glScriptFolder })

   -- First, ensure the built-in function fn:upper-case is available
   local err, builtin = xml.mtEvaluate('fn:upper-case("hello")')
   assert((err == ERR_Okay) and (tostring(builtin) == 'HELLO'), 'Built-in function fn:upper-case not available')

   local query = [[
      import module namespace math = "http://example.com/math"
         at "modules/math_utils.xq";
      import module namespace str = "http://example.com/strings"
         at "modules/string_utils.xq";

      (math:square(4), str:uppercase("hello"))
   ]]

   local err, result = xml.mtEvaluate(query)
   assert(err == ERR_Okay, 'Multiple module imports failed: ' .. tostring(xml.errorMsg))
   local result_str = tostring(result)
   assert(string.find(result_str, '16', 1, true) and string.find(result_str, 'HELLO', 1, true),
      'Should return both 16 and HELLO, got ' .. result_str)
end

-----------------------------------------------------------------------------------------------------------------------
-- Module importing other modules (transitive imports)

function testTransitiveImports()
   local xml = obj.new('xml', { statement = '<root/>', path=glScriptFolder })

   local query = [[
      import module namespace comp = "http://example.com/composite"
         at "modules/composite.xq";

      comp:area(10)
   ]]

   local err, result = xml.mtEvaluate(query)
   assert(err == ERR_Okay, 'Transitive module import failed: ' .. tostring(xml.errorMsg))
   -- area(10) = pi * 10^2 = 314.159
   local area = tonumber(result)
   assert(area and math.abs(area - 314.159) < 0.001,
      'Should compute circle area 314.159, got ' .. tostring(result))
end

-----------------------------------------------------------------------------------------------------------------------
-- Module loaded once and cached across queries

function testModuleCaching()
   local xml = obj.new('xml', { statement = '<root/>', path=glScriptFolder })

   -- First query using math module
   local query1 = [[
      import module namespace math = "http://example.com/math"
         at "modules/math_utils.xq";
      math:square(2)
   ]]

   local err1, result1 = xml.mtEvaluate(query1)
   assert(err1 == ERR_Okay, 'First module use failed: ' .. tostring(xml.errorMsg))
   assert(tonumber(result1) == 4, 'First query should return 4, got ' .. tostring(result1))

   -- Second query reusing cached module
   local query2 = [[
      import module namespace math = "http://example.com/math"
         at "modules/math_utils.xq";
      math:cube(2)
   ]]

   local err2, result2 = xml.mtEvaluate(query2)
   assert(err2 == ERR_Okay, 'Cached module use failed: ' .. tostring(xml.errorMsg))
   assert(tonumber(result2) == 8, 'Second query should return 8, got ' .. tostring(result2))
end

-----------------------------------------------------------------------------------------------------------------------
-- Detect circular module dependencies

function testCircularDependencyDetection()
   local xml = obj.new('xml', { statement = '<root/>', path=glScriptFolder })

   local query = [[
      import module namespace a = "http://example.com/circular-a"
         at "modules/circular_a.xq";

      a:call-b()
   ]]

   local err, result = xml.mtEvaluate(query)
   assert(err != ERR_Okay, 'Should detect circular dependency')
   local error_msg = string.lower(tostring(xml.errorMsg))
   assert(string.find(error_msg, 'circular', 1, true), 'Error message should mention circular dependency, got ' .. tostring(xml.errorMsg))
end

-----------------------------------------------------------------------------------------------------------------------
-- Error when module file not found

function testMissingModuleError()
   local xml = obj.new('xml', { statement = '<root/>', path=glScriptFolder })

   local query = [[
      import module namespace missing = "http://example.com/missing"
         at "modules/nonexistent.xq";

      missing:func()
   ]]

   local err, result = xml.mtEvaluate(query)
   assert(err != ERR_Okay, 'Should fail when loading missing module')
   assert(xml.errorMsg != nil and xml.errorMsg != '', 'Should have error message for missing module')
end

-----------------------------------------------------------------------------------------------------------------------
-- Validate module namespace matches import

function testNamespaceValidation()
   local xml = obj.new('xml', { statement = '<root/>', path=glScriptFolder })

   local query = [[
      import module namespace expected = "http://example.com/expected"
         at "modules/bad_namespace.xq";

      expected:test()
   ]]

   local err, result = xml.mtEvaluate(query)
   assert(err != ERR_Okay, 'Should detect namespace mismatch')
   local error_msg = string.lower(tostring(xml.errorMsg))
   assert(string.find(error_msg, 'namespace', 1, true) or string.find(error_msg, 'mismatch', 1, true),
      'Error message should mention namespace issue, got ' .. tostring(xml.errorMsg))
end

-----------------------------------------------------------------------------------------------------------------------
-- Reject non-library modules on import

function testLibraryModuleValidation()
   local xml = obj.new('xml', { statement = '<root/>', path=glScriptFolder })

   local query = [[
      import module namespace main = "http://example.com/main"
         at "modules/main_module.xq";

      main:test()
   ]]

   local err, result = xml.mtEvaluate(query)
   assert(err != ERR_Okay, 'Should reject non-library module')
   local error_msg = string.lower(tostring(xml.errorMsg))
   assert(string.find(error_msg, 'library', 1, true),
      'Error message should mention library module requirement, got ' .. tostring(xml.errorMsg))
end

-----------------------------------------------------------------------------------------------------------------------

return {
   tests = {
      'testBasicModuleImport', 'testMultipleFunctions', 'testModuleVariables',
      'testMultipleModuleImports', 'testTransitiveImports', 'testModuleCaching',
      'testCircularDependencyDetection', 'testMissingModuleError',
      'testNamespaceValidation', 'testLibraryModuleValidation'
   },
   init = function(ScriptFolder)
      glScriptFolder = ScriptFolder
   end,
   cleanup = function()
   end
}
