-- Flute tests for XML

-----------------------------------------------------------------------------------------------------------------------
-- Check that the Tags array works as expected when used in Fluid

function testTagsArray()
   local tags = glXML.tags

   local expected = 2
   assert(#tags == expected, "Expected a tag count of " .. expected)

   expected = 7
   assert(#tags[2].children == expected, "Expected a child count of " .. expected .. " not " .. #tags[2].children)
end

-----------------------------------------------------------------------------------------------------------------------
-- Test XPath reserved words used as element names

function testReservedWordElements()
   -- Test 'and' element
   local err, index = glXML.mtSearch("/book/reservedwords/and")
   assert(err == ERR_Okay, "Failed to find /book/reservedwords/and")

   -- Test 'ascending' element
   err, index = glXML.mtSearch("/book/reservedwords/ascending")
   assert(err == ERR_Okay, "Failed to find /book/reservedwords/ascending")

   -- Test 'default' element
   err, index = glXML.mtSearch("/book/reservedwords/default")
   assert(err == ERR_Okay, "Failed to find /book/reservedwords/default")

   -- Test 'return' element
   err, index = glXML.mtSearch("/book/reservedwords/return")
   assert(err == ERR_Okay, "Failed to find /book/reservedwords/return")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test XPath reserved words used as attribute names

function testReservedWordAttributes()
   -- Test 'or' attribute on 'and' element
   local err, index = glXML.mtSearch("/book/reservedwords/and[@or]")
   assert(err == ERR_Okay, "Failed to find element with @or attribute")

   local err, value = glXML.mtGetAttrib(index, 'or')
   assert(err == ERR_Okay, "Failed to retrieve 'or' attribute")
   assert(value == "not", "Expected 'not', got '" .. tostring(value) .. "'")

   -- Test 'return' attribute on 'default' element
   err, index = glXML.mtSearch("/book/reservedwords/default[@return]")
   assert(err == ERR_Okay, "Failed to find element with @return attribute")

   err, value = glXML.mtGetAttrib(index, 'return')
   assert(err == ERR_Okay, "Failed to retrieve 'return' attribute")
   assert(value == "0", "Expected '0', got '" .. tostring(value) .. "'")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test nested reserved words (element containing reserved word element)

function testNestedReservedWords()
   -- Test 'if' element nested within 'default' element
   local err, index = glXML.mtSearch("/book/reservedwords/default/if")
   assert(err == ERR_Okay, "Failed to find /book/reservedwords/default/if")

   local err, tag = glXML.mtGetTag(index)
   assert(err == ERR_Okay, "Failed to get 'if' tag")
   assert(#tag.children == 1, "Expected 1 child in 'if' element")
   assert(tag.children[1].attribs[1].value == "do this", "Expected 'do this' content")

   -- Test 'else' element nested within 'default' element
   err, index = glXML.mtSearch("/book/reservedwords/default/else")
   assert(err == ERR_Okay, "Failed to find /book/reservedwords/default/else")

   err, tag = glXML.mtGetTag(index)
   assert(err == ERR_Okay, "Failed to get 'else' tag")
   assert(tag.children[1].attribs[1].value == "do that", "Expected 'do that' content")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test content retrieval from reserved word elements

function testReservedWordContent()
   -- Test getting text content from 'ascending' element which contains multiple reserved words
   local err, index = glXML.mtSearch("/book/reservedwords/ascending")
   assert(err == ERR_Okay, "Failed to find /book/reservedwords/ascending")

   local err, tag = glXML.mtGetTag(index)
   assert(err == ERR_Okay, "Failed to get 'ascending' tag")

   local content = tag.children[1].attribs[1].value
   assert(content == "import module group by", "Expected 'import module group by', got '" .. tostring(content) .. "'")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test predicates with reserved words

function testReservedWordPredicates()
   -- Test predicate filtering on reserved word attribute
   local totalFound = 0
   local err, index, taglist = glXML.mtSearch("/book/reservedwords/*[@or='not']", function(XML, TagID, Attrib)
      totalFound = totalFound + 1
   end)
   assert(totalFound == 1, "Expected 1 match for [@or='not'], got " .. totalFound)

   -- Test predicate filtering on reserved word element name with attribute
   totalFound = 0
   err, index, taglist = glXML.mtSearch("/book/reservedwords/default[@return='0']", function(XML, TagID, Attrib)
      totalFound = totalFound + 1
   end)
   assert(totalFound == 1, "Expected 1 match for default[@return='0'], got " .. totalFound)
end

-----------------------------------------------------------------------------------------------------------------------
-- Test wildcard matching with reserved word elements

function testReservedWordWildcard()
   local totalFound = 0
   local err, index, taglist = glXML.mtSearch("/book/reservedwords/*", function(XML, TagID, Attrib)
      totalFound = totalFound + 1
   end)
   assert(totalFound == 8, "Expected 8 reserved word elements, got " .. totalFound)
end

-----------------------------------------------------------------------------------------------------------------------
-- Test descendant axis with reserved words

function testReservedWordDescendant()
   -- Test finding all 'if' elements regardless of depth
   local totalFound = 0
   local err, index, taglist = glXML.mtSearch("//if", function(XML, TagID, Attrib)
      totalFound = totalFound + 1
   end)
   assert(totalFound == 1, "Expected 1 'if' element, got " .. totalFound)

   -- Test finding all elements with 'or' attribute
   totalFound = 0
   err, index, taglist = glXML.mtSearch("//*[@or]", function(XML, TagID, Attrib)
      totalFound = totalFound + 1
   end)
   assert(totalFound == 1, "Expected 1 element with 'or' attribute, got " .. totalFound)
end

-----------------------------------------------------------------------------------------------------------------------
-- Test that reserved words in content don't interfere with parsing

function testReservedWordInContent()
   -- The 'default' element contains mixed content with 'if' and 'else' child elements
   local err, index = glXML.mtSearch("/book/reservedwords/default")
   assert(err == ERR_Okay, "Failed to find /book/reservedwords/default")

   local err, tag = glXML.mtGetTag(index)
   assert(err == ERR_Okay, "Failed to get 'default' tag")

   -- Should have text content "content" plus two child elements (if, else)
   assert(#tag.children == 3, "Expected 3 children (text + 2 elements), got " .. #tag.children)
end

-----------------------------------------------------------------------------------------------------------------------
-- Test FLWOR reserved words as element and attribute names

function testFLWORReservedWords()
   -- Test 'for' element with 'in' attribute
   local err, index = glXML.mtSearch("/book/reservedwords/for[@in]")
   assert(err == ERR_Okay, "Failed to find 'for' element with 'in' attribute")

   local err, value = glXML.mtGetAttrib(index, 'in')
   assert(value == "sequence", "Expected 'sequence', got '" .. tostring(value) .. "'")

   -- Test nested 'let' element with 'order' attribute
   err, index = glXML.mtSearch("/book/reservedwords/for/let[@order]")
   assert(err == ERR_Okay, "Failed to find nested 'let' element with 'order' attribute")

   err, value = glXML.mtGetAttrib(index, 'order')
   assert(value == "ascending", "Expected 'ascending', got '" .. tostring(value) .. "'")

   -- Test 'group' element with 'by' attribute
   err, index = glXML.mtSearch("/book/reservedwords/for/let/group[@by]")
   assert(err == ERR_Okay, "Failed to find 'group' element with 'by' attribute")

   err, value = glXML.mtGetAttrib(index, 'by')
   assert(value == "category", "Expected 'category', got '" .. tostring(value) .. "'")

   -- Test 'return' element with 'where' attribute
   err, index = glXML.mtSearch("/book/reservedwords/return[@where]")
   assert(err == ERR_Okay, "Failed to find 'return' element with 'where' attribute")

   err, value = glXML.mtGetAttrib(index, 'where')
   assert(value == "condition", "Expected 'condition', got '" .. tostring(value) .. "'")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test XQuery quantifier and type reserved words

function testQuantifierTypeReservedWords()
   -- Test 'satisfies' element with 'some' and 'every' attributes
   local err, index = glXML.mtSearch("/book/reservedwords/satisfies[@some][@every]")
   assert(err == ERR_Okay, "Failed to find 'satisfies' element with 'some' and 'every' attributes")

   local err, value = glXML.mtGetAttrib(index, 'some')
   assert(value == "true", "Expected 'true', got '" .. tostring(value) .. "'")

   err, value = glXML.mtGetAttrib(index, 'every')
   assert(value == "false", "Expected 'false', got '" .. tostring(value) .. "'")

   -- Test 'cast' element with 'as' attribute
   err, index = glXML.mtSearch("/book/reservedwords/cast[@as]")
   assert(err == ERR_Okay, "Failed to find 'cast' element with 'as' attribute")

   err, value = glXML.mtGetAttrib(index, 'as')
   assert(value == "string", "Expected 'string', got '" .. tostring(value) .. "'")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test XQuery prolog reserved words

function testPrologReservedWords()
   -- Test 'import' element with 'module' attribute
   local err, index = glXML.mtSearch("/book/reservedwords/import[@module]")
   assert(err == ERR_Okay, "Failed to find 'import' element with 'module' attribute")

   local err, value = glXML.mtGetAttrib(index, 'module')
   assert(value == "test", "Expected 'test', got '" .. tostring(value) .. "'")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test complex paths with multiple reserved words

function testComplexReservedWordPaths()
   -- Test deeply nested path with all reserved words
   local err, index = glXML.mtSearch("/book/reservedwords/for/let/group")
   assert(err == ERR_Okay, "Failed to find deeply nested reserved word path")

   -- Test descendant axis with reserved word
   err, index = glXML.mtSearch("//group[@by='category']")
   assert(err == ERR_Okay, "Failed to find 'group' element via descendant axis")

   -- Test multiple predicates on reserved word elements
   err, index = glXML.mtSearch("/book/reservedwords/satisfies[@some='true'][@every='false']")
   assert(err == ERR_Okay, "Failed to find element with multiple reserved word predicates")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test attribute existence checks with reserved words

function testReservedWordAttributeExistence()
   local totalFound = 0

   -- Find all elements with 'descending' attribute
   local err, index, taglist = glXML.mtSearch("//*[@descending]", function(XML, TagID, Attrib)
      totalFound = totalFound + 1
   end)
   assert(totalFound == 1, "Expected 1 element with 'descending' attribute, got " .. totalFound)

   -- Find all elements with 'by' attribute
   totalFound = 0
   err, index, taglist = glXML.mtSearch("//*[@by]", function(XML, TagID, Attrib)
      totalFound = totalFound + 1
   end)
   assert(totalFound == 1, "Expected 1 element with 'by' attribute, got " .. totalFound)
end

-----------------------------------------------------------------------------------------------------------------------
-- Test the FindTag() and GetTag() methods.

function testIndexing()
   local totalFunctions = 0

   local err, index, taglist = glXML.mtSearch("/book/function", function(XML, TagID, Attrib)
      local err, func = glXML.mtGetTag(TagID)

      if #func.attribs > 0 then
         if func.attribs[1].name != 'function' then
            error("Expected 'function', got '" .. nz(func.attribs[1].name,"NIL") .. "'")
         end
         totalFunctions = totalFunctions + 1
      end
   end)

   if (totalFunctions != 5) then
      error("Expected 5 functions, got " .. totalFunctions)
   end
end

-----------------------------------------------------------------------------------------------------------------------
-- Test the GetAttrib() method

function testGetAttrib()
   local err, index = glXML.mtSearch("/book/function/input/param")
   assert(err == ERR_Okay, "Failed to find /book/function/input/param, error: " .. mSys.GetErrorMsg(err))

   local err, value = glXML.mtGetAttrib(index, 'type')
   assert(err == ERR_Okay, "Failed to retrieve 'type' attribute, error: " .. mSys.GetErrorMsg(err))

   if (value != 'struct rkFont *') then
      error("Tag type value of '" .. value .. "' was not expected.")
   end
end

-----------------------------------------------------------------------------------------------------------------------

function testSerialise()
   local err, str = glXML.mtSerialise(0, XMF_INCLUDE_SIBLINGS)
   assert(err == ERR_Okay, "Serialise() failed.")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test that line number counting works correctly

function testLineCount()
   local xml_content = [[<?xml version="1.0"?>
<root>
   <item>First</item>
   <item>Second</item>
   <item>
      <nested>Value</nested>
   </item>
</root>]]

   local _, newline_count = xml_content:gsub('\n', '')

   local expected_lines = newline_count
   if xml_content:sub(-1) != '\n' then
      expected_lines = expected_lines + 1
   end

   local xml = obj.new("xml", { statement = xml_content })
   assert(xml.lineNo == expected_lines, "Expected line count of " .. expected_lines .. " but got " .. xml.lineNo)
end

-----------------------------------------------------------------------------------------------------------------------

function testSort()
   local err = glXML.mtSort('/book', 'name')
   assert(err == ERR_Okay, 'Attempt to sort failed: ' .. mSys.GetErrorMsg(err))

   local first, last
   local err, index, taglist = glXML.mtSearch("/book/function/name", function(XML, TagID, Attrib)
      local err, func = glXML.mtGetTag(TagID)
      print(func.children[1].attribs[1].value)
      if (not first) then first = func.children[1].attribs[1].value end
      last = func.children[1].attribs[1].value
   end)
   assert(err == ERR_Okay, "FindTag() failed.")

   assert(first == "A.FirstFunction", "List not sorted as expected.")
   assert(last == "Z.LastFunction", "List not sorted as expected.")
end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
         'testTagsArray',
         'testIndexing',
         'testReservedWordElements',
         'testReservedWordAttributes',
         'testNestedReservedWords',
         'testReservedWordContent',
         'testReservedWordPredicates',
         'testReservedWordWildcard',
         'testReservedWordDescendant',
         'testReservedWordInContent',
         'testFLWORReservedWords',
         'testQuantifierTypeReservedWords',
         'testPrologReservedWords',
         'testComplexReservedWordPaths',
         'testReservedWordAttributeExistence',
         'testGetAttrib',
         'testSerialise',
         'testLineCount',
         'testSort'
      },
      init = function(ScriptFolder)
         glXML = obj.new("xml", { path = ScriptFolder .. "../../xml/tests/test.xml" })
      end,
      cleanup = function()
         glXML = nil
      end
   }
