-- $FLUID:persistent
--
-- This test creates a variety of shapes and viewports that accept input.  When the mouse cursor enters an input area,
-- its opacity will increase to indicate that movement has been detected.  You can also drag viewports around the
-- display.
--
-- Be aware that transparency can lead to some confusion as to which vector is the front-most position.

   local mVector = mod.load('vector')

   local COL_VIEWPORT  = 'rgb(0,0,255)'
   local COL_SHAPE = 'rgb(255,0,0)'

   local win  = obj.new('window', { title='Input Hit Testing', insideWidth=800, insideHeight=600 })
   local lScene = win.surface.new('VectorScene', { surface=win.surface })
   local lViewport = lScene.new('VectorViewport', { })

   local vectors = { }

   -- Vectors without transforms

   local vp = lViewport.new('VectorViewport', {
      x=-20, y=-20, width='90', height='90', cursor = 'hand'
   })
   vp.new('VectorRectangle', { x=0, y=0, width='100%', height='100%', fill=COL_VIEWPORT })
   table.insert(vectors, vp)

   table.insert(vectors, lViewport.new('VectorRectangle', { x=130, y=130, width='40', height='40', fill=COL_SHAPE }))

   table.insert(vectors, lViewport.new('VectorEllipse', { cx=400, cy=200, rx='80', ry='100', fill=COL_SHAPE }))

   -- Nested viewport and vectors

   local parent = lViewport.new('VectorViewport', { x=20, y=200, width='200', height='200' })
   parent.new('VectorRectangle', { x=0, y=0, width='100%', height='100%', stroke='rgb(0,0,0)', fill='rgb(0,0,0,20)', strokeWidth=1 })
   parent.mtInputSubscription(JTYPE_BUTTON,
      function(Viewport, Msg)
         print('Button received.')
      end
   )
   local nvp = parent.new('VectorViewport', { x=75, y=25, width=100, height=100 })
   nvp.new('VectorRectangle', { x=0, y=0, width='100%', height='100%', fill=COL_VIEWPORT })
   local subvp = nvp.new('VectorViewport', { x=10, y=10, width=20, height=20 })
   subvp.new('VectorRectangle', { width='100%', height='100%', fill='rgb(0,255,0)' })
   table.insert(vectors, nvp)

   table.insert(vectors, parent.new('VectorRectangle', { x=25, y=95, width=80, height=80, fill=COL_SHAPE }))

   -- Vectors with transforms

   local br = lViewport.new('VectorRectangle', { x=400, y=20, width='90', height='90', fill=COL_SHAPE })
   local err, brt = br.mtNewMatrix()
   mVector.rotate(brt, 45, br.width*0.5, br.height*0.5)
   table.insert(vectors, br)

   local vp = lViewport.new('VectorViewport', { x=200, y=20, width='90', height='90', cursor='hand' })
   vp.new('VectorRectangle', { x=0, y=0, width='100%', height='100%', fill=COL_VIEWPORT })
   local err, mxTransform = vp.mtNewMatrix()
   mVector.translate(mxTransform, vp.width*0.5, vp.height*0.5)
   mVector.rotate(mxTransform, 45, vp.width*0.5, vp.height*0.5)
   mVector.translate(mxTransform, -vp.width*0.5, -vp.height*0.5)
   table.insert(vectors, vp)

   -- Apply a standard input capture to all created vectors

   for _, vector in pairs(vectors) do
      vector.opacity = 0.3
      vector.mtInputSubscription(bit.bor(JTYPE_MOVEMENT, JTYPE_CROSSING), function(Vector, Msg)
         while (Msg) do
            if Msg.type == JET_CROSSED_INTO then
               Vector.opacity = 1.0
            elseif Msg.type == JET_CROSSED_OUT then
               Vector.opacity = 0.2
            end
            Msg = Msg.next
         end
         Vector.acDraw()
      end)

      if (vector.class.className == 'VectorViewport') then
         vector.dragCallback = function(Vector, X, Y)
            Vector.acMoveToPoint(X, Y, 0, bit.bor(MTF_X, MTF_Y))
            Vector.acDraw()
         end
      end
   end

   win.acShow()

   processing.sleep()
