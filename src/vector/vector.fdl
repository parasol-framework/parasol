--$FLUID:Include

module({ name="Vector", copyright="Paul Manias Â© 2010-2022", version=1.0 }, function()
  c_include("<parasol/modules/display.h>")

  restrict(function()
    loadFile(glPath .. 'common-graphics.fdl')
  end)

  flags("ARC", { comment="Options for drawing arcs." },
    "LARGE",
    "SWEEP")

  flags("VF", { comment="Optional flags and indicators for the Vector class." },
     "DISABLED: The vector is disabled and user input should be ignored.",
     "HAS_FOCUS: The vector holds the user's input focus."
     )

  enum("VUNIT", { start=0 },
    "UNDEFINED",
    "BOUNDING_BOX: Coordinates are relative to the object's bounding box.",
    "USERSPACE: Coordinates are relative to the current viewport.",
    "END: Private")

  enum("VSPREAD", { start=0, comment="Spread method options define the method to use for tiling filled graphics." },
    "UNDEFINED: Either the default setting will be applied or the setting will be inherited from a parent object.",
    "PAD: Scale the graphic to the object bounds.",
    "REFLECT: Tile the graphic, reflecting the image alternately on the X and Y axis.",
    "REPEAT: Tile the graphic repeatedly.",
    "REFLECT_X: Tile the graphic, reflecting the image alternately on the X axis only.",
    "REFLECT_Y: Tile the graphic, reflecting the image alternately on the Y axis only.",
    "CLIP: Do not scale the graphic.  Clip it if it extends past imposed boundaries.",
    "END: Private")

  enum("PE", { start=1 }, "Move", "MoveRel", "Line", "LineRel", "HLine", "HLineRel", "VLine", "VLineRel",
    "Curve", "CurveRel", "Smooth", "SmoothRel", "QuadCurve", "QuadCurveRel", "QuadSmooth", "QuadSmoothRel",
    "Arc", "ArcRel", "ClosePath")

  enum("VFR", { start=1, comment="Vector fill rules for the FillRule field in the Vector class." },
    "NON_ZERO: This is the default.  This rule determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a path segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside the path. Otherwise, it is inside.",
    "EVEN_ODD: This rule determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.",
    "INHERIT: The rule is inherited from the parent vector(s).",
    "END: Private")

  enum("VIS", { start=0, comment="Options for the Vector class' Visibility field." },
    "HIDDEN: Hide the vector and its children.",
    "VISIBLE: The default.  Ensures that the vector is visible.",
    "COLLAPSE: Hide the vector and its children.  Do not use - provided for SVG compatibility only.",
    "INHERIT: Inherit the visibility state from the parent.")

  enum("VLJ", { start=0, comment="Options for the look of line joins." }, // Match to agg::line_join_e
    "MITER: The default.  The join will form a pointed edge.",
    "MITER_REVERT",
    "ROUND: The join is rounded.",
    "BEVEL: The join is blunted, eliminating overly sharp edges.",
    "MITER_ROUND: Default to MITER, but switch to ROUND if the miter limit is exceeded.",
    "INHERIT: Inherit the join option from the parent.")

  enum("VLC", { start=1, comment="Line-cap options." }, // Match to agg::line_cap_e
    "BUTT: The default.  The line is sharply squared off at its exact end point.",
    "SQUARE: Similar to butt, the line is sharply squared off but will extend past the end point by 'StrokeWidth / 2'.",
    "ROUND: The line cap is a half-circle and the line's end-point forms the center point.",
    "INHERIT: The cap type is inherited from the parent (defaults to butt if unspecified).")

  enum("VIJ", { start=1, comment="Inner join options for angled lines." },  // Match to agg::inner_join_e
    "BEVEL: Blunts the edge of the join.",
    "MITER: Forms a sharp point at the join.  Typically not the best looking option.",
    "JAG: A special non-SVG option.",
    "ROUND: Rounds the edge of the join to produce the best looking results.",
    "INHERIT: Inherit the parent's join value.")

  enum("VGT", { start=0, comment="VectorGradient options." },
    "LINEAR: A linear gradient is drawn from (X1,Y1) to (X2,Y2).",
    "RADIAL: A radial gradient is drawn from CenterX,CenterY to Radius.  An optional focal point can be expressed with FX and FY.",
    "CONIC: The conic gradient is a variant on the radial type, whereby the colour values are drawn as a line that revolves around the cone's center point.",
    "DIAMOND: A diamond gradient is drawn as a square emanating from the center point.",
    "CONTOUR: Contoured gradients follow the contours of the vector path in which they are rendered.")

  enum("VTS", { start=0, comment="Options for stretching text in VectorText." },
    "INHERIT",
    "NORMAL",
    "WIDER",
    "NARROWER",
    "ULTRA_CONDENSED",
    "EXTRA_CONDENSED",
    "CONDENSED",
    "SEMI_CONDENSED",
    "EXPANDED",
    "SEMI_EXPANDED",
    "ULTRA_EXPANDED",
    "EXTRA_EXPANDED")

  enum("VOF", { comment="Viewport overflow options." },
    "VISIBLE: The content is not clipped to the viewport's boundary.  This is the default.",
    "HIDDEN: All content is clipped to within the viewport's boundary.",
    "SCROLL: All content is clipped to within the viewport's boundary.  A mechanism to scroll the viewport's content may be provided to the user (SVG capability not currently implemented).",
    "INHERIT: The overflow state is inherited from the parent.")

  flags("VTXF", { comment="VectorText flags." },
    "UNDERLINE: Enable underlining of the text.",
    "OVERLINE: Enable overlining of the text.",
    "LINE_THROUGH: Enable a strike-through line in the text.",
    "BLINK: Enable animated blinking (not supported - exists as SVG dummy option).",
    "EDITABLE|EDIT: Allow user editing of the text if the nearest viewport has the focus.",
    "AREA_SELECTED: Automatically set if a region of text has been selected.",
    "NO_SYS_KEYS: Disables support for system-keys that enable common key combinations such as Ctrl-C, Ctrl-X etc.",
    "OVERWRITE: Turns on overwrite mode (if off, insert mode is enabled).")

  flags("VMF", { comment="Morph flags", bits=8 },
    "STRETCH: Applicable when used on VectorText, the stretch option converts glyph outlines into paths, and then all end points and control points will be adjusted to be along the perpendicular vectors from the path, thereby stretching and possibly warping the glyphs.  With this approach, connected glyphs, such as in cursive scripts, will maintain their connections.",
    "AUTO_SPACING: Applicable when used on VectorText, auto-spacing allows the spacing between glyphs to be shrunk or expanded along the target path so that they can produce a better fit.  The default is for the glyphs to conform to their original spacing requirements.",
    "X_MIN: Align the source so that it is morphed along the left of the target path.",
    "X_MID: Align the source so that it is morphed along the middle of the target path.",
    "X_MAX: Align the source so that it is morphed along the right of the target path.",
    "Y_MIN: Align the source so that it is morphed along the top of the target path.",
    "Y_MID: Align the source so that it is morphed along the middle of the target path.",
    "Y_MAX: Align the source so that it is morphed along the bottom of the target path.")

  enum("VCS", { start=1, comment="Colour space options." },
    "SRGB: The default colour-space is sRGB, recommended for its speed.",
    "LINEAR_RGB: Linear RGB is the default colour space for SVG and produces the best results.",
    "INHERIT: Inherit the colour space option from the parent vector.")

  enum("VSF", { start=1, comment="Filter source types - these are used internally", restrict="c" },
    "GRAPHIC: Represents the graphics elements that were the original input into the filter element.",
    "ALPHA: As for GRAPHIC except that only the alpha channel is used.",
    "BKGD: An image snapshot of the SVG document under the filter region at the time that the filter element was invoked.",
    "BKGD_ALPHA: As for BKGD but only the alpha channel is used.",
    "FILL: The value of the fill property on the target element for the filter effect.",
    "STROKE: The value of the stroke property on the target element for the filter effect.",
    "REFERENCE: This value is an assigned name for the filter primitive in the form of a custom-ident. If supplied, then graphics that result from processing this filter primitive can be referenced by an in attribute on a subsequent filter primitive within the same filter element. If no value is provided, the output will only be available for re-use as the implicit input into the next filter primitive if that filter primitive provides no value for its in attribute.",
    "IGNORE",
    "PREVIOUS: Use the previous effect as input, or source graphic if no previous effect.")

  enum("WVC", { start=1, comment="Wave options." },
    "NONE: Do not close the path.",
    "TOP: Close the path across the top of its area.",
    "BOTTOM: Close the path across the bottom of its area.")

  enum("WVS", { start=1, comment="Wave style options." },
    "CURVED: Standard sine-wave curvature, this is the default.",
    "ANGLED: Chevron style angles at 45 degrees either side of the peak and bottom edge.",
    "SAWTOOTH: Sawtooth patterns rise at 45 degrees to the peak, then direct 90 degrees to the bottom.")

  flags("VGF", { comment="Gradient flags" },
    "RELATIVE_X1: X1 is relative",
    "RELATIVE_Y1: Y1 is relative",
    "RELATIVE_X2: X2 is relative",
    "RELATIVE_Y2: Y2 is relative",
    "RELATIVE_CX: CX is relative",
    "RELATIVE_CY: CY is relative",
    "RELATIVE_FX: FX is relative",
    "RELATIVE_FY: FY is relative",
    "RELATIVE_RADIUS: Radius is relative",
    "FIXED_X1: X1 is fixed",
    "FIXED_Y1: Y1 is fixed",
    "FIXED_X2: X2 is fixed",
    "FIXED_Y2: Y2 is fixed",
    "FIXED_CX: CX is fixed",
    "FIXED_CY: CY is fixed",
    "FIXED_FX: FX is fixed",
    "FIXED_FY: FY is fixed",
    "FIXED_RADIUS: is fixed")

  flags("VPF", { comment="Optional flags for the VectorScene object." },
    "BITMAP_SIZED: Automatically adjust the PageWidth and PageHeight to match the target Bitmap width and height.",
    "RENDER_TIME: Compute the drawing frame-rate for the RenderTime field.",
    "RESIZE: The vector will be stretched to fit the PageWidth and PageHeight values, if defined by the client.",
    "OUTLINE_VIEWPORTS: Draw a green outline around all viewport paths.  Extremely useful for debugging layout issues.")

  enum("VSM", { start=0, comments="Options for the VectorScene SampleMethod." },
    "AUTO: The default option is chosen by the system.  This will typically be bilinear, but slow machines may switch to nearest neighbour and high speed machines could use more advanced methods.",
    "NEIGHBOUR: Nearest neighbour is the fastest sampler at the cost of poor quality.",
    "BILINEAR: Bilinear is a common algorithm that produces a reasonable quality image.",
    "BICUBIC: Produces a similar result to bilinear with a marginally sharper after-effect.",
    "SPLINE16: About 1/2 the speed of bilinear, this method produces a considerably better result.",
    "KAISER",
    "QUADRIC",
    "GAUSSIAN",
    "BESSEL",
    "MITCHELL",
    "SINC3: Five times slower than bilinear, the final result is of very good quality.",
    "LANCZOS3: This well known algorithm may serve as a point of comparison for evaluating the results of other methods.  It shares characteristics with SINC and BLACKMAN.",
    "BLACKMAN3: Five times slower than bilinear, the final result will lack sharpness when compared to SINC3.",
    "SINC8: 15 times slower than bilinear, the final result is of excellent quality but may be marginally over-sharpened.",
    "LANCZOS8",
    "BLACKMAN8: 15 times slower than bilinear, the final result is of excellent quality and sharpness is well balanced.")

  flags("RC", { comments="Internal flags for signalling the need to recompute paths." },
    "FINAL_PATH: The final path will need to be recalculated, so as to take transforms and/or relative coordinates into account.",
    "BASE_PATH: The base path (shape of the vector) must be recalculated.",
    "TRANSFORM: The transform matrix must be recalculated.  This includes movement, e.g. changing the CX,CY of an ellipse.",
    { ALL = "FINAL_PATH|BASE_PATH|TRANSFORM" })

  flags("ARF", { comment="Aspect ratios control alignment, scaling and clipping." },
    "X_MIN: Align to the left.",
    "X_MID: Align to the horizontal center.",
    "X_MAX: Align to the right.",
    "Y_MIN: Align to the top.",
    "Y_MID: Align to the vertical center.",
    "Y_MAX: Align to the bottom.",
    "MEET: Aspect ratio is preserved. The entire viewbox will be visible in the viewport.  The viewbox is scaled up as much as possible.",
    "SLICE: Aspect ratio is preserved. The viewbox can extend beyond the viewport's edges on one axis.  The viewbox is scaled up as much as possible.",
    "NONE: Scale the viewbox to match the size of the viewport.  Aspect ratio is not preserved.")

  flags("VBF", { comment="Options for vecGetBoundary()." },
     "INCLUSIVE: The result will be inclusive of all paths that belong to children of the queried vector.",
     "NO_TRANSFORM: The transformation step will not be applied to the vector's path.")

  flags("FM", { comment="Mask for controlling feedback events that are received." },
     "PATH_CHANGED: The vector path has been modified or affected by a transform.",
     "HAS_FOCUS: The vector has gained the user focus.",
     "CHILD_HAS_FOCUS: A child of the vector has gained the user focus.",
     "LOST_FOCUS: The vector has lost the user focus.")

  struct("VectorDef", { comment="Describes a definition for the VectorScene AddDef() method.", restrict="c" }, [[
    obj Object   # Reference to the definition object.
  ]])

  struct("GradientStop", { comment="Describes a colour stop for the VectorGradient Stops field." }, [[
   double Offset     # An offset in the range of 0 - 1.0
   struct(DRGB) RGB  # A floating point RGB value.
  ]])

  struct("Transition", { comment="For VectorTransition definitions" }, [[
    double Offset   # An offset from 0.0 to 1.0 at which to apply the transform.
    cstr Transform  # A transform string, as per SVG guidelines.
  ]])

  struct("VectorPoint", { comment="Structure for the VectorPolygon PointsArray field." }, [[
    double X   # The X coordinate of this point.
    double Y   # The Y coordinate of this point.
    bit(uchar) XRelative # TRUE if the X value is relative to its viewport (between 0 and 1.0).
    bit(uchar) YRelative # TRUE if the Y value is relative to its viewport (between 0 and 1.0).
  ]])

  struct("PathCommand", { comment="Base structure for path commands." }, [[
    uchar  Type         # The command type (PE value)
    uchar  Curved       # Private
    uchar  LargeArc     # Equivalent to the large-arc-flag in SVG, it ensures that the arc follows the longest drawing path when TRUE.
    uchar  Sweep        # Equivalent to the sweep-flag in SVG, it inverts the default behaviour in generating arc paths.
    int    Pad          # Private
    double X            # The targeted X coordinate (absolute or relative) for the command
    double Y            # The targeted Y coordinate (absolute or relative) for the command
    double AbsX         # Private
    double AbsY         # Private
    double X2           # The X2 coordinate for curve commands, or RX for arcs
    double Y2           # The Y2 coordinate for curve commands, or RY for arcs
    double X3           # The X3 coordinate for curve-to or smooth-curve-to
    double Y3           # The Y3 coordinate for curve-to or smooth-curve-to
    double Angle        # Arc angle
  ]])

  struct("VectorMatrix", { comment="Vector transformation matrix." }, [[
    struct(*VectorMatrix) Next  # The next transform in the list.
    obj(Vector) Vector          # The vector associated with the transform.
    double ScaleX               # Matrix value A
    double ShearY               # Matrix value B
    double ShearX               # Matrix value C
    double ScaleY               # Matrix value D
    double TranslateX           # Matrix value E
    double TranslateY           # Matrix value F
  ]])

  // VectorPath method ID's start high enough to give a cushion from inherited Vector methods.

  methods("VectorPath", "VP", {
    { id=30, name="AddCommand" },
    { id=31, name="RemoveCommand" },
    { id=32, name="SetCommand" },
    { id=33, name="GetCommand" },
    { id=34, name="SetCommandList" }
  })

  class("VectorPath", { src="vectors/path.cpp", output="vectors/path_def.c" })

  // Use SET_VECTOR_COLOUR() to configure the RGB values in VectorColour

  class("VectorColour", { src="defs/colour.cpp", comment="VectorColour is a basic stub class that is used for the DrawPath() routine when filling or stroking solid colour values" }, [[
   double Red
   double Green
   double Blue
   double Alpha
  ]])

  methods("vectorscene", "Sc", {
    { id=1, name="AddDef" },
    { id=2, name="SearchByID" },
    { id=3, name="FindDef" }
  })

   c_insert([[
#ifdef PRV_VECTORSCENE
struct OrderedVector {
   bool operator()(const struct rkVector *a, const struct rkVector *b) const;
};
#endif
   ]])

  class("VectorScene", { src="scene/scene.cpp", output="scene/scene_def.c" }, [[
   large RenderTime           # Microseconds elapsed during the last rendering operation.
   double Gamma               # Not currently implemented.
   obj(VectorScene) HostScene # Reference to a controlling VectorScene at the top of the hierarchy, if applicable.
   obj(Vector) Viewport       # Reference to the VectorViewport that contains the VectorScene.
   obj(Bitmap) Bitmap         # Target bitmap.
   struct(*KeyStore) Defs     # Stores references to gradients, images, patterns etc
   oid Surface                # Target surface for automated rendering
   int(VPF) Flags             # Optional flags.
   int PageWidth              # Fixed page width - vector viewport width will be sized to fit this if resizing is enabled.
   int PageHeight             # Fixed page height - vector viewport height will be sized to fit this if resizing is enabled.
   int(VSM) SampleMethod      # VSM: Method to use for resampling images and patterns.
  ]],
  [[
   DOUBLE ActiveVectorX, ActiveVectorY; // X,Y location of the active vector.
   class VMAdaptor *Adaptor; // Drawing adaptor, targeted to bitmap pixel type
   agg::rendering_buffer *Buffer; // AGG representation of the target bitmap
   APTR KeyHandle; // Keyboard subscription
   std::unordered_set<struct rkVectorViewport *> PendingResizeMsgs;
   std::unordered_map<struct rkVector *, LONG> InputSubscriptions;
   std::set<struct rkVector *, OrderedVector> KeyboardSubscriptions;
   std::vector<struct InputBoundary> InputBoundaries;
   std::unordered_map<struct rkVectorViewport *, std::unordered_map<struct rkVector *, FUNCTION>> ResizeSubscriptions;
   OBJECTID ButtonLock; // The vector currently holding a button lock
   OBJECTID ActiveVector; // The most recent vector to have received an input movement event.
   LONG InputHandle;
   LONG Cursor; // Current cursor image
   UBYTE AdaptorType;
  ]])

  class("VectorImage", { src="defs/image.cpp" }, [[
    double X             # Starting horizontal coordinate
    double Y             # Starting vertical coordinate
    obj(Picture) Picture
    obj(Bitmap) Bitmap
    int(VUNIT) Units     # VUNIT constant, defines the coordinate system for (X,Y)
    int(DMF) Dimensions
    int(VSPREAD) SpreadMethod
    int(ARF) AspectRatio # Defines how the referenced image should fit in the boundary of its target shape.
  ]])

  class("VectorPattern", { src="defs/pattern.cpp" }, [[
    double X                      # Starting horizontal coordinate
    double Y                      # Starting vertical coordinate
    double Width                  # Width of the canvas
    double Height                 # Height of the canvas
    double Opacity                # Level of opacity from 0 - 1.0
    obj(VectorScene) Scene        # Internal scene
    obj(VectorViewport) Viewport  # Internal viewport
    obj(VectorPattern) Inherit    # Reference to another pattern from which to inherit attributes
    int(VSPREAD) SpreadMethod     # Behaviour to use when pattern bounds do not match the vector path.
    int(VUNIT) Units              # VUNIT constant
    int(VUNIT) ContentUnits       # VUNIT constant
    int(DMF) Dimensions
  ]],
  [[
   struct VectorMatrix *Matrices;
   objBitmap *Bitmap;
  ]])

  class("VectorGradient", { src="defs/gradient.cpp", output="defs/gradient_def.c" }, [[
    double X1                    # Starting X coordinate of the gradient 'line'
    double Y1                    # Starting Y coordinate of the gradient 'line'
    double X2                    # Ending X of the gradient 'line'
    double Y2                    # Ending Y of the gradient 'line'
    double CenterX               # Center X coordinate of radial gradient shapes.
    double CenterY               # Center Y coordinate of radial gradient shapes.
    double FX                    # Focal X coordinate for radial gradient shapes.
    double FY                    # Focal Y coordinate for radial gradient shapes.
    double Radius                # The size of a radial gradient radius.
    obj(VectorGradient) Inherit  # Reference to another gradient from which to inherit attributes.
    int(VSPREAD) SpreadMethod    # Defines the spread method to use for gradient fills.
    int(VUNIT) Units             # Defines the coordinate system for (x1,y1),(x2,y2)
    int(VGT) Type
    int(VGF) Flags               # Optional flags.
    int TotalStops               # The total number of records in the Stops array.
  ]],
  [[
   struct GradientStop *Stops;  // An array of gradient stop colours.
   struct VectorMatrix *Matrices;
   class GradientColours *Colours;
   STRING ID;
   LONG NumericID;
   WORD ChangeCounter;
  ]])

  class("VectorFilter", { src="filters/filter.cpp", output="filters/filter_def.c" }, [[
    double X                  # Left-most position of filter area
    double Y                  # Top-most position of filter area
    double Width              # Width of filter area
    double Height             # Height of filter area
    double Opacity            # Level of opacity from 0 - 1.0
    obj(VectorFilter) Inherit # Reference to another pattern from which to inherit attributes
    int(VUNIT) Units          # VUNIT constant
    int(VUNIT) PrimitiveUnits # VUNIT constant
    int Dimensions            # Flags for detailing area values
    int(VCS) ColourSpace      # Operating colour space for RGB values
  ]],
  [[
   rkVector *ClientVector; // Client vector or viewport supplied by Scene.acDraw()
   rkVectorViewport *ClientViewport; // The nearest viewport containing the vector.
   struct rkVectorScene *SourceScene; // Internal scene for rendering SourceGraphic
   objBitmap *SourceGraphic; // An internal rendering of the vector client, used for SourceGraphic and SourceAlpha.
   objBitmap *BkgdBitmap; // Target bitmap supplied by Scene.acDraw()
   VectorEffect *ActiveEffect; // Current effect being processed by the pipeline.
   std::vector<std::unique_ptr<VectorEffect>> Effects;
   std::vector<std::unique_ptr<filter_bitmap>> Bank;
   ClipRectangle VectorClip; // Clipping region of the vector client (reflects the vector bounds)
   STRING Path; // Affix this path to file references (e.g. feImage).
   UBYTE BankIndex;
   bool Rendered;
   bool Disabled;
  ]])

  // VectorText method ID's start high enough to give a cushion from inherited Vector methods.

  methods("VectorText", "VT", {
    { id=30, name="DeleteLine" }
  })

  class('VectorText', { src='vectors/text.cpp', output="vectors/text_def.cpp"  })

  class('VectorWave', { src='vectors/wave.cpp' })

  class('VectorRectangle', { src='vectors/rectangle.cpp' })

  class('VectorPolygon', { src='vectors/polygon.cpp' })

  class('VectorShape', { src='vectors/supershape.cpp' })

  class('VectorSpiral', { src='vectors/spiral.cpp' })

  class('VectorEllipse', { src='vectors/ellipse.cpp' })

  class('VectorClip', { src='vectors/clip.cpp' })

  class('VectorViewport', { src='vectors/viewport.cpp', output="vectors/viewport_def.cpp" })

  c_insert([[
#define SHAPE_PUBLIC \
   struct rkVector *Child; \
   struct rkVectorScene *Scene; \
   struct rkVector *Next; \
   struct rkVector *Prev; \
   OBJECTPTR Parent; \
   struct VectorMatrix *Matrices; \
   DOUBLE StrokeOpacity; \
   DOUBLE FillOpacity; \
   DOUBLE Opacity; \
   DOUBLE MiterLimit; \
   DOUBLE InnerMiterLimit; \
   DOUBLE DashOffset; \
   LONG   Visibility; \
   LONG   Flags; \
   LONG   Cursor;
  ]])

  methods("vector", "Vec", {
    { id=1, name="Push" },
    { id=2, name="TracePath" },
    { id=3, name="GetBoundary" },
    { id=4, name="PointInPath" },
    { id=5, name="SubscribeInput" },
    { id=6, name="SubscribeKeyboard" },
    { id=7, name="SubscribeFeedback" },
    { id=8, name="Debug" },
    { id=9, name="NewMatrix" },
    { id=10, name="FreeMatrix" }
  })

  class("Vector", { src="vectors/vector.cpp", output="vectors/vector_def.c", version=1 }, [[
    obj(Vector) Child       # The first child vector, or NULL.
    obj(VectorScene) Scene  # Short-cut to the top-level VectorScene.
    obj(Vector) Next        # The next vector in the branch, or NULL.
    obj(Vector) Prev        # The previous vector in the branch, or NULL.
    obj Parent              # The parent vector, or NULL if this is the top-most vector.
    struct(*VectorMatrix) Matrices # A list of transform matrices to apply to the vector.
    double StrokeOpacity    # Defines the opacity of the path stroke.
    double FillOpacity      # The opacity to use when filling the vector.
    double Opacity          # An overall opacity value for the vector.
    double MiterLimit       # Imposes a limit on the ratio of the miter length to the StrokeWidth.
    double InnerMiterLimit  # A special limit to apply when the MITER_ROUND line-join effect is in use.
    double DashOffset       # For the DashArray, applies an initial dash offset.
    int(VIS) Visibility     # Controls the visibility of a vector and its children.
    int(VF) Flags           # Optional flags.
    int(PTR) Cursor         # The mouse cursor to display when the pointer is within the vector's boundary.
  ]],
  [[ SHAPE_PRIVATE ]])

  functionNames("vec",
    "DrawPath",
    "FreePath",
    "GenerateEllipse",
    "GeneratePath",
    "GenerateRectangle",
    "ReadPainter",
    "TranslatePath",
    "MoveTo",
    "LineTo",
    "ArcTo",
    "Curve3",
    "Smooth3",
    "Curve4",
    "Smooth4",
    "ClosePath",
    "RewindPath",
    "GetVertex",
    "ApplyPath",
    "Rotate",
    "Translate",
    "Skew",
    "Multiply",
    "MultiplyMatrix",
    "Scale",
    "ParseTransform",
    "ResetMatrix")

  c_insert([[
//****************************************************************************

#ifdef PRV_VECTORSCENE
__inline__ bool OrderedVector::operator()(const struct rkVector *a, const struct rkVector *b) const {
   if (a->TabOrder == b->TabOrder) return a->Head.UID < b->Head.UID;
   else return a->TabOrder < b->TabOrder;
}
#endif

INLINE void SET_VECTOR_COLOUR(objVectorColour *Colour, DOUBLE Red, DOUBLE Green, DOUBLE Blue, DOUBLE Alpha) {
   Colour->Head.ClassID = ID_VECTORCOLOUR;
   Colour->Red   = Red;
   Colour->Green = Green;
   Colour->Blue  = Blue;
   Colour->Alpha = Alpha;
}
  ]])

  hash("SVF", "0x%s",
    "A",
    "ACHROMATOMALY",
    "ACHROMATOPSIA",
    "ALIGN",
    "AMPLITUDE",
    "ANIMATEMOTION",
    "ANIMATETRANSFORM",
    "ARITHMETIC",
    "ATOP",
    "B",
    "BACKGROUNDALPHA",
    "BACKGROUNDIMAGE",
    "BASEFREQUENCY",
    "BASEPROFILE",
    "BEVEL",
    "BIAS",
    "BOTTOM",
    "BRIGHTNESS",
    "BURN",
    "BUTT",
    "CIRCLE",
    "CLIP-PATH",
    "CLIP-RULE",
    "CLIP-RULE",
    "CLIPPATH",
    "CLIPPATHUNITS",
    "CLOSE",
    "COLOR",
    "COLOR-INTERPOLATION",
    "COLOR-INTERPOLATION-FILTERS",
    "COLOUR",
    "COLOURISE",
    "CONTOURGRADIENT",
    "CONTRAST",
    "CX",
    "CY",
    "D",
    "DARKEN",
    "DECAY",
    "DEFS",
    "DESATURATE",
    "DESC",
    "DEUTERANOMALY",
    "DEUTERANOPIA",
    "DIFFERENCE",
    "DISPLAY",
    "DIVISOR",
    "DODGE",
    "DUR",
    "DX",
    "DY",
    "EDGEMODE",
    "ELLIPSE",
    "ENABLE-BACKGROUND",
    "EXCLUSION",
    "EXTERNALRESOURCESREQUIRED",
    "FEBLEND",
    "FEBLUR",
    "FECOLORMATRIX",
    "FECOLOURMATRIX",
    "FECOMPONENTTRANSFER",
    "FECOMPOSITE",
    "FECONVOLVEMATRIX",
    "FEDIFFUSELIGHTING",
    "FEDISPLACEMENTMAP",
    "FEDISTANTLIGHT",
    "FEFLOOD",
    "FEGAUSSIANBLUR",
    "FEIMAGE",
    "FEMERGE",
    "FEMORPHOLOGY",
    "FEOFFSET",
    "FEPOINTLIGHT",
    "FESPECULARLIGHTING",
    "FESPOTLIGHT",
    "FETILE",
    "FETURBULENCE",
    "FILL",
    "FILL-OPACITY",
    "FILL-RULE",
    "FILLPAINT",
    "FILTER",
    "FILTERUNITS",
    "FLOOD-COLOR",
    "FLOOD-COLOUR",
    "FLOOD-OPACITY",
    "FONT",
    "FONT-FAMILY",
    "FONT-SIZE",
    "FONT-SIZE-ADJUST",
    "FONT-STRETCH",
    "FONT-STYLE",
    "FONT-VARIANT",
    "FONT-WEIGHT",
    "FREQUENCY",
    "FROM",
    "FX",
    "FY",
    "G",
    "GRADIENTTRANSFORM",
    "GRADIENTUNITS",
    "HARDLIGHT",
    "HEIGHT",
    "HUE",
    "HUEROTATE",
    "ID",
    "IMAGE",
    "IMAGE",
    "IMAGE-RENDERING",
    "IN",
    "IN2",
    "INHERIT",
    "INVERT",
    "INVERT-X-AXIS",
    "INVERT-Y-AXIS",
    "INVERTRGB",
    "JAG",
    "K1",
    "K2",
    "K3",
    "K4",
    "KERNELMATRIX",
    "KERNELUNITLENGTH",
    "KERNING",
    "LENGTHADJUST",
    "LETTER-SPACING",
    "LIGHTEN",
    "LINE",
    "LINEARGRADIENT",
    "LUMINANCETOALPHA",
    "M",
    "MARKER",
    "MARKER-END",
    "MARKER-MID",
    "MARKER-START",
    "MASK",
    "MATRIX",
    "METHOD",
    "MINUS",
    "MITER",
    "MITER-REVERT",
    "MITER-ROUND",
    "MOD",
    "MODE",
    "MULTIPLY",
    "N1",
    "N2",
    "N3",
    "NONE",
    "NUMERIC-ID",
    "NUMOCTAVES",
    "OFFSET",
    "OPACITY",
    "OPERATOR",
    "ORDER",
    "OUT",
    "OVER",
    "OVERFLOW",
    "OVERLAY",
    "PARASOL:MORPH",
    "PARASOL:PATHTRANSITION",
    "PARASOL:SHAPE",
    "PARASOL:SPIRAL",
    "PARASOL:TRANSITION",
    "PARASOL:WAVE",
    "PATH",
    "PATH",
    "PATHLENGTH",
    "PATTERN",
    "PATTERNCONTENTUNITS",
    "PATTERNTRANSFORM",
    "PATTERNUNITS",
    "PHI",
    "PLUS",
    "POINTS",
    "POLYGON",
    "POLYLINE",
    "PRESERVEALPHA",
    "PRIMITIVEUNITS",
    "PROTANOMALY",
    "PROTANOPIA",
    "R",
    "RADIALGRADIENT",
    "RADIUS",
    "RECT",
    "REPEAT",
    "RESULT",
    "ROTATE",
    "ROUND",
    "RX",
    "RY",
    "SATURATE",
    "SCALE",
    "SCREEN",
    "SEED",
    "SOFTLIGHT",
    "SOURCEALPHA",
    "SOURCEGRAPHIC",
    "SPACING",
    "SPIRAL",
    "SPREADMETHOD",
    "SQUARE",
    "STARTOFFSET",
    "STDDEVIATION",
    "STEP",
    "STITCHTILES",
    "STRING",
    "STROKE",
    "STROKE-DASHARRAY",
    "STROKE-DASHOFFSET",
    "STROKE-INNER-MITERLIMIT",
    "STROKE-INNERJOIN",
    "STROKE-LINECAP",
    "STROKE-LINEJOIN",
    "STROKE-MITERLIMIT",
    "STROKE-MITERLIMIT-THETA",
    "STROKE-OPACITY",
    "STROKE-WIDTH",
    "STROKEPAINT",
    "STYLE",
    "SVG",
    "SYMBOL",
    "TARGETX",
    "TARGETY",
    "TEXT",
    "TEXTPATH",
    "THICKNESS",
    "TITLE",
    "TO",
    "TOP",
    "TRANSITION",
    "TRITANOMALY",
    "TRITANOPIA",
    "VERTEX-SCALING",
    "VERTICES",
    "X",
    "X1",
    "X2",
    "XLINK:HREF",
    "XML:SPACE",
    "XMLNS",
    "XOR",
    "Y",
    "Y1",
    "Y2")

  hash("SVF", "0x%s",
    "ACCUMULATE",
    "ADDITIVE",
    "ALICEBLUE",
    "ANTIQUEWHITE",
    "AQUA",
    "AQUAMARINE",
    "ATTRIBUTENAME",
    "ATTRIBUTETYPE",
    "AZURE",
    "BEGIN",
    "BEIGE",
    "BISQUE",
    "BLACK",
    "BLANCHEDALMOND",
    "BLINK",
    "BLUE",
    "BLUEVIOLET",
    "BOLD",
    "BOLDER",
    "BROWN",
    "BURLYWOOD",
    "CADETBLUE",
    "CHARTREUSE",
    "CHOCOLATE",
    "CLASS",
    "CONDENSED",
    "CONICGRADIENT",
    "CORAL",
    "CORNFLOWERBLUE",
    "CORNSILK",
    "CRIMSON",
    "CYAN",
    "DARKBLUE",
    "DARKCYAN",
    "DARKGOLDENROD",
    "DARKGRAY",
    "DARKGREEN",
    "DARKGREY",
    "DARKKHAKI",
    "DARKMAGENTA",
    "DARKOLIVEGREEN",
    "DARKORANGE",
    "DARKORCHID",
    "DARKRED",
    "DARKSALMON",
    "DARKSEAGREEN",
    "DARKSLATEBLUE",
    "DARKSLATEGRAY",
    "DARKSLATEGREY",
    "DARKTURQUOISE",
    "DARKVIOLET",
    "DEEPPINK",
    "DEEPSKYBLUE",
    "DIAMONDGRADIENT",
    "DIMGRAY",
    "DIMGREY",
    "DODGERBLUE",
    "END",
    "EXTRA-CONDENSED",
    "FIREBRICK",
    "FLORALWHITE",
    "FORESTGREEN",
    "FUCHSIA",
    "GAINSBORO",
    "GHOSTWHITE",
    "GOLD",
    "GOLDENROD",
    "GRAY",
    "GREEN",
    "GREENYELLOW",
    "GREY",
    "HONEYDEW",
    "HOTPINK",
    "HREF",
    "INDIANRED",
    "INDIGO",
    "IVORY",
    "KHAKI",
    "LAVENDER",
    "LAVENDERBLUSH",
    "LAWNGREEN",
    "LEMONCHIFFON",
    "LIGHTBLUE",
    "LIGHTCORAL",
    "LIGHTCYAN",
    "LIGHTER",
    "LIGHTGOLDENRODYELLOW",
    "LIGHTGRAY",
    "LIGHTGREEN",
    "LIGHTGREY",
    "LIGHTPINK",
    "LIGHTSALMON",
    "LIGHTSEAGREEN",
    "LIGHTSKYBLUE",
    "LIGHTSLATEGRAY",
    "LIGHTSLATEGREY",
    "LIGHTSTEELBLUE",
    "LIGHTYELLOW",
    "LIME",
    "LIMEGREEN",
    "LINEN",
    "LINETHROUGH",
    "MAGENTA",
    "MAROON",
    "MAX",
    "MEDIUMAQUAMARINE",
    "MEDIUMBLUE",
    "MEDIUMORCHID",
    "MEDIUMPURPLE",
    "MEDIUMSEAGREEN",
    "MEDIUMSLATEBLUE",
    "MEDIUMSPRINGGREEN",
    "MEDIUMTURQUOISE",
    "MEDIUMVIOLETRED",
    "MIDDLE",
    "MIDNIGHTBLUE",
    "MIN",
    "MINTCREAM",
    "MISTYROSE",
    "MOCCASIN",
    "NARROWER",
    "NAVAJOWHITE",
    "NAVY",
    "NORMAL",
    "OLDLACE",
    "OLIVE",
    "OLIVEDRAB",
    "ORANGE",
    "ORANGERED",
    "ORCHID",
    "OVERLINE",
    "PALEGOLDENROD",
    "PALEGREEN",
    "PALETURQUOISE",
    "PALEVIOLETRED",
    "PAPAYAWHIP",
    "PEACHPUFF",
    "PERU",
    "PINK",
    "PLUM",
    "POWDERBLUE",
    "PRESERVEASPECTRATIO",
    "PURPLE",
    "RED",
    "REPEATCOUNT",
    "REPEATDUR",
    "RESTART",
    "ROSYBROWN",
    "ROYALBLUE",
    "SADDLEBROWN",
    "SALMON",
    "SANDYBROWN",
    "SEAGREEN",
    "SEASHELL",
    "SEMI-CONDENSED",
    "SIENNA",
    "SILVER",
    "SKYBLUE",
    "SLATEBLUE",
    "SLATEGRAY",
    "SLATEGREY",
    "SNOW",
    "SPRINGGREEN",
    "START",
    "STEELBLUE",
    "TAN",
    "TEAL",
    "TEXT-ANCHOR",
    "TEXT-DECORATION",
    "TEXTLENGTH",
    "THISTLE",
    "TOMATO",
    "TOTAL-POINTS",
    "TRANSFORM",
    "TURQUOISE",
    "TYPE",
    "ULTRA-CONDENSED",
    "UNDERLINE",
    "UNITS",
    "USE",
    "VALUES",
    "VERSION",
    "VIEW-HEIGHT",
    "VIEW-WIDTH",
    "VIEW-X",
    "VIEW-Y",
    "VIEWBOX",
    "VIOLET",
    "VISIBILITY",
    "WHEAT",
    "WHITE",
    "WHITESMOKE",
    "WIDER",
    "WIDTH",
    "WORD-SPACING",
    "YELLOW",
    "YELLOWGREEN")
end)
