--[[ Concurrent Requests Testing --]]

   require 'common'
   local hslib = require 'net/httpserver'
   local json = require 'json'
   include 'http'

   local SERVER_PORT = 18948

----------------------------------------------------------------------------------------------------------------------

function testParallelRequests()
   local proc = processing.new({ timeout = 5.0 })
   local results = {}
   local completed = 0
   local total_req = 5

   for i = 1, total_req do
      results[i] = {}
      results[i].http = obj.new('http', {
         src    = 'http://127.0.0.1:' .. SERVER_PORT .. '/api/parallel/' .. i,
         method = 'GET',
         flags  = HTF_NO_HEAD,
         incoming = function(HTTP, Buffer)
            if not results[i].data then results[i].data = '' end
            results[i].data = results[i].data .. tostring(Buffer)
            print('Received: ' .. results[i].data)
         end,
         stateChanged = function(HTTP, State)
            if (State == HGS_COMPLETED) or (State == HGS_TERMINATED) then
               completed = completed + 1
               print('Completed ' .. completed .. ' of ' .. total_req)
               if completed >= total_req then
                  proc.signal()
               end
            end
         end
      })
      assert(results[i].http.acActivate() == ERR_Okay, "Parallel request " .. i .. " failed to activate")
   end

   local err = proc.sleep()
   assert(err == ERR_Okay, 'Parallel requests processing failed: ' .. mSys.GetErrorMsg(err))
   assert(completed == total_req, 'Not all parallel requests completed: ' .. completed .. '/' .. total_req)

   -- Verify all responses
   for i = 1, total_req do
      assert(results[i].data, 'No response for request ' .. i)
      local response = json.decode(results[i].data)
      assert(response.requestId == tostring(i), 'Request ID mismatch for request ' .. i)
   end

   print('Parallel requests test passed: ' .. total_req .. ' concurrent requests')
end

----------------------------------------------------------------------------------------------------------------------

function testConcurrentPOST()
   local proc = processing.new({ timeout = 10.0 })
   local results = {}
   local completed = 0
   local total_posts = 3

   for i = 1, total_posts do
      local test_data = '{"id":' .. i .. ',"data":"test_data_' .. i .. '"}'
      results[i] = {}
      results[i].http = obj.new('http', {
         src         = 'http://127.0.0.1:' .. SERVER_PORT .. '/api/concurrent-post',
         method      = 'POST',
         contentType = 'application/json',
         flags       = HTF_NO_HEAD,
         inputFile   = 'string:' .. test_data,
         size        = test_data:len(),
         incoming = function(HTTP, Buffer)
            if not results[i].data then results[i].data = '' end
            results[i].data = results[i].data .. tostring(Buffer)
         end,
         stateChanged = function(HTTP, State)
            if (State == HGS_COMPLETED) or (State == HGS_TERMINATED) then
               completed = completed + 1
               if completed >= total_posts then
                  proc.signal()
               end
            end
         end
      })
      assert(results[i].http.acActivate() == ERR_Okay, "Concurrent POST " .. i .. " failed to activate")
   end

   local err = proc.sleep()
   assert(err == ERR_Okay, 'Concurrent POST processing failed: ' .. mSys.GetErrorMsg(err))
   assert(completed == total_posts, 'Not all concurrent POSTs completed: ' .. completed .. '/' .. total_posts)

   -- Verify all POST responses
   for i = 1, total_posts do
      local response = json.decode(results[i].data)
      assert(response.receivedId == i, 'POST ID mismatch for request ' .. i)
   end

   print('Concurrent POST test passed: ' .. total_posts .. ' concurrent POSTs')
end

----------------------------------------------------------------------------------------------------------------------

function testHighLoadRequests()
   local proc = processing.new({ timeout = 5.0 })
   local results = {}
   local completed = 0
   local total_req = 10

   print('Starting high load test with ' .. total_req .. ' requests...')

   for i = 1, total_req do
      results[i] = {}
      results[i].http = obj.new('http', {
         src            = 'http://127.0.0.1:' .. SERVER_PORT .. '/api/load-test/' .. i,
         method         = 'GET',
         flags          = HTF_NO_HEAD,
         connectTimeout = 5,
         incoming = function(HTTP, Buffer)
            if not results[i].data then results[i].data = '' end
            if Buffer then results[i].data = results[i].data .. tostring(Buffer) end
         end,
         stateChanged = function(HTTP, State)
            if (State == HGS_COMPLETED) or (State == HGS_TERMINATED) then
               completed = completed + 1
               if completed >= total_req then
                  proc.signal()
               end
            end
         end
      })
--      assert(results[i].http.acActivate() == ERR_Okay, "High load request " .. i .. " failed to activate")
      -- Use threads to simulate multiple clients
      thread.action(results[i].http, 'Activate')

      -- Small delay to stagger requests slightly
      if (i % 3 == 0) then mSys.WaitTime(0.1) end
   end

   local err = proc.sleep()
   assert(err == ERR_Okay, 'High load processing failed: ' .. mSys.GetErrorMsg(err))

   -- Allow for some failures under high load
   local success_rate = completed / total_req
   assert(success_rate >= 0.8, 'Success rate too low under high load: ' .. (success_rate * 100) .. '%')

   print('High load test passed: ' .. completed .. '/' .. total_req .. ' requests succeeded')
end

----------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
         'testParallelRequests',
         'testConcurrentPOST',
         'testHighLoadRequests'
      },
      init = function(Path)
         glServer = hslib.start({
            port    = SERVER_PORT,
            folder  = Path,
            verbose = true,
            routes  = {
               { pattern = '/api/parallel/:id',
                 method = 'GET',
                 handler = function(req, res)
                    -- Small delay to simulate processing
                    print('/api/parallel/:id');
                    processing.sleep(math.random(50, 200)/1000)
                    res.json({
                       message = 'Parallel request processed',
                       requestId = req.params.id,
                       timestamp = mSys.PreciseTime()
                    })
                 end
               },
               { pattern = '/api/concurrent-post',
                 method = 'POST',
                 handler = function(req, res)
                    local data = req.parsedBody or {}
                    processing.sleep(math.random(10, 100)/1000) -- Simulate processing time
                    res.json({
                       message = 'Concurrent POST processed',
                       receivedId = data.id,
                       receivedData = data.data,
                       timestamp = mSys.PreciseTime()
                    })
                 end
               },
               { pattern = '/api/load-test/:id',
                 method = 'GET',
                 handler = function(req, res)
                    res.json({
                       message = 'Load test response',
                       requestId = req.params.id,
                       timestamp = mSys.PreciseTime()
                    })
                 end
               },
               { pattern = '/api/slow-response',
                 method = 'GET',
                 handler = function(req, res)
                    -- Slow response for timeout testing
                    processing.sleep(1) -- Delay
                    res.json({
                       message = 'Slow response delivered',
                       timestamp = mSys.PreciseTime()
                    })
                 end
               }
            }
         })
      end,
      cleanup = function()
         glServer.stop()
      end
   }