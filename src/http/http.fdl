--$FLUID:Include

module({ name="HTTP", copyright="Paul Manias Â© 2005-2022", version=1.0 }, function()
  restrict(function()
    loadFile(glPath .. 'common.fdl')
  end)

  c_include("<parasol/modules/network.h>")

  enum("HOM", { start=0, comment="Output mode." },
    "DATA_FEED",
    "READ_WRITE|READ|WRITE")

  enum("HGS", { start=0, comment="Options for defining an HTTP object's state." },
   "READING_HEADER: The default state - this value will be indicated when no data is being written to the server and the client is waiting for a complete header from the server.",
   "AUTHENTICATING: If authentication is requested from the server, the HTTP object will enter this state.",
   "AUTHENTICATED: Following successful authentication, this state value will be set.",
   "SENDING_CONTENT: During the uploading of data to the server (e.g. POST), the HTTP object will remain in this state.",
   "SEND_COMPLETE: On successful completion of the send phase, the state changes to SEND_COMPLETE.  Successful completion requires either that the number of bytes indicated in ContentLength have been sent, or ERR_Terminate has been returned by the callback functions.",
   "READING_CONTENT: The client will remain in this state when the server is sending data to the client.",
   // 'Finished' codes start from HGS_COMPLETED
   "COMPLETED: This state indicates that the HTTP request was completed in a normal manner.",
   "TERMINATED: If an HTTP command failes to complete normally - for instance if the connection is broken before completion - then the state is set to TERMINATED.",
   "END: Private")

  enum("HTM", { start=0, comment="The HTTP Method to use when the object is activated." },
    "GET: Retrieves files from the HTTP server.  The Path field will indicate which file to retrieve.",
    "POST: Sends information to the HTTP server.",
    "PUT: Uploads a file to the HTTP server.  The data will be drawn from a source defined in the File or Object fields.",
    "HEAD: A HEAD request is equivalent to a GET without the content.",
    "DELETE: Deletes a file from the HTTP server, location indicated by the Path field.",
    "TRACE",
    "MK_COL",
    "B_COPY",
    "B_DELETE",
    "B_MOVE",
    "B_PROP_FIND",
    "B_PROP_PATCH",
    "COPY", "LOCK", "MOVE", "NOTIFY", "OPTIONS", "POLL", "PROP_FIND", "PROP_PATCH", "SEARCH", "SUBSCRIBE", "UNLOCK",
    "UNSUBSCRIBE")

  const("HTS", { comment="HTTP status codes" }, {
    CONTINUE             = 100,
    SWITCH_PROTOCOLS     = 101,
    OKAY                 = 200,
    CREATED              = 201,
    ACCEPTED             = 202,
    UNVERIFIED_CONTENT   = 203,
    NO_CONTENT           = 204,
    RESET_CONTENT        = 205,
    PARTIAL_CONTENT      = 206,
    MULTIPLE_CHOICES     = 300,
    MOVED_PERMANENTLY    = 301,
    FOUND                = 302,
    SEE_OTHER            = 303,
    NOT_MODIFIED         = 304,
    USE_PROXY            = 305,
    TEMP_REDIRECT        = 307,
    BAD_REQUEST          = 400,
    UNAUTHORISED         = 401,
    PAYMENT_REQUIRED     = 402,
    FORBIDDEN            = 403,
    NOT_FOUND            = 404,
    METHOD_NOT_ALLOWED   = 405,
    NOT_ACCEPTABLE       = 406,
    PROXY_AUTHENTICATION = 407,
    REQUEST_TIMEOUT      = 408,
    CONFLICT             = 409,
    GONE                 = 410,
    LENGTH_REQUIRED      = 411,
    PRECONDITION_FAILED  = 412,
    ENTITY_TOO_LARGE     = 413,
    URI_TOO_LONG         = 414,
    UNSUPPORTED_MEDIA    = 415,
    OUT_OF_RANGE         = 416,
    EXPECTATION_FAILED   = 417,
    SERVER_ERROR         = 500,
    NOT_IMPLEMENTED      = 501,
    BAD_GATEWAY          = 502,
    SERVICE_UNAVAILABLE  = 503,
    GATEWAY_TIMEOUT      = 504,
    VERSION_UNSUPPORTED  = 505
  })

  flags("HTF", { comment="HTTP flags" },
    "RESUME: Enables resuming when downloading content.  Only applies when a file is being targeted and the file already exists.",
    "MESSAGE: When activating child objects, send delayed messages to postpone execution rather than making direct calls.",
    "MOVED: Read-only.  Indicates that the HTTP source was moved (HTS_MovedPermanently).",
    "REDIRECTED: Read-only.  Indicates that the HTTP request was redirected (HTS_TempRedirect).",
    "NO_HEAD: Do not send a HEAD prior to executing a PUT or POST (removes the authentication check).",
    "NO_DIALOG: Turn off the username/password dialog.",
    "RAW: Forcibly turns off chunk detection and chunk handling on incoming data.  Also turns off automatic chunk encoding for outgoing data.",
    "DEBUG_SOCKET: Log all HTTP headers and data that goes out through the socket.  This should only be used when sending plain-text data.",
    "RECV_BUFFER: Enables buffering of all received HTTP content into a local buffer.  The buffer information can be read at any time during and after the transaction through the RecvBuffer field.  Note that this option should only be used for limited data transfers to avoid excessive memory usage.",
    "DEBUG: Print extra log messages during HTTP processing.",
    "SSL: Force SSL connectivity, irrespective of the HTTP port.  Note that this flag is automatically set (and remains set for all future transfers) if the Port field is set to 443.")

  class("HTTP", { src="http.cpp", output="http_def.c" }, [[
   double DataTimeout     # Timeout for receiving data, measured in seconds
   double ConnectTimeout  # Timeout for initial connection, measured in seconds
   large Index            # Current read/write index, relative to content length so always starts from zero
   large ContentLength    # Content length as reported in the content length response field, -1 if streamed or unknown
   large Size             # Content size to use when uploading data
   str Host               # Host / Domain
   str Realm
   str Path               # Path for file retrieval
   str OutputFile         # Target file for downloaded content
   str InputFile          # Source file for uploads
   str UserAgent          # User agent to pass in the HTTP headers
   ptr UserData           # User-specific data for the HTTP object
   oid InputObject        # An object to send HTTP content
   oid OutputObject       # An object to receive HTTP content
   int(HTM) Method        # HTTP Request: GET, HEAD, POST, PUT..
   int Port               # Socket port number, usually port 80
   int(HOM) ObjectMode    # Either DataFeed or Write mode
   int(HTF) Flags         # Optional flags
   int(HTS) Status        # Status code recieved in the HTML response header
   error Error            # Result of the operation
   int(DATA) Datatype     # Datatype to use when sending HTTP data to a target object
   int(HGS) CurrentState  # Current state of the http get operation
   str ProxyServer        # If using a proxy server, this is the name or IP address of the server
   int ProxyPort          # The port of the proxy server
   int BufferSize         # Preferred buffer size for things like outgoing operations (sending data)
  ]],
  [[
   FUNCTION Incoming;
   FUNCTION Outgoing;
   FUNCTION AuthCallback;
   FUNCTION StateChanged;
   std::unordered_map<std::string, std::string> *Args;
   std::unordered_map<std::string, std::string> *Headers;
   STRING Response;         // Response header buffer
   STRING URI;              // Temporary string, used only when the user reads the URI
   STRING Username;
   STRING Password;
   STRING AuthNonce;
   STRING AuthOpaque;
   STRING AuthPath;
   STRING ContentType;
   UBYTE  *RecvBuffer;      // Receive buffer - aids downloading if HTF_RECVBUFFER is defined
   UBYTE  *WriteBuffer;
   LONG   WriteSize;
   LONG   WriteOffset;
   APTR   Buffer;           // Temporary buffer for storing outgoing data
   struct rkFile *flOutput;
   struct rkFile *flInput;
   objNetSocket *Socket;    // Socket over which the communication is taking place
   UBYTE  *Chunk;           // Chunk buffer
   LONG   ChunkSize;        // Size of the chunk buffer
   LONG   ChunkBuffered;    // Number of bytes buffered, cannot exceed ChunkSize
   LONG   ChunkLen;         // Length of the current chunk being processed (applies when reading the chunk data)
   LONG   ChunkIndex;
   TIMER  TimeoutManager;
   LARGE  LastReceipt;      // Last time (microseconds) at which data was received
   LARGE  TotalSent;        // Total number of bytes sent - exists for assisting debugging only
   OBJECTID DialogWindow;
   LONG   RecvSize;
   LONG   ResponseIndex;    // Next element to write to in 'Buffer'
   LONG   SearchIndex;      // Current position of the CRLFCRLF search.
   LONG   ResponseSize;
   WORD   InputPos;         // File name parsing position in InputFile
   UBYTE  RedirectCount;
   UBYTE  AuthCNonce[10];
   UBYTE  AuthQOP[12];
   UBYTE  AuthAlgorithm[12];
   UBYTE  AuthRetries;
   UWORD  Connecting:1;
   UWORD  AuthAttempt:1;
   UWORD  AuthPreset:1;
   UWORD  AuthDigest:1;
   UWORD  SecurePath:1;
   UWORD  Tunneling:1;
   UWORD  Chunked:1;
   UWORD  MultipleInput:1;
   UWORD  ProxyDefined:1;   // TRUE if the ProxyServer has been manually set by the user
  ]])
end)

