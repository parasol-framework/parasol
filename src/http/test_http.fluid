--[[
Various HTTP examples that demonstrate how to GET, POST, etc.

Note: Network communications take place in the background once started.  In order to ensure that an HTTP operation
fully completes, it is crucial that the HTTP object remains in memory for the entire procedure.  In Fluid we can do
this by maintaining at least one reference to the object at all times and this will prevent it from being garbage
collected too early.
--]]

   require 'common'

   local glOutFile = 'temp:http-output.txt'
   local glSelf = obj.find('self')

function testGet()
   local proc = processing.new({ timeout = 5.0 })

   local http = obj.new('http', {
      src        = 'http://www.parasol.ws/index.html',
      method     = 'get',
      outputFile = glOutFile,
      flags      = '!DEBUG',
      stateChanged = function(HTTP, State)
         if (State == HGS_COMPLETED) then
            local content = file.readAll(glOutFile)
            print(string.format('%.80s [80 of %d bytes]', content, content:len()))
         end
         if (State == HGS_COMPLETED) or (State == HGS_TERMINATED) then
            proc.signal()
         end
      end
   })

   local err = http.acActivate()
   assert(err == ERR_Okay, "HTTP object failed to activate.")

   err = proc.sleep()
   assert(err == ERR_Okay, 'Processing failed: ' .. mSys.GetErrorMsg(err))
   if (http.error != ERR_Okay) then error('HTTP object returned error: ' .. mSys.GetErrorMsg(http.error)) end
   if (http.currentState != HGS_COMPLETED) then error('Expected HTTP state of COMPLETED not reached, got ' .. http.currentState) end
end

-----------------------------------------------------------------------------------------------------------------------
-- curl -v -X POST http://ptsv2.com/t/bgef9-1605557717/post -d "fname=smith&amp;lname=jones"

function testPostString()
   local proc = processing.new({ timeout = 5.0 })

   local http = obj.new('http', {
      src        = 'http://ptsv2.com/t/bgef9-1605557717/post', // See results at http://ptsv2.com/t/bgef9-1605557717
      method     = 'post',
      flags      = '!debug|NoHead',
      outputFile = glOutFile,
      contentLength = -1,
      outgoing = function(HTTP, BufferSize)
         if (testPostStringCompleted) then error('This routine has been called a second time.') end
         print('Request for data received.')
         HTTP.acWrite('fname=smith&amp;lname=jones')
         testPostStringCompleted = true
         check(ERR_Terminate)
      end,
      stateChanged = function(HTTP, State)
         if (State == HGS_COMPLETED) then
            print(file.readAll(glOutFile))
         end
         if (State == HGS_COMPLETED) or (State == HGS_TERMINATED) then
            proc.signal()
         end
      end
   })

   local err = http.acActivate()
   assert(err == ERR_Okay, "HTTP object failed to activate.")

   err = proc.sleep()
   assert(err == ERR_Okay, 'Processing failed: ' .. mSys.GetErrorMsg(err))
   if (http.error != ERR_Okay) then error('HTTP object returned error: ' .. mSys.GetErrorMsg(http.error)) end
   if (http.currentState != HGS_COMPLETED) then error('Expected HTTP state of COMPLETED not reached, got ' .. http.currentState) end
end

-----------------------------------------------------------------------------------------------------------------------

function testPostStringFile()
   local proc = processing.new({ timeout = 5.0 })
   local body = 'fname=joe&amp;lname=bloggs'

   local http = obj.new('http', {
      src        = 'http://ptsv2.com/t/bgef9-1605557717/post', // See results at http://ptsv2.com/t/bgef9-1605557717
      method     = 'post',
      contentType = 'text/plain',
      flags      = '!debug|NoHead',
      inputFile  = 'string:' .. body,
      size       = body:len(),
      stateChanged = function(HTTP, State)
         if (State == HGS_COMPLETED) or (State == HGS_TERMINATED) then
            proc.signal()
         end
      end,
      incoming = function(HTTP, Buffer, BufferSize)
         print(Buffer)
      end
   })

   local err = http.acActivate()
   assert(err == ERR_Okay, "HTTP object failed to activate.")

   err = proc.sleep()
   assert(err == ERR_Okay, 'Processing failed: ' .. mSys.GetErrorMsg(err))
   if (http.error != ERR_Okay) then error('HTTP object returned error: ' .. mSys.GetErrorMsg(http.error)) end
   if (http.currentState != HGS_COMPLETED) then error('Expected HTTP state of COMPLETED not reached, got ' .. http.currentState) end
end

-----------------------------------------------------------------------------------------------------------------------

function testSSLProxy()
   local proc = processing.new({ timeout = 5.0 })

   local http = obj.new('http', {
      src         = 'https://www.google.co.uk/',
      method      = 'get',
      outputFile  = glOutFile,
      flags       = '!debug|debugsocket',
      proxyserver = 'localhost',
      proxyport   = '8080'
   })

   local err = http.acActivate()
   assert(err == ERR_Okay, 'HTTP activation failed: ' .. mSys.GetErrorMsg(err))

   err = proc.sleep(5.0)
   assert(err == ERR_Okay, 'Processing failed: ' .. mSys.GetErrorMsg(err))
end

function testHTTPS()
   local proc = processing.new({ timeout = 5.0 })

   local http = obj.new('http', {
      src        = 'https://www.google.co.uk',
      method     = 'get',
      outputFile = glOutFile,
      flags      = '!debug',
      stateChanged = function(HTTP, State)
         if (State == HGS_COMPLETED) then
            local content = file.readAll(glOutFile)
            print(string.format('%.80s [%d bytes]', content, content:len()))
         end
         if (State == HGS_COMPLETED) or (State == HGS_TERMINATED) then
            HTTP.acSignal()
         end
         return ERR_Okay
      end
   })

   local err = http.acActivate()
   assert(err == ERR_Okay, 'HTTP activation failed: ' .. mSys.GetErrorMsg(err))

   local err = proc.sleep(5.0)
   assert(err == ERR_Okay, 'Processing failed: ' .. mSys.GetErrorMsg(err))
end

function testPHPPost()
   local proc = processing.new({ timeout = 5.0 })

   local http = obj.new('http', {
      src        = 'http://parasol.ws/upload.php',
      method     = 'post',
      flags      = '!debug|debugoutgoing',
      inputfile  = 'string:file=fred.txt&amp;contentsize=4&amp;content=ABCD',
      outputFile = glOutFile
   })

   http.acActivate()
   local err = proc.sleep(5)
   if (err == ERR_TimeOut) then error('Test timed-out.') end
end

function testUploadChunked()
   local proc = processing.new({ timeout = 5.0 })

   local http = obj.new('http', {
      src        = 'http://parasol.ws/upload.php',
      method     = 'post',
      flags      = '!debug|debugoutgoing',
      inputfile  = glPath .. 'test_http.fluid',
      outputFile = glOutFile
   })

   http.acActivate()
   local err = proc.sleep(5.0)
   if (err == ERR_TimeOut) then error('Test timed-out.') end
end

function testChunks()
   local proc = processing.new({ timeout = 5.0 })

   // Test chunking
   local http = obj.new('http', {
      src        = 'http://news.bbc.co.uk',
      method     = 'get',
      outputFile = glOutFile,
      flags      = '!debug'
   })

   http.acActivate()
   local err = proc.sleep(5.0)
   if (err == ERR_TimeOut) then error('Test timed-out.') end
end

function testDownload()
   local proc = processing.new({ timeout = 5.0 })

   // Test non-chunking
   local http = obj.new('http', {
      src        = 'http://www.parasol.ws/index.html',
      method     = 'get',
      outputFile = glOutFile,
      flags      = '!debug'
   })

   http.acActivate()
   local err = proc.sleep(5.0)
   if (err == ERR_TimeOut) then error('Test timed-out.') end
end

function testUpload()
   local proc = processing.new({ timeout = 5.0 })

   // Test uploading
   local http = obj.new('http', {
      src       = 'http://www.parasol.ws/dav/boing.dml',
      method    = 'put',
      inputfile = glinFile,
      flags     = '!debug'
   })

   http.acActivate()
   local err = proc.sleep(5.0)
   if (err == ERR_TimeOut) then error('Test timed-out.') end
end

function testMultiPart()
   local proc = processing.new({ timeout = 5.0 })

   local boundary = '----------d6sXWGimDGTgb2GDuLZqbR'

   local http = obj.new('http', {
      src         = 'http://parasol.ws/tkr/upload.php',
      method      = 'post',
      outputFile  = glOutFile,
      flags       = '!nohead|debug',
      contenttype = 'multipart/form-data; boundary=' .. boundary
   } )

   local str = ''
   local CRLF = string.char(13,10)
   local filepath = args('inFile')
   local filename = string.gsub(filepath, '.*[:/\\](.-)', '%1', 1)

   // Parameters

   msg('Building parameters')
   str = str .. '--' .. boundary .. CRLF
   str = str .. "Content-Disposition: form-data; name=\"method\"" .. CRLF .. CRLF
   str = str .. 'fileUpload' .. CRLF

   str = str .. '--' .. boundary .. CRLF
   str = str .. "Content-Disposition: form-data; name=\"workspace\"" .. CRLF .. CRLF
   str = str .. '1' .. CRLF

   // File header

   str = str .. '--' .. boundary .. CRLF
   str = str .. "Content-Disposition: form-data; name=\"file\"; filename=\"" .. filename .. "\"" .. CRLF
   str = str .. 'Content-Type: application/octet-stream' .. CRLF .. CRLF

   local headfile = obj.new('file', { src='temp:http-head', flags='WRITE|NEW' } )
   headfile.acWrite(str, str:len())

   local tailfile = obj.new('file', { src='temp:http-tail', flags='WRITE|NEW' } )
   str = CRLF .. '--' .. boundary .. '--' .. CRLF
   tailfile.acWrite(str, str:len())

   local srcfile = obj.new('file', { src=filepath, flags='READ' } )

   if (srcfile) then
      http.size = headfile.size + tailfile.size + srcfile.size
      http.inputfile = headfile.location .. '|' .. srcfile.location .. '|' .. tailfile.location
      http.acActivate()
   end

   headfile = nil
   tailfile = nil
   srcfile = nil

   http.detach()
   local err = proc.sleep(5.0)
   if (err == ERR_TimeOut) then error('Test timed-out.') end
end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
        'testPostString', 'testGet', 'testPostStringFile'
      },
      init = function(Path)
         glPath = Path
      end,
      cleanup = function()
      end
   }
