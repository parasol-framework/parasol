--$FLUID:Include

  restrict(function()
    loadFile(glPath .. 'common.fdl')
    loadFile(glPath .. 'common-graphics.fdl')
  end)

function def_view()
  flags('VWF', { comment='View flags.' },
    'MULTI_SELECT: Allow multiple item selections without having to hold the shift key.',
    'NO_ICONS: Do not load or show any icons.',
    'SENSITIVE: Sensitive mode will activate child objects when the user single-clicks with the mouse (by default, child activation only occurs with double-clicks).',
    'NO_SORTING: No user sorting, e.g. in column mode.',
    'NO_SELECT: Stop the user from selecting items.',
    'WIDTH_RESET: Always reset column widths when the Columns field is set.',
    'NO_SELECT_JMP: When a new item is selected, the view will jump to that item if it is not completely visible to the user. Setting this flag will turn off this behaviour.',
    'NOTIFY_ON_CLEAR: If the view should activate itself when cleared, set this flag. By default, activation normally only occurs when an item is double-clicked or when sensitive mode is enabled.',
    'AUTO_DESELECT: Deselects a highlighted item when it is activated by mouse click or enter key.',
    'DRAG_DROP: Enables drag and drop for items in the view. In this mode, multi-select is only possible if the shift or ctrl keys are held while using the mouse.',
    'USER_DRAG: Enable drag and drop only if the user prefers it.')

  enum('VIEW', { start=0, comment='List options' },
    'LIST: Standard list view with small icons, arranged from top to bottom.',
    'ICON: Similar to list-view but with large icons, arranged from left to right.',
    'TREE: Tree mode can be used if the items are arranged in a hierarchy, where items can be embedded within items.  The tree view provides small buttons that the user can click to expand the tree and view hidden items.',
    'COLUMN: Long list with detail columns.',
    'LONG_LIST: This type is the same as the LIST view but the items will not wrap back to the top of the view when the bottom edge of the surface is encountered.',
    'GROUP_TREE: Similar to tree view, but root level nodes are drawn as a headline.',
    'DOCUMENT: Document mode allows view data to be passed to a document object for display.  You are required to provide a document object that is pre-loaded with a template capable of processing input from the view object.  Refer to the Document field for more information.',
    'COLUMN_TREE: This mode combines the column and tree modes.  The view displays the layout and style of normal column mode, but the first column is used to display and manage a tree hierarchy.  The tree can be expanded and collapsed just as in the standard tree mode.'
  )

  flags('VGF', { comment='Graphics options (normally defined by the template)' },
    'OUTLINE_TITLE: Draw black outline around title text.',
    'STRIPES: Draw stripes in group titles.',
    'LINE_BREAKS: Draw a line break between each view item.',
    'GROUP_SHADOW: Draw a shadow underneath the group graphics headers.',
    'ALT_GROUP: Alternate the group header graphics.',
    'BRANCHES: Draw grey tree branches.',
    'HAIRLINES: Draw a hairline between each column.',
    'NO_BORDER: Do not draw a border around column headers when in table mode.',
    'DRAW_TABLE: Draw the view as a table (the basic format is the same, graphics are different).')

  flags('SLF', { comment='Flags for SelectCallback' },
    'SELECTED: A tag has been selected and is now highlighted.',
    'ACTIVE: The most recently active tag has changed.',
    'INVERTED: Change is due to an inverted selection.',
    'MOVED: Change is due to the item being moved.',
    'MULTIPLE: Multiple items were selected.',
    'CLICK: Item was clicked - see ClickX and ClickY for coordinates.',
    'KEYPRESS: Item was selected by a keypress.',
    'MANUAL: Item was manually selected (by the program, not the user).')

end

----------------------------------------------------------------------------------------------------------------------

function def_clipboard()
  enum('CT', { start=0 }, 'DATA', 'AUDIO', 'IMAGE', 'FILE', 'OBJECT', 'TEXT', 'END')

  -- Note: It is intentional that the CLIP types are expressed as flags and not constants.

  flags('CLIPTYPE', { comment='Clipboard types' },
    'DATA: Raw information that is uncategorised can be defined as a data clip.',
    'AUDIO: An audio clip that is recognised by the Sound class (such as wav\'s and mp3\'s).',
    'IMAGE: Images that are recognised by the Picture class may be stored as this type (such as jpeg\'s and png files).',
    'FILE: Pure file references are stored as file clips.  This type is typically used by file managers for moving and copying files.',
    'OBJECT: An object that has been deserialised into binary form.',
    'TEXT: Plain text files such as ASCII and UTF-8 must be identified through this clip type.')

  flags('CLF', { comment='Clipboard flags' },
    'DRAG_DROP: Enables drag and drop mode.  The clipboard content will be private and not share data with the host system in this mode.',
    'HOST: This indicator is automatically set when a clipboard was created due to incoming content from the host system.')

  flags('CEF', { },
    'DELETE: Requests that the original file source is deleted if a successful paste operation takes place.',
    'EXTEND: Instead of replacing existing clipboard data, add the new data to the group.')

  methods('clipboard', 'Clip', {
    { id=1, name='AddFile' },
    { id=2, name='AddObject' },
    { id=3, name='AddObjects' },
    { id=4, name='GetFiles' },
    { id=5, name='AddText' },
    { id=6, name='Remove' }
  })

  class('Clipboard', { src='class_clipboard.cpp', output='class_clipboard_def.c' }, [[
    int(CLF) Flags      # Optional flags
    mem Cluster         # Identifies the data cluster (item grouping) that the clipboard will work with
  ]],
  [[
   FUNCTION RequestHandler;
   BYTE     ClusterAllocated:1;
  ]])
end

----------------------------------------------------------------------------------------------------------------------

module({ name='Widget', copyright='Paul Manias 2003-2020', version=1.0, prefix='widget' }, function()
  c_include('<parasol/modules/font.h>', '<parasol/modules/picture.h>', '<parasol/modules/vector.h>',
    '<parasol/modules/xml.h>',  '<parasol/modules/display.h>', '<parasol/modules/document.h>')

  flags('CMF', { comment='ComboBox flags.' },
    'HIDE: Hide on creation, or combobox is currently hidden.',
    'DISABLED: Disable on creation; or combobox is currently disabled.',
    'EDIT: Enable edit mode, which allows the user to write free-text in the combobox.',
    'SHOW_ICONS: Show icons in the dropdown list.',
    'LIMIT_TO_LIST: When in edit mode, limit-to-list prevents the user from entering text that isn\'t in the combobox list.',
    'AUTO_COMPLETE: When in edit mode, this option helps the user by auto-completing text.',
    'NO_TRANSLATION: Do not translate combobox strings or the drop-down menu to the user\'s native language.')

  flags('CBF', { comment='CheckBox flags.' },
    'DISABLED: Disable on creation, or object is currently disabled.',
    'HIDE: Hide on creation, or object is currently hidden.')

  flags('BTF', { comment='Button flags.' },
    'HIDE: Hide on creation, or button is currently hidden.',
    'DISABLED: Disable on creation, or button is currently disabled.  Read-only.',
    'NO_GFX: Turns off the button\'s foreground graphics (text and images).',
    'PULSE: Send repeated clicks when the mouse button is held down.')

  flags('INF', { comment='Flags for the Input class.' },
    'DISABLED: Disable on creation.',
    'COMMANDLINE: Function as a command-line.  Typically used when the input box needs to remain persistent and is linked to an output system, such as a shell.',
    'SELECT_TEXT: Select all text when the input box is shown for the first time.',
    'SECRET: Used for secret user entry (passwords).',
    'FIXED_LABEL_WIDTH: Indicates that the LabelWidth field was defined by the client.',
    'FIXED_INPUT_WIDTH: Indicates that the InputWidth field was defined by the client.',
    'ENTER_TAB: Press enter results in a virtual tab-keypress being sent.')

  flags('TF', { comment='Flags for the TabFocus class.' },
    'LOCAL_FOCUS: In this mode, the user\'s point of focus must match the monitored Surface for the tabfocus to function.',
    'CHILD_FOCUS: In this mode, the user\'s point of focus must match the monitored Surface or one of its immediate children for the tabfocus to function.',
    'LIMIT_TO_LIST: In limit-to-list mode, the tabfocus only functions if the user\'s point of focus is on the monitored Surface or one of objects in the tab list.')

  flags('TXF', { comment='Flags for the Text class.' },
    'EDIT: This flag must be enabled if the user is permitted to change the text string with the keyboard.',
    'AUTO_CLEAR: Clears the text string when the enter key is pressed.',
    'OVERWRITE: Turns on overwrite mode (if off, insert mode is enabled).',
    'TAB_ENTRY: Pressing the tab key is treated the same as pressing enter.',
    'WORDWRAP: Enables word wrapping.',
    'HISTORY: Enables historical browsing when the up/down cursor keys are used.  The number of historical lines stored can be set in the HistorySize field.',
    'VARIABLE: This flag forces a text object to recalculate any variable references in its string data whenever a redraw occurs.  Such references are indicated through square brackets, e.g. [desktop.width].  Refer to the StrEvaluate() function in the Strings module for more information.',
    'FORCE_CAPS: This flag forces the capitalisation of all text that is entered into the object.',
    'GLOBAL_EDITING: Keeps the text object in edit mode regardless of user focus.',
    'AREA_SELECTED: This read-only flag is set automatically when the user has selected an area of text.',
    'NO_SYS_KEYS: Disables system-keys that provide support for common key combinations such as Ctrl-C, Ctrl-X etc.',
    'MULTI_SELECT: Allow the user to select/highlight multiple lines by holding the Ctrl key.',
    'SINGLE_SELECT: Enables text selection (with or without edit mode).  If in line mode, a single click will allow the user to highlight any line.',
    'DISABLED: This read-only flag is set if the object has been disabled through the Disable action.',
    'BACKGROUND: Enables a colour background behind the text.',
    'ENTER_TAB: Convert enter-key presses to the tab-key.',
    'PRESERVE_BKGD: Preserve-background disables fast scrolling for background preservation.',
    'SECRET|PASSWORD: Hide the string characters for secret text entry (e.g. passwords).',
    'TAB_KEY: If the tab key is pressed, print the tab character.',
    'AUTO_SELECT: Automatically select all text if the text object receives the focus.',
    'STR_TRANSLATE: Translate strings to the user\'s native language.',
    'STRETCH: If the font is scalable, the text string will be resized to fit inside the surface that contains it (i.e. no characters will be clipped).  This is acheived by recalculating the font\'s point size.',
    { COMMANDLINE = 'AUTO_CLEAR|EDIT|HISTORY' },
    { SELECT = 'MULTI_SELECT|SINGLE_SELECT' })

  flags('ACF', { comment='Activation flags' },
    'RELEASE: Releasing a mouse button will create an Activate action.',
    'SINGLE_CLICK: Single clicking on any line will create an Activate action.',
    'DOUBLE_CLICK: Double clicking on any line will create an Activate action.',
    'MOVEMENT: Moving to a new line cause activation.',
    { SENSITIVE = 'SINGLE_CLICK|MOVEMENT' })

  flags('MNF', { comment='Flags for the Menu class.' },
    'SHOW_IMAGES: Allow for an image column on the left.',
    'SHOW_KEYS: Print key controls on the right.',
    'EXT_COLUMN: Allow for an extension indicator column on the right.',
    'POPUP: Locks the position of the menu to the mouse pointer.',
    'REVERSE_X: Menu\'s open in reverse horizontal order.',
    'REVERSE_Y: Menu\'s open in reverse vertical order.',
    'NO_HIDE: Activate() is prevented from hiding the menu.',
    'SORT: Sort all items by name.',
    'IGNORE_FOCUS: Do not hide the menu if it loses the focus.',
    'PRESERVE_BKGD: Preserve background when scrolling.',
    'NO_TRANSLATION: Do not translate menu text to the user\'s native language.',
    'CACHE: Cache menu surface once created.',
    'POINTER_PLACEMENT: Menu is placed at the position of the mouse pointer when shown.',
    { SHOW_ICONS = 'SHOW_IMAGES' },
    { POINTER_XY = 'POINTER_PLACEMENT' }
  )

  flags('MIF', { comment='Flags for MenuItems.' },
    'DISABLED: Set if the menu item is disabled (ghosted).',
    'BREAK: Menu item is acting as a break.',
    'EXTENSION: Menu item is an extension.',
    'CATEGORISE: Categorise the attached config file.',
    'NO_KEY_RESPONSE: Display the key, but do not respond to its equivalent key press.',
    'KEY_REPEAT: Respond to repeated key presses.',
    'SORT: Sort all content under the menuitem (applies only to extensions).',
    'OPTION: Item is a clickable option (clicking the item\'s icon will turn the option on/off).',
    'SELECTED: The menu item has been selected (checked).',
    'TOGGLE: Enables toggled menu items (checking state of on and off).')

  enum('BHS', { start=0, 'Button hover state indicators' },
     'OUTSIDE: The cursor is outside of the button\'s area',
     'ENTERED: The cursor has just entered the button\'s area',
     'INSIDE: The cursor is inside the button\'s area')

  enum('MENUFADE', { start=1 },
    'FADE_IN: The menu will fade in to the foreground.',
    'FADE_OUT: The menu will fade out of the foreground.')

  enum('AXIS', { comment='Axis options.  This determines the axis that is signalled when the slider is moved (note that it is feasible for a horizontal scrollbar to signal the Y axis, if this is desired by the client)' },
    'X', 'Y', 'Z')

  enum('SD', { start=1, comment='Scroll directions.' },
    'NEGATIVE|UP|LEFT',
    'POSITIVE|DOWN|RIGHT')

  enum('SO', { start=1, comment='Direction options' },
     'HORIZONTAL',
     'VERTICAL')

  class('Button', { src='class_button.cpp', output='class_button_def.c' }, [[
    str Hint               # Applies a hint to a button, which can be displayed as a tool-tip.
    str Icon               # Name of an icon to display in the button.
    obj(Vector) Viewport   # Viewport region created by the button object
    obj(Vector) ParentViewport # The parent container for the Viewport
    int(BTF) Flags         # Special options
    int Clicked            # TRUE if the button has been clicked and reverts to FALSE when the user releases the button.
    int(BHS) HoverState    # User hover state indicator
  ]],
  [[
   FUNCTION prvFeedback;
   FUNCTION prvStyleTrigger;
   char String[40];            // String to display inside the button
   struct rkDocument *Document;
   APTR   prvKeyEvent;      // For subscribing to keyboard events
   STRING Onclick;          // Available in Document mode only, references the function to be called when clicked
   UBYTE  Active;           // For recursion management.
  ]])

  class('CheckBox', { src='class_checkbox.cpp', output='class_checkbox_def.c' }, [[
   obj(Vector) Viewport       # Viewport region created by the checkbox object
   obj(Vector) ParentViewport # The parent container for the Viewport
   int(CBF) Flags    # Special options
   int LabelWidth    # The fixed pixel width allocated for drawing the label string.
   int Status        # Either TRUE or FALSE
   int(ALIGN) Align  # Alignment flags
  ]],
  [[
   FUNCTION prvFeedback;
   FUNCTION prvStyleTrigger;
   APTR   prvKeyEvent;
   BYTE   Active;
   char   Label[48];       // Label to display alongside the checkbox
  ]])

  class('ComboBox', { src='class_combobox.cpp', output='class_combobox_def.c' }, [[
    obj(Text) TextInput        # Text control object - for the combobox area
    obj(Menu) Menu             # Menu control object
    obj(Vector) Viewport       # Viewport region created by the input object
    obj(Vector) ParentViewport # The parent container for the Viewport
    int(CMF) Flags             # Special options
    int LabelWidth             # Width of the combobox label area
  ]],
  [[
   FUNCTION prvStyleTrigger;
   UBYTE Active:1;
   char  Label[48];
   FUNCTION Feedback;
  ]])

  class('Input', { src='class_input.cpp', output='class_input_def.c' }, [[
    obj(Text) TextInput        # Text control object - for the input area
    obj(Vector) Viewport       # Viewport region created by the input object
    obj(Vector) ParentViewport # The parent container for the Viewport
    int(INF) Flags             # Special options
    int LabelWidth             # Width of the input box label area
    int InputWidth             # Width of the input area
  ]],
  [[
   char     prvLabel[48];
   char     prvPostLabel[48];
   char     prvInputMask[64];
   ULONG    prvLastStringHash;
   FUNCTION prvFeedback;
   FUNCTION prvStyleTrigger;
   UBYTE    prvActive:1;
   UBYTE    prvStringReset:1;
  ]])

  methods('Menu', 'Mn', {
    { id=1, name='Switch' },
    { id=2, name='SelectItem' },
    { id=3, name='GetItem' }
  })

  class('Menu', { src='class_menu/menu.cpp', output='class_menu/menu_def.c' }, [[
    double HoverDelay   # Optional hover feature for the Monitor field.
    double AutoExpand   # Auto-expand delay, measured in seconds.
    double FadeDelay    # The length of time allocated to special effects like fading.  Value in seconds
    obj(MenuItem) Items # Items listed in the menu
    obj(Font) Font      # The font being used in the menu
    str Style           # Name of a menu graphics style to apply.
    oid Target          # Target for the surface (e.g. desktop)
    oid Parent          # Parent menu if this is a child of a master menu
    oid Relative        # Relative surface that should be used for coordinate origins
    oid KeyMonitor      # Surface to monitor for key presses
    oid MenuSurface     # Surface for this menu
    oid Monitor         # Surface to monitor for mouse clicks
    int(MNF) Flags      # Optional flags
    int VSpacing        # Amount of spacing between each menu item
    int BreakHeight     # The amount of height to give to menu-break graphics
    int FixedWidth      # Predetermined fixed-width, often used for things like combo-boxes
    int LeftMargin      # Left hand margin inside the menu
    int RightMargin     # Right hand margin inside the menu
    int TopMargin       # Top margin inside the menu
    int BottomMargin    # Bottom margin inside the menu
    int HighlightLM     # Highlight rectangle left margin
    int HighlightRM     # Highlight rectangle right margin
    int ItemHeight      # Minimum allowable height for text based menu items
    int ImageSize       # Size of the image column.  Icons will be generated to fit this size
    int LineLimit       # Maximum number of displayed lines before the scrollbar kicks in
    int BorderSize      # Size of the border at the menu edges
    int SelectionIndex  # The index of the most recent item to be executed.  If zero, no item has been executed.
    struct(RGB8) FontColour
    struct(RGB8) FontHighlight
    struct(RGB8) Highlight
    struct(RGB8) HighlightBorder
    int ImageGap       # Gap between the image column and text
    int KeyGap         # Gap between the text and key columns
    int ExtensionGap   # Gap between the extension column and the text or key column
    int TextWidth      # Width of the widest text string
    int KeyWidth       # Width of the widest key string
  ]],
  [[ PRV_MENU_FIELDS ]])

  class('MenuItem', { src='class_menu/menuitem.cpp' }, [[
   obj(MenuItem) Prev     # Previous menu item in chain
   obj(MenuItem) Next     # Next menu item in chain
   obj(Bitmap) Bitmap     # Icon to display in the menu item
   obj(Menu) SubMenu      # If the item refers to a sub-menu, it will be pointed to here
   str Path               # Location of a menu definition file if this item is a menu extension
   str Name               # Internal name of the menu item (user specific, helpful for searching purposes and unique identification)
   str Text               # Text to print in the menu item
   int(MIF) Flags         # Optional flags
   int Key                # Key value for this item
   int(KQ) Qualifiers     # Qualifier key(s) for this item
   int Index              # Item index.  Follows the order of the items as they are listed in the menu
   int Group              # Grouping, relevant for checkmarking menu items
   int ID                 # User-defined unique identifier ('id' attribute)
   int Height             # Height of the item
   struct(RGB8) Colour     # Font colour
   struct(RGB8) Background # Background colour
  ]],
  [[ PRV_MENUITEM_FIELDS ]])

  class('Resize', { src='class_resize.cpp', output='class_resize_def.c' }, [[
    obj(Layout) Layout    # Layout manager
    oid Object            # Object that is to be resized
    int(JET) Button       # Determines what button is used for resizing
    int(MOVE) Direction   # Direction flags (horizontal/vertical)
    int(EDGE) Border      # Border flags can be used to monitor up to 8 separate areas at once
    int BorderSize        # Determines the size of the border edge
  ]],
  [[
   LONG  OriginalWidth, OriginalHeight;
   LONG  OriginalX, OriginalY;
   LONG  OriginalAbsX, OriginalAbsY;
   LONG  prvAnchorX, prvAnchorY;
   LONG  InputHandle;
   WORD  CursorSet;
   WORD  State;
   BYTE  prvAnchored;
  ]])

  methods('TabFocus', 'Tab', {
    { id=1, name='AddObject' },
    { id=2, name='InsertObject' },
    { id=3, name='RemoveObject' },
    { id=4, name='SetObject' }
  })

  class('TabFocus', { comment='Manages the \'user focus\' via the tab key.', src='class_tabfocus.cpp', output='class_tabfocus_def.c' }, [[
    oid Surface     # The surface to monitor for the primary focus when managing the tab key
    int Total       # Total number of objects on the tab list
    int(TF) Flags   # Optional flags
  ]],
  [[
   struct {
      OBJECTID ObjectID;
      OBJECTID SurfaceID;
   } TabList[50];         // List of objects to be managed by the tab key
   APTR prvKeyEvent;
   WORD Index;            // Current focus index
   OBJECTID CurrentFocus;
   BYTE Reverse:1;
  ]])

  methods('text', 'Txt', {
    { id=1, name='AddLine' },
    { id=2, name='DeleteLine' },
    { id=3, name='GetLine' },
    { id=4, name='ReplaceLine' },
    { id=5, name='SelectArea' },
    { id=6, name='SetFont' }
  })

  class('Text', { src={ 'class_text/fields.cpp', 'class_text/text.cpp' }, output='class_text/def.c' }, [[
    obj(Layout) Layout    # Layout manager
    obj(Font) Font        # Font to use for the text
    oid TabFocus          # If the tab key is pressed, a focus can be sent to this object
    oid Focus             # Refers to the object that will be monitored for user focussing.
    int CursorColumn      # Cursor column
    int CursorRow         # Cursor row / Line selection
    int(TXF) Flags        # Special flags
    int AmtLines          # Amount of strings currently in the array
    int SelectRow         # Row that the current text selection starts from
    int SelectColumn      # Column that the current text selection starts from
    int Frame             # The frame for which the text will be visible.
    int HistorySize       # Size of the history buffer (measured in array elements)
    int LineLimit         # Limit the number of lines to the value in this field
    int CharLimit         # Limit the number of chars allowed in each line of the text object
    struct(RGB8) Highlight    # Default colour for text highlighting
    struct(RGB8) Background   # Colour for text background
    struct(RGB8) CursorColour # The colour of the cursor
  ]],
  [[
   struct TextLine *Array;      // Pointer to an array of lines
   struct TextHistory *History; // History of text entries
   struct rkXML  *XML;
   struct rkFile *FileStream;
   APTR   prvKeyEvent;
   FUNCTION ValidateInput;
   FUNCTION Activated;
   STRING StringBuffer;
   STRING Location;             // Optional file to load on Init()
   DOUBLE RelSize;              // Relative point size (a percentage relative to the height of the container)
   LONG   CurrentFrame;
   LONG   MaxLines;          // Total number of lines available in the array
   LONG   XPosition;         // Horizontal scrolling offset
   LONG   YPosition;         // Vertical scrolling offset
   LONG   CursorChar;
   LONG   CursorSavePos;
   LONG   InputHandle;
   TIMER  CursorTimer;
   WORD   TotalFrames;
   WORD   ClickHeld;
   WORD   HistoryPos;
   WORD   CursorWidth;
   UWORD  CursorFlash;     // If set to 1, cursor is invisible.  This field is managed by the Timer action
   WORD   CursorEndColumn;
   UBYTE  PointerLocked;
   UBYTE  State;
   BYTE   Tag;
   BYTE   NoUpdate;
   BYTE   NoCursor;
   BYTE   Active:1;
  ]])

  def_view()
  def_clipboard()
end)
