--$FLUID:Include

  restrict(function()
    loadFile(glPath .. 'common.fdl')
    loadFile(glPath .. 'common-graphics.fdl')
  end)

----------------------------------------------------------------------------------------------------------------------

function def_clipboard()
  enum('CT', { start=0 }, 'DATA', 'AUDIO', 'IMAGE', 'FILE', 'OBJECT', 'TEXT', 'END')

  -- Note: It is intentional that the CLIP types are expressed as flags and not constants.

  flags('CLIPTYPE', { comment='Clipboard types' },
    'DATA: Raw information that is uncategorised can be defined as a data clip.',
    'AUDIO: An audio clip that is recognised by the Sound class (such as wav\'s and mp3\'s).',
    'IMAGE: Images that are recognised by the Picture class may be stored as this type (such as jpeg\'s and png files).',
    'FILE: Pure file references are stored as file clips.  This type is typically used by file managers for moving and copying files.',
    'OBJECT: An object that has been deserialised into binary form.',
    'TEXT: Plain text files such as ASCII and UTF-8 must be identified through this clip type.')

  flags('CLF', { comment='Clipboard flags' },
    'DRAG_DROP: Enables drag and drop mode.  The clipboard content will be private and not share data with the host system in this mode.',
    'HOST: This indicator is automatically set when a clipboard was created due to incoming content from the host system.')

  flags('CEF', { },
    'DELETE: Requests that the original file source is deleted if a successful paste operation takes place.',
    'EXTEND: Instead of replacing existing clipboard data, add the new data to the group.')

  methods('clipboard', 'Clip', {
    { id=1, name='AddFile' },
    { id=2, name='AddObject' },
    { id=3, name='AddObjects' },
    { id=4, name='GetFiles' },
    { id=5, name='AddText' },
    { id=6, name='Remove' }
  })

  class('Clipboard', { src='class_clipboard.cpp', output='class_clipboard_def.c' }, [[
    int(CLF) Flags      # Optional flags
    mem Cluster         # Identifies the data cluster (item grouping) that the clipboard will work with
  ]],
  [[
   FUNCTION RequestHandler;
   BYTE     ClusterAllocated:1;
  ]])
end

----------------------------------------------------------------------------------------------------------------------

module({ name='Widget', copyright='Paul Manias 2003-2020', version=1.0, prefix='widget' }, function()
  c_include('<parasol/modules/font.h>', '<parasol/modules/picture.h>', '<parasol/modules/vector.h>',
    '<parasol/modules/xml.h>',  '<parasol/modules/display.h>', '<parasol/modules/document.h>')

  enum('AXIS', { comment='Axis options.  This determines the axis that is signalled when the slider is moved (note that it is feasible for a horizontal scrollbar to signal the Y axis, if this is desired by the client)' },
    'X', 'Y', 'Z')

  enum('SD', { start=1, comment='Scroll directions.' },
    'NEGATIVE|UP|LEFT',
    'POSITIVE|DOWN|RIGHT')

  enum('SO', { start=1, comment='Direction options' },
     'HORIZONTAL',
     'VERTICAL')

  class('Resize', { src='class_resize.cpp', output='class_resize_def.c' }, [[
    obj(Layout) Layout    # Layout manager
    oid Object            # Object that is to be resized
    int(JET) Button       # Determines what button is used for resizing
    int(MOVE) Direction   # Direction flags (horizontal/vertical)
    int(EDGE) Border      # Border flags can be used to monitor up to 8 separate areas at once
    int BorderSize        # Determines the size of the border edge
  ]],
  [[
   LONG  OriginalWidth, OriginalHeight;
   LONG  OriginalX, OriginalY;
   LONG  OriginalAbsX, OriginalAbsY;
   LONG  prvAnchorX, prvAnchorY;
   LONG  InputHandle;
   WORD  CursorSet;
   WORD  State;
   BYTE  prvAnchored;
  ]])

  def_clipboard()
end)
