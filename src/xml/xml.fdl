--$FLUID:Include

module({ name="XML", copyright="Paul Manias Â© 2001-2023", version=1.0 }, function()
  cpp_include("<functional>")

  const("XMS", { comment="For SetAttrib()" }, {
    NEW         = "-1: Adds a new attribute.  Note that if the attribute already exists, this will result in at least two attributes of the same name in the tag.  Use XMS_DEFINE if this is undesirable.",
    UPDATE_ONLY = "-2: SetAttrib will find the target attribute and update it.  It is not possible to rename the attribute when using this technique.  ERR_Search is returned if the attribute cannot be found.",
    UPDATE      = "-3: As for XMS_UPDATE_ONLY, but if the attribute does not exist, it will be created."
  })

  flags("XSF", { comment="Options for the Sort method." },
    "DESC: Sort in descending order.",
    "CHECK_SORT: Tells the algorithm to check for a 'sort' attribute in each analysed tag and if found, the algorithm will use that as the sort value instead of that indicated in the Attrib field.")

  flags("XMF", { comment="Standard flags for the XML class." },
    "WELL_FORMED: By default, the XML class will accept badly structured XML data.  By setting this flag, all processed XML statements must be well formed (tags must balance) or a BadData error will be returned during processing.",
    "INCLUDE_COMMENTS: By default, comments are stripped from all XML input.  This flag ensures that they are retained.",
    "STRIP_CONTENT: Strip all content from incoming XML data.",
    "READABLE|INDENT: Indent the output of XML tags to improve readability.",
    "LOCK_REMOVE: Prevents removal of tags from the XML tree.  This specifically affects the RemoveTag and RemoveXPath methods.",
    "STRIP_HEADERS: XML headers found in the source data will not be included in the parsed results.",
    "NEW: Creates an empty XML object on initialisation - if the Path field has been set, the source file will not be loaded.",
    "NO_ESCAPE: Turns off escape code conversion.",
    "ALL_CONTENT: By default the XML parser will trim whitespace (such as return codes, spaces and tabs) found in the XML content between tags.  Setting this flag turns off this feature, allowing all whitespace to be included.",
    "PARSE_HTML: Automatically parse HTML escape codes.",
    "STRIP_CDATA: Do not echo CDATA sections.  Note that this option is used as a parameter, not an object flag.",
    "LOG_ALL: Print extra log messages.",
    "PARSE_ENTITY: Entity references in the DTD will be parsed automatically.",
    { INCLUDE_SIBLINGS = "0x80000000: Include siblings when building an XML string (GetXMLString only)" })

  enum("XMI", { type="int", start=0, comment="Tag insertion options." },
    "PREV|PREVIOUS: Insert as the previous tag of the target.",
    "CHILD: Insert as the first child of the target.",
    "NEXT: Insert as the next tag of the target.",
    "CHILD_END: Insert as the last child of the target.",
    "END: Private")

  flags("XTF", { comment="Standard flags for XMLTag." },
    "CDATA: Tag represents CDATA.",
    "INSTRUCTION: Tag represents an instruction of the format <?xml?>.",
    "NOTATION: Tag represents a notation of the format <!XML>.")

  struct("XMLAttrib", { type="XMLAttrib" }, [[
   cpp(str) Name   # Name of the attribute
   cpp(str) Value  # Value of the attribute
  ]],
  [[
   inline bool isContent() const { return Name.empty(); }
   inline bool isTag() const { return !Name.empty(); }
   XMLAttrib(std::string pName, std::string pValue) : Name(pName), Value(pValue) { };
   XMLAttrib() = default;
  ]])

  struct("XMLTag", { type="XMLTag" }, [[
    int ID         # Unique ID assigned to the tag on creation
    int ParentID   # Unique ID of the parent tag
    int LineNo     # Line number on which this tag was encountered
    int(XTF) Flags # Optional flags
    cpp(array(struct(XMLAttrib))) Attribs # Array of attributes for this tag
    cpp(array(struct(XMLTag))) Children   # Array of child tags
  ]],
  [[
   XMLTag(LONG pID, LONG pLine = 0) :
      ID(pID), ParentID(0), LineNo(pLine), Flags(XTF::NIL)
      { }

   XMLTag(LONG pID, LONG pLine, pf::vector<XMLAttrib> pAttribs) :
      ID(pID), ParentID(0), LineNo(pLine), Flags(XTF::NIL), Attribs(pAttribs)
      { }

   XMLTag() { XMLTag(0); }

   inline CSTRING name() const { return Attribs[0].Name.c_str(); }
   inline bool isContent() const { return Attribs[0].Name.empty(); }
   inline bool isTag() const { return !Attribs[0].Name.empty(); }
   ]])

  methods("xml", "XML", {
    { id=1,  name="SetAttrib" },
    { id=2,  name="GetString" },
    { id=3,  name="InsertXML" },
    { id=4,  name="GetContent" },
    { id=5,  name="Sort" },
    { id=6,  name="RemoveTag" },
    { id=7,  name="MoveTags" },
    { id=8,  name="GetAttrib" },
    { id=9,  name="InsertXPath" },
    { id=10, name="FindTag" },
    { id=11, name="Filter" },
    { id=13, name="Count" },
    { id=14, name="InsertContent" },
    { id=15, name="RemoveXPath" },
    { id=18, name="GetTag" }
  })

  class("XML", { src="xml.cpp", output="xml_def.c" }, [[
    str Path        # Location of the XML data file
    obj Source      # Alternative data source to specifying a Path
    int(XMF) Flags  # Optional user flags
    int Start       # Starting cursor position (tag index) used for certain operations
    int Modified    # Modification timestamp
    int ParseError  # Private
    int LineNo      # Private
  ]],
  nil,
  [[
   typedef pf::vector<XMLTag> TAGS;
   typedef pf::vector<XMLTag>::iterator CURSOR;
   TAGS Tags;
  ]])

  c_insert([[
//********************************************************************************************************************

template <class T> inline ERROR xmlSetAttrib(objXML *XML, LONG Tag, LONG Flags, T &&Attrib, LONG Value) {
   auto attrib = to_cstring(Attrib);
   auto buffer = std::to_string(Value);
   return xmlSetAttrib(XML, Tag, Flags, attrib, buffer.c_str());
}

template <class T> inline ERROR xmlSetAttrib(objXML *XML, LONG Tag, LONG Flags, T &&Attrib, DOUBLE Value) {
   auto attrib = to_cstring(Attrib);
   auto buffer = std::to_string(Value);
   return xmlSetAttrib(XML, Tag, Flags, attrib, buffer.c_str());
}

inline void xmlUpdateAttrib(XMLTag &Tag, const std::string Name, const std::string Value, bool CanCreate = false)
{
   for (auto a = Tag.Attribs.begin(); a != Tag.Attribs.end(); a++) {
      if (!StrMatch(Name, a->Name)) {
         a->Name  = Name;
         a->Value = Value;
         return;
      }
   }

   if (CanCreate) Tag.Attribs.emplace_back(Name, Value);
}

inline void xmlNewAttrib(XMLTag &Tag, const std::string Name, const std::string Value) {
   Tag.Attribs.emplace_back(Name, Value);
}

inline void xmlNewAttrib(XMLTag *Tag, const std::string Name, const std::string Value) {
   Tag->Attribs.emplace_back(Name, Value);
}

template <class T> inline ERROR xmlInsertXML(APTR Ob, LONG Index, XMI Where, T Statement, XMLTag **Result) {
   struct xmlInsertXML insert = { Index, Where, to_cstring(Statement) };
   auto error = Action(MT_XMLInsertXML, (OBJECTPTR)Ob, &insert);
   if (!error) {
      struct xmlGetTag get = { insert.Result };
      error = Action(MT_XMLGetTag, (OBJECTPTR)Ob, &get);
      *Result = get.Result;
   }
   return(error);
}

//********************************************************************************************************************
// Call a Function for every attribute in the XML tree.  Allows you to modify attributes quite easily, e.g. to convert
// all attribute names to uppercase:
//
// std::transform(attrib.Name.begin(), attrib.Name.end(), attrib.Name.begin(),
//   [](UBYTE c){ return std::toupper(c); });

inline void xmlForEachAttrib(objXML::TAGS &Tags, std::function<void(XMLAttrib &)> &Function)
{
   for (auto &tag : Tags) {
      for (auto &attrib : tag.Attribs) {
         Function(attrib);
      }
      if (!tag.Children.empty()) xmlForEachAttrib(tag.Children, Function);
   }
}

  ]])
end)
