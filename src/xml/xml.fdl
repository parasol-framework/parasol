--$FLUID:Include

module({ name="XML", copyright="Paul Manias Â© 2001-2025", version=1.0, timestamp=20240611 }, function()
  cpp_include("<functional>", "<sstream>", "<parasol/strings.hpp>")

  const("XMS", { type="int", comment="For SetAttrib()" }, {
    NEW         = "-1: Adds a new attribute.  Note that if the attribute already exists, this will result in at least two attributes of the same name in the tag.",
    UPDATE_ONLY = "-2: SetAttrib will find the target attribute and update it.  It is not possible to rename the attribute when using this technique.  `ERR::Search` is returned if the attribute cannot be found.",
    UPDATE      = "-3: As for `UPDATE_ONLY`, but if the attribute does not exist, it will be created."
  })

  flags("XSF", { comment="Options for the Sort method." },
    "DESC: Sort in descending order.",
    "CHECK_SORT: Tells the algorithm to check for a 'sort' attribute in each analysed tag and if found, the algorithm will use that as the sort value instead of that indicated in the `Attrib` field.")

  flags("XMF", { comment="Standard flags for the XML class." },
    "WELL_FORMED: By default, the XML class will accept badly structured XML data.  This flag requires that XML statements must be well-formed (tags must balance) or an `ERR::BadData` error will be returned during processing.",
    "INCLUDE_COMMENTS: By default, comments are stripped when parsing XML input unless this flag is specified.",
    "STRIP_CONTENT: Strip all content from incoming XML data.",
    "READABLE|INDENT: Indent the output of serialised XML to improve readability.",
    "LOCK_REMOVE: Prevents removal of tags from the XML tree.  This specifically affects the RemoveTag and RemoveXPath methods.",
    "STRIP_HEADERS: XML headers found in the source data will not be included in the parsed results.",
    "NEW: Creates an empty XML object on initialisation - if the #Path field has been set, the source file will not be loaded.",
    "NO_ESCAPE: Turns off escape code conversion.",
    "INCLUDE_WHITESPACE: By default the XML parser will trim whitespace (such as return codes, spaces and tabs) found in the XML content between tags.  Setting this flag turns off this feature, allowing all whitespace to be included.",
    "PARSE_HTML: Automatically parse HTML escape codes.",
    "STRIP_CDATA: Do not serialise `CDATA` sections.  Note that this option is used as a parameter, not an object flag.",
    "LOG_ALL: Print extra log messages.",
    "PARSE_ENTITY: Entity references in the DTD will be parsed automatically.",
    "OMIT_TAGS: Prevents tags from being output when the XML is serialised (output content only).",
    "NAMESPACE_AWARE: Enable namespace processing during parsing.",
    { INCLUDE_SIBLINGS = "0x80000000: Include siblings when building an XML string (#GetXMLString() only)" })

  enum("XMI", { type="int", start=0, comment="Tag insertion options." },
    "PREV|PREVIOUS: Insert as the previous tag of the target.",
    "CHILD: Insert as the first child of the target.",
    "NEXT: Insert as the next tag of the target.",
    "CHILD_END: Insert as the last child of the target.",
    "END: Private")

  flags("XTF", { comment="Standard flags for XMLTag." },
    "CDATA: Tag represents `CDATA`.",
    "INSTRUCTION: Tag represents an instruction of the format `<?xml?>`.",
    "NOTATION: Tag represents a notation of the format `<!XML>`.",
    "COMMENT: Tag represents a comment of the format `<!-- Comment -->`.")
    
  struct("XMLAttrib", { type="XMLAttrib" }, [[
   cpp(str) Name   # Name of the attribute
   cpp(str) Value  # Value of the attribute
  ]],
  [[
   inline bool isContent() const { return Name.empty(); }
   inline bool isTag() const { return !Name.empty(); }
   XMLAttrib(std::string pName, std::string pValue = "") : Name(pName), Value(pValue) { };
   XMLAttrib() = default;
  ]])

  -- Note that if a tag specifies a namespace prefix then it will appear in the first XMLAttrib with the name

  struct("XMLTag", { type="XMLTag" }, [[
    int ID           # Unique ID assigned to the tag on creation
    int ParentID     # Unique ID of the parent tag
    int LineNo       # Line number on which this tag was encountered
    int(XTF) Flags   # Optional flags
    uint NamespaceID # Hash of namespace URI or 0 for no namespace
    cpp(array(struct(XMLAttrib))) Attribs # Array of attributes for this tag
    cpp(array(struct(XMLTag))) Children   # Array of child tags
  ]],
  [[
   XMLTag(int pID, int pLine = 0) :
      ID(pID), ParentID(0), LineNo(pLine), Flags(XTF::NIL), NamespaceID(0)
      { }

   XMLTag(int pID, int pLine, pf::vector<XMLAttrib> pAttribs) :
      ID(pID), ParentID(0), LineNo(pLine), Flags(XTF::NIL), NamespaceID(0), Attribs(pAttribs)
      { }

   XMLTag() { XMLTag(0); }

   inline CSTRING name() const { return Attribs[0].Name.c_str(); }
   inline bool hasContent() const { return (!Children.empty()) and (Children[0].Attribs[0].Name.empty()); }
   inline bool isContent() const { return Attribs[0].Name.empty(); }
   inline bool isTag() const { return !Attribs[0].Name.empty(); }

   inline bool hasChildTags() const {
      for (auto &scan : Children) {
         if (!scan.Attribs[0].Name.empty()) return true;
      }
      return false;
   }

   inline const std::string * attrib(const std::string &Name) const {
      for (unsigned a=1; a < Attribs.size(); a++) {
         if (pf::iequals(Attribs[a].Name, Name)) return &Attribs[a].Value;
      }
      return NULL;
   }

   inline std::string getContent() const {
      if (Children.empty()) return std::string("");

      std::ostringstream str;
      for (auto &scan : Children) {
         if (scan.Attribs.empty()) continue; // Sanity check
         if (scan.Attribs[0].isContent()) str << scan.Attribs[0].Value;
      }
      return str.str();
   }
  ]])

  methods("xml", "XML", {
    { id=1,  name="SetAttrib" },
    { id=2,  name="Serialise" },
    { id=3,  name="InsertXML" },
    { id=4,  name="GetContent" },
    { id=5,  name="Sort" },
    { id=6,  name="RemoveTag" },
    { id=7,  name="MoveTags" },
    { id=8,  name="GetAttrib" },
    { id=9,  name="InsertXPath" },
    { id=10, name="FindTag" },
    { id=11, name="Filter" },
    { id=13, name="Count" },
    { id=14, name="InsertContent" },
    { id=15, name="RemoveXPath" },
    { id=18, name="GetTag" },
    { id=19, name="RegisterNamespace" },
    { id=20, name="GetNamespaceURI" },
    { id=21, name="SetTagNamespace" },
    { id=22, name="ResolvePrefix" },
    { id=23, name="SetVariable" },
    { id=24, name="GetEntity" },
    { id=25, name="GetNotation" }
  })

  class("XML", { src="xml.cpp", output="xml_def.c" }, [[
    str Path         # Location of the XML data file
    str DocType      # Root element name from DOCTYPE declaration
    str PublicID     # Public identifier for external DTD
    str SystemID     # System identifier for external DTD
    obj Source       # Alternative data source to specifying a `Path`
    int(XMF) Flags   # Optional user flags
    int Start        # Starting cursor position (tag index) for some operations
    int Modified     # Modification timestamp
    error ParseError # Private
    int LineNo       # Private
  ]],
  nil,
  [[
   typedef pf::vector<XMLTag> TAGS;
   typedef pf::vector<XMLTag>::iterator CURSOR;
   TAGS Tags;

   template <class T> inline ERR insertStatement(int Index, XMI Where, T Statement, XMLTag **Result) {
      int index_result;
      XMLTag *tag_result;
      if (auto error = insertXML(Index, Where, to_cstring(Statement), &index_result); error IS ERR::Okay) {
         error = getTag(index_result, &tag_result);
         *Result = tag_result;
         return error;
      }
      else return error;
   }

   template <class T> inline ERR setAttribValue(int Tag, int Flags, T &&Attrib, int Value) {
      auto attrib = to_cstring(Attrib);
      auto buffer = std::to_string(Value);
      return setAttrib(Tag, Flags, attrib, buffer.c_str());
   }

   template <class T> inline ERR setAttribValue(int Tag, int Flags, T &&Attrib, double Value) {
      auto attrib = to_cstring(Attrib);
      auto buffer = std::to_string(Value);
      return setAttrib(Tag, Flags, attrib, buffer.c_str());
   }
  ]])

  c_insert([[
//********************************************************************************************************************

namespace xml {

inline void UpdateAttrib(XMLTag &Tag, const std::string Name, const std::string Value, bool CanCreate = false)
{
   for (auto a = Tag.Attribs.begin(); a != Tag.Attribs.end(); a++) {
      if (pf::iequals(Name, a->Name)) {
         a->Name  = Name;
         a->Value = Value;
         return;
      }
   }

   if (CanCreate) Tag.Attribs.emplace_back(Name, Value);
}

inline void NewAttrib(XMLTag &Tag, const std::string Name, const std::string Value) {
   Tag.Attribs.emplace_back(Name, Value);
}

inline void NewAttrib(XMLTag *Tag, const std::string Name, const std::string Value) {
   Tag->Attribs.emplace_back(Name, Value);
}

inline std::string GetContent(const XMLTag &Tag) {
   std::string value;
   for (auto &scan : Tag.Children) {
      if (scan.Attribs.empty()) continue;
      if (scan.Attribs[0].isContent()) value.append(scan.Attribs[0].Value);
   }
   return value;
}

//********************************************************************************************************************
// Call a Function for every attribute in the XML tree.  Allows you to modify attributes quite easily, e.g. to convert
// all attribute names to uppercase:
//
// std::transform(attrib.Name.begin(), attrib.Name.end(), attrib.Name.begin(),
//   [](UBYTE c){ return std::toupper(c); });

inline void ForEachAttrib(objXML::TAGS &Tags, std::function<void(XMLAttrib &)> &Function)
{
   for (auto &tag : Tags) {
      for (auto &attrib : tag.Attribs) {
         Function(attrib);
      }
      if (!tag.Children.empty()) ForEachAttrib(tag.Children, Function);
   }
}

} // namespace
  ]])
end)
