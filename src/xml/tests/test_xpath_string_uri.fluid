-- XPath string and URI function coverage

   include 'xml'
 
-----------------------------------------------------------------------------------------------------------------------

function testCodepointConversions()
   local xml = glTestXML

   local text = xml.getKey("codepoints-to-string(string-to-codepoints('café'))")
   assert(text == 'café', "codepoints-to-string should decode UTF-8 codepoints")

   local fourth = xml.getKey("string-to-codepoints('café')[4]")
   assert(fourth == '233', "string-to-codepoints should report the final codepoint value")
end

-----------------------------------------------------------------------------------------------------------------------

function testStringFunctions()
   local xml = glTestXML

   local compareResult = tonumber(xml.getKey("compare('abc','def')"))
   assert(compareResult == -1, "compare should report that abc comes before def")

   local equalResult = xml.getKey("codepoint-equal('same','same')")
   assert(equalResult == 'true', "codepoint-equal should return true for identical strings")

   local suffixMatch = xml.getKey("ends-with('hello world','world')")
   assert(suffixMatch == 'true', "ends-with should confirm matching suffix")

   local joined = xml.getKey("string-join(/root/part, '-')")
   assert(joined == 'a-b-c', "string-join should concatenate entries with separators")

   local nfcValue = xml.getKey("normalize-unicode('café','NFC')")
   assert(nfcValue == 'café', "normalize-unicode NFC form should preserve composed characters")

   local nfdValue = xml.getKey("normalize-unicode('café','NFD')")
   assert(nfdValue:sub(1, 3) == 'caf', "normalize-unicode NFD form should begin with the original prefix")

   local iriValue = xml.getKey("iri-to-uri('https://example.com/é')")
   assert(iriValue == 'https://example.com/%C3%A9', "iri-to-uri should percent encode non ASCII characters")
end

-----------------------------------------------------------------------------------------------------------------------

function testAnalyzeString()
   local xml = glTestXML

   --local first = xml.getKey("analyze-string('abc123','([0-9]+)')[1]")
   --assert(first == 'non-match:abc', "analyze-string should report unmatched prefix, got '" .. nz(first,'NIL') .. "'")

   local second = xml.getKey("analyze-string('abc123','([0-9]+)')[2]")
   assert(second == 'match:123', "analyze-string should report matched text, got '" .. nz(second,'NIL') .. "'")

   --local third = xml.getKey("analyze-string('abc123','([0-9]+)')[3]")
   --assert(third == 'group1:123', "analyze-string should include capture groups, got '" .. nz(third,'NIL') .. "'")
end

-----------------------------------------------------------------------------------------------------------------------

function testResolveUri()
   local xml = glTestXML

   local resolved = xml.getKey("resolve-uri('images/icon.png','http://example.com/docs/start.xml')")
   assert(resolved == 'http://example.com/docs/images/icon.png', "resolve-uri should combine base and relative paths")

   local up = xml.getKey("resolve-uri('../shared/data.json','http://example.com/docs/dir/page.html')")
   assert(up == 'http://example.com/docs/shared/data.json', "resolve-uri should normalise parent directory references")

   local absolute = xml.getKey("resolve-uri('https://cdn.example.com/app.js','http://example.com/docs/start.xml')")
   assert(absolute == 'https://cdn.example.com/app.js', "resolve-uri should return absolute URIs unchanged")
end

-----------------------------------------------------------------------------------------------------------------------

function testFormattingFunctions()
   local xml = glTestXML

   local formattedDate = xml.getKey("format-date('2024-05-17','[Y0001]-[M01]-[D01]')")
   assert(formattedDate == '2024-05-17', "format-date should honour the supplied picture")

   local formattedTime = xml.getKey("format-time('12:34:56','[H01]:[m01]:[s01]')")
   assert(formattedTime == '12:34:56', "format-time should produce the requested components")

   local formattedDateTime = xml.getKey("format-dateTime('2024-05-17T12:34:56','[Y0001]-[M01]-[D01]T[H01]:[m01]')")
   assert(formattedDateTime == '2024-05-17T12:34', "format-dateTime should format combined values")

   local formattedInteger = xml.getKey("format-integer(1234567,'#,##0')")
   assert(formattedInteger == '1,234,567', "format-integer should insert group separators")
end

-----------------------------------------------------------------------------------------------------------------------

return {
   tests = {
      'testCodepointConversions', 'testStringFunctions', 'testAnalyzeString',
      'testResolveUri', 'testFormattingFunctions'
   },
   init = function()
      glTestXML = obj.new("xml", {
         statement = '<root base="http://example.com/docs/start.xml">' ..
                     '<part>a</part>' ..
                     '<part>b</part>' ..
                     '<part>c</part>' ..
                     '</root>'
      })
   end
}
