-- Comprehensive XML parsing tests

   include 'xml'

-----------------------------------------------------------------------------------------------------------------------
-- Test basic XML parsing from Statement field

function testStatementParsing()
   local xml = obj.new("xml", {
      statement = '<?xml version="1.0"?><root><child attr="value">Content</child></root>',
      flags = XMF_STRIP_HEADERS
   })

   local tags = xml.tags
   assert(tags, "XML parsing failed - no tags created")
   assert(#tags == 1, "Expected 1 root tag, got " .. #tags)
   assert(tags[1].attribs[1].name == "root", "Expected root tag name")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test CDATA parsing

function testCDATAParsing()
   local xml = obj.new("xml", {
      statement = '<root><![CDATA[Some <special> & content]]></root>'
   })

   local tags = xml.tags
   assert(tags, "CDATA parsing failed")
   local children = tags[1].children
   assert(#children == 1, "Expected 1 CDATA child")
   assert(children[1].attribs[1].value == "Some <special> & content", "CDATA content not preserved")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test comment handling

function testCommentHandling()
   local xml = obj.new("xml", {
      statement = '<root><!-- This is a comment --><child/></root>'
   })

   -- Comments should be stripped by default
   assert(xml.tags[1].children[1].attribs[1].name == "child", "Comment not stripped properly")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test attribute parsing with various quote types

function testAttributeParsing()
   local xml = obj.new("xml", {
      statement = '<root attr1="value1" attr2=\'value2\' attr3=unquoted><child/></root>'
   })

   local err, value1 = xml.mtGetAttrib(xml.tags[1].id, 'attr1')
   assert(err == ERR_Okay, "Failed to get attr1")
   assert(value1 == "value1", "attr1 value incorrect")

   local err, value2 = xml.mtGetAttrib(xml.tags[1].id, 'attr2')
   assert(err == ERR_Okay, "Failed to get attr2")
   assert(value2 == "value2", "attr2 value incorrect")

   local err, value3 = xml.mtGetAttrib(xml.tags[1].id, 'attr3')
   assert(err == ERR_Okay, "Failed to get attr3")
   assert(value3 == "unquoted", "attr3 value incorrect")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test nested tag structure

function testNestedStructure()
   local xml = obj.new("xml", {
      statement = '<root><level1><level2><level3>Deep content</level3></level2></level1></root>'
   })

   local level1 = xml.tags[1].children[1]
   local level2 = level1.children[1]
   local level3 = level2.children[1]
   local content = level3.children[1]

   assert(level1.attribs[1].name == "level1", "Level1 tag name incorrect")
   assert(level2.attribs[1].name == "level2", "Level2 tag name incorrect")
   assert(level3.attribs[1].name == "level3", "Level3 tag name incorrect")
   assert(content.attribs[1].value == "Deep content", "Deep content not preserved")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test self-closing tags

function testSelfClosingTags()
   local xml = obj.new("xml", {
      statement = '<root><self-closed attr="value"/><normal>content</normal></root>'
   })

   local children = xml.tags[1].children
   assert(#children == 2, "Expected 2 children, got " .. #children)
   assert(children[1].attribs[1].name == "self-closed", "Self-closed tag name incorrect")

   local err, value = xml.mtGetAttrib(children[1].id, 'attr')
   assert(err == ERR_Okay and value == "value", "Self-closed tag attribute not preserved")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test XML instructions

function testXMLInstructions()
   local xml = obj.new("xml", {
      statement = '<?xml version="1.0" encoding="UTF-8"?><?stylesheet type="text/xsl" href="style.xsl"?><root/>'
   })

   -- Instructions should be parsed when not stripped
   assert(#xml.tags >= 1, "XML instructions affected normal parsing")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test mixed content

function testMixedContent()
   local xml = obj.new("xml", {
      statement = '<root>Text before <child>Child content</child> Text after</root>'
   })

   local children = xml.tags[1].children
   assert(#children == 3, "Expected 3 content nodes, got " .. #children)
   assert(children[1].attribs[1].value == "Text before ", "First content incorrect")
   assert(children[2].attribs[1].name == "child", "Child tag missing")
   assert(children[3].attribs[1].value == " Text after", "Last content incorrect")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test empty elements

function testEmptyElements()
   local xml = obj.new("xml", {
      statement = '<root><empty></empty><empty-self/></root>'
   })

   local children = xml.tags[1].children
   assert(#children == 2, "Expected 2 empty elements")
   assert(children[1].attribs[1].name == "empty", "First empty element name incorrect")
   assert(children[2].attribs[1].name == "empty-self", "Second empty element name incorrect")
end

-----------------------------------------------------------------------------------------------------------------------

return {
   tests = {
      'testStatementParsing',
      'testCDATAParsing', 'testCommentHandling',
      'testAttributeParsing', 'testNestedStructure', 'testSelfClosingTags',
      'testXMLInstructions', 'testMixedContent', 'testEmptyElements'
   },
   init = function(ScriptFolder)
      -- No global init needed for these tests
   end,
   cleanup = function()
      -- No cleanup needed
   end
}