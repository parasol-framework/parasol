-- XPath 2.0 date and time helper tests

   include 'xml'

-----------------------------------------------------------------------------------------------------------------------
-- Validate component extraction across dateTime, date and time values

function testDateTimeExtraction()
   local xml = obj.new("xml", {
      statement = '<root>'
         .. '<item id="dt" value="2024-03-15T09:30:00.5+05:30"/>'
         .. '<item id="date" value="2024-03-15-05:00"/>'
         .. '<item id="time" value="14:45:30.25-03:00"/>'
         .. '</root>'
   })

   local errDateTime, nodeDateTime = xml.mtFindTag('/root/item[@id = "dt"'
      .. ' and year-from-dateTime(@value) = 2024'
      .. ' and month-from-dateTime(@value) = 3'
      .. ' and day-from-dateTime(@value) = 15'
      .. ' and hours-from-dateTime(@value) = 9'
      .. ' and minutes-from-dateTime(@value) = 30'
      .. ' and round(seconds-from-dateTime(@value) * 10) = 5'
      .. ' and timezone-from-dateTime(@value) = "PT5H30M"]')
   assert(errDateTime == ERR_Okay and nodeDateTime != nil,
      'dateTime component helpers should expose calendar fields and timezone offsets')

   local errDate, nodeDate = xml.mtFindTag('/root/item[@id = "date"'
      .. ' and year-from-date(@value) = 2024'
      .. ' and month-from-date(@value) = 3'
      .. ' and day-from-date(@value) = 15'
      .. ' and timezone-from-date(@value) = "-PT5H"]')
   assert(errDate == ERR_Okay and nodeDate != nil,
      'date component helpers should expose calendar fields and signed timezone offsets')

   local errTime, nodeTime = xml.mtFindTag('/root/item[@id = "time"'
      .. ' and hours-from-time(@value) = 14'
      .. ' and minutes-from-time(@value) = 45'
      .. ' and round(seconds-from-time(@value) * 100) = 3025'
      .. ' and timezone-from-time(@value) = "-PT3H"]')
   assert(errTime == ERR_Okay and nodeTime != nil,
      'time component helpers should decode time-of-day fields including fractional seconds and timezones')
end

-----------------------------------------------------------------------------------------------------------------------
-- Validate timezone adjustment helpers and constructor utilities

function testDateTimeAdjustment()
   local xml = obj.new("xml", { statement = '<root />' })

   local adjustedUtc = xml.getKey("adjust-dateTime-to-timezone('2023-01-01T12:00:00+02:00', 'PT0S')")
   assert(adjustedUtc == '2023-01-01T10:00:00Z',
      'adjust-dateTime-to-timezone() should translate instants to the requested timezone, got: ' .. nz(adjustedUtc,'NIL'))

   local adjustedForward = xml.getKey("adjust-dateTime-to-timezone('2023-01-01T12:00:00', 'PT3H')")
   assert(adjustedForward == '2023-01-01T15:00:00+03:00',
      'dateTime adjustment should adopt the target offset when none is provided on the source value')

   local adjustedDate = xml.getKey("adjust-date-to-timezone('2023-01-01+02:00', 'PT0S')")
   assert(adjustedDate == '2022-12-31Z',
      'adjust-date-to-timezone() should shift calendar days when timezone changes cross midnight')

   local adjustedTime = xml.getKey("adjust-time-to-timezone('12:00:00+02:00', 'PT0S')")
   assert(adjustedTime == '10:00:00Z',
      'adjust-time-to-timezone() should convert clock times between offsets')

   local constructed = xml.getKey("dateTime('2023-12-25', '10:15:30Z')")
   assert(constructed == '2023-12-25T10:15:30Z',
      'dateTime() should combine xs:date and xs:time values into a canonical xs:dateTime string')

   local implicit = xml.getKey('implicit-timezone()')
   assert(implicit == 'PT0S', 'implicit-timezone() should reflect the engine default timezone offset')
end

-----------------------------------------------------------------------------------------------------------------------

return {
   tests = {
      'testDateTimeExtraction',
      'testDateTimeAdjustment'
   },
   init = function(ScriptFolder)
   end,
   cleanup = function()
   end
}
