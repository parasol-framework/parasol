-- Comprehensive XML manipulation tests

   include 'xml'

local function printXML(XML)
   local err, str = XML.mtSerialise(0, XMF_INCLUDE_SIBLINGS)
   print(nz(str,'NIL'))
end

-----------------------------------------------------------------------------------------------------------------------
-- Test InsertXML method with various insertion points

function testInsertXML()
   local xml = obj.new("xml", {
      statement = '<root><child1/><child2/></root>'
   })

   local rootId = xml.tags[1].id

   -- Test CHILD insertion
   local err, newId = xml.mtInsertXML(rootId, XMI_CHILD, '<inserted>At beginning</inserted>')
   assert(err == ERR_Okay, "Failed to insert as child: " .. mSys.GetErrorMsg(err))

   -- Test CHILD_END insertion
   local err, endId = xml.mtInsertXML(rootId, XMI_CHILD_END, '<inserted>At end</inserted>')
   assert(err == ERR_Okay, "Failed to insert at child end: " .. mSys.GetErrorMsg(err))

   -- Verify structure
   local children = xml.tags[1].children
   assert(#children == 4, "Expected 4 children after insertions, got " .. #children)
   assert(children[1].attribs[1].name == "inserted", "First insertion failed")
   assert(children[4].attribs[1].name == "inserted", "Last insertion failed")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test InsertXML with PREV and NEXT positions

function testInsertXMLSiblings()
   local xml = obj.new("xml", {
      statement = '<root><child1/><child2/><child3/></root>'
   })

   local err, child2Id = xml.mtFindTag("/root/child2")

   -- Insert before child2
   local err, prevId = xml.mtInsertXML(child2Id, XMI_PREV, '<before/>')
   assert(err == ERR_Okay, "Failed to insert before: " .. mSys.GetErrorMsg(err))

   -- Insert after child2
   local err, nextId = xml.mtInsertXML(child2Id, XMI_NEXT, '<after/>')
   assert(err == ERR_Okay, "Failed to insert after: " .. mSys.GetErrorMsg(err))

   -- Verify positions
   local children = xml.tags[1].children
   assert(#children == 5, "Expected 5 children after sibling insertions")
   assert(children[2].attribs[1].name == "before", "PREV insertion in wrong position")
   assert(children[4].attribs[1].name == "after", "NEXT insertion in wrong position")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test SetAttrib method for adding and updating attributes

function testSetAttrib()
   local xml = obj.new("xml", {
      statement = '<root existing="oldvalue"><child/></root>'
   })

   local rootId = xml.tags[1].id

   -- Update existing attribute
   local err = xml.mtSetAttrib(rootId, XMS_UPDATE, 'existing', 'newvalue')
   assert(err == ERR_Okay, "Failed to update existing attribute: " .. mSys.GetErrorMsg(err))

   -- Add new attribute
   local err = xml.mtSetAttrib(rootId, XMS_NEW, 'newattr', 'newvalue')
   assert(err == ERR_Okay, "Failed to add new attribute: " .. mSys.GetErrorMsg(err))

   -- Verify updates
   local err, value = xml.mtGetAttrib(rootId, 'existing')
   assert(err == ERR_Okay and value == 'newvalue', "Existing attribute not updated")

   local err, value = xml.mtGetAttrib(rootId, 'newattr')
   assert(err == ERR_Okay and value == 'newvalue', "New attribute not added")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test SetAttrib for removing attributes

function testSetAttribRemove()
   local xml = obj.new("xml", {
      statement = '<root attr1="value1" attr2="value2" attr3="value3"/>'
   })

   local rootId = xml.tags[1].id

   -- Remove attribute by setting value to nil
   local err = xml.mtSetAttrib(rootId, XMS_UPDATE, 'attr2', nil)
   assert(err == ERR_Okay, "Failed to remove attribute: " .. mSys.GetErrorMsg(err))

   -- Verify removal
   local err, value = xml.mtGetAttrib(rootId, 'attr2')
   assert(err == ERR_NotFound, "Attribute should have been removed")

   -- Verify other attributes still exist
   local err, value = xml.mtGetAttrib(rootId, 'attr1')
   assert(err == ERR_Okay and value == 'value1', "Other attributes were affected")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test InsertContent method

function testInsertContent()
   local xml = obj.new("xml", {
      statement = '<root><child>Original content</child></root>'
   })

   local childId = xml.tags[1].children[1].id

   -- Insert content as child
   local err, contentId = xml.mtInsertContent(childId, XMI_CHILD, 'Inserted content')
   assert(err == ERR_Okay, "Failed to insert content: " .. mSys.GetErrorMsg(err))

   -- Verify content insertion
   local child = xml.tags[1].children[1]
   assert(#child.children == 2, "Expected 2 content nodes after insertion")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test RemoveTag method

function testRemoveTag()
   local xml = obj.new("xml", {
      statement = '<root><child1/><child2/><child3/><child4/></root>'
   })

   local child2Id = xml.tags[1].children[2].id

   -- Remove single tag
   local err = xml.mtRemoveTag(child2Id, 1)
   assert(err == ERR_Okay, "Failed to remove tag: " .. mSys.GetErrorMsg(err))

   -- Verify removal
   local children = xml.tags[1].children
   assert(#children == 3, "Expected 3 children after removal, got " .. #children)
   assert(children[2].attribs[1].name == "child3", "Wrong tag was removed")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test RemoveTag with multiple consecutive tags

function testRemoveMultipleTags()
   local xml = obj.new("xml", {
      statement = '<root><child1/><child2/><child3/><child4/><child5/></root>'
   })

   local child2Id = xml.tags[1].children[2].id

   -- Remove 3 consecutive tags starting from child2
   local err = xml.mtRemoveTag(child2Id, 3)
   assert(err == ERR_Okay, "Failed to remove multiple tags: " .. mSys.GetErrorMsg(err))

   -- Verify removal
   local children = xml.tags[1].children
   assert(#children == 2, "Expected 2 children after multiple removal, got " .. #children)
   assert(children[1].attribs[1].name == "child1", "First child should remain")
   assert(children[2].attribs[1].name == "child5", "Last child should remain")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test MoveTags method

function testMoveTags()
   -- Test XMI_CHILD - move as first child
   local xml = obj.new("xml", {
      statement = '<root><source1/><source2/><dest><existing/></dest></root>'
   })

   local err, source1Id = xml.mtFindTag("/root/source1")
   local err, destId = xml.mtFindTag("/root/dest")

   -- Move source1 as child of dest
   local err = xml.mtMoveTags(source1Id, 1, destId, XMI_CHILD)
   assert(err == ERR_Okay, "Failed to move tag as child: " .. mSys.GetErrorMsg(err))

   -- Verify move
   local rootChildren = xml.tags[1].children
   assert(#rootChildren == 2, "Expected 2 root children after XMI_CHILD move")

   local destChildren = rootChildren[2].children
   assert(#destChildren == 2, "Expected 2 dest children after XMI_CHILD move")
   assert(destChildren[1].attribs[1].name == "source1", "XMI_CHILD: moved tag not in correct position")
   assert(destChildren[2].attribs[1].name == "existing", "XMI_CHILD: existing child moved incorrectly")
end

function testMoveTagsChildEnd()
   -- Test XMI_CHILD_END - move as last child
   local xml = obj.new("xml", {
      statement = '<root><source/><dest><child1/><child2/></dest></root>'
   })

   local err, sourceId = xml.mtFindTag("/root/source")
   local err, destId = xml.mtFindTag("/root/dest")

   -- Move source as last child of dest
   local err = xml.mtMoveTags(sourceId, 1, destId, XMI_CHILD_END)
   assert(err == ERR_Okay, "Failed to move tag as child end: " .. mSys.GetErrorMsg(err))

   -- Verify move
   local destChildren = xml.tags[1].children[1].children
   assert(#destChildren == 3, "Expected 3 dest children after XMI_CHILD_END move")
   assert(destChildren[1].attribs[1].name == "child1", "XMI_CHILD_END: first child moved incorrectly")
   assert(destChildren[2].attribs[1].name == "child2", "XMI_CHILD_END: second child moved incorrectly")
   assert(destChildren[3].attribs[1].name == "source", "XMI_CHILD_END: moved tag not at end")
end

function testMoveTagsPrev()
   -- Test XMI_PREV - move as previous sibling
   local xml = obj.new("xml", {
      statement = '<root><source/><target/><other/></root>'
   })

   local err, sourceId = xml.mtFindTag("/root/source")
   local err, targetId = xml.mtFindTag("/root/target")

   -- Move source before target
   local err = xml.mtMoveTags(sourceId, 1, targetId, XMI_PREV)
   assert(err == ERR_Okay, "Failed to move tag as previous: " .. mSys.GetErrorMsg(err))

   -- Verify move - source should now be before target
   local rootChildren = xml.tags[1].children
   assert(#rootChildren == 3, "Expected 3 root children after XMI_PREV move")
   assert(rootChildren[1].attribs[1].name == "source", "XMI_PREV: moved tag not in correct position")
   assert(rootChildren[2].attribs[1].name == "target", "XMI_PREV: target tag moved incorrectly")
   assert(rootChildren[3].attribs[1].name == "other", "XMI_PREV: other tag moved incorrectly")
end

function testMoveTagsNext()
   -- Test XMI_NEXT - move as next sibling
   local xml = obj.new("xml", {
      statement = '<root><other/><target/><source/></root>'
   })

   local err, sourceId = xml.mtFindTag("/root/source")
   local err, targetId = xml.mtFindTag("/root/target")

   -- Move source after target
   local err = xml.mtMoveTags(sourceId, 1, targetId, XMI_NEXT)
   assert(err == ERR_Okay, "Failed to move tag as next: " .. mSys.GetErrorMsg(err))

   -- Verify move - source should now be after target
   local rootChildren = xml.tags[1].children
   assert(#rootChildren == 3, "Expected 3 root children after XMI_NEXT move")
   assert(rootChildren[1].attribs[1].name == "other", "XMI_NEXT: other tag moved incorrectly")
   assert(rootChildren[2].attribs[1].name == "target", "XMI_NEXT: target tag moved incorrectly")
   assert(rootChildren[3].attribs[1].name == "source", "XMI_NEXT: moved tag not in correct position")
end

function testMoveMultipleTags()
   -- Test moving multiple consecutive tags
   local xml = obj.new("xml", {
      statement = '<root><source1/><source2/><source3/><dest><existing/></dest></root>'
   })

   local err, source1Id = xml.mtFindTag("/root/source1")
   local err, destId = xml.mtFindTag("/root/dest")

   -- Move 3 consecutive tags starting from source1 as children of dest
   local err = xml.mtMoveTags(source1Id, 3, destId, XMI_CHILD)
   assert(err == ERR_Okay, "Failed to move multiple tags: " .. mSys.GetErrorMsg(err))

   -- Verify move
   local rootChildren = xml.tags[1].children
   assert(#rootChildren == 1, "Expected 1 root child after moving multiple tags")

   local destChildren = rootChildren[1].children
   assert(#destChildren == 4, "Expected 4 dest children after moving multiple tags")
   assert(destChildren[1].attribs[1].name == "source1", "Multiple move: first moved tag not in correct position")
   assert(destChildren[2].attribs[1].name == "source2", "Multiple move: second moved tag not in correct position")
   assert(destChildren[3].attribs[1].name == "source3", "Multiple move: third moved tag not in correct position")
   assert(destChildren[4].attribs[1].name == "existing", "Multiple move: existing child moved incorrectly")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test InsertXPath method

function testInsertXPath()
   local xml = obj.new("xml", {
      statement = '<root><section name="target"><item/></section></root>'
   })

   -- Insert using XPath
   local err, newId = xml.mtInsertXPath('/root/section[@name="target"]', XMI_CHILD, '<newitem/>')
   assert(err == ERR_Okay, "Failed to insert via XPath: " .. mSys.GetErrorMsg(err))

   -- Verify insertion
   local err, targetId = xml.mtFindTag('/root/section[@name="target"]')
   assert(err == ERR_Okay, "Failed to find target section")

   local err, targetTag = xml.mtGetTag(targetId)
   assert(err == ERR_Okay, "Failed to get target tag")
   assert(#targetTag.children == 2, "Expected 2 children after XPath insertion")
end

-----------------------------------------------------------------------------------------------------------------------

return {
   tests = {
      'testInsertXML', 'testInsertXMLSiblings', 'testSetAttrib', 'testSetAttribRemove',
      'testInsertContent', 'testRemoveTag', 'testRemoveMultipleTags', 'testMoveTags',
      'testMoveTagsChildEnd', 'testMoveTagsPrev', 'testMoveTagsNext', 'testMoveMultipleTags',
      'testInsertXPath'
   }
}