-- Test script for XML SetVariable method

   include 'xml'

-----------------------------------------------------------------------------------------------------------------------
-- Test basic variable setting and XPath variable reference

function testBasicVariableReference()
   local xml = obj.new("xml", {
      statement = '<root><item name="first">Hello</item><item name="second">World</item></root>'
   })

   local xq = obj.new('xquery', { statement= '//item[@name=$myvar]' })
   assert(xq.acSetKey('myvar', 'first') == ERR_Okay, "Failed to set variable: " .. mSys.GetErrorMsg(err))
   assert(xq.mtEvaluate(xml) == ERR_Okay, "Failed to find item using variable reference")
   assert(xq.resultString == 'Hello', "Expected 'Hello', got '" .. xq.resultString .. "'")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test updating variable value

function testVariableUpdate()
   local xml = obj.new("xml", {
      statement = '<root><item name="first">Hello</item><item name="second">World</item></root>'
   })

   local xq = obj.new('xquery', { statement= '//item[@name=$myvar]' })
   assert(xq.acSetKey('myvar', 'first') == ERR_Okay, "Failed to set variable: " .. mSys.GetErrorMsg(err))
   assert(xq.acSetKey('myvar', 'second') == ERR_Okay, "Failed to update variable: " .. mSys.GetErrorMsg(err))
   assert(xq.mtEvaluate(xml) == ERR_Okay, "Failed to find item using updated variable")
   assert(xq.resultString == 'World', "Expected 'World', got '" .. xq.resultString .. "'")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test non-existent variable behavior

function testNonExistentVariable()
   local xml = obj.new("xml", {
      statement = '<root><item name="first">Hello</item><item name="second">World</item></root>'
   })

   -- Test with non-existent variable (should return no results)
   local xq = obj.new('xquery', { statement= '//item[@name=$nonexistent]' })
   local err = xq.mtEvaluate(xml)
   assert(err == ERR_Okay or err == ERR_Search, "Evaluate should succeed even with non-existent variable")
   assert(nz(xq.resultString) == nil, "Non-existent variable should not match anything")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test removing variable

function testVariableRemoval()
   local xml = obj.new("xml", {
      statement = '<root><item name="first">Hello</item><item name="second">World</item></root>'
   })

   local xq = obj.new('xquery', { statement= '//item[@name=$myvar]' })
   assert(xq.acSetKey('myvar', 'first') == ERR_Okay, "Failed to set variable")
   assert(xq.mtEvaluate(xml) == ERR_Okay, "Variable should work before removal")
   -- Remove variable by setting to nil
   assert(xq.acSetKey('myvar', nil) == ERR_Okay, "Failed to remove variable")

   -- Verify variable no longer works
   local err = xq.mtEvaluate(xml)
   assert(err == ERR_Okay or err == ERR_Search, "Evaluation should succeed after variable removal")
   assert(nz(xq.resultString) == nil, "Non-existent variable should not match anything")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test multiple variables

function testMultipleVariables()
   local xml = obj.new("xml", {
      statement = '<root><item type="book" name="first">Hello</item><item type="magazine" name="second">World</item></root>'
   })

   local xq = obj.new('xquery', { statement= '//item[@name=$namevar and @type=$typevar]' })

   -- Set multiple variables
   assert(xq.acSetKey('namevar', 'first') == ERR_Okay, "Failed to set namevar: " .. mSys.GetErrorMsg(err))
   assert(xq.acSetKey('typevar', 'book') == ERR_Okay, "Failed to set typevar: " .. mSys.GetErrorMsg(err))

   assert(xq.mtEvaluate(xml) == ERR_Okay, "Failed to find item using multiple variables")
   assert(xq.resultString == 'Hello', "Expected 'Hello', got '" .. tostring(xq.resultString) .. "'")
end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
         'testBasicVariableReference',
         'testVariableUpdate',
         'testNonExistentVariable',
         'testVariableRemoval',
         'testMultipleVariables'
      },
      init = function(ScriptFolder)
         -- No global initialization needed for these tests
      end,
      cleanup = function()
         -- No cleanup needed
      end
   }