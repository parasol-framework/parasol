-- Test script for XML SetVariable method

   include 'xml'

-----------------------------------------------------------------------------------------------------------------------
-- Test basic variable setting and XPath variable reference

function testBasicVariableReference()
   local xml = obj.new("xml", {
      statement = '<root><item name="first">Hello</item><item name="second">World</item></root>'
   })

   -- Set a variable
   local err = xml.mtSetVariable('myvar', 'first')
   assert(err == ERR_Okay, "Failed to set variable: " .. mSys.GetErrorMsg(err))

   -- Test XPath with variable reference
   local err, result = xml.mtFindTag('//item[@name=$myvar]')
   assert(err == ERR_Okay and result > 0, "Failed to find item using variable reference")

   local buffer = string.alloc(128)
   err = xml.mtGetContent(result, buffer)
   assert(err == ERR_Okay, "Failed to get content: " .. mSys.GetErrorMsg(err))
   local content = string.match(buffer, '([^%z]+)') or ''
   assert(content == 'Hello', "Expected 'Hello', got '" .. content .. "'")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test updating variable value

function testVariableUpdate()
   local xml = obj.new("xml", {
      statement = '<root><item name="first">Hello</item><item name="second">World</item></root>'
   })

   -- Set initial variable
   local err = xml.mtSetVariable('myvar', 'first')
   assert(err == ERR_Okay, "Failed to set variable: " .. mSys.GetErrorMsg(err))

   -- Update variable value
   err = xml.mtSetVariable('myvar', 'second')
   assert(err == ERR_Okay, "Failed to update variable: " .. mSys.GetErrorMsg(err))

   -- Test XPath with updated variable
   local err, result = xml.mtFindTag('//item[@name=$myvar]')
   assert(err == ERR_Okay and result > 0, "Failed to find item using updated variable")

   local buffer = string.alloc(128)
   err = xml.mtGetContent(result, buffer)
   assert(err == ERR_Okay, "Failed to get content: " .. mSys.GetErrorMsg(err))
   local content = string.match(buffer, '([^%z]+)') or ''
   assert(content == 'World', "Expected 'World', got '" .. content .. "'")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test non-existent variable behavior

function testNonExistentVariable()
   local xml = obj.new("xml", {
      statement = '<root><item name="first">Hello</item><item name="second">World</item></root>'
   })

   -- Test with non-existent variable (should return no results)
   local err, result = xml.mtFindTag('//item[@name=$nonexistent]')
   assert(err == ERR_Okay or err == ERR_Search, "FindTag should succeed even with non-existent variable")
   assert(result <= 0, "Non-existent variable should not match anything")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test removing variable

function testVariableRemoval()
   local xml = obj.new("xml", {
      statement = '<root><item name="first">Hello</item><item name="second">World</item></root>'
   })

   -- Set and verify variable works
   local err = xml.mtSetVariable('myvar', 'first')
   assert(err == ERR_Okay, "Failed to set variable: " .. mSys.GetErrorMsg(err))

   local err, result = xml.mtFindTag('//item[@name=$myvar]')
   assert(err == ERR_Okay and result > 0, "Variable should work before removal")

   -- Remove variable by setting to nil
   err = xml.mtSetVariable('myvar', nil)
   assert(err == ERR_Okay, "Failed to remove variable: " .. mSys.GetErrorMsg(err))

   -- Verify variable no longer works
   err, result = xml.mtFindTag('//item[@name=$myvar]')
   assert(err == ERR_Okay or err == ERR_Search, "FindTag should succeed after variable removal")
   assert(result <= 0, "Removed variable should not match anything")
end

-----------------------------------------------------------------------------------------------------------------------
-- Test multiple variables

function testMultipleVariables()
   local xml = obj.new("xml", {
      statement = '<root><item type="book" name="first">Hello</item><item type="magazine" name="second">World</item></root>'
   })

   -- Set multiple variables
   local err = xml.mtSetVariable('namevar', 'first')
   assert(err == ERR_Okay, "Failed to set namevar: " .. mSys.GetErrorMsg(err))

   err = xml.mtSetVariable('typevar', 'book')
   assert(err == ERR_Okay, "Failed to set typevar: " .. mSys.GetErrorMsg(err))

   -- Test XPath with multiple variables
   local err, result = xml.mtFindTag('//item[@name=$namevar and @type=$typevar]')
   assert(err == ERR_Okay and result > 0, "Failed to find item using multiple variables")

   local buffer = string.alloc(128)
   err = xml.mtGetContent(result, buffer)
   assert(err == ERR_Okay, "Failed to get content: " .. mSys.GetErrorMsg(err))
   local content = string.match(buffer, '([^%z]+)') or ''
   assert(content == 'Hello', "Expected 'Hello', got '" .. content .. "'")
end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
         'testBasicVariableReference',
         'testVariableUpdate',
         'testNonExistentVariable',
         'testVariableRemoval',
         'testMultipleVariables'
      },
      init = function(ScriptFolder)
         -- No global initialization needed for these tests
      end,
      cleanup = function()
         -- No cleanup needed
      end
   }