#pragma once

#include <stdint.h>

#cmakedefine PARASOL_STATIC

#cmakedefine CMAKE_SYSTEM_NAME @CMAKE_SYSTEM_NAME@
#cmakedefine CMAKE_SIZEOF_VOID_P @CMAKE_SIZEOF_VOID_P@
#undef _LP64
#cmakedefine _LP64 1
#cmakedefine CMAKE_RC_COMPILER_INIT
#cmakedefine REVERSE_BYTEORDER

#ifdef PARASOL_STATIC
// Note: Dependencies also exist in src/core/static_modules.cpp
#cmakedefine INC_MOD_AUDIO
#cmakedefine INC_MOD_BACKSTAGE
#cmakedefine INC_MOD_DISPLAY
#cmakedefine INC_MOD_DOCUMENT
#cmakedefine INC_MOD_FLUID
#cmakedefine INC_MOD_FONT
#cmakedefine INC_MOD_HTTP
#cmakedefine INC_MOD_JPEG
#cmakedefine INC_MOD_JSON
#cmakedefine INC_MOD_MP3
#cmakedefine INC_MOD_NETWORK
#cmakedefine INC_MOD_PICTURE
#cmakedefine INC_MOD_REGEX
#cmakedefine INC_MOD_SCINTILLA
#cmakedefine INC_MOD_SVG
#cmakedefine INC_MOD_VECTOR
#cmakedefine INC_MOD_XML
#cmakedefine INC_MOD_XPATH
#cmakedefine INC_MOD_XRANDR
#endif

// Standard data types.

#ifdef _WIN32
using HOSTHANDLE = void *; // Windows defines a pointer type for native handles
#define PTR_TO_HOST(a) (a)
#else
using HOSTHANDLE = int;    // Unix systems use FD descriptors for handles
#define PTR_TO_HOST(a) ((int)(intptr_t)(a))
#endif

using WINHANDLE = void *;

#undef MAXINT

#ifdef  _LP64
 using MAXINT = int64_t;
 using UMAXINT = uint64_t;
#else
 using MAXINT = int;
 using UMAXINT = uint32_t;
#endif

// System specific types.

#undef ERROR
#undef OBJECTID

using ERROR = int;     // Standard error code
#ifndef __OBJECTID_DEFINED
 using OBJECTID = int;  // 32-bit object ID
#endif
using MEMORYID = int;  // 32-bit memory ID
using FIELD = int64_t;    // 64-bit field ID - used for flag combos

// Pointer types.

#define L64PTR(a)  (APTR)((MAXINT)(a))  // Converts a 64-bit integer to a pointer
#define PTRL64(a)  (int64_t)((MAXINT)(a)) // Converts a pointer to an integer

using TIMER = void *;
using CPTR = const void *;     // Pointer with read-only content
using APTR = void *;           // 32 or 64 bit untyped pointer
using STRING = char *;         // string pointer (NULL terminated)
using SSTRING = char *;        // signed string pointer (NULL terminated)
using CSTRING = const char *;
using OBJECT = void *;             // Object pointer
using OBJECTPTR = struct Object *; // Object pointer
using EVENTID = int64_t;

#ifdef _MSC_VER
 #define __export extern "C" __declspec(dllexport)
#elif _WIN32
 #if !defined(_WINDEF_H)
  #define __export extern "C" __declspec(dllexport)
 #endif
#else
 #define __export  extern "C"
#endif

#ifndef __arm__
#define __x86__         // Does the CPU support the x86 instruction set? (i486 minimum)
#endif

#ifdef __arm__
#define CPU_PC CPU_ARMEABI
#else
#define CPU_PC CPU_I686
#endif

#ifndef TRUE
#define TRUE 1
#endif

#ifndef FALSE
#define FALSE 0
#endif

#ifndef IS
#define IS ==
#endif

