#ifndef PLATFORM_CONFIG_H
#define PLATFORM_CONFIG_H

#cmakedefine PARASOL_STATIC
#cmakedefine PARASOL_SHARED

#cmakedefine CMAKE_SYSTEM_NAME @CMAKE_SYSTEM_NAME@
#cmakedefine CMAKE_SIZEOF_VOID_P @CMAKE_SIZEOF_VOID_P@
#undef _LP64
#cmakedefine _LP64 1
#cmakedefine CMAKE_RC_COMPILER_INIT

#if defined(_MSC_VER)
#define INLINE static __inline
#else
#define INLINE static inline
#endif

#define THREADVAR __thread

#cmakedefine REVERSE_BYTEORDER

#ifndef LITTLE_ENDIAN // Might be defined by endian.h
#cmakedefine LITTLE_ENDIAN
#endif

/*****************************************************************************
** Standard data types.
*/

#ifdef _WIN32
typedef void * HOSTHANDLE; // Windows defines a pointer type for native handles
#define PTR_TO_HOST(a) (a)
#else
typedef int HOSTHANDLE;    // Unix systems use FD descriptors for handles
#define PTR_TO_HOST(a) ((int)(intptr_t)(a))
#endif

#ifndef XMD_H
#if !defined(_WINDEF_H) && !defined(_WINDEF_)
typedef char               BYTE;     // Signed 8-bit quantity
#endif
#endif

#if !defined(_WINDEF_H) && !defined(_WINDEF_)
typedef short              WORD;     // Signed 16-bit quantity
typedef int                LONG;     // Signed 32-bit quantity
typedef unsigned int       ULONG;    // Unsigned 32-bit quantity
#endif

/* If your compiler does not accept 'long long' definitions, try changing the
** LARGE type setting to __int64.
*/

#if defined(_MSC_VER)
typedef __int64            LARGE;
#else
typedef long long          LARGE;    // Signed 64-bit quantity
#endif

#ifdef _WIN32
typedef void * WINHANDLE;
#else
typedef void * WINHANDLE;
#endif

#undef MAXINT

#ifdef  _LP64
typedef LARGE MAXINT;
 #if defined(_MSC_VER)
typedef unsigned __int64   UMAXINT;
 #else
typedef unsigned long long UMAXINT;
 #endif
#else
typedef int MAXINT;
typedef unsigned int UMAXINT;
#endif

typedef unsigned char      UBYTE;    // Unsigned 8-bit quantity
typedef unsigned short     UWORD;    // Unsigned 16-bit quantity
typedef float              FLOAT;    // Signed 32-bit floating point
typedef double             DOUBLE;   // Signed 64-bit floating point

/*****************************************************************************
** System specific types.
*/

#undef ERROR
#undef OBJECTID
typedef LONG ERROR;     // Standard error code
#ifndef __OBJECTID_DEFINED
typedef LONG OBJECTID;  // 32-bit object ID
#endif
typedef LONG MEMORYID;  // 32-bit memory ID
typedef ULONG CLASSID;  // 32-bit class ID
typedef LONG ACTIONID;  // 32-bit action ID
typedef LARGE FIELD;    // 64-bit field ID - used for flag combos

/*****************************************************************************
** Pointer types.
*/

#define L64PTR(a)  (APTR)((MAXINT)(a))  // Converts a 64-bit integer to a pointer
#define PTRL64(a)  (LARGE)((MAXINT)(a)) // Converts a pointer to an integer

typedef void * TIMER;
typedef const void * CPTR;     // Pointer with read-only content
typedef void * APTR;           // 32 or 64 bit untyped pointer
typedef char * STRING;         // string pointer (NULL terminated)
typedef char * SSTRING;        // signed string pointer (NULL terminated)
typedef const char * CSTRING;
typedef const char * CSSTRING; // Obsolete
typedef void * OBJECT;           // Object pointer
typedef struct BaseClass * OBJECTPTR; // Object pointer
typedef LARGE EVENTID;

#if _WIN32
typedef void * APTR64;    // 64-bit untyped pointer
typedef char * STRING64;  // 64-bit string pointer (NULL terminated)
typedef void * OBJECT64;  // 64-bit untyped object pointer
typedef struct BaseClass * OBJECTPTR64; // 64-bit typed object pointer
#else
typedef void * APTR64 __attribute__ ((aligned (8)));    // 64-bit untyped pointer
typedef char * STRING64 __attribute__ ((aligned (8)));  // 64-bit string pointer (NULL terminated)
typedef void * OBJECT64 __attribute__ ((aligned (8)));  // 64-bit untyped object pointer
typedef struct BaseClass * OBJECTPTR64 __attribute__ ((aligned (8))); // 64-bit typed object pointer
#endif

#ifdef _WIN32
#ifndef _WINDEF_H
#define __export __declspec(dllexport)
#endif
#else
#define __export
#endif

#define EXPORT __export

#ifndef __arm__
#define __x86__         // Does the CPU support the x86 instruction set? (i486 minimum)
#endif

#define __corebase__  // Use CoreBase to make function calls

#ifdef __arm__
#define CPU_PC CPU_ARMEABI
#elif __pentium__
#define CPU_PC CPU_I686 // What is the minimum required CPU for the compiled code?
#else
#define CPU_PC CPU_I686
#endif

/*****************************************************************************
** Special keyword definitions.
*/

#undef NULL
#define NULL 0

#ifndef TRUE
#define TRUE 1
#endif

#ifndef FALSE
#define FALSE 0
#endif

#ifndef IS
#define IS ==
#endif

#ifndef AND
#define AND &&
#endif

#ifndef OR
#define OR ||
#endif

#ifndef YES
#define YES TRUE
#endif

#ifndef NO
#define NO FALSE
#endif

#endif /* PLATFORM_CONFIG_H */
