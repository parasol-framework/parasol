--$FLUID:Include

module({ name="Surface", copyright="Paul Manias Â© 2000-2020", version=1.0 }, function()
  c_include("<parasol/modules/display.h>")

  restrict(function()
    loadFile(glPath .. 'common-graphics.fdl')
  end)

  enum("DRAG", { start=0, flags="Flags for the DragStatus field." },
    "NONE: The surface is not being dragged.",
    "ANCHOR: The surface is being dragged and the mouse pointer is anchored to the surface.",
    "NORMAL: The surface is being dragged.")

  flags("EXF", { comment="Optional flags for the ExposeSurface() function." },
    "CHILDREN: If set, all child surfaces that intersect with exposed region will be included in the expose operation.",
    "REDRAW_VOLATILE: Redraw every volatile object that intersects with the expose region, including internal volatile children.",
    "REDRAW_VOLATILE_OVERLAP: Only redraw volatile objects that obscure the expose region from a position outside of the target surface and its children.  Useful if no redrawing has occurred in the surface, but the surface has moved to a new position and the parents need to be redrawn.",
    "ABSOLUTE_COORDS|ABSOLUTE: The supplied coordinates for exposure are absolute (relative to the display).",
    "CURSOR_SPLIT: Internal flag used to reduce screen flickering when a software cursor is in use.")

  flags("RT", { },
     "ROOT")

  flags("LVF", { comment="drwLockBitmap() result flags" },
     "EXPOSE_CHANGES")

  flags("IRF", { comment="Flags for RedrawSurface()." },
    "IGNORE_NV_CHILDREN: Do not draw child surfaces unless they are volatile.",
    "IGNORE_CHILDREN: Do not draw child surfaces (this includes volatile children).",
    "SINGLE_BITMAP: Only draw children and/or siblings when they share our bitmap space.",
    "RELATIVE: Coordinate arguments are expressed in relative format.  Right and Bottom reflect Width and Height respectively.",
    "FORCE_DRAW: Forces redrawing to the surface buffer (overrides visibility checks).")

  flags("ARF", { comment="AccessSurfaceList() flags" },
    "READ: Read only access required",
    "WRITE: Full write access required",
    "UPDATE: Update a single entry (limited write access)",
    "NO_DELAY: Do not delay when waiting for access")

  flags("BDF", { comment="CopySurface() flags" },
    "SYNC: Force synchronsiation so that changes to the source image do not occur mid-copy.",
    "REDRAW: Redraw the surface before performing the copy operation.",
    "DITHER: Allow the use of dithering to improve image quality at a cost of speed.")

  flags("DSF", { },
    "NO_DRAW: Drawing and exposures are disabled",
    "NO_EXPOSE: Drawing is enabled, exposures are disabled")

  enum("SWIN", { start=0, comment="Options for the Surface WindowType field." },
    "HOST: Default to the standard hosted window mode with full titlebar, borders and taskbar representation.",
    "TASKBAR: Create a borderless (custom) window with taskbar representation.",
    "ICON_TRAY: Create a borderless (custom) window with icon tray representation.",
    "NONE: Create a borderless (custom) window with no UI representation.")

  flags("RNF", { "Switches for the Surface class' Flags field." },
    "TRANSPARENT: Enables transparency, which means that the internal graphics routines will ignore this surface during redraws.  It is typically used when creating containers that will host other surfaces.",
    "STICK_TO_BACK: Enable if the surface object must stick to the back of its container.",
    "STICK_TO_FRONT: Enable if the surface object must stick to the front of its container.",
    "VISIBLE: If a surface object is visible to the user, the VISIBLE flag will be set.  If the flag is not set, the surface object is hidden.",
    "STICKY: Prevents any response to the Move action.  It can be circumvented by writing to coordinate fields directly.",
    "GRAB_FOCUS: Helps application windows manage the user's focus within the window",
    "HAS_FOCUS: Read-only.  If set, this flag indicates that the surface object currently has the focus.",
    "FAST_RESIZE: Do not redraw when a surface is shrunk on either dimension.  If a dimension is expanded, only redraw the exposed portion.",
    "DISABLED: This flag is set if the Disable action has been called on a surface object.  Calling the Enable action will turn off the flag setting.",
    "REGION: Read/Init only.  This flag is set if the Region option has been used.",
    "AUTO_QUIT: The surface object will send a quit message to its supporting process when and if the Close method is called.  This flag is typically used when a surface object represents a core window for an application.",
    "HOST: Define host on initialisation to create a container that can host surfaces from other processes.",
    "PRECOPY: Enables pre-copy mode, which means that all graphics behind the surface object are copied into the bitmap buffer prior to any redraw.  This mode can have a noticable impact on CPU time when drawing.",
    "VIDEO|WRITE_ONLY: Set this flag if you would like the surface object's data to be managed in video memory only.  While this can give some speed advantages, be warned that video based surfaces are limited to write-only operations.",
    "NO_HORIZONTAL: Turns off all horizontal movement (applies to the Move action only).",
    "NO_VERTICAL: Turns off all vertical movement (applies to the Move action only).",
    "CURSOR|POINTER: Private - Surface is a mouse cursor",
    "SCROLL_CONTENT: If set, the surface object will send Move and MoveToPoint messages if the Scroll and ScrollToPoint actions are ever called on the object.",
    "AFTER_COPY: Read-only.  Indicates that after-copy mode has been enabled.",
    "FIXED_BUFFER: Passes the NEVER_SHRINK option to the surface bitmap",
    "PERVASIVE_COPY: This flag can be set in conjunction with after-copy mode.  It forces the after-copy support routine to copy graphics over the entire surface area, rather than avoiding the graphics of child surfaces.",
    "NO_FOCUS: Prevents any kind of focussing on this object; no circumvention is possible",
    "FIXED_DEPTH: The target buffer always remains at the same depth",
    "TOTAL_REDRAW: Perform a total redraw of the entire surface when drawing - no partial draws",
    "COMPOSITE|NO_PRECOMPOSITE|POST_COMPOSITE: Do not copy background information into the surface buffer - composite on the fly instead",
    "FULL_SCREEN: Allow the surface to open as a new screen display",
    "IGNORE_FOCUS: Focus is diverted directly to the parent",
    "ASPECT_RATIO: When resizing, enforce the aspect ratio as defined by MinWidth and MinHeight.",
    { VOLATILE = "PRECOPY|AFTER_COPY|CURSOR" },
    { READ_ONLY = "HAS_FOCUS|REGION|CURSOR|AFTER_COPY" },
    { INIT_ONLY = "HOST|TRANSPARENT|FAST_RESIZE|DISABLED|PRECOPY|VIDEO|FIXED_BUFFER|PERVASIVE_COPY|FIXED_DEPTH|FULL_SCREEN|IGNORE_FOCUS" })

  struct("SurfaceControl", { comment="Internal structure returned by AccessList()"}, [[
    int ListIndex   # Byte offset of the ordered list
    int ArrayIndex  # Byte offset of the list array
    int EntrySize   # Byte size of each entry in the array
    int Total       # Total number of entries currently in the list array
    int ArraySize   # Max limit of entries in the list array
    # Followed by a background-to-foreground list of indexes into the list array (UWORD)
    # Followed by the list array itself
  ]])

  struct("SurfaceInfo", { version=2, type="surfaceinfo" }, [[
    oid ParentID        # Object that contains the surface area
    oid BitmapID        # Surface bitmap buffer
    oid DataMID         # Bitmap data memory ID
    oid DisplayID       # If the surface object is root, its display is reflected here
    int Flags           # Surface flags (RNF_VISIBLE etc)
    int X               # Horizontal coordinate
    int Y               # Vertical coordinate
    int Width           # Width of the surface area
    int Height          # Height of the surface area
    int AbsX            # Absolute X coordinate
    int AbsY            # Absolute Y coordinate
    short Level         # Branch level within the tree
    char BitsPerPixel   # Bits per pixel of the bitmap
    char BytesPerPixel  # Bytes per pixel of the bitmap
    int LineWidth       # Line width of the bitmap, in bytes
  ]])

  struct("SurfaceList", { }, [[
    oid ParentID      # Object that owns the surface area
    oid SurfaceID     # ID of the surface area
    oid BitmapID      # Shared bitmap buffer, if available
    oid DisplayID     # Display
    oid DataMID       # For drwCopySurface()
    oid TaskID        # Task that owns the surface
    oid RootID        # RootLayer
    oid PopOverID
    int Flags         # Surface flags (RNF_VISIBLE etc)
    int X             # Horizontal coordinate
    int Y             # Vertical coordinate
    int Width         # Width
    int Height        # Height
    # Note: The order of the following fields must match 'struct ClipRectangle'
    int Left          # Absolute X
    int Right         # Absolute right coordinate
    int Bottom        # Absolute bottom coordinate
    int Top           # Absolute Y
    short Level       # Level number within the hierarchy
    # For drwCopySurface()
    short LineWidth    # [applies to the bitmap owner]
    char BytesPerPixel # [applies to the bitmap owner]
    char BitsPerPixel  # [applies to the bitmap owner]
    char Cursor        # Preferred cursor image ID
    uchar Opacity      # Current opacity setting 0 - 255
  ]])

  -- Note: Floating point precision is not supported when designating precopy zones

  struct("PrecopyRegion", { restrict="c", comment="Internal structure managed by the PrecopyRegion field."}, [[
    int X             # X Coordinate
    int Y             # Y Coordinate
    int Width         # Width
    int Height        # Height
    int XOffset       # X offset
    int YOffset       # Y offset
    short(DMF) Dimensions  # Dimension flags
    short(RNF) Flags
  ]])

  struct("SurfaceCallback", { restrict="c", comment="Private structure for managing surface callbacks." }, [[
    obj Object    # Context to use for the function.
    func Function # void (*Routine)(OBJECTPTR, struct Surface *, objBitmap *);
  ]])

  struct("SurfaceCoords", { }, [[
    int X      # Horizontal coordinate
    int Y      # Vertical coordinate
    int Width  # Width
    int Height # Height
    int AbsX   # Absolute X
    int AbsY   # Absolute Y
  ]])

  methods("surface", "Drw", {
    { id=1, name="InheritedFocus" },
    { id=2, name="Expose" },
    { id=3, name="InvalidateRegion" },
    { id=4, name="SetDisplay" },
    { id=5, name="SetOpacity" },
    { id=6, name="AddCallback", inline=false },
    { id=7, name="Minimise" },
    { id=8, name="ResetDimensions" },
    { id=9, name="RemoveCallback", inline=false }
  })

  class("Surface", { src={
      "class_surface/surface_class.cpp",
      "class_surface/surface_dimensions.cpp",
      "class_surface/surface_drawing.cpp",
      "class_surface/surface_fields.cpp",
      "class_surface/surface_resize.cpp"
    }, output="class_surface/surface_def.c" }, [[
    oid Drag              # Drag the object that this field points to
    oid Buffer            # Buffer bitmap (backing store)
    oid Parent            # Graphical container of the Surface object, if any
    oid PopOver           # Keeps a surface in front of another surface in the Z order.
    int TopMargin         # Top movement limit
    int BottomMargin      # Bottom movement limit
    int LeftMargin        # Left movement limit
    int RightMargin       # Right movement limit
    int MinWidth          # Minimum width setting
    int MinHeight         # Minimum height setting
    int MaxWidth          # Maximum width setting
    int MaxHeight         # Maximum height setting
    int LeftLimit         # Limits the surface area from moving too far left
    int RightLimit        # Limits the surface area from moving too far right
    int TopLimit          # Limits the surface area from moving too far up
    int BottomLimit       # Limits the surface area from moving too far down
    int Frame             # Current frame number
    oid Display           # Refers to the Display object that is managing the surface's graphics.
    int(RNF) Flags        # Special flags
    int X                 # Fixed horizontal coordinate
    int Y                 # Fixed vertical coordinate
    int Width             # Fixed width
    int Height            # Fixed height
    oid Root              # Surface that is acting as a root for many surface children (useful when applying translucency)
    oid Program           # The task that is represented by the surface object (important for linking desktop windows to foreign tasks)
    int(ALIGN) Align      # Alignment flags
    int(DMF) Dimensions   # Dimension flags
    int(DRAG) DragStatus  # Indicates the draggable state when dragging is enabled.
    int(PTR) Cursor       # The preferred cursor image to use when the pointer is over the surface
    int ScrollSpeed       # Speed when using animated scrolling
    struct(RGB8) Colour   # Background colour specification
    int Type              # Internal surface type flags
    int Modal             # Set to 1 to enable modal mode
  ]],
  [[
   // These coordinate fields are private but may be accessed by some internal classes, like Document

   LONG     XOffset, YOffset;     // Fixed horizontal and vertical offset
   DOUBLE   XOffsetPercent;       // Relative horizontal offset
   DOUBLE   YOffsetPercent;       // Relative vertical offset
   DOUBLE   WidthPercent, HeightPercent; // Relative width and height
   DOUBLE   XPercent, YPercent;   // Relative coordinate

   LARGE    LastRedimension;      // Timestamp of the last redimension call
   objBitmap *Bitmap;
   struct SurfaceCallback *Callback;
   APTR      UserLoginHandle;
   APTR      TaskRemovedHandle;
   WINHANDLE DisplayWindow;       // Reference to the platform dependent window representing the Surface object
   OBJECTID PrevModalID;          // Previous surface to have been modal
   OBJECTID BitmapOwnerID;        // The surface object that owns the root bitmap
   OBJECTID RevertFocusID;
   LONG     LineWidth;            // Bitmap line width, in bytes
   LONG     ScrollToX, ScrollToY;
   LONG     ScrollFromX, ScrollFromY;
   LONG     ListIndex;            // Last known list index
   LONG     InputHandle;          // Input handler for dragging of surfaces
   TIMER    ScrollTimer;
   MEMORYID DataMID;              // Bitmap memory reference
   MEMORYID PrecopyMID;           // Precopy region information
   struct SurfaceCallback CallbackCache[4];
   WORD     ScrollProgress;
   WORD     Opacity;
   UWORD    InheritedRoot:1;      // TRUE if the user set the RootLayer manually
   UWORD    ParentDefined:1;      // TRUE if the parent field was set manually
   UWORD    SkipPopOver:1;
   UWORD    FixedX:1;
   UWORD    FixedY:1;
   UWORD    Document:1;
   BYTE     BitsPerPixel;         // Bitmap bits per pixel
   BYTE     BytesPerPixel;        // Bitmap bytes per pixel
   UBYTE    CallbackCount;
   UBYTE    CallbackSize;         // Current size of the callback array.
   BYTE     WindowType;           // See SWIN constants
   BYTE     PrecopyTotal;
   BYTE     Anchored;
  ]])

  class("Layout", { comment="Layout management class", src="class_layout/layout.cpp" }, [[
    double X
    double Y
    double Width
    double Height
    double XOffset
    double YOffset
    double GraphicRelX      # If the X position is relative, the ratio is expressed here relative to the container's width.
    double GraphicRelY      # If the Y position is relative, the ratio is expressed here relative to the container's height.
    double GraphicRelWidth  # If the width is relative, the ratio is expressed here relative to the container's width.
    double GraphicRelHeight # If the height is relative, the ratio is expressed here relative to the container's height.
    obj Document            # Private.  For use by the Document class only.
    oid Surface
    int(ALIGN) Align
    int(DMF) Dimensions
    int(LAYOUT) Layout
    int BitsPerPixel       # Total bits per pixel for the canvas.
    int GraphicX
    int GraphicY
    int GraphicWidth
    int GraphicHeight
    int LeftMargin         # Fixed pixel margins specify the amount of whitespace from the Bound* fields
    int TopMargin
    int RightMargin
    int BottomMargin
    int BoundX             # The boundary of space available for drawing, i.e. the clip region, for the X coordinate
    int BoundY             # The boundary of space available for drawing, i.e. the clip region, for the Y coordinate
    int BoundWidth         # The boundary of space available for drawing, i.e. the clip region, for the width
    int BoundHeight        # The boundary of space available for drawing, i.e. the clip region, for the height
    bit(uint) Visible      # TRUE if the layout is visible
    bit(uint) PresetX      # TRUE if the horizontal position was defined by the client.
    bit(uint) PresetY      # TRUE if the vertical position was defined by the client.
    bit(uint) PresetWidth  # TRUE if the width was defined by the client
    bit(uint) PresetHeight # TRUE if the height was defined by the client
    bit(uint) DisableDrawing # TRUE to disable automatic redrawing
    struct(SurfaceCoords) ParentSurface  # The coordinates and dimensions of the parent surface are cached here.
    func DrawCallback
  ]],
  [[
    FUNCTION ResizeCallback;
    OBJECTPTR Owner;
    OBJECTID PageID;
    LONG MinWidth;
    LONG MaxWidth;
    LONG MinHeight;
    LONG MaxHeight;
    LONG Cursor;
    LONG LeftLimit;
    LONG TopLimit;
    LONG RightLimit;
    LONG BottomLimit;
  ]])

  functionNames("drw",
    "GetSurfaceInfo",
    "LockBitmap",
    "UnlockBitmap",
    "ExposeSurface",
    "CopySurface",
    "AccessList",
    "ReleaseList",
    "SetModalSurface",
    "GetUserFocus",
    "ForbidExpose",
    "PermitExpose",
    "ForbidDrawing",
    "PermitDrawing",
    "GetSurfaceCoords",
    "GetModalSurface",
    "GetSurfaceFlags",
    "GetVisibleArea",
    "CheckIfChild",
    "ApplyStyleValues",
    "ApplyStyleGraphics",
    "SetCurrentStyle")

  c_insert([[
// Helper function for surface lookups.

INLINE LONG FIND_SURFACE_INDEX(struct SurfaceControl *Ctl, OBJECTID SurfaceID) {
   struct SurfaceList *list = (struct SurfaceList *)((char *)Ctl + Ctl->ArrayIndex);
   LONG j;
   for (j=0; j < Ctl->Total; j++) {
      if (list->SurfaceID IS SurfaceID) return j;
      list = (struct SurfaceList *)((char *)list + Ctl->EntrySize);
   }
   return -1;
}

// Stubs

INLINE ERROR drwInvalidateRegionID(OBJECTID ObjectID, LONG X, LONG Y, LONG Width, LONG Height) {
   struct drwInvalidateRegion args = { X, Y, Width, Height };
   return ActionMsg(MT_DrwInvalidateRegion, ObjectID, &args);
}

INLINE ERROR drwExposeID(OBJECTID ObjectID, LONG X, LONG Y, LONG Width, LONG Height, LONG Flags) {
   struct drwExpose args = { X, Y, Width, Height, Flags };
   return ActionMsg(MT_DrwExpose, ObjectID, &args);
}

INLINE ERROR drwSetOpacityID(OBJECTID ObjectID, DOUBLE Value, DOUBLE Adjustment) {
   struct drwSetOpacity args = { Value, Adjustment};
   return ActionMsg(MT_DrwSetOpacity, ObjectID, &args);
}

INLINE ERROR drwAddCallback(APTR Surface, APTR Callback) {
   if (Callback) {
      FUNCTION func;
      func.Type = CALL_STDC;
      func.StdC.Context = CurrentContext();
      func.StdC.Routine = Callback;
      struct drwAddCallback args = { &func };
      return Action(MT_DrwAddCallback, Surface, &args);
   }
   else {
      struct drwAddCallback args = { NULL };
      return Action(MT_DrwAddCallback, Surface, &args);
   }
}

INLINE ERROR drwRemoveCallback(APTR Surface, APTR Callback) {
   if (Callback) {
      FUNCTION func;
      func.Type = CALL_STDC;
      func.StdC.Context = CurrentContext();
      func.StdC.Routine = Callback;
      struct drwRemoveCallback args = { &func };
      return Action(MT_DrwRemoveCallback, Surface, &args);
   }
   else {
      struct drwRemoveCallback args = { NULL };
      return Action(MT_DrwRemoveCallback, Surface, &args);
   }
}
  ]])

end)
