-- $FLUID
-- Flute tests for the Document class.
--
-- This technique uses pre-computed checksums from the Document's bitmap output, captured from a 'good' state.  If a
-- checksum doesn't match, the test will fail and the resulting image will be saved to "temp:doc_test_results/".
-- You can view the saved image files to confirm the accuracy of the results.  If the test has passed then update the
-- old checksum with the new one provided in this program's output.

-----------------------------------------------------------------------------------------------------------------------

function renderDocToBitmap(Path, Width)
   local scene = obj.new('VectorScene', { pageWidth=nz(Width,1024), pageHeight=768 })
   local vp = scene.new('VectorViewport', { x=0, y=0, width='100%', height='100%' })
   vp.new('VectorRectangle', { x=0, y=0, width='100%', height='100%', fill='rgb(255,255,255)' })

   local doc = vp.new('document', { viewport=vp, path=Path })
   scene.pageHeight = doc.pageHeight

   local bmp = obj.new('bitmap', { width=scene.pageWidth, height=doc.pageHeight, bitsPerPixel=32 })
   bmp.acClear()

   scene.bitmap = bmp
   scene.acDraw()
   return bmp
end

function crcTest(Name, Path, ExpectedCRC)
   if type(ExpectedCRC) == 'table' then
      for res,crc in pairs(ExpectedCRC) do
         local bmp = renderDocToBitmap(glDocFolder .. Path, res)

         local crc = mSys.GenCRC32(0, bmp.data, bmp.size)
         if (ExpectedCRC == 0) then
            saveBitmap(bmp, Name)
            error('File "' .. Path .. '" @ page width ' .. res .. ' is yet to be assigned a checksum, current CRC is ' .. string.format('0x%.8x', crc))
         elseif (ExpectedCRC != crc) then
            saveBitmap(bmp, Name)
            error('The CRC for "' .. Path .. '" @ page width ' .. res .. ' is ' .. string.format('0x%.8x', crc) .. ', expected ' .. string.format('0x%.8x', ExpectedCRC))
         end
      end
      return
   end

   local bmp = renderDocToBitmap(glDocFolder .. Path, 1024)

   local crc = mSys.GenCRC32(0, bmp.data, bmp.size)
   if (ExpectedCRC == 0) then
      saveBitmap(bmp, Name)
      error('The ' .. Name .. ' test is yet to be assigned a checksum, current CRC is ' .. string.format('0x%.8x', crc))
   elseif (ExpectedCRC != crc) then
      saveBitmap(bmp, Name)
      error('The CRC for ' .. Name .. ' is ' .. string.format('0x%.8x', crc) .. ', expected ' .. string.format('0x%.8x', ExpectedCRC))
   else
      --saveBitmap(bmp, Name)
   end
end

function saveBitmap(Bitmap, Name)
   filename = Name .. '.png'

   local pic = obj.new('picture', { width = Bitmap.width, height = Bitmap.height, bitsPerPixel = Bitmap.bitsPerPixel, flags='NEW' })
   Bitmap.acCopyData(pic.bitmap)
   local file = obj.new('file', { flags='NEW|WRITE', path='temp:doc_test_results/' .. filename })
   pic.acSaveImage(file)
end

-----------------------------------------------------------------------------------------------------------------------

function testAlignment()   crcTest('Alignment', 'alignment.rpl', 0x97e987c9) end
function testDialog()      crcTest('Dialog', 'dialog.rpl', 0xb38e68c5) end
function testFonts()       crcTest('Fonts', 'fonts.rpl', 0x293c9498) end
function testImages()      crcTest('Images', 'images.rpl', 0xb7301c70) end
function testLayout()      crcTest('Layout', 'layout.rpl', 0x1e4d9640) end
function testLinks1()      crcTest('Links1', 'links.rpl', 0xb7e1a934) end
function testLinks2()      crcTest('Links2', 'links.rpl?font=Noto Sans&font-size=16', 0x898505f8) end
function testLists()       crcTest('Lists', 'lists.rpl', 0xa466f7e9) end
function testLogic()       crcTest('Logic', 'logic.rpl', 0x766bfadb) end
function testParagraphs()  crcTest('Paragraphs', 'paragraphs.rpl', 0xa3b93738) end
function testTables()      crcTest('Tables', 'tables.rpl', 0x4969f18c) end
function testWidgets()     crcTest('Widgets', 'widgets.rpl', 0x208eaadc) end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
        'testAlignment',
        'testDialog',
        'testFonts',
        'testImages',
        'testLayout',
        'testLinks1',
        'testLinks2',
        'testLists',
        'testLogic',
        'testParagraphs',
        'testTables',
        'testWidgets'
      },
      init = function(Folder)
         glDocFolder = Folder
      end,
      cleanup = function()

      end
   }
