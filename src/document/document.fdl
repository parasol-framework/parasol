--$FLUID:Include

module({ name="Document", copyright="Paul Manias Â© 2005-2024", version=1.0 }, function()
  restrict(function()
    loadFile(glPath .. 'common-graphics.fdl')
  end)

  c_include("<parasol/modules/display.h>", "<parasol/modules/xml.h>", "<parasol/modules/font.h>", "<parasol/modules/vector.h>")

  loadFile(glPath .. 'common.fdl')

  const("RIPL", { comment="Official version number (date format).  Any changes to the handling of document content require that this number be updated." }, {
    VERSION = "\"20231123\""
  })

  enum("TT", { type="char", start=1 }, "VECTOR", "LINK", "EDIT")

  flags("DEF", { comment="Event flags for selectively receiving events from the Document object." },
    "PATH: The source file path has changed.  Useful for detecting when the user has left the page.",
    "LINK_ACTIVATED: The user has interacted with a hyperlink.  This event can be cancelled by returning ERR_Skip.")

  enum("DRT", { type="int", start=0, comment="Internal trigger codes" },
    "BEFORE_LAYOUT",
    "AFTER_LAYOUT",
    "USER_CLICK",
    "USER_CLICK_RELEASE",
    "USER_MOVEMENT",
    "REFRESH",
    "GOT_FOCUS",
    "LOST_FOCUS",
    "LEAVING_PAGE",
    "PAGE_PROCESSED",
    "MAX")

  flags("DCF", { comment="Document flags" },
    "EDIT: Allow direct keyboard input and document editing.",
    "OVERWRITE: This flag forces overwrite mode when the user enters information through the keyboard.  If the flag is not set, then insert mode is used.",
    "NO_SYS_KEYS: System-keys provide standard key support for Ctrl-C, Ctrl-X etc.  Set this flag to turn them off.",
    "DISABLED: This read-only flag is set if the UI has been disabled through the Disable action.",
    "NO_LAYOUT_MSG: Turn off debug output produced during document layout and processing - useful on refresh for example.",
    "UNRESTRICTED: Turn off all security measures - may only be set prior to initialisation.")

  flags("FSO", { comment="These are document style flags, as used in the DocStyle structure" },
    "BOLD: Enable bold styling.",
    "ITALIC: Enable italic styling.",
    "UNDERLINE: Draw a line under the text.",
    "PREFORMAT: All white-space is taken into account.",
    "ALIGN_RIGHT: Align to the right.",
    "ALIGN_CENTER: Align to the left.",
    "NO_WRAP: Do not wrap the text.",
    { STYLES = "BOLD|UNDERLINE|ITALIC" })

  methods("Document", "doc", {
    { id=1,  name="FeedParser" },
    { id=2,  name="SelectLink" },
    { id=4,  name="FindIndex" },
    { id=5,  name="InsertXML" },
    { id=6,  name="RemoveContent" },
    { id=7,  name="InsertText" },
    { id=8,  name="CallFunction" },
    { id=9,  name="AddListener" },
    { id=10, name="RemoveListener" },
    { id=11, name="ShowIndex" },
    { id=12, name="HideIndex" },
    { id=13, name="Edit" },
    { id=14, name="ReadContent" }
  })

  class("Document", { src={ "class/document_class.cpp", "class/fields.cpp" }, output="class/document_def.c" }, [[
    str Description      # A description assigned by the author of the document
    str Title            # The title of the document
    str Author           # The author of the document
    str Copyright        # Copyright information for the document
    str Keywords         # Keywords for the document
    str Background       # Fill for document background
    str CursorStroke     # The stroke style of the cursor
    obj(VectorViewport) Viewport  # The viewport that will host the document
    obj(VectorViewport) Focus     # Monitor this viewport for focus events
    obj(VectorViewport) View      # An internally created viewport that hosts the Page
    obj(VectorViewport) Page      # The Page contains the document content and is hosted by the View
    oid TabFocus         # If the tab key is pressed, focus can be changed to this object
    int(DEF) EventMask   # Event mask for selectively receiving events from the Document object.
    int(DCF) Flags       # Optional flags
    int PageHeight       # Height of the document page
    error Error          # Most recent error code produced by the parser
  ]])

    c_insert([[
namespace fl {
   using namespace pf;

constexpr FieldValue EventCallback(APTR Value) { return FieldValue(FID_EventCallback, Value); }
constexpr FieldValue EventMask(DEF Value) { return FieldValue(FID_EventMask, LONG(Value)); }
constexpr FieldValue Flags(DCF Value) { return FieldValue(FID_Flags, LONG(Value)); }

}
]])
end)
