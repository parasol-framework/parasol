--$FLUID:Include

module({ name="Document", copyright="Paul Manias Â© 2005-2023", version=1.0 }, function()
  restrict(function()
    loadFile(glPath .. 'common-graphics.fdl')
  end)

  c_include("<parasol/modules/display.h>", "<parasol/modules/xml.h>", "<parasol/modules/font.h>")

  const("RIPPLE", { comment="Official version number (date format).  Any changes to the handling of document content require that this number be updated." }, {
    VERSION = "\"20160601\""
  })

  enum("TT", { start=1 }, "OBJECT", "LINK", "EDIT")

  flags("DEF", { comment="Event flags for selectively receiving events from the Document object." },
    "PATH: The source file path has changed.  Useful for detecting when the user has left the page.",
    "LINK_ACTIVATED: The user has interacted with a hyperlink.  This event can be cancelled by returning ERR_Skip.")

  enum("DRT", { start=0, comment="Internal trigger codes" },
    "BEFORE_LAYOUT",
    "AFTER_LAYOUT",
    "USER_CLICK",
    "USER_CLICK_RELEASE",
    "USER_MOVEMENT",
    "REFRESH",
    "GOT_FOCUS",
    "LOST_FOCUS",
    "LEAVING_PAGE",
    "PAGE_PROCESSED",
    "MAX")

  flags("DCF", { comment="Document flags" },
    "EDIT: Allow direct keyboard input and document editing.",
    "OVERWRITE: This flag forces overwrite mode when the user enters information through the keyboard.  If the flag is not set, then insert mode is used.",
    "NO_SYS_KEYS: System-keys provide standard key support for Ctrl-C, Ctrl-X etc.  Set this flag to turn them off.",
    "DISABLED: This read-only flag is set if the object has been disabled through the Disable action.",
    "NO_SCROLLBARS: Do not display scrollbars if the page exceeds the size of the view.",
    "NO_LAYOUT_MSG: Turn off debug output produced during document layout and processing - useful on refresh for example.",
    "UNRESTRICTED: Turn off all security measures - may only be set prior to initialisation.")

  flags("DBE", { comment="Border edge flags." },
    "TOP: Top border edge.",
    "LEFT: Left border edge.",
    "RIGHT: Right border edge.",
    "BOTTOM: Bottom border edge.")

  flags("FSO", { comment="These are document style flags, as used in the DocStyle structure" },
    "BOLD",
    "ITALIC",
    "UNDERLINE",
    "PREFORMAT: All white-space is taken into account.",
    "CAPS: Print all text in caps.",
    "ALIGN_RIGHT",
    "ALIGN_CENTER",
    "ANCHOR: Anchor objects to the text.",
    "NO_WRAP: Do not wrap the text.",
    { STYLES = "BOLD|UNDERLINE|ITALIC|CAPS" })

  struct("DocStyle", { version=1, type="docstyle", comment="This structure is passed to objects that support the LayoutStyle field" }, [[
    int Version                # Version of this DocStyle structure
    obj(Document) Document     # The document object that this style originates from
    obj(Font) Font             # Pointer to the current font object.  Indicates face, style etc, but not simple attributes like colour
    struct(RGB8) FontColour    # Foreground colour (colour of the font)
    struct(RGB8) FontUnderline # Underline colour for the font, if active
    int StyleFlags             # Font style flags (FSO)
  ]])

  struct ("deLinkActivated", { }, [[
    struct(*KeyStore) Parameters   # All key-values associated with the link.
  ]])

  struct("escFont", { }, [[
    short Index          # Font lookup
    short Options        # FSO flags
    struct(RGB8) Colour  # Font colour
  ]])

  c_insert([[
typedef struct escFont escFont;
  ]])

  struct("SurfaceClip", { }, [[
    struct(*SurfaceClip) Next
    int Left
    int Top
    int Right
    int Bottom
  ]])

  struct("style_status", { }, [[
    struct(escFont) FontStyle
    struct(*process_table) Table
    struct(*escList) List
    char(36) Face
    short Point
    bit(uchar) FontChange   # A major font change has occurred (e.g. face, point size)
    bit(uchar) StyleChange  # A minor style change has occurred (e.g. font colour)
  ]])

  struct("docdraw", { }, [[
    ptr Object
    oid ID
  ]])

  struct("DocTrigger", { }, [[
   struct(*DocTrigger) Next
   struct(*DocTrigger) Prev
   func Function
  ]])

  methods("Document", "doc", {
    { id=1,  name="FeedParser" },
    { id=2,  name="SelectLink" },
    { id=3,  name="ApplyFontStyle" },
    { id=4,  name="FindIndex" },
    { id=5,  name="InsertXML" },
    { id=6,  name="RemoveContent" },
    { id=7,  name="InsertText" },
    { id=8,  name="CallFunction" },
    { id=9,  name="AddListener" },
    { id=10, name="RemoveListener" },
    { id=11, name="ShowIndex" },
    { id=12, name="HideIndex" },
    { id=13, name="Edit" },
    { id=14, name="ReadContent" }
  })

  class("Document", { src={ "class/document_class.cpp", "class/fields.cpp" }, output="class/document_def.c" }, [[
    large(DEF) EventMask # Event mask for selectively receiving events from the Document object.
    str Description      # A description assigned by the author of the document
    str FontFace         # The user's default font face
    str Title            # The title of the document
    str Author           # The author of the document
    str Copyright        # Copyright information for the document
    str Keywords         # Keywords for the document
    oid TabFocus         # If the tab key is pressed, focus can be changed to this object
    oid Surface          # The surface that the document will be rendered to
    oid Focus
    int(DCF) Flags       # Optional flags
    int LeftMargin       # Size of the left margin
    int TopMargin        # Size of the top margin
    int RightMargin      # Size of the right margin
    int BottomMargin     # Size of the bottom margin
    int FontSize         # The user's default font size
    int PageHeight       # Height of the document page
    int(DBE) BorderEdge
    int LineHeight       # Default line height (assumed to be an average) for all text the loaded page
    error Error          # Processing error code
    struct(RGB8) FontColour   # Default font colour
    struct(RGB8) Highlight    # Default colour for document highlighting
    struct(RGB8) Background   # Colour for document background
    struct(RGB8) CursorColour # The colour of the cursor
    struct(RGB8) LinkColour   # Colour to use for hyperlinks
    struct(RGB8) VLinkColour  # Colour to use for visited hyperlinks
    struct(RGB8) SelectColour # Default colour to use when links are selected (e.g. when the user tabs to a link)
    struct(RGB8) Border
  ]])

  functionNames("doc",
    "CharLength")
end)
