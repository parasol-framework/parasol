-- XPath document and text retrieval function tests

   include 'xml'
   require 'common'

local glBaseFolder = 'temp:xpath_documents/'
local glCollectionFolder = glBaseFolder .. 'collection/'
local glTextFolder = glBaseFolder .. 'texts/'

local function writeFile(path, content)
   local file = obj.new('file', { path = path, flags = 'WRITE|NEW' })
   file.acWrite(content)
   file = nil
end

local function ensureFolder(path)
   local err = mSys.CreateFolder(path, 0)
   if (err != ERR_Okay) and (err != ERR_FileExists) then
      error('Failed to create folder ' .. path .. ': ' .. mSys.GetErrorMsg(err))
   end
end

local function createPrimaryXml()
   return obj.new('xml', { path = glBaseFolder .. 'primary.xml' })
end

-----------------------------------------------------------------------------------------------------------------------
-- doc() should load external documents relative to the current base

function testDocLoadsSecondaryDocument()
   local err, value = glPrimaryXML.mtEvaluate('doc("' .. glBaseFolder .. 'secondary.xml")/secondary/item[1]/@code')
   assert(value == 'B', 'doc() should expose the first item code, got ' .. nz(value, 'NIL'))
end

function testDocSupportsStringUris()
   local err, value = glPrimaryXML.mtEvaluate('doc("string:<doc><item code=\'inline\'/></doc>")/doc/item/@code')
   assert(value == 'inline', 'doc() should parse inline XML via string: URIs, got ' .. nz(value, 'NIL'))
end

-----------------------------------------------------------------------------------------------------------------------
-- doc-available() should report readability without loading

function testDocAvailable()
   local err, available = glPrimaryXML.mtEvaluate('doc-available("' .. glBaseFolder .. 'secondary.xml")')
   assert(available == 'true', 'doc-available() should report true for existing files')

   local err, missing = glPrimaryXML.mtEvaluate('doc-available("' .. glBaseFolder .. 'missing.xml")')
   assert(missing == 'false', 'doc-available() should report false for missing files')
end

-----------------------------------------------------------------------------------------------------------------------
-- collection() should enumerate XML documents within a folder

function testCollectionEnumeratesFolder()
   local err, count = glPrimaryXML.mtEvaluate('count(collection("' .. glCollectionFolder .. '"))')
   assert(tonumber(count) == 2, 'collection() should return two documents, got ' .. count)

   local err, firstCode = glPrimaryXML.mtEvaluate('collection("' .. glCollectionFolder .. '")/doc/entry[1]/@code')
   assert(firstCode == 'alpha', 'collection() should expose the first document entry, got ' .. nz(firstCode, 'NIL'))
end

function testUriCollectionReturnsPaths()
   local err, first = glPrimaryXML.mtEvaluate('uri-collection("' .. glCollectionFolder .. '")[1]')
   assert(first:find('alpha.xml', 1, true), 'uri-collection() should return sorted file URIs, got ' .. nz(first, 'NIL'))
end

-----------------------------------------------------------------------------------------------------------------------
-- unparsed-text functions should read and split text resources

function testUnparsedTextNormalisesNewlines()
   local err, text = glPrimaryXML.mtEvaluate('unparsed-text("' .. glTextFolder .. 'sample.txt")')
   assert(text == 'First line\nSecond line\nThird line', 'unparsed-text() should normalise newline sequences, got ' .. nz(text, 'NIL'))
end

function testUnparsedTextAvailable()
   local err, available = glPrimaryXML.mtEvaluate('unparsed-text-available("' .. glTextFolder .. 'sample.txt")')
   assert(available == 'true', 'unparsed-text-available() should report true for readable files')

   local err, missing = glPrimaryXML.mtEvaluate('unparsed-text-available("' .. glTextFolder .. 'missing.txt")')
   assert(missing == 'false', 'unparsed-text-available() should report false for missing files')
end

function testUnparsedTextLinesSplitsContent()
   local err, second = glPrimaryXML.mtEvaluate('unparsed-text-lines("' .. glTextFolder .. 'sample.txt")[2]')
   assert(second == 'Second line', 'unparsed-text-lines() should split by linefeed, got ' .. nz(second, 'NIL'))
end

-----------------------------------------------------------------------------------------------------------------------
-- root() should return the document root and idref() should resolve IDREF attributes

function testRootReturnsDocumentElement()
   local err, name = glPrimaryXML.mtEvaluate('name(root(/library/section[1]/book))')
   assert(name == 'library', 'root() should return the document element, got ' .. nz(name, 'NIL'))
end

function testIdrefResolvesReferencingElements()
   local err, refName = glPrimaryXML.mtEvaluate('name(idref("B")[1])')
   assert(refName == 'section', 'idref() should return the referencing section element, got ' .. nz(refName, 'NIL'))
end

-----------------------------------------------------------------------------------------------------------------------

return {
   tests = {
      'testDocLoadsSecondaryDocument', 'testDocSupportsStringUris', 'testDocAvailable',
      'testCollectionEnumeratesFolder', 'testUriCollectionReturnsPaths',
      'testUnparsedTextNormalisesNewlines', 'testUnparsedTextAvailable',
      'testUnparsedTextLinesSplitsContent', 'testRootReturnsDocumentElement', 'testIdrefResolvesReferencingElements'
   },
   init = function(ScriptFolder)
      mSys.DeleteFile(glBaseFolder)
      ensureFolder(glBaseFolder)
      ensureFolder(glCollectionFolder)
      ensureFolder(glTextFolder)

      writeFile(glBaseFolder .. 'primary.xml', table.concat({
         '<?xml version="1.0"?>',
         '<library>',
            '<section id="A" idrefs="B">',
               '<book code="alpha">First</book>',
            '</section>',
            '<section id="B">',
               '<book code="beta">Second</book>',
            '</section>',
            '<pointer href="secondary.xml"/>',
         '</library>'
      }))

      writeFile(glBaseFolder .. 'secondary.xml', table.concat({
         '<secondary>',
            '<item code="B">Beta</item>',
            '<item code="C">Gamma</item>',
         '</secondary>'
      }))

      writeFile(glCollectionFolder .. 'alpha.xml', table.concat({
         '<doc>',
            '<entry code="alpha"/>',
         '</doc>'
      }))

      writeFile(glCollectionFolder .. 'beta.xml', table.concat({
         '<doc>',
            '<entry code="beta"/>',
         '</doc>'
      }))

      writeFile(glTextFolder .. 'sample.txt', 'First line\r\nSecond line\nThird line')

      glPrimaryXML = obj.new('xml', { path = glBaseFolder .. 'primary.xml' })
   end,
   cleanup = function()
      mSys.DeleteFile(glBaseFolder)
   end
}
