-- $FLUID
-- Flute tests for SVG generated images.
--
-- This technique uses pre-computed checksums from SVG images, captured from a 'good' state.  If a checksum doesn't
-- match, the test will fail and the resulting image will be saved to "temp:svg_test_results/".  Check the
-- corresponding image file, if it is acceptable then update the old checksum from the test output in order to pass
-- future tests.

-----------------------------------------------------------------------------------------------------------------------

function renderSVGToBitmap(Path)
   local scene = obj.new('VectorScene', { pageWidth=1024, pageHeight=768 })
   local vp = scene.new('VectorViewport', { x=0, y=0, width='100%', height='100%' })
   local svg = obj.new('svg', { target=vp, path=Path })
   local bmp = obj.new('bitmap', { width=scene.pageWidth, height=scene.pageHeight, bitsPerPixel=32, bkgd='255,255,255,255' })
   bmp.acClear()
   scene.bitmap = bmp
   scene.acDraw()
   return bmp
end

function hashTestSVG(Path, ExpectedHash)
   if (ExpectedHash == 0) then
      error('File "' .. Path .. '" is yet to be assigned a checksum.')
   end
   local bmp = renderSVGToBitmap(glSVGFolder .. Path)
   local hash = mSys.GenCRC32(0, bmp.data, bmp.size)
   if (ExpectedHash != hash) then
      saveBitmap(bmp, Path)
      error('Computed hash for "' .. Path .. '" is ' .. string.format('$%.8x', hash) .. ', expected ' .. string.format('$%.8x', ExpectedHash))
   end
end

function saveBitmap(Bitmap, Path)
   local folder, filename = file.splitPath(Path)
   local split = string.split(filename, '\\.')
   filename = split[1] .. '.png'

   local pic = obj.new('picture', { width = Bitmap.width, height = Bitmap.height, bitsPerPixel = Bitmap.bitsPerPixel, flags='NEW' })
   Bitmap.acCopyData(pic.bitmap)
   local file = obj.new('file', { flags='NEW|WRITE', path='temp:svg_test_results/' .. filename })
   pic.acSaveImage(file)
end

-----------------------------------------------------------------------------------------------------------------------

function testCircles()            hashTestSVG('paths/circles.svg', 0xf6216fcb) end
function testMorph()              hashTestSVG('paths/morph.svg', 0xce6f7600) end
function testPolygons()           hashTestSVG('paths/polygons.svg', 0x2f17adec) end
function testShapes()             hashTestSVG('paths/shapes.svg', 0xd67937c9) end
function testSpirals()            hashTestSVG('paths/spirals.svg', 0x669dc06e) end
function testStrokes()            hashTestSVG('paths/strokes.svg', 0x5210d0f3) end
function testSuperShapes()        hashTestSVG('paths/supershapes.svg', 0xe1a1a714) end
function testSuperSpiral()        hashTestSVG('paths/superspiral.svg', 0xd981df67) end
function testTransitions()        hashTestSVG('paths/transitions.svg', 0xcd7ff017) end
function testWave()               hashTestSVG('paths/wave.svg', 0x4e21371f) end

function testChevrons()           hashTestSVG('patterns/chevrons.svg', 0x42a1be4b) end
function testComplex()            hashTestSVG('patterns/complex.svg', 0x3a30b99a) end
function testDiamonds()           hashTestSVG('patterns/diamonds.svg', 0xe14ac1e8) end
function testDimple()             hashTestSVG('patterns/dimple.svg', 0x1806e6a0) end
function testDot()                hashTestSVG('patterns/dot.svg', 0x13252bb4) end
function testHoneycomb()          hashTestSVG('patterns/honeycomb.svg', 0x7b678ada) end
function testSnake()              hashTestSVG('patterns/snake.svg', 0xbb7d40f0) end
function testVStripes()           hashTestSVG('patterns/vstripes.svg', 0xc8ab997e) end

function testComposite()          hashTestSVG('filters/composite.svg', 0xccc2627f) end
function testConvolve()           hashTestSVG('filters/convolve.svg', 0x8386a292) end
function testW3Composite1()       hashTestSVG('filters/w3-composite.svg', 0xeaf2804b) end
function testW3Composite2()       hashTestSVG('filters/w3-filters-composite-02-b.svg', 0x53139a3a) end
function testW3Displacement1()    hashTestSVG('filters/w3-filters-displace-01-f.svg', 0xf8be1e64) end
function testW3Transfer()         hashTestSVG('filters/w3-filters-comptran-01-b.svg', 0x3b27ad3b) end
function testW3Transfer2()        hashTestSVG('filters/w3-filters-color-02-b.svg', 0xdce73fcc) end
function testW3Filters()          hashTestSVG('filters/w3-filters.svg', 0x364faa02) end
function testW3Filters2()         hashTestSVG('filters/w3-filters2.svg', 0x8a40dc7c) end
function testW3Image()            hashTestSVG('filters/w3-image.svg', 0xd822620c) end
function testW3Morphology()       hashTestSVG('filters/w3-morphology.svg', 0xde385371) end
function testW3Offset()           hashTestSVG('filters/w3-offset.svg', 0x3590ac32) end
function testW3Turbulence()       hashTestSVG('filters/w3-turbulence.svg', 0x801e24f2) end
function testW3Lighting1()        hashTestSVG('filters/w3-filters-light-01-f.svg', 0xea61e82d) end
function testW3Lighting3()        hashTestSVG('filters/w3-filters-light-03-f.svg', 0xb31ca638) end
function testW3LightingSpecular() hashTestSVG('filters/w3-filters-specular-01-f.svg', 0x55870521) end
function testW3LightingDiffuse()  hashTestSVG('filters/w3-filters-diffuse-01-f.svg', 0x6e5eb4d6) end
function testMoonSurface()        hashTestSVG('filters/moon-surface.svg', 0x8fafd05c) end

function testTransformations()    hashTestSVG('transforms/transformations.svg', 0xaa7e064f) end
function testW3AspectRatio()      hashTestSVG('transforms/w3-aspectratio.svg', 0xd09d31e1) end
function testW3SkewText()         hashTestSVG('transforms/w3-skew-text.svg', 0xe9508cd3) end
function testW3Viewbox()          hashTestSVG('transforms/w3-viewbox.svg', 0xd3c966bf) end

function testCSS()                hashTestSVG('misc/css.svg', 0x02ead006) end
function testBrushStrokes()       hashTestSVG('misc/brush-strokes.svg', 0x61016dd5) end
function testContourGradient()    hashTestSVG('misc/contour-gradient.svg', 0xa89addee) end

function testClock()              hashTestSVG('images/clock.svg', 0xe5ad43cb) end
function testTiger()              hashTestSVG('images/tiger.svg', 0x8e6b884e) end

function testClip()               hashTestSVG('masks/clip.svg', 0x209c16aa) end
function testSplitCircles()       hashTestSVG('masks/split-circles.svg', 0xfc119919) end
function testInheritClip()        hashTestSVG('masks/inherit-clip-path.svg', 0xb0749a78) end
function testW3MasksFilter()      hashTestSVG('masks/masking-filter-01-f.svg', 0x8cb644c2) end
function testW3MasksIntro()       hashTestSVG('masks/masking-intro-01-f.svg', 0x57359787) end
function testW3Masks1()           hashTestSVG('masks/masking-mask-01-b.svg', 0xa38973ad) end
function testW3Masks2()           hashTestSVG('masks/masking-mask-02-f.svg', 0x9f518e5f) end
function testW3MasksOpacity()     hashTestSVG('masks/masking-opacity-01-b.svg', -1) end
function testW3MasksPath1()       hashTestSVG('masks/masking-path-01-b.svg', 0x835b31d0) end
function testW3MasksPath2()       hashTestSVG('masks/masking-path-02-b.svg', 0x843eeb43) end
function testW3MasksPath3()       hashTestSVG('masks/masking-path-03-b.svg', 0x73df4fbe) end
function testW3MasksPath4()       hashTestSVG('masks/masking-path-04-b.svg', 0x88dbdf26) end
function testW3MasksPath5()       hashTestSVG('masks/masking-path-05-f.svg', 0xa4675a9e) end
function testW3MasksPath7()       hashTestSVG('masks/masking-path-07-b.svg', -1) end
function testW3MasksPath8()       hashTestSVG('masks/masking-path-08-b.svg', 0x584a2645) end
function testW3MasksPath10()      hashTestSVG('masks/masking-path-10-b.svg', 0x55292a10) end
function testW3MasksPath11()      hashTestSVG('masks/masking-path-11-b.svg', 0xae2cd707) end
function testW3MasksPath13()      hashTestSVG('masks/masking-path-13-f.svg', 0x1760390b) end
function testW3MasksPath14()      hashTestSVG('masks/masking-path-14-f.svg', 0x2755d2bf) end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
        -- Masks',
        'testW3MasksPath1',
        'testW3MasksPath2',
        'testW3MasksPath3',
        'testW3MasksPath4',
        'testW3MasksPath5',
        --'testW3MasksPath7',
        'testW3MasksPath8',
        'testW3MasksPath10',
        'testW3MasksPath11',
        'testW3MasksPath13',
        'testW3MasksPath14',
        'testW3MasksFilter',
        'testW3MasksIntro',
        'testW3Masks1',
        'testW3Masks2',
        --'testW3MasksOpacity',
        'testSplitCircles',
        'testInheritClip',
        -- Patterns
        'testChevrons',
        'testComplex',
        'testDiamonds',
        'testDimple',
        'testDot',
        'testHoneycomb',
        'testSnake',
        'testVStripes',
        -- Filters
        'testConvolve',
        'testMoonSurface',
        'testComposite',
        'testW3Composite1',
        'testW3Composite2',
        'testW3Displacement1',
        'testW3Filters',
        'testW3Filters2',
        'testW3Transfer',
        'testW3Transfer2',
        'testW3LightingSpecular',
        'testW3LightingDiffuse',
        'testW3Lighting1',
        'testW3Lighting3',
        'testW3Image',
        'testW3Morphology',
        'testW3Offset',
        'testW3Turbulence',
        -- Transforms
        'testTransformations',
        'testW3AspectRatio',
        'testW3SkewText',
        'testW3Viewbox',
        -- Misc
        'testCSS',
        'testBrushStrokes',
        'testContourGradient',
        -- Stock Images
        'testClock',
        'testTiger',
        -- Paths
        'testCircles',
        'testClip',
        'testMorph',
        'testPolygons',
        'testShapes',
        'testSpirals',
        'testStrokes',
        'testSuperShapes',
        'testSuperSpiral',
        'testTransitions',
        'testWave'
      },
      init = function(Folder)
         glSVGFolder = Folder
      end,
      cleanup = function()

      end
   }
