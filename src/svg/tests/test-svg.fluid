-- $FLUID
-- Flute tests for SVG generated images.
--
-- This technique uses pre-computed checksums from SVG images, captured from a 'good' state.  If a checksum doesn't
-- match, the test will fail and the resulting image will be saved to "temp:svg_test_results/".  Check the
-- corresponding image file, if it is acceptable then update the old checksum from the test output in order to pass
-- future tests.

-----------------------------------------------------------------------------------------------------------------------

function renderSVGToBitmap(Path)
   local scene = obj.new('VectorScene', { pageWidth=1024, pageHeight=768 })
   local vp = scene.new('VectorViewport', { x=0, y=0, width='100%', height='100%' })
   local svg = obj.new('svg', { target=vp, path=Path })
   local bmp = obj.new('bitmap', { width=scene.pageWidth, height=scene.pageHeight, bitsPerPixel=32 })
   bmp.acClear()
   scene.bitmap = bmp
   scene.acDraw()
   return bmp
end

function hashTestSVG(Path, ExpectedHash)
   if (ExpectedHash == 0) then
      error('File "' .. Path .. '" is yet to be assigned a checksum.')
   end
   local bmp = renderSVGToBitmap(glSVGFolder .. Path)
   local hash = mSys.GenCRC32(0, bmp.data, bmp.size)
   if (ExpectedHash != hash) then
      saveBitmap(bmp, Path)
      error('Computed hash for "' .. Path .. '" is ' .. string.format('$%.8x', hash) .. ', expected ' .. string.format('$%.8x', ExpectedHash))
   end
end

function saveBitmap(Bitmap, Path)
   local folder, filename = file.splitPath(Path)
   local split = string.split(filename, '\\.')
   filename = split[1] .. '.png'

   local pic = obj.new('picture', { width = Bitmap.width, height = Bitmap.height, bitsPerPixel = Bitmap.bitsPerPixel, flags='NEW' })
   Bitmap.acCopyData(pic.bitmap)
   local file = obj.new('file', { flags='NEW|WRITE', path='temp:svg_test_results/' .. filename })
   pic.acSaveImage(file)
end

-----------------------------------------------------------------------------------------------------------------------

function testCircles()            hashTestSVG('paths/circles.svg', 0xdbb4ab98) end
function testClip()               hashTestSVG('paths/clip.svg', 0x41ce561b) end
function testMorph()              hashTestSVG('paths/morph.svg', 0xb3a8755a) end
function testPolygons()           hashTestSVG('paths/polygons.svg', 0x0eaf8984) end
function testShapes()             hashTestSVG('paths/shapes.svg', 0x6cf5cd84) end
function testSpirals()            hashTestSVG('paths/spirals.svg', 0x313798f4) end
function testStrokes()            hashTestSVG('paths/strokes.svg', 0xe89c2abe) end
function testSuperShapes()        hashTestSVG('paths/supershapes.svg', 0x564f7346) end
function testSuperSpiral()        hashTestSVG('paths/superspiral.svg', 0x877b2e0d) end
function testTransitions()        hashTestSVG('paths/transitions.svg', 0xa125e343) end
function testWave()               hashTestSVG('paths/wave.svg', 0xefac2b4c) end

function testChevrons()           hashTestSVG('patterns/chevrons.svg', 0x7e048374) end
function testComplex()            hashTestSVG('patterns/complex.svg', 0xf399cb0c) end
function testDiamonds()           hashTestSVG('patterns/diamonds.svg', 0xe14ac1e8) end
function testDimple()             hashTestSVG('patterns/dimple.svg', 0x1806e6a0) end
function testDot()                hashTestSVG('patterns/dot.svg', 0x13252bb4) end
function testHoneycomb()          hashTestSVG('patterns/honeycomb.svg', 0x7b678ada) end
function testSnake()              hashTestSVG('patterns/snake.svg', 0x87d87dcf) end
function testVStripes()           hashTestSVG('patterns/vstripes.svg', 0xc8ab997e) end

function testComposite()          hashTestSVG('filters/composite.svg', 0x8028097a) end
function testConvolve()           hashTestSVG('filters/convolve.svg', 0x94268f20) end
function testW3Composite1()       hashTestSVG('filters/w3-composite.svg', 0x71241a09) end
function testW3Composite2()       hashTestSVG('filters/w3-filters-composite-02-b.svg', 0x30616069) end
function testW3Displacement1()    hashTestSVG('filters/w3-filters-displace-01-f.svg', 0x38eb34bf) end
function testW3Transfer()         hashTestSVG('filters/w3-filters-comptran-01-b.svg', 0x89dde8eb) end
function testW3Transfer2()        hashTestSVG('filters/w3-filters-color-02-b.svg', 0x2f99b8d7) end
function testW3Filters()          hashTestSVG('filters/w3-filters.svg', 0x0d83ba86) end
function testW3Filters2()         hashTestSVG('filters/w3-filters2.svg', 0xf73acacf) end
function testW3Image()            hashTestSVG('filters/w3-image.svg', 0x156c8293) end
function testW3Morphology()       hashTestSVG('filters/w3-morphology.svg', 0xa34245c2) end
function testW3Offset()           hashTestSVG('filters/w3-offset.svg', 0xa29355c9) end
function testW3Turbulence()       hashTestSVG('filters/w3-turbulence.svg', 0xf6058398) end
function testW3Lighting1()        hashTestSVG('filters/w3-filters-light-01-f.svg', 0x191f6f36) end
function testW3Lighting3()        hashTestSVG('filters/w3-filters-light-03-f.svg', 0x5b16b5c1) end
function testW3LightingSpecular() hashTestSVG('filters/w3-filters-specular-01-f.svg', 0xa6f9823a) end
function testW3LightingDiffuse()  hashTestSVG('filters/w3-filters-diffuse-01-f.svg', 0x9d2033cd) end
function testMoonSurface()        hashTestSVG('filters/moon-surface.svg', 0x8fafd05c) end

function testTransformations()    hashTestSVG('transforms/transformations.svg', 0x10f2fc02) end
function testW3AspectRatio()      hashTestSVG('transforms/w3-aspectratio.svg', 0xe424230e) end
function testW3SkewText()         hashTestSVG('transforms/w3-skew-text.svg', 0xc8e8a8bb) end
function testW3Viewbox()          hashTestSVG('transforms/w3-viewbox.svg', 0x5c4d1caf) end

function testCSS()                hashTestSVG('misc/css.svg', 0x7b6b507b) end
function testBrushStrokes()       hashTestSVG('misc/brush-strokes.svg', 0xd9b1b741) end
function testContourGradient()    hashTestSVG('misc/contour-gradient.svg', 0x7b7cae5f) end

function testClock()              hashTestSVG('images/clock.svg', 0x013e3140) end
function testTiger()              hashTestSVG('images/tiger.svg', 0x52c5c8e1) end

-----------------------------------------------------------------------------------------------------------------------

   return {
      tests = {
        -- Patterns
        'testChevrons',
        'testComplex',
        'testDiamonds',
        'testDimple',
        'testDot',
        'testHoneycomb',
        'testSnake',
        'testVStripes',
        -- Filters
        'testConvolve',
        'testMoonSurface',
        'testComposite',
        'testW3Composite1',
        'testW3Composite2',
        'testW3Displacement1',
        'testW3Filters',
        'testW3Filters2',
        'testW3Transfer',
        'testW3Transfer2',
        'testW3LightingSpecular',
        'testW3LightingDiffuse',
        'testW3Lighting1',
        'testW3Lighting3',
        'testW3Image',
        'testW3Morphology',
        'testW3Offset',
        'testW3Turbulence',
        -- Transforms
        'testTransformations',
        'testW3AspectRatio',
        'testW3SkewText',
        'testW3Viewbox',
        -- Misc
        'testCSS',
        'testBrushStrokes',
        'testContourGradient',
        -- Stock Images
        'testClock',
        'testTiger',
        -- Paths
        'testCircles',
        'testClip',
        'testMorph',
        'testPolygons',
        'testShapes',
        'testSpirals',
        'testStrokes',
        'testSuperShapes',
        'testSuperSpiral',
        'testTransitions',
        'testWave'
      },
      init = function(Folder)
         glSVGFolder = Folder
      end,
      cleanup = function()

      end
   }
