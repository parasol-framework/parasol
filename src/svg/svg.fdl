--$FLUID:Include

module({ name="SVG", copyright="Paul Manias Â© 2010-2022", version=1.0 }, function()
  flags("SVF", { comment="SVG flags." },
    "AUTOSCALE: In auto-resize mode, vector dimensions are scaled to the width and height of the vector page.  PageWidth and PageHeight must be set in Vector for this.",
    "ALPHA: Generate an alpha channel in the rendered image.")

  methods("svg", "Svg", {
    { id=1, name="Render" }
  })

  class("SVG", { cpp=true, src="class_svg.cpp", output="class_svg_def.c" }, [[
    obj Target      # Refers to the target of the generated SVG scene.
    str Path        # The location of the source SVG data.
    str Title       # Automatically defined if the title element is used in the SVG source document.
    int Frame       # Draw the SVG only when this frame number is a match to the target surface frame number.
    int(SVF) Flags  # Optional flags.
    int FrameRate   # Maximum frame rate to use for animation.
  ]],
  [[
   objVectorScene *Scene;
   STRING Folder;
   OBJECTPTR Viewport; // First viewport (the <svg> tag) to be created on parsing the SVG document.
   FUNCTION FrameCallback;
   struct svgAnimation *Animations;
   std::unordered_map<std::string, svgID> IDs;
   std::unordered_map<std::string, objFilterEffect *> Effects; // All effects, registered by their SVG identifier.
   svgInherit *Inherit;
   DOUBLE SVGVersion;
   TIMER AnimationTimer;
   UBYTE Animated:1;
   UBYTE PreserveWS:1; // Preserve white-space
  ]])
end)
