-- This program reads Parasol FDL files and saves definition headers to 'config:defs/'.  Definition headers describe
-- the structures, flags and constants used by modules with a universal format that is easy parse.  The headers can be
-- dynamically consumed by any language for the purpose of achieving full integration with the Parasol runtime
-- environment, which is written in C.
--
-- Usage: fluid sdk:scripts/idl-fluid.fluid src=source.fdl
-- Example: fluid sdk:scripts/idl-fluid.fluid src=sdk:core/modules/core/core.fdl

   require 'common'

   glSelf = obj.find('self')
   glPath = glSelf.workingPath

------------------------------------------------------------------------------

glOutput = { }

function output(String)
   table.insert(glOutput, nz(String, ''))
end

------------------------------------------------------------------------------

function checkOptions(Options)
   if (type(Options) != 'table') then
      if (type(Options) != 'nil') then
         error("Invalid option type '" .. type(Options) .. "', expected table.")
      else
         return { }
      end
   end
   return Options
end

------------------------------------------------------------------------------

function c_include(...) end
function class(Name, Options, Def, Private) end
function functionNames(Prefix, ...) end
function methods(ClassName, Prefix, Methods) end
function c_insert(Raw) end
function privateNames(List) end

------------------------------------------------------------------------------
-- FDL function
-- Restricts the output of anything declared within the referenced function.

function restrict(Function)
   local status = glRestrict
   glRestrict = 'ALL'
   Function()
   glRestrict = status
end

------------------------------------------------------------------------------

function module(Options, Function)
   glModuleName = Options['name']
   Function()
end

------------------------------------------------------------------------------

function header(Options, Function)
   glHeaderPath = Options['path']
   Function()
end

------------------------------------------------------------------------------

function flags(Prefix, Options, ...)
   Options = checkOptions(Options)

   if (nz(Options.restrict)) or (glRestrict) then return end -- Restricted definitions are never exported
   if (glFeedback == 'verbose') then print('Processing flags ' .. Prefix) end

   local list = { }
   local f = 0
   for k, flag_def in ipairs({...}) do
      if (type(flag_def) == 'string') then
         local key, comment = flag_def:match('^(.+):%s+(.+)$')
         if (key == nil) then key = flag_def end

         for k, v in ipairs(key:split('|')) do
            list[v] = bit.lshift(1, f)
         end
      elseif (type(flag_def) == 'table') then
         for flag, ref in pairs(flag_def) do

            local key, comment
            if (type(ref) != 'number') then
               key, comment = ref:match('^(.+):%s+(.+)$')
               if (key != nil) then
                  local stype = mSys.StrDatatype(key)
                  if (stype == STT_HEX) then
                     key = mSys.StrToHex(key)
                  elseif (stype == STT_FLOAT) then
                     key = mSys.StrToFloat(key)
                  elseif (stype == STT_NUMBER) then
                     key = mSys.StrToInt(key)
                  end
               end
            end

            if (key == nil) then key = ref end

            if (type(key) == 'number') then
               list[flag] = key
            else
               local f = 0
               for k, v in ipairs(key:split('|')) do
                  if (list[v] != nil) then
                     f = bit.bor(f, list[v])
                  else
                     print("Failed to lookup reference '" .. v .. "'")
                  end
               end
               list[flag] = f
            end
         end
      else
         error("Invalid flag type for '" .. Prefix .. "', expected string, got '" .. type(flag_def) .. "'")
      end
      f = f + 1
   end

   glConstants[Prefix] = list
end

------------------------------------------------------------------------------

function enum(Prefix, Options, ...)
   Options = checkOptions(Options)

   if (nz(Options.restrict)) or (glRestrict) then return end -- Restricted definitions are never exported
   if (glFeedback == 'verbose') then print('Processing enum ' .. Prefix) end

   local list = { }
   local inc = nz(Options.start, 0)
   for k, enum_def in ipairs({...}) do
      if (type(enum_def) == 'string') then
         local val = enum_def:match('^(.-):%s+.+$')  -- Scrap any comment for this value
         if (val == nil) then val = enum_def end

         for _, name in ipairs(val:split('|')) do
            list[name] = inc
         end
      else
         error("Invalid flag type for '" .. Prefix .. "', expected string, got '" .. type(enum_def) .. "'")
      end
      inc = inc + 1
   end

   glConstants[Prefix] = list
end

------------------------------------------------------------------------------

function const(Prefix, Options, ...)
   Options = checkOptions(Options)

   if (nz(Options.restrict)) or (glRestrict) then return end -- Restricted definitions are never exported
   if (glFeedback == 'verbose') then print('Processing constants ' .. Prefix) end

   local list = { }
   for k, const_def in ipairs({...}) do
      if (type(const_def) == 'table') then
         for k, v in pairs(const_def) do
            local val, comment
            if (type(v) == 'string') then
               val, comment = v:match('^(.-):%s+(.+)$')
            end
            if (val == nil) then val = v end

            local stype = mSys.StrDatatype(val)
            if (stype == STT_HEX) then
               val = mSys.StrToHex(val)
            elseif (stype == STT_FLOAT) then
               val = mSys.StrToFloat(val)
            elseif (stype == STT_NUMBER) then
               val = mSys.StrToInt(val)
            end

            list[k] = val
         end
      else
         error("Invalid const type for '" .. Prefix .. "', expected string, got '" .. type(const_def) .. "'")
      end
   end
   glConstants[Prefix] = list
end

------------------------------------------------------------------------------

function hash(Prefix, Format, ...)
   for k, hash_def in ipairs({...}) do
      local hash_name = hash_def:gsub('[^%w]', '_')
      local hash_id = string.format('%08x', mSys.StrHash(v)):sub(-8)
      output('#define ' .. Prefix .. '_' .. hash_name .. ' ' .. string.format(Format, hash_id))
   end
   output()
end

------------------------------------------------------------------------------

function platform(Platform, Function)
   if (Platform:lower() == 'windows') then
      Function()
   elseif (Platform:lower() == 'linux') then
      Function()
   elseif (Platform:lower() == 'x11') then
      Function()
   else
      error("Unrecognised platform '" .. Platform .. "'")
   end
end

------------------------------------------------------------------------------

glTypes = {
   hhandle = 'l',
   mem     = 'l',
   int     = 'l',
   uint    = 'ul',
   ptr     = 'p',
   cptr    = 'p',
   oid     = 'l',
   short   = 'w',
   ushort  = 'uw',
   uchar   = 'uc',
   char    = 'c',
   error   = 'l',
   large   = 'x',
   cid     = 'ul',
   obj     = 'o',
   str     = 's',
   cstr    = 's',
   func    = 'r',
   float   = 'f',
   double  = 'd',
   maxint  = 'm',
   eid     = 'l',
   fid     = 'x',
   struct  = 'e',
   resource = 'e'
}

function cType(Field, Origin)
   if (Field.type == nil) then
      error("Field definition incorrect, missing 'type' value for '" .. nz(Origin,"NIL") .. "'")
   end

   do
      local const, struct = Field.type:match('^(c-)struct%((.+)%)$')
      if (struct != nil) then
         local ptr_struct = struct:match('%*(.+)')
         if (ptr_struct != nil) then struct = ptr_struct end

         Field.struct = struct
         if (ptr_struct != nil) then
            Field.type = 'p'
            Field.name = Field.name .. ':' .. struct
         else
            Field.type = 'e'
            Field.name = Field.name .. ':' .. struct
         end

         return Field
      end
   end

   do
      local object = Field.type:match('^obj%((.+)%)$')
      if (object != nil) then
         local ptr_struct = object:match('%*(.+)')
         if (ptr_object != nil) then
            Field.type = 'p'
         else
            Field.type = 'o'
         end
         return Field
      end
   end

   do
      local bit = Field.type:match('^bit%((.+)%)$')
      if (bit != nil) then
         Field.type = cType({ type=bit, name='Bit' }, Origin).type
         Field.name = 'Bit'
         return Field
      end
   end

   do -- Short flags
      if (Field.type:match('^short%((%a+)%)') != nil) then
         Field.type = 'w'
         return Field
      end
   end

   do -- Integer flags
      if (Field.type:match('^int%((%a+)%)') != nil) then
         Field.type = 'l'
         return Field
      end
   end

   do -- Large flags
      if (Field.type:match('^large%((%a+)%)') != nil) then
         Field.type = 'x'
         return Field
      end
   end

   do -- Char arrays
      local unsigned, count = Field.type:match('^(u-)char%((.+)%)$')
      if (count != nil) then
         Field.type = 'c'
         if nz(unsigned) then Field.type = 'uc' end
         Field.name = Field.name .. '[' .. count .. ']'
         return Field
      end
   end

   do -- Integer arrays
      local unsigned, count = Field.type:match('^(u-)int%((%d+)%)')
      if (count != nil) then
         if nz(unsigned) then
            Field.type = 'ul'
         else
            Field.type = 'l'
         end
         Field.name = Field.name .. '[' .. count .. ']'
         return Field
      end
   end

   do -- Double arrays
      local count = Field.type:match('^double%((.+)%)')
      if (count != nil) then
         Field.type = 'd'
         Field.name = Field.name .. '[' .. count .. ']'
         return Field
      end
   end

   do -- Float arrays
      local count = Field.type:match('^float%((.+)%)')
      if (count != nil) then
         Field.type = 'f'
         Field.name = Field.name .. '[' .. count .. ']'
         return Field
      end
   end

   do
      local const, ptr_type = Field.type:match('^(c-)ptr%((.+)%)')
      if (ptr_type != nil) then
         Field.type = 'p'
         return Field
      end
   end

   do
      local array_type, array_size = Field.type:match('^array%((.+),(%d+)%)$')
      if (array_type != nil) then
         Field.type = array_type
         Field = cType(Field, Origin)
         Field.name = Field.name .. '[' .. array_size .. ']'
         return Field
      end
   end

   do
      local array_type = Field.type:match('^array%((.+)%)$')
      if (array_type != nil) then
         Field.type = array_type
         Field = cType(Field, Origin)
         return Field
      end
   end

   do
      if (Field.type:match('^fptr%((.+)%)$') != nil) then
         Field.type = 'p'
         return Field
      end
   end

   if (glTypes[Field.type] == nil) then
      error('No handling for field type "' .. Field.type .. '" from ' .. Origin)
   end

   Field.type = nz(glTypes[Field.type], Field.type)
   return Field
end

------------------------------------------------------------------------------
-- Returns { type, name, comment }

function extractFields(Def, Origin)
   local fields = { }
   for line, content in ipairs(Def:split('\n')) do
      -- Extract comment, if specified
      local comment = content:match('^.+#%s-(.+)$')
      if nz(comment) then
         content = content:match('^(.+)#%s-.+$')
      else
         -- Support for alternative comment format where the colon is used.
         comment = content:match('^.+:%s-(.+)$')
         if nz(comment) then
            content = content:match('^(.+):%s-.+$')
         end
      end

      local type, name = content:match('^%s*(.+)%s+([^%s]+)%s-$')
      if (type != nil) then
         local field = cType({ type=type:trim(), name=name:trim() }, Origin)
         table.insert(fields, field)
      elseif not nz(content:trim()) then
         -- Ignore empty line
      else
         error("Unable to process line '" .. nz(content,"NULL") .. "' for '" .. nz(Origin,'NIL') .. "'")
      end
   end

   return fields
end

------------------------------------------------------------------------------

function struct(Name, Options, Def, Append)
   Options = checkOptions(Options)
   if (nz(Options.restrict)) or (glRestrict) then return end -- Restricted structures are never exported
   if (glFeedback == 'verbose') then print('Processing structure ' .. Name) end
   local struct = {
      name    = Name,
      version = Options.version,
      type    = Options.type,
      fields  = extractFields(Def, Name)
   }
   struct.sequence = sequenceStruct(struct.fields)
   glStructures[Name] = struct
   table.insert(glOrderedStructures, struct)
end

------------------------------------------------------------------------------
-- Convert a struct definition into a string-based field sequence.

function sequenceStruct(fields)
   local seq = ''
   for _, f in ipairs(fields) do
      if nz(seq) then seq = seq .. ',' end
      if (f.sequence != nil) then
         seq = seq .. 'e' .. f.name:cap() .. ':' .. f.type
      else
         seq = seq .. f.type .. f.name:cap()
      end
   end
   return seq
end

------------------------------------------------------------------------------

function saveOutput()
   local outPath = glOutputPath

   if (outPath == nil) then
      if nz(glModuleName) then
         outPath = 'sdk:data/config/defs/' .. glModuleName:lower() .. '.def'
      else
         error('No putput path specified in command-line.')
      end
   end

   print('Saving compressed IDL output to "' .. outPath .. '"')

   local err, file = catch(function()
      if (glAppend) then
         file = obj.new('file', { flags='WRITE', path=outPath } )
         file.acSeek(0, SEEK_END)
         return file
      else
         return obj.new('file', { flags='WRITE|NEW', path=outPath } )
      end
   end)

   if err then
      print('Failed to write output to ' .. outPath)
      return
   end

   local EOL = '\n'
   if (glFormat == 'c') then EOL = '\\n' end

   -- Build structures string

   local s = ''
   for _, struct in pairs(glOrderedStructures) do
      if (struct.fields != nil) then
         s = s .. 's.' .. struct.name .. ':' .. struct.sequence .. EOL
      end
   end

   -- Build constants strings

   local c = ''
   for prefix, tab in pairs(glConstants) do
      c = c .. 'c.' .. prefix .. ':'
      local e = ''
      for k, v in pairs(tab) do
         if nz(e) then e = e .. ',' end
         if (type(v) == 'string') then
            local val = v:match('^(.-):%s+.+$') -- Scrap any defined comment for this value.
            if (val == nil) then val = v end
            e = e .. k .. '="' .. val .. '"'
         else
            local hexval = string.format('%x', v)
            if (hexval:len() == 16) then hexval = hexval:sub(-8) end
            e = e .. k .. '=0x' .. hexval
         end
      end
      c = c .. e .. EOL
   end

   if (glFormat == 'c') then
      file.acWrite('#undef MOD_IDL\n#define MOD_IDL "')
      if nz(s) then file.acWrite(s) end
      if nz(c) then file.acWrite(c) end
      file.acWrite('"\n')
   else
      if nz(s) then file.acWrite(s) end
      if nz(c) then file.acWrite(c) end
   end
end

------------------------------------------------------------------------------
-- Resolve the location of the Parasol SDK and create an 'sdk:' volume.

function resolveSDKPath()
   local err = ERR_Failed
   local limit = 5
   local search_path = 'makefile.inc'
   local sdk_path
   while (err != ERR_Okay) and (limit > 0) do
      search_path = '../' .. search_path
      err, sdk_path = mSys.ResolvePath(search_path)
      limit = limit - 1
   end
   if (err == ERR_Okay) then
      sdk_path = sdk_path:match('(.+)makefile%.inc')
      mSys.SetVolume(AST_NAME, 'sdk', AST_PATH, sdk_path, AST_COMMENT, 'Parasol Software Development Kit')
   else
      error('Failed to resolve a path to the Parasol SDK.')
   end
end

------------------------------------------------------------------------------

   glProgram    = 'idl-def'
   glSource     = arg('src')
   glOutputPath = arg('output')
   glFeedback   = arg('feedback')
   glFormat     = arg('format')
   glAppend     = arg('append')

   if (glSource == nil) then
      print('This command is used to compile IDL definition files.  Provide a reference to a')
      print('source file, or directory of source files in the SRC argument.  The resulting data will be')
      print('printed to the output object that was used in executing the command.')
      return
   end

   mSys = mod.load('core')
   resolveSDKPath()

   glOrderedStructures = { }
   glStructures = { }
   glConstants = { }

   local err, type = mSys.AnalysePath(glSource)
   if (type != LOC_FILE) then
      error('The specified source "' .. glSource .. '" is invalid.')
   end

   loadFile(glSource)
   saveOutput()

