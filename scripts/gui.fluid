-- Graphical User Interface functions

if (gui == nil) then
   -- The following values are the default 'light' theme.  They can be overridden by the "style:values.xml" file.
   gui = {
     theme = 'light',
     dpi = 160,
     _counter = 0,
     configureScene = function(Window, Scene)
        -- A custom configure function can be defined that adds definitions to the window scene, e.g. images and patterns for fills.
     end
   }

   gui.fonts = {
     -- Use percentages for scalable sizes, where 100% is equivalent to the value of gui.interface.fontSize
     default  = { face='Noto Sans,Source Sans Pro', size='100%' },
     window   = { face='Noto Sans,Source Sans Pro', size='100%' }, -- For text that is not inside a widget
     button   = { face='Noto Sans,Source Sans Pro', size='100%' }, -- Text inside buttons
     icon     = { face='Noto Sans,Source Sans Pro', size='100%' }, -- Text at the bottom of icons
     menu     = { face='Noto Sans,Source Sans Pro', size='100%' }, -- Menu item text
     titlebar = { face='Noto Sans', size='100%' }, -- Window titlebar text
     small    = { face='Tiny', size='60%' }, -- Recommended text for small sizes
     large    = { face='Noto Sans,Source Sans Pro', size='130%' }, -- Recommended text for headers
     widget   = { face='Noto Sans,Source Sans Pro', size='100%' }, -- Text inside widgets (e.g. combobox)
     label    = { face='Noto Sans,Source Sans Pro::bold', size='100%' } -- Text for labels and outside widgets
   }

   gui.iconThemes = {
     default = { first={ r=90,g=90,b=90 }, last={ r=70,g=70,b=110 } },
     carbon  = { first={ r=90,g=90,b=90 }, last={ r=70,g=70,b=110 } },
     yellow  = { first={ r=0xec,g=0xef,b=0x9e }, last={ r=0xd6,g=0x87,b=0x10 }, stroke={ r=60, g=30, b=30, a=90 } },
     orange  = { first={ r=0xFD,g=0xC8,b=0x30 }, last={ r=0xF3,g=0x73,b=0x35 } },
     blue    = { first={ r=0x4b,g=0x6c,b=0xb7 }, last={ r=0x18,g=0x28,b=0x48 } },
     ocean   = { first={ r=0xA8,g=0xC0,b=0xFF }, last={ r=0x3F,g=0x2B,b=0x96 } },
     green   = { first={ r=0x7e,g=0x9d,b=0x13 }, last={ r=0x00,g=0x65,b=0x32 } },
     red     = { first={ r=0xf5,g=0xaf,b=0x19 }, last={ r=0xf1,g=0x27,b=0x11 } },
     indigo  = { first={ r=0xad,g=0x53,b=0x89 }, last={ r=0x3c,g=0x10,b=0x53 } },
     rose    = { first={ r=0xff,g=0xc3,b=0xa0 }, last={ r=0xFF,g=0xAF,b=0xBD } },
     pink    = { first={ r=0xff,g=0xdd,b=0xe1 }, last={ r=0xee,g=0x9c,b=0xa7 } },
     grey    = { first={ r=100,g=100,b=100 }, last={ r=70,g=70,b=70 } },
     pearl   = { first={ r=250,g=249,b=248 }, last={ r=210,g=211,b=212 } }
   }

   gui.palettes = {
     -- bkgd and invBkgd are light-dark (light theme) or vice versa, and should be of the same hue in the neighbourhood of prime.
     -- prime (primary) and second (secondary prime) are colour pairs of the same hue.
     -- contrast is a suitable complement to prime and should be of a strongly contrasting hue
     -- neutral is a default background colour for unpainted areas, usually a light grey tone
     ocean = { type = 'light', bkgd = '#ECF0F1', invBkgd = '#2C3E50', prime = '#3498DB', second = '#2980B9', contrast = '#E74C3C', neutral = 'rgb(220,220,220)', text='rgb(0,0,0)', altText='rgb(255,255,255)' },
     retroTV = { type = 'light', bkgd = '#f4ebb0', invBkgd = '#6a4654', prime = '#78c2b1', second = '#f45c5d', contrast = '#78c2b1', neutral = 'rgb(220,220,220)', text='rgb(0,0,0)', altText='rgb(255,255,255)' },
     template = { type = '', bkgd = '', invBkgd = '', prime = '', second = '', contrast = '', neutral = 'rgb(220,220,220)', text='rgb(0,0,0)', altText='rgb(255,255,255)' }
   }

   gui.palette = gui.palettes.ocean

   gui.style = {
     -- All colour values are fills, so gradient and pattern references are also permitted for 'colours'.
     page = {
       bkgd        = gui.palette.bkgd,     -- Background for hosting text & paper-based layouts
       stroke      = gui.palette.prime,    -- Border stroke for any area surrounding 'bkgd'
       strokeFocus = gui.palette.contrast, -- Stroke to use when 'border' has the user's focus
       strokeWidth = 2,
       text        = gui.palette.text,   -- Default colour for text drawn over 'bkgd'
       icon        = '',                 -- Default icon theme for icons drawn over 'bkgd'
       textHighlight     = gui.palette.altText, -- Colour for 'text' during user hover
       textHighlightBkgd = gui.palette.prime,    -- Background fill for 'text' during user hover
       iconHighlight     = '',                   -- Recommended icon theme when highlighted
       textSelect        = gui.palette.altText,  -- Colour for 'text' when selected
       textSelectBkgd    = gui.palette.contrast, -- Background fill for 'text' when selected
       iconSelect        = ''                    -- Recommended icon theme when selected
     },
     widget = {
       text   = gui.palette.altText,
       bkgd   = gui.palette.prime,
       stroke = 'rgb(255,255,255,60)',
       strokeFocus    = 'rgb(255,255,255,160)',
       strokeDisabled = 'rgb(255,255,255,60)',
       strokeWidth = 2,
       width  = 160, -- Default width for common widgets (px)
       gap    = 6,   -- Recommended gap between widgets (px)
       margin = 6    -- Recommended internal margin for widgets (px)
     },
     window = {
       bkgd = gui.palette.neutral,
       text = 'rgb(0,0,0)'        -- Colour for text that is drawn directly to the window
     },
     button = {
       bkgd = gui.palette.invBkgd,      -- Default background
       bkgdActive = gui.palette.contrast -- Background when temporarily clicked (depressed)
     },
     menubar = {
       bkgd = gui.palette.invBkgd,
       text = gui.palette.altText,
       highlight = gui.palette.contrast
     },
     menu = {
       bkgd   = gui.palette.bkgd,
       border = 'rgb(200,200,200)'  -- Stroke for menu border
     },
     desktop = {
       bkgd = 'rgb(160,160,160)'
     }
   }

   if gui.palette.type == 'light' then
      gui.style.page.icon = 'carbon'
      gui.style.page.iconHighlight = 'pearl'
      gui.style.page.iconSelect    = 'pearl'
      gui.style.page.text          = gui.palette.text
      gui.style.page.textHighlight = gui.palette.altText
      gui.style.page.textSelect    = gui.palette.altText
   else
      gui.style.page.icon = 'pearl'
      gui.style.page.iconHighlight = 'carbon'
      gui.style.page.iconSelect = 'carbon'
   end

   gui.interface = {
     fontSize  = 11, -- Default font-size for everything (pt)
     iconTheme = 'Default', -- Named folder to load the icons from
     iconSize  = 20   -- Recommended default size for icons (px) and should be linked to fontSize
   }

   function convertFontSizes() -- Convert font percentage sizes to their px size
      for k,v in pairs(gui.fonts) do
         if gui.fonts[k].size then
            if string.match(gui.fonts[k].size, '^%-?%d+%%$') then
               pct = tonumber(string.match(gui.fonts[k].size, '^(%-?%d+)%%$'))
               gui.fonts[k].size = math.floor(gui.interface.fontSize * (pct / 100))
            end
         end
      end
   end

   local path = 'style:values.xml'
   if mSys.AnalysePath(path) != ERR_Okay then
      path = 'environment:config/values.xml'
      if mSys.AnalysePath(path) != ERR_Okay then
         path = 'styles:default/values.xml'
      end
   end

   local xml = obj.new('xml', { path=path })

   if (xml != nil) then
--[[
      local err, index = xml.mtFindTag('/colours')
      if (err == ERR_Okay) then
         for k,v in pairs(gui.style) do
            err, colour = xml.mtGetAttrib(index, k)
            if (err == ERR_Okay) then gui.style[k] = colour end
         end
      end
--]]
      local err, index = xml.mtFindTag('/interface')
      if (err == ERR_Okay) then
         for k,v in pairs(gui.interface) do
            err, val = xml.mtGetAttrib(index, k)
            if (err == ERR_Okay) then
               if string.match(val, '^%-?%d+$') then
                  gui.interface[k] = tonumber(val)
               else
                  gui.interface[k] = val
               end
            end
         end
      end

      convertFontSizes()

      local err, index = xml.mtFindTag('/fonts')
      if (err == ERR_Okay) then
         for k,v in pairs(gui.fonts) do
            local err, index = xml.mtFindTag("/fonts/font(@name='" .. k .. "')")
            if (err == ERR_Okay) then
               local err, face = xml.mtGetAttrib(index, 'face')
               if (err == ERR_Okay) then gui.fonts[k].face = face end
               local err, size = xml.mtGetAttrib(index, 'size')
               if (err == ERR_Okay) then
                  if string.match(size, '^%-?%d+$') then
                     gui.fonts[k].size = tonumber(size)
                  elseif string.match(size, '^%-?%d+%%$') then
                     pct = tonumber(string.match(size, '^(%-?%d+)%%$'))
                     gui.fonts[k].size = math.floor(gui.interface.fontSize * (pct / 100))
                  else
                     gui.fonts[k].size = size
                  end
               end
            end
         end
      end

      xml = nil
   else
      convertFontSizes()
   end
end

----------------------------------------------------------------------------------------------------------------------

gui.getFontHeight = function(Font)
   if not Font.height then
      local err, handle = mVec.getFontHandle(Font.face, 'Regular', 0, Font.size)
      local metrics = struct.new('FontMetrics')
      mVec.getFontMetrics(handle, metrics)
      Font.height  = metrics.height
      Font.spacing = metrics.lineSpacing
   end
   return Font.spacing, Font.height
end

----------------------------------------------------------------------------------------------------------------------
-- Read a style value and return it in pixel units.

gui.pixel = function(val)
   if (val != nil) then
      local num, alpha = val:match('^(%d+)(%a-)$')
      num = tonumber(num)
      if (num == nil) then error('Invalid graphics unit \'' .. val .. '\'') end
      if (alpha != nil) then
         if (alpha == 'px') then
            return num
         elseif (alpha == 'in') then
            return gui.dpi * num
         elseif (alpha == 'mm') then -- 25.4 units per inch
            return gui.dpi * (num / 25.4)
         elseif (alpha == 'pt') then -- 72 units per inch
            return gui.dpi * (num / 72)
         elseif (alpha == 'dp') then -- 160dpi relative value
            return num * (gui.dpi * 0.00625)
         end
      end
      return num
   else
      return 0
   end
end

----------------------------------------------------------------------------------------------------------------------
-- Convert an RGB string to an RGB table.  Supports '#' and 'rgb()'

gui.strToRGB = function(Value)
   if not Value then
      error('Empty value passed to strToRGB()\n' .. debug.traceback())
   end

   local result
   xpcall(function()
      if (string.byte(Value) == 35) then
         local colour = tonumber(string.sub(Value,2), 16)
         if (Value:len() == 7) then
            result = {
               r = bit.band(bit.rshift(colour, 16), 0xff),
               g = bit.band(bit.rshift(colour, 8), 0xff),
               b = bit.band(colour, 0xff),
               a = 255
            }
         elseif (Value:len() == 9) then
            result = {
               r = bit.band(bit.rshift(colour, 24), 0xff),
               g = bit.band(bit.rshift(colour, 16), 0xff),
               b = bit.band(bit.rshift(colour, 8), 0xff),
               a = bit.band(colour, 0xff)
            }
         else
            result = { r=0, g=0, b=0, a=255 }
         end
      else
         local colours = { }
         for str in string.gmatch(Value, '([^,]+)') do
            table.insert(colours, tonumber(str))
         end
         local r = nz(colours[1], 0)
         local g = nz(colours[2], 0)
         local b = nz(colours[3], 0)
         local a = nz(colours[4], 255)
         if (r > 255) then r = 255 end
         if (g > 255) then g = 255 end
         if (b > 255) then b = 255 end
         if (a > 255) then a = 255 end
         if (r < 0) then r = 0 end
         if (g < 0) then g = 0 end
         if (b < 0) then b = 0 end
         if (a < 0) then a = 0 end
         result = { r=r, g=g, b=b, a=a }
      end
   end,
   function(Error)
      error(Error .. '\nInput value: ' .. Value .. '\n' .. debug.traceback())
   end)

   return result
end

----------------------------------------------------------------------------------------------------------------------
-- Convert an RGB table to a SVG colour string

gui.rgbToSVG = function(Value)
   return string.format('rgb(%d,%d,%d,%d)', Value.r, Value.g, Value.b, nz(Value.a,255))
end

----------------------------------------------------------------------------------------------------------------------
-- Interpolate two RGB colours

gui.interpolateRGB = function(Base, New)
   return {
      a = Base.a + ((New.a - Base.a) * 0.5),
      r = Base.r + ((New.r - Base.r) * 0.5),
      g = Base.g + ((New.g - Base.g) * 0.5),
      b = Base.b + ((New.b - Base.b) * 0.5)
   }
end

----------------------------------------------------------------------------------------------------------------------
-- Interpolate two HSV colours

gui.interpolateHSV = function(Base, New)
   return {
      a = Base.a + ((New.a - Base.a) * 0.5),
      h = Base.h + ((New.h - Base.h) * 0.5),
      s = Base.s + ((New.s - Base.s) * 0.5),
      v = Base.v + ((New.v - Base.v) * 0.5)
   }
end
----------------------------------------------------------------------------------------------------------------------
-- Convert HSV table to RGB

gui.hsvToRGB = function(Value)
   if not Value then
      error('Empty value passed to hsvToRGB()\n' .. debug.traceback())
   end

   local h = Value.h / 60
   local s = Value.s
   local v = Value.v
   local i = math.floor(h)
   local f = h - i
   if bit.band(i, 1) == 0 then f = 1 - f end
   local m = v * (1 - s)
   local n = v * (1 - s * f)

   if i == 6 or i == 0 then
      return { r = v, g = n, b = m, a = Value.a }
   elseif i == 1 then
      return { r = n, g = v, b = m, a = Value.a }
   elseif i == 2 then
      return { r = m, g = v, b = n, a = Value.a }
   elseif i == 3 then
      return { r = m, g = n, b = v, a = Value.a }
   elseif i == 4 then
      return { r = n, g = m, b = v, a = Value.a }
   elseif i == 5 then
      return { r = v, g = m, b = n, a = Value.a }
   else
      return { r = 0, g = 0, b = 0, a = Value.a }
   end
end

----------------------------------------------------------------------------------------------------------------------
-- Return the light value of an RGB colour (i.e. the V in HSV)

gui.rgbValue = function(Value)
   if not Value then
      error('Empty value passed to rgbValue()\n' .. debug.traceback())
   end

   local max = Value.b
   if Value.g > max then max = Value.g end
   if Value.r > max then max = Value.r end
   return max
end

----------------------------------------------------------------------------------------------------------------------
-- Convert RGB table to HSV

gui.rgbToHSV = function(Value)
   if not Value then
      error('Empty value passed to rgbToHSV()\n' .. debug.traceback())
   end

   local max = gui.rgbValue(Value)
   local hsv = { v = max }
   if max > 0 then
      local min = Value.b
      if Value.g < min then min = Value.g end
      if Value.r < min then min = Value.r end

      local delta = max - min
      hsv.s = delta / max
      if hsv.s == 0 then
         hsv.h = 0
      else
         if Value.r >= max then
            hsv.h = (Value.g - Value.b) / delta
         elseif Value.g >= max then
            hsv.h = 2.0 + (Value.b - Value.r) / delta
         else
            hsv.h = 4.0 + (Value.r - Value.g) / delta
         end
         hsv.h = hsv.h * 60
         if hsv.h < 0 then hsv.h = hsv.h + 360 end
      end
   else
      hsv.s = 0
      hsv.h = 0
   end
   return hsv
end

----------------------------------------------------------------------------------------------------------------------
-- Call a client function for each vector in the tree

gui.forVector = function(Vector, Function)
   while (Vector != nil) do
      Function(Vector)
      local child = Vector.child
      if (child != nil) then gui.forVector(child, Function) end
      Vector = Vector.next
   end
end

----------------------------------------------------------------------------------------------------------------------

gui.applyFill = function(Vector, Fill)
   while (Vector != nil) do
      if (Vector.fill != 'none') then
         Vector.fill = Fill
      end
      if (Vector.stroke != nil) then Vector.stroke = Fill end
      local child = Vector.child
      if (child != nil) then gui.applyFill(child, Fill) end
      Vector = Vector.next
   end
end

----------------------------------------------------------------------------------------------------------------------
-- Generate a simple gradient fill for vectors.

gui.simpleGradient = function(Scene, Name, Colours, X1, Y1, X2, Y2, Units, IgnoreClashes)
   if not Name then
      error('A name for the gradient is required.\n' .. debug.traceback())
   end

   local stops = { }
   local i = 0
   for _, col in pairs(Colours) do
      local vc = struct.new('GradientStop')
      vc.offset    = nz(col.offset, i / (#Colours-1))
      vc.rgb.red   = col.r / 255
      vc.rgb.green = col.g / 255
      vc.rgb.blue  = col.b / 255
      if not col.a then
         vc.rgb.alpha = 1.0
      else
         vc.rgb.alpha = col.a / 255
      end
      table.insert(stops, vc)
      i = i + 1
   end

   local gradient = Scene.new('VectorGradient', {
      name=Name, type='linear', stops=stops, x1=X1, y1=Y1, x2=X2, y2=Y2, units=nz(Units,'boundingbox')
   })

   if IgnoreClashes then -- Do not fail if a resource with the same name already exists (nb: will return nil).
      local ex = catch(function()
         Scene.mtAddDef(Name, gradient)
      end)

      if (ex) then
         if (ex.code == ERR_ResourceExists) then
            gradient.free()
            return nil
         else
            error(ex)
         end
      end
   else
      Scene.mtAddDef(Name, gradient)
   end

   return gradient
end

----------------------------------------------------------------------------------------------------------------------
-- Build an icon styled with the current theme and register it as a pattern.  The pattern can then be used as a fill,
-- i.e. "url(#Path)".  Using it in a VectorRectangle is akin to a cached bitmap (fast), or apply to a VectorViewport
-- for live rendering (higher quality transforms).

gui.createIcon = function(Scene, Path, Size, Theme, Name)
   if not Size then Size = 16 end
   if not Path then error('No Path specified.') end
   local lGradient = gui.iconThemes.default
   local icon = { size=Size }

   if type(Theme) == 'table' then
      lGradient = Theme
   elseif type(Theme) == 'string' then
      if gui.iconThemes[Theme] then
         lGradient = gui.iconThemes[Theme]
      else
         error('gui.createIcon() theme ' .. Theme .. ' not recognised.')
      end

      if not Name then Name = Theme:lower() .. '/' .. Path:lower() end
   end

   if not Name then Name = Path end

   if Scene.mtFindDef(Name) == ERR_Okay then -- Return if the icon pattern is already registered
      return
   end

   gui._counter = gui._counter + 1
   local gname   = 'icon_grd' .. gui._counter
   icon.pattern  = Scene.new('VectorPattern', { pageWidth=Size, pageHeight=Size, spreadMethod=VSPREAD_PAD })
   icon.gradient = gui.simpleGradient(icon.pattern.scene, gname, { lGradient.first, lGradient.last }, 0, 0, 0, 1)
   if string.find(Path, 'icons:') != 1 then
      Path = 'icons:' .. Path .. '.svg'
   end
   icon.svg = obj.new('svg', { target=icon.pattern.viewport, path=Path })

   gui.forVector(icon.pattern.viewport, function(Vector)
      if (Vector.fill != 'none') then
         Vector.fill = 'url(#' .. gname .. ')'
      end

      if (Vector.stroke != nil) then
         Vector.stroke = 'url(#' .. gname .. ')'
      elseif lGradient.stroke then
         Vector.stroke = gui.rgbToSVG(lGradient.stroke)
         Vector.strokeWidth = '1.5%'
      end
   end)

   -- Adjust gradient size to match the viewport height.

   local viewport = icon.pattern.viewport.child
   if (viewport != nil) then
      while (child != nil) do
         if (child.class.id == ID_VECTORVIEWPORT) then
            viewport = child
            break
         end
      end

      if (viewport.viewHeight < viewport.viewWidth) then
         icon.gradient.y1 = viewport.viewY - ((viewport.viewWidth - viewport.viewHeight) * 0.5)
         icon.gradient.y2 = icon.gradient.y1 + viewport.viewWidth
      else
         icon.gradient.y1 = viewport.viewY
         icon.gradient.y2 = viewport.viewY + viewport.viewHeight
      end
   end

   check(Scene.mtAddDef(Name, icon.pattern))

   return { name = Name, theme = Theme, size = Size, path = Path, fill = 'url(#' .. Name .. ')' }
end
