-- Graphical User Interface functions

if (gui == nil) then
   gui = {
      dpi = 160,
      fonts = { },
      colours = { },
      interface = { },
      rgb = { },
      counter = 0,
      iconColours = {
         default = { first={ r=90,g=90,b=90 }, last={ r=70,g=70,b=110 } },
         carbon  = { first={ r=90,g=90,b=90 }, last={ r=70,g=70,b=110 } },
         yellow  = { first={ r=0xec,g=0xef,b=0x9e }, last={ r=0xd6,g=0x87,b=0x10 }, stroke={ r=60, g=30, b=30, a=90 } },
         orange  = { first={ r=0xFD,g=0xC8,b=0x30 }, last={ r=0xF3,g=0x73,b=0x35 } },
         blue    = { first={ r=0x4b,g=0x6c,b=0xb7 }, last={ r=0x18,g=0x28,b=0x48 } },
         ocean   = { first={ r=0xA8,g=0xC0,b=0xFF }, last={ r=0x3F,g=0x2B,b=0x96 } },
         green   = { first={ r=0x7e,g=0x9d,b=0x13 }, last={ r=0x00,g=0x65,b=0x32 } },
         red     = { first={ r=0xf5,g=0xaf,b=0x19 }, last={ r=0xf1,g=0x27,b=0x11 } },
         indigo  = { first={ r=0xad,g=0x53,b=0x89 }, last={ r=0x3c,g=0x10,b=0x53 } },
         rose    = { first={ r=0xff,g=0xc3,b=0xa0 }, last={ r=0xFF,g=0xAF,b=0xBD } },
         pink    = { first={ r=0xff,g=0xdd,b=0xe1 }, last={ r=0xee,g=0x9c,b=0xa7 } },
         grey    = { first={ r=100,g=100,b=100 }, last={ r=70,g=70,b=70 } },
         pearl   = { first={ r=250,g=249,b=248 }, last={ r=210,g=211,b=212 } }
      }
   }

   gui.colours.rgb = function(Name)
      if not gui.colours[Name] then error('Invalid colour name "' .. Name .. '"') end
      return 'rgb(' .. gui.colours[Name] .. ')'
   end

   do
      local mSurface = mod.load('surface') // Temporarily load to ensure glStyle is available.
      local xml = obj.find('glStyle')

      if (xml != nil) then
         local total = 0
         xml.mtFindTag('/fonts/font',
            function(XML, TagIndex, Attrib)
               local font = { }
               local err, name = xml.mtGetAttrib(TagIndex, 'name')
               if nz(name) then
                  err, font.face = xml.mtGetAttrib(TagIndex, 'face')
                  if nz(font.face) then
                     err, font.size      = xml.mtGetAttrib(TagIndex, 'size')
                     err, font.colour    = xml.mtGetAttrib(TagIndex, 'colour')
                     err, font.highlight = xml.mtGetAttrib(TagIndex, 'highlight')
                     gui.fonts[name] = font
                     total = total + 1
                  end
               end
            end)

         if (total == 0) then
            error('No fonts were processed from the style information.')
         end

         local err, index = xml.mtFindTag('/colours')
         if (err == ERR_Okay) then
            err, gui.colours['shadow']        = xml.mtGetAttrib(index, 'shadow')
            err, gui.colours['highlight']     = xml.mtGetAttrib(index, 'highlight')
            err, gui.colours['colour']        = xml.mtGetAttrib(index, 'colour')
            err, gui.colours['widgetText']    = xml.mtGetAttrib(index, 'widgetText')
            err, gui.colours['widgetBkgd']    = xml.mtGetAttrib(index, 'widgetBkgd')
            err, gui.colours['widgetStroke']  = xml.mtGetAttrib(index, 'widgetStroke')
            err, gui.colours['widgetStrokeFocus']   = xml.mtGetAttrib(index, 'widgetStrokeFocus')
            err, gui.colours['widgetStrokeDisabled'] = xml.mtGetAttrib(index, 'widgetStrokeDisabled')
            err, gui.colours['button']        = xml.mtGetAttrib(index, 'button')
            err, gui.colours['buttonClick']   = xml.mtGetAttrib(index, 'buttonClick')
            err, gui.colours['menubar']       = xml.mtGetAttrib(index, 'menubar')
            err, gui.colours['menu']          = xml.mtGetAttrib(index, 'menu')
            err, gui.colours['border']        = xml.mtGetAttrib(index, 'border')
            err, gui.colours['menuBorder']    = xml.mtGetAttrib(index, 'menuBorder')
            err, gui.colours['desktop']       = xml.mtGetAttrib(index, 'desktop')
            err, gui.colours['recess']        = xml.mtGetAttrib(index, 'recess')
            err, gui.colours['white']         = xml.mtGetAttrib(index, 'white')
            err, gui.colours['red']           = xml.mtGetAttrib(index, 'red')
            err, gui.colours['green']         = xml.mtGetAttrib(index, 'green')
            err, gui.colours['blue']          = xml.mtGetAttrib(index, 'blue')
            err, gui.colours['background']    = xml.mtGetAttrib(index, 'background')
            err, gui.colours['textHighlight'] = xml.mtGetAttrib(index, 'textHighlight')
            err, gui.colours['window']        = xml.mtGetAttrib(index, 'window')
            err, gui.colours['boxedText']     = xml.mtGetAttrib(index, 'boxedText')
            err, gui.colours['windowText']    = xml.mtGetAttrib(index, 'windowText')
         else
            error('No colours tag in style values.')
         end

         local err, index = xml.mtFindTag('/interface')
         if (err == ERR_Okay) then
            err, gui.interface['inputBorder']    = xml.mtGetAttrib(index, 'inputBorder')
            err, gui.interface['outputBorder']   = xml.mtGetAttrib(index, 'outputBorder')
            err, gui.interface['widgetMargin']   = xml.mtGetAttrib(index, 'widgetMargin')
            err, gui.interface['widgetGap']      = xml.mtGetAttrib(index, 'widgetGap')
            err, gui.interface['textBorder']     = xml.mtGetAttrib(index, 'textBorder')
            err, gui.interface['fontSize']       = xml.mtGetAttrib(index, 'fontSize')
            err, gui.interface['sliderSize']     = xml.mtGetAttrib(index, 'sliderSize')
            err, gui.interface['scrollSize']     = xml.mtGetAttrib(index, 'scrollSize')
            err, gui.interface['scrollOpacity']  = xml.mtGetAttrib(index, 'scrollOpacity')
            err, gui.interface['iconRatio']      = xml.mtGetAttrib(index, 'iconRatio')
            err, gui.interface['iconTheme']      = xml.mtGetAttrib(index, 'iconTheme')
            err, gui.interface['iconSize']       = xml.mtGetAttrib(index, 'iconSize')
            for k, v in pairs(gui.interface) do
               if string.match(v, "^%-?%d+$") then
                  gui.interface[k] = tonumber(v)
               end
            end
         else
            error('No interface tag in style values.')
         end

         xml = nil
      else
         error('Failed to retrieve style information.')
      end

      mSurface = nil
   end
end

------------------------------------------------------------------------------

gui.getFontHeight = function(Font)
   if not Font.height then
      local fnt = obj.new('font', { face=Font.face, point=Font.size })
      Font.height = fnt.height
      Font.maxHeight = fnt.maxHeight
   end
   return Font.maxHeight, Font.height
end

------------------------------------------------------------------------------

gui.bitmapColour = function(Bitmap, ColourName)
   if (gui.rgb[ColourName] == nil) then
      local str = gui.colours[ColourName]
      if (str == nil) then
         error('Unrecognised colour "' .. nz(ColourName,'NIL') .. '"')
      end
      gui.rgb[ColourName] = gui.strToRGB(str)
   end

   local rgb = gui.rgb[ColourName]
   local err, col = Bitmap.mtGetColour(rgb.r, rgb.g, rgb.b, rgb.a)
   return col
end

------------------------------------------------------------------------------
-- Read a style value and return it in pixel units.

gui.pixel = function(val)
   if (val != nil) then
      local num, alpha = val:match('^(%d+)(%a-)$')
      num = tonumber(num)
      if (num == nil) then error('Invalid graphics unit \'' .. val .. '\'') end
      if (alpha != nil) then
         if (alpha == 'px') then
            return num
         elseif (alpha == 'in') then
            return gui.dpi * num
         elseif (alpha == 'mm') then // 25.4 units per inch
            return gui.dpi * (num / 25.4)
         elseif (alpha == 'pt') then // 72 units per inch
            return gui.dpi * (num / 72)
         elseif (alpha == 'dp') then // 160dpi relative value
            return num * (gui.dpi * 0.00625)
         end
      end
      return num
   else
      return 0
   end
end

------------------------------------------------------------------------------
-- Convert an RGB string to an RGB table.

gui.strToRGB = function(Value)
   if (string.byte(Value) == 35) then
      local colour = mSys.StrToHex(Value)
      if (Value:len() == 7) then
         return {
            r = bit.band(bit.rshift(colour, 16), 0xff),
            g = bit.band(bit.rshift(colour, 8), 0xff),
            b = bit.band(colour, 0xff),
            a = 255
         }
      elseif (Value:len() == 9) then
         return {
            r = bit.band(bit.rshift(colour, 24), 0xff),
            g = bit.band(bit.rshift(colour, 16), 0xff),
            b = bit.band(bit.rshift(colour, 8), 0xff),
            a = bit.band(colour, 0xff)
         }
      else
         return { r=0, g=0, b=0, a=255 }
      end
   else
      local colours = { }
      for str in string.gmatch(Value, '([^,]+)') do
         table.insert(colours, tonumber(str))
      end
      local r = nz(colours[1], 0)
      local g = nz(colours[2], 0)
      local b = nz(colours[3], 0)
      local a = nz(colours[4], 255)
      if (r > 255) then r = 255 end
      if (g > 255) then g = 255 end
      if (b > 255) then b = 255 end
      if (a > 255) then a = 255 end
      if (r < 0) then r = 0 end
      if (g < 0) then g = 0 end
      if (b < 0) then b = 0 end
      if (a < 0) then a = 0 end
      return { r=r, g=g, b=b, a=a }
   end
end

------------------------------------------------------------------------------
-- Convert an RGB table to a SVG colour string

gui.rgbToSVG = function(Value)
   return string.format('rgb(%d,%d,%d,%d)', Value.r, Value.g, Value.b, nz(Value.a,255))
end

------------------------------------------------------------------------------
-- Interpolate two RGB colours

gui.interpolateRGB = function(Base, New)
   return {
      a = Base.a + ((New.a - Base.a)*0.5),
      r = Base.r + ((New.r - Base.r)*0.5),
      g = Base.g + ((New.g - Base.g)*0.5),
      b = Base.b + ((New.b - Base.b)*0.5)
   }
end

------------------------------------------------------------------------------
-- Interpolate two HSV colours

gui.interpolateHSV = function(Base, New)
   return {
      a = Base.a + ((New.a - Base.a)*0.5),
      h = Base.h + ((New.h - Base.h)*0.5),
      s = Base.s + ((New.s - Base.s)*0.5),
      v = Base.v + ((New.v - Base.v)*0.5)
   }
end
------------------------------------------------------------------------------
-- Convert HSV table to RGB

gui.hsvToRGB = function(Value)
   local h = Value.h / 60
   local s = Value.s
   local v = Value.v
   local i = math.floor(h)
   local f = h - i
   if bit.band(i, 1) == 0 then f = 1 - f end
   local m = v * (1 - s)
   local n = v * (1 - s * f)

   if i == 6 or i == 0 then
      return { r = v, g = n, b = m, a = Value.a }
   elseif i == 1 then
      return { r = n, g = v, b = m, a = Value.a }
   elseif i == 2 then
      return { r = m, g = v, b = n, a = Value.a }
   elseif i == 3 then
      return { r = m, g = n, b = v, a = Value.a }
   elseif i == 4 then
      return { r = n, g = m, b = v, a = Value.a }
   elseif i == 5 then
      return { r = v, g = m, b = n, a = Value.a }
   else
      return { r = 0, g = 0, b = 0, a = Value.a }
   end
end

------------------------------------------------------------------------------
-- Return the light value of an RGB colour (i.e. the V in HSV)

gui.rgbValue = function(Value)
   local max = Value.b
   if Value.g > max then max = Value.g end
   if Value.r > max then max = Value.r end
   return max
end

------------------------------------------------------------------------------
-- Convert RGB table to HSV

gui.rgbToHSV = function(Value)
   local max = gui.rgbValue(Value)
   local hsv = { v = max }
   if max > 0 then
      local min = Value.b
      if Value.g < min then min = Value.g end
      if Value.r < min then min = Value.r end

      local delta = max - min
      hsv.s = delta / max
      if hsv.s == 0 then
         hsv.h = 0
      else
         if Value.r >= max then
            hsv.h = (Value.g - Value.b) / delta
         elseif Value.g >= max then
            hsv.h = 2.0 + (Value.b - Value.r) / delta
         else
            hsv.h = 4.0 + (Value.r - Value.g) / delta
         end
         hsv.h = hsv.h * 60
         if hsv.h < 0 then hsv.h = hsv.h + 360 end
      end
   else
      hsv.s = 0
      hsv.h = 0
   end
   return hsv
end

------------------------------------------------------------------------------
-- Call a client function for each vector in the tree

gui.forVector = function(Vector, Function)
   while (Vector != nil) do
      Function(Vector)
      local child = Vector.child
      if (child != nil) then gui.forVector(child, Function) end
      Vector = Vector.next
   end
end

------------------------------------------------------------------------------

gui.applyFill = function(Vector, Fill)
   while (Vector != nil) do
      if (Vector.fill != 'none') then
         Vector.fill = Fill
      end
      if (Vector.stroke != nil) then Vector.stroke = Fill end
      local child = Vector.child
      if (child != nil) then gui.applyFill(child, Fill) end
      Vector = Vector.next
   end
end

------------------------------------------------------------------------------
-- Generate a simple gradient fill for vectors.

gui.simpleGradient = function(Scene, Name, Colours, X1, Y1, X2, Y2, Units, IgnoreClashes)
   if not Name then error('A name for the gradient is required.') end

   local stops = { }
   local i = 0
   for _, col in pairs(Colours) do
      local vc = struct.new('GradientStop')
      vc.offset    = nz(col.offset, i / (#Colours-1))
      vc.rgb.red   = col.r / 255
      vc.rgb.green = col.g / 255
      vc.rgb.blue  = col.b / 255
      if not col.a then
         vc.rgb.alpha = 1.0
      else
         vc.rgb.alpha = col.a / 255
      end
      table.insert(stops, vc)
      i = i + 1
   end

   local gradient = Scene.new('VectorGradient', {
      name=Name, type='linear', stops=stops, x1=X1, y1=Y1, x2=X2, y2=Y2, units=nz(Units,'boundingbox')
   })

   if IgnoreClashes then -- Do not fail if a resource with the same name already exists (nb: will return nil).
      local ex = catch(function()
         Scene.mtAddDef(Name, gradient)
      end)

      if (ex) then
         if (ex.code == ERR_ResourceExists) then
            gradient.acFree()
            return nil
         else
            error(ex)
         end
      end
   else
      Scene.mtAddDef(Name, gradient)
   end

   return gradient
end

------------------------------------------------------------------------------
-- Return an icon styled with the current theme.  The icon is used as a fill, i.e. "url(#Path)".  Use in a
-- VectorRectangle if you want to use the icon as a cached bitmap (fast), or apply to a VectorViewport for live
-- rendering (higher quality transforms).

gui.createIcon = function(Scene, Path, Size, Gradient, Name)
   if not Size then Size = 16 end
   if not Name then Name = Path end
   local lGradient = gui.iconColours.default
   local icon = { }

   if type(Gradient) == 'table' then
      lGradient = Gradient
   elseif type(Gradient) == 'string' then
      if gui.iconColours[Gradient] then
         lGradient = gui.iconColours[Gradient]
      else
         error('gui.createIcon() gradient ' .. Gradient .. ' not recognised.')
      end
   end

   gui.counter = gui.counter + 1
   local gname   = 'icon_grd' .. gui.counter
   icon.pattern  = Scene.new('VectorPattern', { pageWidth=Size, pageHeight=Size })
   icon.gradient = gui.simpleGradient(icon.pattern.scene, gname, { lGradient.first, lGradient.last }, 0, 0, 0, 1)
   if string.find(Path, 'icons:') != 1 then
      Path = 'icons:' .. Path .. '.svg'
   end
   icon.svg = obj.new('svg', { target=icon.pattern.viewport, path=Path })

   gui.forVector(icon.pattern.viewport, function(Vector)
      if (Vector.fill != 'none') then
         Vector.fill = 'url(#' .. gname .. ')'
      end

      if (Vector.stroke != nil) then
         Vector.stroke = 'url(#' .. gname .. ')'
      elseif lGradient.stroke then
         Vector.stroke = gui.rgbToSVG(lGradient.stroke)
         Vector.strokeWidth = '1.5%'
      end
   end)

   -- Adjust gradient size to match the viewport height.

   local viewport = icon.pattern.viewport.child
   if (viewport != nil) then
      while (child != nil) do
         if (child.class.id == ID_VECTORVIEWPORT) then
            viewport = child
            break
         end
      end

      if (viewport.viewHeight < viewport.viewWidth) then
         icon.gradient.y1 = viewport.viewY - ((viewport.viewWidth - viewport.viewHeight) * 0.5)
         icon.gradient.y2 = icon.gradient.y1 + viewport.viewWidth
      else
         icon.gradient.y1 = viewport.viewY
         icon.gradient.y2 = viewport.viewY + viewport.viewHeight
      end
   end

   Scene.mtAddDef(Name, icon.pattern)

   return icon
end
