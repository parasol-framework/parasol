--[[
The FileSearch interface simplifies the process of searching for files and folders within the file system.  Support is
provided for both wildcard filters and content searching.

This example searches for text files in the 'documents:' folder that include the word 'tennis':

   file.search('documents:', {
      nameWild      = true,
      nameFilter    = '^.*%.xml$',
      contentFilter = 'tennis',
      maxDepth      = 2,  -- Only search 2 levels deep
      matchFeedback = function(Path, FileName, File)
         print(Path, ' ', FileName)
      end
   })

Alternative using compiled regex:

   file.search('documents:', {
      nameFilter = regex.new('\\.xml$', regex.ICASE),
      ...
   })

Valid options to use when defining the search table are as follows:

  nameFilter:     Include file/folder names that match this string or compiled regex object.
  nameWild:       Set to true to enable wildcard matching (Lua patterns) in nameFilter.  Ignored if nameFilter is a regex object.
  contentFilter:  Include files that contain this content.
  caseSensitive:  Enforces case-sensitive name comparisons if true.
  matchFeedback:  Call this function each time that a matched file is discovered.  Returning ERR_Terminate will stop the search.  Synopsis: function(Path, File, Attributes)
  ignoreFeedback: Call this function each time that a file fails to pass filter matches.
  minSize:        Filter out files that do not meet or exceed this minimum size.
  maxSize:        Filter out files that exceed this size.
  minDate:        Filter out files with a modification time less than this timestamp.
  maxDate:        Filter out files with a modification time exceeding this timestamp.
  scanLinks:      Allows symbolically linked files and folders to be included in the file search.
  matchFolders:   Include folder names in the output of the search.
  ignoreFiles:    Do not scan files (useful only in conjunction with matchFolders).
  maxDepth:       Maximum depth to recurse into sub-folders (0 = current folder, 1 = one sub-folder, etc.).

When searching files for content, it is strongly recommended that a filter or size limit is applied so that only a
limited number of files are opened for searching.
--]]

   require 'common'

file.search = function(Path, Options)
   local lOptions = Options
   local ADJUST_LOG = 0
   local lStop = false
   local isRegexFilter = false

   local function contentMatch(Path)
      if lOptions.contentFilter == nil then
         return true
      end

      local ex, fl = catch(function()
         return obj.new('file', { path=Path, flags='READ' } )
      end)

      if fl then
         -- By default, symbolic links are not scanned for content unless the scanLinks option is set.

         if (bit.bor(fl.flags, FL_LINK) != 0) and (lOptions.scanLinks == true) then
            fl.free()
            return false
         end

         local bytes = fl.size
         if bytes > 4096 then bytes = 4096 end
         local buf = string.alloc(bytes)
         local err, totalRead = fl.acRead(buf)

         while (err == ERR_Okay) and (totalRead >= lOptions.contentFilter:len()) do
            if (buf:find(lOptions.contentFilter) != nil) then return true end
            if fl.position == fl.size then return false end
            fl.acSeek(-lOptions.contentFilter:len(), SEEK_CURRENT)
            err, totalRead = fl.acRead(buf)
         end
      end

      return false
   end

   local function fileMatched(Path, FileName, File)
      if lOptions.matchFeedback then
         local result = lOptions.matchFeedback(Path, FileName, File)
         if result == ERR_Terminate then lStop = true end
      end
   end

   local function dateLessThan(DateA, DateB) -- struct DateTime
      if a.Year < b.Year then return true
      elseif a.Year > b.Year then return false end

      -- else years are equal, so test months
      if a.Month < b.Month then return true
      elseif a.Month > b.Month then return false end

      if a.Day < b.Day then return true
      elseif a.Day > b.Day then return false end

      if a.Hour < b.Hour then return true
      elseif a.Hour > b.Hour then return false end

      if a.Minute < b.Minute then return true
      elseif a.Minute > b.Minute then return false end

      if a.Second < b.Second then return true
      elseif a.Second > b.Second then return false end

      return false -- files are exactly equal
   end

   local function scanPath(Path, currentDepth)
      if currentDepth == nil then currentDepth = 0 end
      msg('scanPath() ' .. nz(Path,':') .. ' (depth: ' .. currentDepth .. ')')

      if lStop then return end

      if (lOptions.maxDepth) and (currentDepth > lOptions.maxDepth) then return end

      local count = 0
      local flags = 0
      if not lOptions.matchFolders then flags = bit.bor(flags, FL_EXCLUDE_FOLDERS) end
      if lOptions.ignoreFiles then flags = bit.bor(flags, FL_EXCLUDE_FILES) end

      local ex, folder = catch(function()
         return obj.new('file', { src=Path, flags=flags } )
      end)

      if folder == nil then return end

      local err, fl = folder.mtNext()
      while (err == ERR_Okay) and (not lStop) do
         msg(string.format('Found: %s (count: %d)', fl.path, count))

         count = count + 1
         processing.sleep(0)

         local fileFolder, fileName = file.splitPath(fl.path)

         -- Ensure that the filename matches our filter

         local match = true
         if lOptions.nameFilter then
            local cmpName = fileName
            if not lOptions.caseSensitive then
               cmpName = cmpName:lower()
            end

            if isRegexFilter then
               if not lOptions.nameFilter.test(cmpName) then
                  match = false
               end
            elseif lOptions.nameWild then
               if string.find(cmpName, lOptions.nameFilter) == nil then
                  match = false
               end
            elseif cmpName != lOptions.nameFilter then -- Exact string match
               match = false
            end
         end

         if nz(lOptions.minSize) and (lOptions.minSize > 0) and (fl.size < lOptions.minSize) then match = false end
         if lOptions.maxSize and (lOptions.maxSize >= 0) and (fl.size > lOptions.maxSize) then match = false end
         if lOptions.minDateSet and dateLessThan(fl.modified, lOptions.minDate) then match = false end
         if lOptions.maxDateSet and dateLessThan(lOptions.maxDate, fl.modified) then match = false end

         if match and bit.band(fl.flags, FL_FILE) != 0 then
            match = contentMatch(fl.path)
         end

         if match then
            if lOptions.matchFeedback then
               mSys.AdjustLogLevel(-ADJUST_LOG) -- Temporarily revert debug log so that child behaviour can be analysed

                  local result = lOptions.matchFeedback(Path, fileName, fl)
                  if result == ERR_Terminate then lStop = true end

               mSys.AdjustLogLevel(ADJUST_LOG) -- Raise log level again
            end
         elseif lOptions.ignoreFeedback then
            local result = lOptions.ignoreFeedback(Path, fileName, fl)
            if result == ERR_Terminate then lStop = true end
         end

         err, fl = folder.mtNext()
      end

      if lStop then return end

      -- Recursively scan directory content (if we haven't reached max depth)

      if not lOptions.maxDepth or currentDepth < lOptions.maxDepth then
         local ex, folder = catch(function()
            return obj.new('file', { src=Path, flags='!ExcludeFiles|Folder' } )
         end)

         if folder then
            local err, fl = folder.mtNext()
            while (err == ERR_Okay) and (not lStop) do
               count = count + 1
               if bit.band(fl.flags, FL_LINK) != 0 then
                  -- Do not scan symbolicly linked directories (possible recursion)
               else
                  processing.sleep(0)
                  scanPath(fl.path, currentDepth + 1)
               end
               err, fl = folder.mtNext()
            end
         end
      end

      if count == 0 then processing.sleep(0) end  -- Message check required if the directory was empty

      collectgarbage()
   end

   -- Entry point for the search

   if lOptions.nameFilter and type(lOptions.nameFilter) == 'table' then
      -- Check if it's a regex object by testing for regex methods
      if lOptions.nameFilter.test and lOptions.nameFilter.match then
         isRegexFilter = true
      end
   end

   msg(string.format('Path: %s, Filter: %s, Content: %s', Path, Options.nameFilter, Options.contentFilter))

   if lOptions.maxDate then
      local err, maxDate = mSys.StrReadDate(lOptions.maxDate)
      if err != ERR_Okay then error('Invalid maxDate value.') end
      lOptions.maxDate = maxDate
   end

   if lOptions.minDate then
      local err, minDate = mSys.StrReadDate(lOptions.minDate)
      if err != ERR_Okay then error('Invalid minDate value.') end
      lOptions.minDate = minDate
   end

   if file.isFolder(Path) then
      mSys.AdjustLogLevel(ADJUST_LOG)
         scanPath(Path, 0)
      mSys.AdjustLogLevel(-ADJUST_LOG)
   else
      -- Single file analysis

      local path, fileName = file.splitPath(Path)
      local nameMatches = true

      if Options.nameFilter then
         local cmpName = fileName
         if not lOptions.caseSensitive then
            cmpName = cmpName:lower()
         end

         if isRegexFilter then
            nameMatches = lOptions.nameFilter.test(cmpName)
         elseif lOptions.nameWild then
            nameMatches = (string.find(cmpName, lOptions.nameFilter) != nil)
         else
            nameMatches = (cmpName == lOptions.nameFilter)
         end
      end

      if nameMatches then
         if contentMatch(Path) then
            if lOptions.matchFeedback then
               lOptions.matchFeedback(path, fileName, obj.new('file', { path=Path }))
            end
         end
      end
   end
end
