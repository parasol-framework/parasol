-- Support for the mass copying of files to a folder
-- Designed for calling from a script in a dedicated thread.

   require 'common'
   require 'gui/dialog'

local progress_status, progress_dialog, progress_time

-- copyFeedback() is called for every file that is copied, or multiple times for large files.

local function copyFeedback(Size, Position, Path, Dest, User, FeedbackID)
   msg('Copy feedback: ' .. Path .. ' TO ' .. Dest)

   if progress_status == 'cancel' then
      return FFR_ABORT
   elseif progress_status == 'closed' then
      return FFR_OKAY
   end

   -- If the file processing exceeds a set time period, popup a progress window

   if (not progress_dialog) and (mSys.PreciseTime() - progress_time > 500000) then
      progress_dialog = gui.dialog.message({
         image   = 'items/file_transfer',
         title   = 'File Transfer Progress',
         type    = 'info',
         message = 'Copying...\nPlease wait...',
         options = { id=-1, text='Cancel', icon='items/cancel' },
         feedback = function(Dialog, Response, State)
            if Response and Response.id == -1 then
               progress_status = 'cancel'
            else
               progress_status = 'closed'
            end
         end
      })
   end

   if progress_dialog and (Position == 0 or Size > 32768) then
      local folder, file = file.splitPath(Path)

      if string.len(file) >= 80 then file = '...' .. string.sub(file, -80) end

      local msg
      if Position == 0 then
         if Size >= 1048576 then
            msg = string.format('Copying: %s\n\n%.2f MB', file, Size / 1048576.0)
         else
            msg = string.format('Copying: %s\n\n%.2f KB', file, Size / 1024.0)
         end
      elseif mSys.PreciseTime() - progress_time > 50000 then
         if Size >= 1048576 then
            msg = string.format('Copying: %s\n\n%.2f / %.2f MB', file, Position / 1048576.0, Size / 1048576.0)
         else
            msg = string.format('Copying: %s\n\n%.2f / %.2f KB', file, Position / 1024.0, Size / 1024.0)
         end
      end

      if msg then
         progress_dialog.setMessage(msg, false)
         progress_time = mSys.PreciseTime()
         processing.sleep(0)
      end
   end
end

----------------------------------------------------------------------------------------------------------------------

file.ui.paste = function(Dest)
   local clipboard = obj.new('clipboard')
   local err, datatype, files, flags = clipboard.mtGetFiles(CLIPTYPE_FILE, 0)
   if (err != ERR_Okay) or (#files == 0) then
      msg('No files on the clipboard.')
      return
   end

   if move then
      -- Clears the clipboard.  We do this prior to the copy operation to prevent clashes
      clip.mtRemove(CLIPTYPE_FILE)
   end

   local move
   if bit.band(flags, CEF_DELETE) != 0 then move = true end
   local err = file.ui.copy(files, Dest, move)
end

----------------------------------------------------------------------------------------------------------------------
-- NB: This call can block if it needs a response from the user.  It does not return until the copy is complete.

file.ui.copy = function(Source, Dest, Move)
   if type(Source) == 'string' then Source = { Source } end
   if type(Source) != 'table' then error('Provided Source is not a table') end

   -- Scan the file list and move or copy each file to the Dest folder

   progress_time = mSys.PreciseTime()
   local response = 'yes'
   local err = ERR_Okay
   for _, src_path in pairs(Source) do
      if response != 'yes-all' and response != 'no-all' then response = 'yes' end -- Reset to the default

      msg('Processing file source ' .. src_path)
      local src_folder, src_file = file.splitPath(src_path)

      local dest_path = Dest .. src_file

      -- Check if the destination already exists

      if response != 'yes-all' then
         if src_path == dest_path then
            if Move then
               goto continue -- Do nothing for move operations when the source and destination are identical
            elseif dest_path:find('^[A-Z].+') then
               dest_path = Dest .. 'Copy of ' .. src_file
            else
               dest_path = Dest .. 'copy of ' .. src_file
            end
         end

         -- Request user confirmation

         local exists = false
         local err, path = mSys.ResolvePath(dest_path, RSF_NO_FILE_CHECK)
         if err == ERR_Okay then -- Resolve to avoid multi-directory volume problems
            local err, file_type = mSys.AnalysePath(path)
            if (err == ERR_Okay) and (file_type == LOC_FILE or file_type == LOC_DIRECTORY) then
               exists = true
            end
         end

         if exists and response == 'no-all' then
            goto continue
         end

         if exists then
            local dlg = gui.dialog.message({
               type    = 'warning',
               image   = 'items/file_alert',
               options = { { id=-2, text='No to All', icon='items/cancel' },
                           { id=-1, text='No', icon='items/cancel' },
                           { id=1, text='Yes', icon='items/checkmark' },
                           { id=2, text='Yes to All', icon='items/checkmark_many' } },
               title   = 'Confirmation Required',
               message = 'You are about to overwrite this file.  Should it be replaced?\n\n' .. src_file,
               feedback = function(Dialog, Response, State)
                  if Response then
                     if Response.id == -1 then
                        response = 'no'
                     elseif Response.id == -2 then
                        response = 'no-all'
                     elseif Response.id == 1 then
                        response = 'yes'
                     elseif Response.id == 2 then
                        response = 'yes-all'
                     end
                  else
                     response = 'cancel'
                  end
               end
            })

            progress_time = mSys.PreciseTime() -- Reset the start time whenever a user dialog is presented

            dlg.wait()
         end
      end

      if response == 'cancel' then
         msg('Paste operation cancelled.')
         return ERR_Cancelled
      end

      if response == 'no' or response == 'no-all' then
         msg('Skipping file ' .. src_file .. ', response ' .. response)
      else
         msg('Copy from "' .. src_path .. '" TO "' .. dest_path .. '"')

         if Move then
            err = mSys.MoveFile(src_path, dest_path, copyFeedback)
         else
            err = mSys.CopyFile(src_path, dest_path, copyFeedback)
         end

         if err == ERR_Cancelled then return err end

         if err != ERR_Okay then
            msg('Error during paste operation [' .. err .. ']: ' .. mSys.GetErrorMsg(err))

            local message
            if err == ERR_OutOfSpace then
               message = 'There is not enough space in the destination drive to copy this file:\n\n' .. src_file
            elseif err == ERR_Permissions then
               message = 'You do not have the necessary permissions to copy this file:\n\n' .. src_file
            else
               local emsg = mSys.GetErrorMsg(err)
               message = 'An error occurred while copying this file:\n\n'
                  .. src_file .. '\n\n' .. emsg .. '  Process cancelled.'
            end

            local dlg = gui.dialog.error('File Paste Failure', message)
            dlg.wait()
            return ERR_File
         end
      end
::continue::
   end -- for loop

   return err
end

----------------------------------------------------------------------------------------------------------------------

file.ui.delete = function(Paths)
   if type(Paths) == 'string' then Paths = { Paths } end
   if type(Paths) != 'table' then error('Path must be a string or string list.') end

   for _, path in pairs(Paths) do
      mSys.DeleteFile(path, function(Feedback)
         if progress_status == 'cancel' then
            return FFR_ABORT
         elseif progress_status == 'closed' then
            return FFR_OKAY
         end

         -- If the copy process exceeds a set time period, popup a progress window

         if (not progress_dialog) and ((mSys.PreciseTime() - progress_time) > 500000) then
            progress_dialog = gui.dialog.message({
               image   = 'items/delete',
               type    = 'info',
               title   = 'File Deletion Progress',
               message = 'Deleting...',
               options = { id=-1, text='Cancel', icon='items/cancel' },
               feedback = function(Dialog, Response, State)
                  if Response and Response.id == -1 then
                     progress_status = 'cancel'
                  else
                     progress_status = 'closed'
                  end
               end
            })
         end

         if progress_dialog then
            local folder, file = file.splitPath(Feedback.path)
            progress_dialog.setMessage('Deleting: ' .. file, false)
            progress_time = mSys.PreciseTime()
            processing.sleep(0)
         end

         return FFR_OKAY
      end)
   end
end
