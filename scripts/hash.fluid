--$FLUID:Batch

   require "common"

   mSys = mod.load("core")

   local srcPath    = arg("input")
   local outputPath = arg("output")
   local pattern    = arg("pattern")
   local comment    = arg("comment")
   local hashString = arg("string")

   if (pattern == nil) then
      pattern = "#define HASH_<NAME> 0x<HASH>"
   end

   if (comment == nil) then
      comment = "/* <COMMENT> */"
   end

   if (hashString == nil) and (srcPath == nil) then
      print("COMMAND PARAMETERS\n")
      print("input   Path to a text file that contains strings to hash (each line is hashed).")
      print("string  A string to hash, if an input file is not provided.")
      print("output  Path for a results output file (if not set, results are printed).")
      print("pattern A string pattern for output, whereby <NAME> will be the original string and <HASH> is the resulting hash.")
      print("comment A string pattern for comments, whereby <COMMENT> is the comment content.")
      return
   end

   if (hashString) then
      print("Hash: 0x" .. string.format("%.8x", mSys.StrHash(hashString:lower(), 0)))
      return
   end

   local strbuf = file.readAll(srcPath)
   local out = comment:gsub("<COMMENT>", "Generated by hash.fluid -args input=\"" .. srcPath .. "\" output=\"" .. outputPath .. "\"") .. "\n\n"

   local hashname, result
   local i = 1
   while (i) do
      local strend = strbuf:find(string.char(10), i+1)
      if (strend) then
         hashname = strbuf:sub(i, tonumber(strend) - 1)
         i = strend + 1
      else
         hashname = strbuf:sub(i)
         i = nil
         if (hashname:len() < 1) then
            break
         end
      end

      _, _, hashname = hashname:find("([^%s]+)")

      if (nz(hashname)) then
         local hash = string.format("%.8x", mSys.StrHash(hashname, 0))

         hashname = string.gsub(hashname, "-", "_")
         hashname = string.gsub(hashname, ":", "_")
         result = string.gsub(pattern, "<NAME>", hashname:upper())
         result = string.gsub(result, "<name>", hashname:lower())
         result = string.gsub(result, "<Name>", hashname)
         result = string.gsub(result, "<HASH>", hash:lower())
         out = out .. result .. "\n"
      end
   end

   if (outputPath) then
      local save = obj.new("file", { path=outputPath, flags="NEW|WRITE" } )
      if (save != nil) then
         save.acWrite(out, string.len(out))
      end
   else
      print(out)
   end
