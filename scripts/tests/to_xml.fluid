-- $FLUID
-- Flute tests for the table.toXML() method

   require 'common'

function testBasic() --
   item = table.toXML({
      file = {
         icon = 'my_icon',
         name = 'my_name',
         { 'filename.jpg',
           size = { sort = 123, { 123 } },
           date = { sort = 'F' .. 456, 'ABC' },
           owner = { 123 },
           group = { nil },
           permissions = { 'RWX' }
         }
      }
   })

   -- <file icon="my_icon" name="my_name">filename.jpg<owner>123</><size sort=123>123</><group/>
   --   <date sort="F456">ABC</><permissions>RWX</></>

   if not string.find(item, '^<file.->filename.jpg.+</>$') then
      error('The file tag does not match the expected pattern.')
   end

   if not string.find(item, '<owner>123</>') then error('The owner tag is not defined correctly.') end
   if not string.find(item, '<size sort=123>123</>') then error('The size tag is not defined correctly.') end
   if not string.find(item, '<group/>') then error('The group tag is not defined correctly.') end
   if not string.find(item, '<date sort="F456">ABC</>') then error('The date tag is not defined correctly.') end
   if not string.find(item, '<permissions>RWX</>') then error('The date tag is not defined correctly.') end

   print(item .. '\n')
end

-- If sequential XML tags will share the same name, it is essential to place each of them in a separate table
-- as seen in this test.

function testDuplicates()
   files = table.toXML({
      receipt = {
         totalitems = 2,
         id = 'my_files',
         { file = { path='volume:file' } },
         'random receipt content',
         { file = { path='volume:file2.txt' } }
      }
   })

   -- <receipt totalitems=2 id="my_files"><file path="volume:file"/><file path="volume:file2.txt"/></>

   print(files .. '\n')

   local _, receipt_count = string.gsub(files, '^<receipt.+/>$', '')
   local _, file_count = string.gsub(files, '<file.-/>', '')
   if receipt_count != 1 or file_count != 2 then
      error('Expected 1 receipt and 2 file tags.')
   end
end

//=====================================================================================================================

   return {
      tests = {
        'testBasic', 'testDuplicates'
      },
      init = nil,
      cleanup = nil
   }
