--[[
The gui.checkbox API creates and manages checkboxes in the user interface.

Documentation is available in the Parasol Wiki.
--]]

   require 'common'
   require 'gui'

local STROKE_WIDTH = 2
local DEFAULT_WIDTH = 160
local FONT_MAX_HEIGHT, FONT_HEIGHT = gui.getFontHeight(gui.fonts.widget)
local HEIGHT    = math.floor(FONT_MAX_HEIGHT * 1.25) + 1
local ICON_SIZE = HEIGHT * 0.56
local GAP       = HEIGHT * 0.35

local function iconTheme()
   if (gui.rgbValue(gui.strToRGB(gui.colours.widget.text)) > 127) then
      return 'pearl'
   else
      return 'default' -- The default theme is dark
   end
end

local function toggleState(self)
   if self.state == 1 then
      self.state = 0
      self.iconRender.opacity = 0.25
   else
      self.state = 1
      self.iconRender.opacity = 1.0
   end

   if self.events.activate then self.events.activate(self) end
end

gui.checkbox = function(Options)
   local self = { -- Public variables
      events         = nz(Options.events, { }),
      parentViewport = Options.target,
      state          = nz(Options.state, 0),
      text           = nil, -- A VectorText that represents the string
      viewport       = nil, -- The checkbox's primary viewport
   }

   -- Change the active state of the checkbox to disabled or enabled

   self.disable = function(self)
      self.disabled = true
      self.viewport.acDisable()
      self.text.opacity = 0.5
      self.bkgd.fill = gui.colours.widget.bkgd
      if self.events.disable then self.events.disable(self) end
      self.viewport.acDraw()
   end

   self.enable = function(self)
      self.disabled = false
      self.viewport.acDisable()
      self.text.opacity = 1.0
      self.bkgd.fill = gui.colours.widget.bkgd
      if self.events.enable then self.events.enable(self) end
      self.viewport.acDraw()
   end

   -- Main entry point --

   if not Options.target then error('A target viewport is required.') end

   local label_offset = 0

   local vps = { -- Viewport settings
      x        = Options.x,
      y        = Options.y,
      width    = Options.width,
      height   = HEIGHT,
      xOffset  = Options.xOffset,
      yOffset  = Options.yOffset,
      overflow = VOF_HIDDEN
   }

   local calc_width = false
   if not vps.x and not vps.xOffset then vps.x = 0 end
   if not vps.y and not vps.yOffset then vps.y = 0 end
   if not vps.width and not (vps.xOffset and vps.x) then
      vps.width = DEFAULT_WIDTH
      calc_width = true
   end

   self.viewport = self.parentViewport.new('VectorViewport', vps)

   self.bkgd = self.viewport.new('VectorRectangle', {
      fill   = gui.colours.widget.bkgd,
      x      = STROKE_WIDTH * 0.5,
      y      = STROKE_WIDTH * 0.5,
      width  = HEIGHT - STROKE_WIDTH,
      height = HEIGHT - STROKE_WIDTH,
      roundX = STROKE_WIDTH * 2,
      roundY = STROKE_WIDTH * 2,
      stroke = gui.colours.widget.stroke,
      strokeWidth = STROKE_WIDTH,
   })

   gui.createIcon(self.viewport.scene, 'items/checkmark', ICON_SIZE, iconTheme())

   self.iconRender = self.viewport.new('VectorViewport', {
      x      = (HEIGHT - ICON_SIZE) * 0.5,
      y      = (self.viewport.height - ICON_SIZE) * 0.5,
      width  = ICON_SIZE,
      height = ICON_SIZE,
      fill   = 'url(#items/checkmark)',
      opacity = (function()
         if self.state == 1 then
            return 1.0
         else
            return 0.25
         end
      end)()
   })

   self.text = self.viewport.new('VectorText', {
      x         = 0,
      y         = FONT_HEIGHT + math.floor((HEIGHT - FONT_HEIGHT) * 0.5),
      face      = gui.fonts.widget.face,
      fontSize  = string.format('%.2fpt', gui.fonts.widget.size),
      fill      = gui.colours.window.text,
      string    = Options.label,
      lineLimit = 1
   })

   if calc_width then
      self.viewport.width = HEIGHT + GAP + self.text.textWidth
   end

   if Options.align == 'right' then
      self.text.x = 0
      self.bkgd.x = self.viewport.width - HEIGHT + (STROKE_WIDTH * 0.5)
      self.iconRender.x = self.viewport.width - HEIGHT + ((HEIGHT - ICON_SIZE) * 0.5)
   else
      self.text.x = GAP + (GAP * 0.5) + ICON_SIZE
   end

   self.viewport.mtSubscribeFeedback(bit.bor(FM_HAS_FOCUS, FM_CHILD_HAS_FOCUS, FM_LOST_FOCUS), function(Viewport, Event)
      if (Event == FM_LOST_FOCUS) then
         self.bkgd.stroke = gui.colours.widget.stroke
         if self.events.lostFocus then self.events.lostFocus(self) end
      else
         if self.disabled then
            self.bkgd.stroke = gui.colours.widget.stroke
         else
            self.bkgd.stroke = gui.colours.widget.strokeFocus
            if self.events.focus then self.events.focus(self) end
         end
      end

      Viewport.acDraw()
   end)

   self.viewport.mtSubscribeKeyboard(function(Viewport, Qualifiers, Value, Unicode)
      if bit.band(Qualifiers, KQ_PRESSED) == 0 then return end

      if (Value == KEY_ENTER) or (Value == KEY_SPACE) or (Value == KEY_NP_ENTER) then
         toggleState(self)
      end
   end)

   self.viewport.mtSubscribeInput(JTYPE_BUTTON, function(Viewport, Msg)
      repeat
         if Msg.type == JET_LMB then
            if (Msg.value > 0) then
               toggleState(self)
            end
         end
         Msg = Msg.next
      until Msg == nil

      Viewport.acDraw()
   end)

   if self.events.show then self.events.show(self) end

   return self
end
