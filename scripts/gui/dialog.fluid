--[[
Display a dialog message to the user.

Documentation is available in the Parasol Wiki.
--]]

   require 'common'
   require 'gui/window'

local LINE_SPACING, FONT_HEIGHT = gui.getFontHeight(gui.fonts.window)
local MIN_WIDTH = 300
local MAX_WIDTH = 600

local ICONS = {
   error     = 'items/error',
   critical  = 'items/error',
   warning   = 'items/alert_circle',
   help      = 'items/question',
   question  = 'items/question',
   request   = 'items/request',
   info      = 'items/info'
}

   if gui == nil then gui = { } end
   if gui.dialog == nil then gui.dialog = { } end

local function defaultIcon(self)
   if self.type and ICONS[self.type] then
      return ICONS[self.type]
   end
   return 'items/question'
end

gui.dialog.message = function(Options)
   local self = { -- Public variables
      document = nil,
      options  = Options.options,
      type     = Options.type,
      feedback = Options.feedback,
      inputRequired = Options.inputRequired,
      message    = Options.message,
      fmtMessage = Options.fmtMessage,
      scaleWindow = nz(Options.scale, true)
   }

   -- Wait for the user to respond to the dialog.

   self.wait = function()
      self.waiting = true
      processing.sleep(-1, true)
      self.waiting = nil
   end

   -- Configure the window according to initial doc size

   local function matchWindowToDocSize(self, Document)
      local page_width  = Document.pageWidth
      local page_height = Document.pageHeight

      if (page_width < 100) then page_width = 100 end
      if (page_height < 100) then page_height = 100 end

      self.window:sizeHints(page_width/4, page_height/4, page_width * 3, page_height * 3, false)
      self.window.surface.width  = page_width
      self.window.surface.height = page_height

      -- If the viewport dimensions are set, the dialog will scale with the window.
      if self.scaleWindow then
         self.viewport.aspectRatio = 'XMin|YMin'
         self.viewport.viewWidth  = page_width
         self.viewport.viewHeight = page_height
      end
   end

   local function docEvent(Document, EventFlag, Parameters)
      if bit.band(EventFlag, DEF_LINK_ACTIVATED) != 0 then
         if self.feedback then
            local responseIndex = tonumber(Parameters.response)
            local response = self.options[responseIndex]
            local state = { }

            if Document.getKey('checkbox') == '1' then
               state.checkbox = true
            else
               state.checkbox = false
            end

            local input = Document.getKey('input')
            if nz(input) then state.input = input end

            if self.inputRequired and not state.input then
               -- If input is mandatory, the response is cancelled when no input is given
               response = nil
            end

            self.feedback(self, response, state)
         end

         if self.waiting then processing.signal() end
         table.clear(self)
      else
         print('Document event received')
      end
   end

   local function buildDocument()
      local option_icons = ''

      -- At minimum, there must be an OK option.

      if not ((type(self.options) == 'table') and (#self.options > 0)) then
         self.options = { { id=1, text='Close Dialog', icon='items/cancel' } }
      end

      for i, option in ipairs(self.options) do
         if option['icon'] then
            if nz(option_icons) then option_icons = option_icons .. '\n' end
            option_icons = option_icons .. '    <image id="' .. option.icon .. '" xlink:href="icons:' .. option.icon .. '" width="48" height="48"/>\n'
         end
      end

      local doc = [[
<?xml version="1.0"?>

<svg xmlns="http://www.w3.org/2000/svg">
  <defs>
    <image id="icon" xlink:href="icons:]] .. nz(Options.image, defaultIcon(self)) .. [[" width="256" height="256"/>]]
    .. option_icons .. [[
  </defs>
</svg>

<body margins="10 10 18 10"/>
]]

      if Options.envTemplate then
         -- The EnvTemplate can redefine the default body, GUI templates etc
         doc = doc .. options.envTemplate .. '\n'
      end

      if Options.template then
         -- A dialog-specific template can override the body style and change any class templates,
         -- header and footer etc
         doc = doc .. '<include src="' .. options.template .. '"/>\n'
      end

      icon = nz(Options.image, defaultIcon(self))
      icon = icon:gsub('^(%w+)/(%w+)', '%1/%2')
      local msg = self.fmtMessage
      if not nz(msg) then
         msg = string.escXML(nz(self.message, ''))
         msg = string.gsub(msg, '\n', '<br/>')
      end

      doc = doc .. [[
<page name="Index">
  <table columns="48,0" width="100%">
    <row>
      <cell><image src="url(#icon)" width="5em" height="5em" padding="0 8 18 0"/></cell>
      <cell>
        <p>]] .. msg .. [[</p>
]]

      if Options.userInput then
         local inputOptions = ''
         if Options.secret then
            inputOptions = 'secret="true"'
         end

         local msg
         if type(Options.userInput) == 'string' then
            msg = Options.userInput
         else
            msg = ''
         end

         doc = doc .. '<p><input name="input" ' .. inputOptions .. ' width="16em" value="' .. msg .. '"/></p>\n'
      end

      if Options.checkboxLabel then
         local checkbox_value = 'false'
         if Options.checkboxState then checkbox_value = 'true' end
         doc = doc .. '<p><checkbox name="checkbox" label="' .. Options.checkboxLabel .. '" value="' .. checkbox_value .. '"/></p>\n'
      end

      if Options.inject then
         doc = doc .. Options.inject
      end

      doc = doc .. '<p no-wrap>'
      for i, option in ipairs(self.options) do
         if option['icon'] then
            doc = doc .. '<image src="url(#' .. option.icon .. ')" width="16" height="16" padding="0 0 4 0"/>\n'
         end

         doc = doc .. '<a @response="' .. i .. '">' .. option.text .. '</a>\n'

         if i < #self.options then
            doc = doc .. '<advance x="30"/>'
         end
      end
      doc = doc .. '</p>'

      doc = doc .. [[
      </cell>
    </row>
  </table>
  <advance y="20"/>
</page>
]]

      return doc
   end

   -- Change the message in the dialog

   self.setMessage = function(Message, Formatted)
      if Formatted then
         self.message = nil
         self.fmtMessage = Message
      else
         self.message = Message
         self.fmtMessage = nil
      end
      lDoc.acClear()
      lDoc.acDataFeed(0, DATA_XML, buildDocument())
   end

   -- Work out the dialog width based on the message.

   local dlg_width = MIN_WIDTH
   if nz(self.message) then
      local longest = 10
      for word in self.message:gmatch("%S+") do
         if word:len() > longest then longest = word:len() end
      end
      dlg_width = 120 + (longest * FONT_HEIGHT)
   elseif nz(self.fmtMessage) then
      local xml = obj.new('xml', { statement='<xml>' .. self.fmtMessage .. '</xml>' })
      local err, content = xml.mtSerialise(0, bit.bor(XMF_OMIT_TAGS, XMF_READABLE))
      local longest = 10
      for word in content:gmatch("%S+") do
         if word:len() > longest then longest = word:len() end
      end
      dlg_width = 120 + (longest * FONT_HEIGHT)
   else
      error('Dialog requires a message string.')
   end

   if dlg_width < MIN_WIDTH then dlg_width = MIN_WIDTH end
   if dlg_width > MAX_WIDTH then dlg_width = MAX_WIDTH end

   self.window = gui.window({
      insideWidth  = dlg_width,
      insideHeight = 300,
      quit         = nz(Options.quit, false),
      popover      = Options.popover,
      parent       = Options.target,
      aspectRatio  = true,
      icon         = nz(Options.icon, 'items/question'),
      title        = nz(Options.title, 'Confirmation Required'),
      modal        = nz(Options.modal, false),
      events = {
         close = function(Window)
            if (self.feedback != nil) then
               self.feedback(self, nil, nil)
            end

            if self.waiting then processing.signal() end
            table.clear(self)
         end
      }
   })

   self.viewport = self.window:clientViewport()

   lDoc = self.viewport.new('document', {
      eventMask     = 'LinkActivated',
      eventCallback = docEvent,
      path          = '#Index',
      flags         = 'NoScrollbars',
      clientScript  = obj.find('self')
   })

   lDoc.acDataFeed(0, DATA_XML, buildDocument())

   if self.input then
      self.input.textinput.mtSelectArea(0, 0, 20000, 20000)
   end

   matchWindowToDocSize(self, lDoc)

   self.window:moveToFront()
   self.window:show(true)

   self.document = lDoc

   return self
end

gui.dialog.error = function(Title, Message, Options)
   if not Options then Options = { } end
   Options.type = 'error'
   Options.title = Title
   Options.message = Message
   Options.scale   = true
   return gui.dialog.message(Options)
end

   -- This sub-routine is provided for languages other than Fluid to utilise the module.

   do
      local state = getExecutionState()
      if (state.inRequire != true) then
         local dlg = gui.dialog.message({
            popover    = arg('popover'),
            target     = arg('target'),
            modal      = arg('modal'),
            options    = arg('options'),
            message    = arg('message'),
            checkboxLabel = arg('checkboxLabel'),
            checkboxState = arg('checkboxState'),
            icon       = arg('icon'),
            image      = arg('image'),
            userInput  = arg('userInput', nil),
            secret     = arg('secret')
         })

         return dlg.windowID, dlg.document.id
      end
   end
