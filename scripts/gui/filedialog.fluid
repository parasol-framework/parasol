--[[
Documentation is available in the Parasol Wiki.
--]]

   require 'common'
   require 'gui/fileview'
   require 'gui/columnview'
   require 'gui/button'
   require 'gui/combobox'
   require 'gui/input'
   require 'gui/window'

   if (gui == nil) then gui = { } end
   if (gui.dialog == nil) then gui.dialog = { } end

local GAP = 8

gui.dialog.file = function(Options)
   local self = { -- Public variables
      windowID    = nil,
      currentPath = file.splitPath(Options.path),
      multiSelect = nz(Options.multiSelect, false),
      warnExists  = nz(Options.warnExists, false),
      feedback    = Options.feedback,
      target      = Options.target
   }

   local function processFeedback()
      local list = self.fileview.view.selectedItems()

      if (self.warnExists == true) and (#list > 0) then
         local error, type = mSys.AnalysePath(nz(self.fileview.path,'') .. list[1].filename)
         if (type == LOC_FILE) then
            local msg

            if #list == 1 then
               msg = "You are about to overwrite the file '" .. list[1].filename .. "'.  Do you want to continue?"
            else
               msg = 'You are about to overwrite ' .. #list .. ' files.  Do you want to continue?'
            end

            local confirm = gui.dialog.message({
               target  = self.target,
               modal   = true,
               options = { { id=-1, text='No', icon='items/cancel' },
                           { id=1, text='Yes', icon='items/checkmark' } },
               title   = 'Confirmation Required',
               image   = 'items/warning',
               message = msg,
               popOver = windowID,
               feedback = function(Dialog, Response, State)
                  if (Response) and (Response.id == 1) then
                     if self.feedback then
                        self.feedback(self, self.fileview.path, list)
                     end
                     self.window = nil
                  end
               end
            })

            return true
         end
      end

      if self.feedback then
         if (#list == 0) then list = nil end
         self.feedback(self, self.fileview.path, list)
      end

      table.clear(self)
      return true
   end

   self.window = gui.window({
      insideWidth  = 500,
      insideHeight = 550,
      minWidth     = 250,
      minHeight    = 150,
      quit         = false,
      center       = true,
      invertPalette = true,
      popOver      = Options.popOver,
      parent       = Options.target,
      icon         = nz(Options.icon, 'icons:folders/folder'),
      title        = nz(Options.title, 'Select a file'),
      modal        = nz(Options.modal, false),
      events = {
         close = function(Window)
            if (Options.feedback != nil) then
               Options.feedback(self, nil)
            end

            table.clear(self)
            collectgarbage()
         end
      }
   })

   self.scene = self.window.scene

   self.viewport = self.window:clientViewport({ })

   self.pathbox = gui.input({
      target     = self.viewport,
      x          = 0,
      y          = 0,
      xOffset    = 0,
      text       = Options.path,
      textFace   = gui.fonts.filesys.face,
      textFill   = gui.palette.altText,
      flushEdges = true,
      bkgd       = 'none',
      events = {
         activate = function(Input, Event)
            self.fileview.browse(Event.text)
         end
      }
   })

   self.pathbox.viewport.new('VectorRectangle', {
      x=0, y=self.pathbox.viewport.height-1, height=1, width='100%', fill='rgb(255,255,255,0.3)'
   })

   -- Okay and cancel buttons

   local footer = self.window.margins.bottom

   lCancelButton = gui.button({
      target  = self.viewport,
      text    = nz(Options.cancelText, 'Cancel'),
      xOffset = GAP,
      yOffset = footer,
      icon    = 'items/cancel',
      events = {
         activate = function(Button)
            if Options.feedback != nil then
               Options.feedback(self, nil)
            end
            table.clear(self)
            collectgarbage()
         end
      }
   })

   lOkayButton = gui.button({
      target     = self.viewport,
      text       = nz(Options.okText, 'Okay'),
      xOffset    = lCancelButton.viewport.width + (GAP * 2),
      yOffset    = footer,
      icon       = 'items/checkmark',
      events = {
         activate = processFeedback
      }
   })

   footer = footer + lOkayButton.viewport.height + GAP

   -- Filter selection

   local fv_filters = { name='All Files', ext='', selected=false }
   if Options.filterList and (#Options.filterList > 0) then
      -- Pick the first item as being selected if none other is chosen.

      local selection = false
      for _, item in pairs(Options.filterList) do
         if item.selected then
            selection = true
            break
         end
      end
      if not selection then Options.filterList[1].selected = true end

      for _, filter in pairs(Options.filterList) do
         table.insert(fv_filters, filter)
      end
   end

   -- File view area

   local viewRegion = self.viewport.new('VectorViewport', {
      x        = 0,
      y        = self.pathbox.viewport.y + self.pathbox.viewport.height,
      width    = '100%',
      yOffset  = footer,
      overflow = VOF_HIDDEN
   })

   self.fileview = gui.fileview({
      target        = viewRegion,
      path          = Options.path,
      filterList    = fv_filters,
      sysKeys       = true,
      fileSelected  = processFeedback,
      style         = 'column', -- column, list, tree
      toolBar       = { clipboard=true, settings=true },
      viewOptions = {
         invertPalette = true
      },
      pathChanged = function(FlieView, Path)
         self.currentPath = Path
         self.pathbox.text.string = self.currentPath
      end
   })

   self.currentPath = self.fileview.path

   self.window:moveToFront()
   self.window:show()

   return self
end

   -- This sub-routine is provided for languages other than Fluid to utilise the module.

   do
      local state = getExecutionState()
      if (state.inRequire != true) then
         local dlg = gui.dialog.file({
            popOver      = arg('popOver'),
            target       = arg('target'),
            modal        = arg('modal'),
            okText       = arg('okText'),
            cancelText   = arg('cancelText'),
            filterList   = arg('filterList'),
            icon         = arg('icon'),
            path         = arg('path'),
            selectFolder = arg('selectFolder', nil),
            multiSelect  = arg('multiSelect', nil),
            userInput    = arg('userInput', nil)
         })

         return dlg.windowID
      end
   end
