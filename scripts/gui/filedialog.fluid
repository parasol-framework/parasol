--[[
Documentation is available in the Parasol Wiki.
--]]

   require 'common'
   require 'gui/fileview'
   require 'gui/columnview'
   require 'gui/toolbar'
   require 'gui/button'
   require 'gui/combobox'
   require 'gui/input'
   require 'gui/window'

   if (gui == nil) then gui = { } end
   if (gui.dialog == nil) then gui.dialog = { } end

local GAP = 8

gui.dialog.file = function(Options)
   local self = { -- Public variables
      windowID    = nil,
      currentPath = file.splitPath(Options.path),
      multiSelect = nz(Options.multiSelect, false),
      warnExists  = nz(Options.warnExists, false),
      feedback    = Options.feedback,
      target      = Options.target
   }

   local function processFeedback()
      local list = self.view.selectedItems()

      if #list == 0 then -- User may have manually entered a filename
         local filename = self.filebox.text.string
         if nz(filename) then
            list = { { filename = filename } }
         end
      end

      if (self.warnExists == true) and (#list > 0) then
         local error, type = mSys.AnalysePath(nz(self.fileview.path,'') .. list[1].filename)
         if (type == LOC_FILE) then
            local msg

            if #list == 1 then
               msg = "You are about to overwrite the file '" .. list[1].filename .. "'.  Do you want to continue?"
            else
               msg = 'You are about to overwrite ' .. #list .. ' files.  Do you want to continue?'
            end

            local confirm = gui.dialog.message({
               target  = self.target,
               modal   = true,
               options = { { id=-1, text='No', icon='items/cancel' },
                           { id=1, text='Yes', icon='items/checkmark' } },
               title   = 'Confirmation Required',
               image   = 'items/warning',
               message = msg,
               popOver = windowID,
               feedback = function(Dialog, Response, State)
                  if (Response) and (Response.id == 1) then
                     if self.feedback then
                        self.feedback(self, self.fileview.path, list)
                     end
                     self.window = nil
                  end
               end
            })

            return true
         end
      end

      if self.feedback then
         if (#list == 0) then list = nil end
         self.feedback(self, self.fileview.path, list)
      end

      table.clear(self)
      return true
   end

   self.window = gui.window({
      insideWidth  = 500,
      insideHeight = 550,
      minWidth     = 250,
      minHeight    = 150,
      quit         = false,
      center       = true,
      popOver      = Options.popOver,
      parent       = Options.target,
      icon         = nz(Options.icon, 'icons:folders/folder'),
      title        = nz(Options.title, 'Select a file'),
      modal        = nz(Options.modal, false),
      events = {
         close = function(Window)
            if (Options.feedback != nil) then
               Options.feedback(self, nil)
            end

            table.clear(self)
            collectgarbage()
         end
      }
   })

   self.scene = self.window.scene

   self.viewport = self.window:clientViewport({ })

   self.toolbar = gui.toolbar({
      target  = self.viewport, 
      x       = 0,
      y       = 0,
      xOffset = 0,
      createItems = function(Bar)
         Bar.addGroup(1, 'Navigation', 2)

         Bar.addItem(2, 'Root', 'Root Folder', 'devices/harddisk', function()
            self.fileview.browse(nil)
         end)

         Bar.addItem(3, 'Parent', 'Parent Folder', 'arrows/arrow_nw', function()
            self.fileview.parentFolder()
         end)

         Bar.addGroup(4, 'Clipboard', 3)

         Bar.addItem(5, 'Cut', 'Cut', 'tools/cut', function()
            self.fileview.cutFiles()
         end)

         Bar.addItem(6, 'Copy', 'Copy', 'tools/copy', function()
            self.fileview.copyFiles()
         end)

         Bar.addItem(7, 'Paste', 'Paste', 'tools/paste', function()
            self.fileview.pasteFiles()
         end)

         Bar.addGroup(8, 'Actions', 3)

         Bar.addItem(9, 'Create Folder', 'Create Folder', 'folders/folder_new', function()
            self.fileview.createFolder()
         end)

         Bar.addItem(10, 'Rename', 'Rename', 'layout/interface_textbox', function()
            self.fileview.renameFile()
         end)

         Bar.addItem(11, 'Delete', 'Delete', 'tools/eraser', function()
            self.fileview.deleteFiles()
         end)

         Bar.addGroup(12, 'View', 2)

         Bar.addItem(13, 'Column View', 'Column View', 'layout/column_three', function()
            self.fileview.view.style = 'column'
         end)

         Bar.addItem(14, 'List View', 'List View', 'layout/list', function()
            self.fileview.view.style = 'list'
         end)
      end
   })

   self.pathbox = gui.input({
      target    = self.viewport,
      x         = 0,
      y         = self.toolbar.viewport.height,
      xOffset   = 0,
      text      = Options.path,
      flushEdges = true,
      events = {
         activate = function(Input, Event)
            self.fileview.browse(nz(Value, ''))
         end
      }
   })

   -- Okay and cancel buttons

   local footer = self.window.margins.bottom

   lCancelButton = gui.button({
      target  = self.viewport,
      text    = nz(Options.cancelText, 'Cancel'),
      xOffset = GAP,
      yOffset = footer,
      icon    = 'items/cancel',
      events = {
         activate = function(Button)
            if Options.feedback != nil then
               Options.feedback(self, nil)
            end
            table.clear(self)
            collectgarbage()
         end
      }
   })

   lOkayButton = gui.button({
      target     = self.viewport,
      text       = nz(Options.okText, 'Okay'),
      xOffset    = lCancelButton.viewport.width + (GAP * 2),
      yOffset    = footer,
      icon       = 'items/checkmark',
      events = {
         activate = processFeedback
      }
   })

   footer = footer + lOkayButton.viewport.height + GAP

   -- Filter selection

   if Options.filterList and (#Options.filterList > 0) then
      local items = { }
      self.filters = { }
      for _, item in pairs(Options.filterList) do
         table.insert(items, { item=item.name })
         self.filters[item.name] = item.pattern
      end

      self.filter = gui.combobox({
         target      = self.viewport,
         label       = 'Filter:',
         x           = self.window.margins.left,
         xOffset     = self.window.margins.right,
         yOffset     = footer,
         allowCustom = userInput,
         items       = items,
         events = {
            activate = function(Widget, Text)
               self.fileview.filter = nz(self.filters[Text], Text)
            end
         }
      })

      footer = footer + self.filter.viewport.height + GAP
   end

   -- Create the file and filter input boxes

   local label_width = 0
   if self.filter then label_width = self.filter.labelWidth end
   self.filebox = gui.input({
      target     = self.viewport,
      labelWidth = label_width,
      label      = 'File:',
      x          = self.window.margins.left,
      xOffset    = self.window.margins.right,
      yOffset    = footer,
      events = {
         activate = function(Input, Event)
            self.view.deselectAll()
            processFeedback()
         end
      }
   })

   footer = footer + self.filebox.viewport.height + GAP

   -- File view area

   local viewRegion = self.viewport.new('VectorViewport', {
      x        = 0,
      y        = self.pathbox.viewport.y + self.pathbox.viewport.height,
      width    = '100%',
      yOffset  = footer,
      overflow = VOF_HIDDEN
   })

   self.view = gui.columnView({
      target      = viewRegion,
      dragDrop    = true,
      multiSelect = self.multiSelect,
      itemSelected = function(View, Reason, Item)
         -- Display the selected item in the file text box.

         if (self.fileview == nil) then return end

         local selection = self.fileview.selectionPath()
         if not nz(selection) then
            --self.filebox.text.string = ''
            return
         end

         local err, fileType = mSys.AnalysePath(selection)
         if (err != ERR_Okay) then
            self.filebox.text.string = ''
            return
         end

         if (fileType == LOC_FILE) then
            self.filebox.text.string = self.fileview.selection()
            return
         end

         if nz(Options.selectFolder) then
            if (fileType == LOC_FOLDER) then
               self.filebox.text.string = ''
            elseif (fileType == LOC_VOLUME) then
               self.filebox.text.string = ''
            end
         end
      end
   })

   self.fileview = gui.fileview(self.view, {
      path     = Options.path,
      filter   = '*',
      sysKeys  = true,
      fileSelected = processFeedback,
      pathChanged = function(FlieView, Path)
         self.currentPath = Path
         self.pathbox.text.string = self.currentPath
      end
   })

   self.currentPath = self.fileview.path

   self.window:moveToFront()
   self.window:show()

   return self
end

   -- This sub-routine is provided for languages other than Fluid to utilise the module.

   do
      local state = getExecutionState()
      if (state.inRequire != true) then
         local dlg = gui.dialog.file({
            popOver      = arg('popOver'),
            target       = arg('target'),
            modal        = arg('modal'),
            okText       = arg('okText'),
            cancelText   = arg('cancelText'),
            filterList   = arg('filterList'),
            icon         = arg('icon'),
            path         = arg('path'),
            selectFolder = arg('selectFolder', nil),
            multiSelect  = arg('multiSelect', nil),
            userInput    = arg('userInput', nil)
         })

         return dlg.windowID
      end
   end
