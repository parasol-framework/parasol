--[[
Documentation is available in the Parasol Wiki.
--]]

   require 'common'
   require 'gui'

local FONT_MAX_HEIGHT, FONT_HEIGHT = gui.getFontHeight(gui.fonts.widget)
local HEIGHT        = math.floor(FONT_MAX_HEIGHT * 1.75) + 1
local ICON_SIZE     = HEIGHT * 0.56
local GAP           = HEIGHT * 0.35
local STROKE_WIDTH  = 2
local DEFAULT_WIDTH = 160

local function iconTheme()
   if (gui.rgbValue(gui.strToRGB(gui.colours['widgetText'])) > 127) then
      return 'pearl'
   else
      return 'default' -- The default theme is dark
   end
end

gui.button = function(Options)
   local self = { -- Public variables
      events         = nz(Options.events, { }),
      parentViewport = Options.target,
      text           = nil, -- A VectorText that represents the string
      viewport       = nil, -- The button's primary viewport
   }

   -- Change the active state of the button to disabled or enabled

   self.disable = function(self)
      self.disabled = true
      self.viewport.acDisable()
      self.text.opacity = 0.5
      self.bkgd.fill = gui.colours['widgetBkgd']
      if self.events.disable then self.events.disable(self) end
      self.viewport.acDraw()
   end

   self.enable = function(self)
      self.disabled = false
      self.viewport.acDisable()
      self.text.opacity = 1.0
      self.bkgd.fill = gui.colours['widgetBkgd']
      if self.events.enable then self.events.enable(self) end
      self.viewport.acDraw()
   end

   -- Main entry point --

   if not Options.target then error('A target viewport is required.') end
   if Options.feedback then -- Backwards compatibility
      print('Replace the use of button feedback with the event equivalent.')
      self.events.activate = Options.feedback
   end

   local label_offset = 0

   local vps = { -- Viewport settings
      x       = Options.x,
      y       = Options.y,
      width   = Options.width,
      height  = HEIGHT,
      xOffset = Options.xOffset,
      yOffset = Options.yOffset
   }

   local calc_width = false
   if not vps.x and not vps.xOffset then vps.x = 0 end
   if not vps.y and not vps.yOffset then vps.y = 0 end
   if not vps.width and not (vps.xOffset and vps.x) then
      vps.width = DEFAULT_WIDTH
      calc_width = true
   end

   self.viewport = self.parentViewport.new('VectorViewport', vps)

   self.bkgd = self.viewport.new('VectorRectangle', {
      fill   = gui.colours['widgetBkgd'],
      x      = STROKE_WIDTH * 0.5,
      y      = STROKE_WIDTH * 0.5,
      width  = self.viewport.width - STROKE_WIDTH,
      height = HEIGHT - STROKE_WIDTH,
      roundX = STROKE_WIDTH * 2,
      roundY = STROKE_WIDTH * 2,
      stroke = gui.colours['widgetStroke'],
      strokeWidth = STROKE_WIDTH,
      resizeEvent = function(Viewport, Vector, X, Y, Width, Height)
         if (Vector.width != Width) then
            Vector.width = Width - STROKE_WIDTH
         end

         if (Vector.height != Height) then
            Vector.height = Height - STROKE_WIDTH
         end
      end
   })

   if Options.icon then
      pcall(function()
         gui.createIcon(self.viewport.scene, Options.icon, ICON_SIZE, iconTheme())

         self.iconRender = self.viewport.new('VectorViewport', {
            x      = GAP,
            y      = (self.viewport.height - ICON_SIZE) * 0.5,
            width  = ICON_SIZE,
            height = ICON_SIZE,
            fill   = 'url(#' .. Options.icon .. ')'
         })

         label_offset = (GAP * 0.5) + ICON_SIZE
      end)
   end

   self._textClip = self.viewport.new('VectorViewport', {
      x=STROKE_WIDTH, y=STROKE_WIDTH, xOffset=STROKE_WIDTH, yOffset=STROKE_WIDTH, overflow=VOF_HIDDEN
   })

   self.text = self._textClip.new('VectorText', {
      x         = GAP + label_offset,
      y         = FONT_HEIGHT + math.floor((HEIGHT - FONT_HEIGHT - STROKE_WIDTH - STROKE_WIDTH) * 0.5),
      face      = gui.fonts.widget.face,
      fontSize  = string.format('%.2fpt', gui.fonts.widget.size),
      fill      = gui.colours['widgetText'],
      string    = Options.text,
      lineLimit = 1
   })

   if calc_width then
      self.viewport.width = GAP + label_offset + self.text.textWidth + GAP
   end

   self.viewport.mtSubscribeFeedback(bit.bor(FM_HAS_FOCUS, FM_CHILD_HAS_FOCUS, FM_LOST_FOCUS), function(Viewport, Event)
      if (Event == FM_LOST_FOCUS) then
         self.bkgd.stroke = gui.colours['widgetStroke']
         if self.events.lostFocus then self.events.lostFocus(self) end
      else
         if self.disabled then
            self.bkgd.stroke = gui.colours['widgetStroke']
         else
            self.bkgd.stroke = gui.colours['widgetStrokeFocus']
            if self.events.focus then self.events.focus(self) end
         end
      end

      Viewport.acDraw()
   end)

   self.viewport.mtSubscribeKeyboard(function(Viewport, Qualifiers, Value, Unicode)
      if bit.band(Qualifiers, KQ_PRESSED) == 0 then return end

      if (Value == KEY_ENTER) or (Value == KEY_SPACE) or (Value == KEY_NP_ENTER) then
         if self.events.activate then self.events.activate(self) end
      end
   end)

   self.viewport.mtSubscribeInput(bit.bor(JTYPE_CROSSING, JTYPE_BUTTON, JTYPE_REPEATED), function(Viewport, Msg)
      repeat
         if (Msg.type == JET_CROSSED_IN) then
            local highlight = gui.strToRGB(gui.colours['widgetBkgd'])
            highlight.a = highlight.a * 0.5
            self.bkgd.fill = gui.rgbToSVG(highlight)
            if self.events.cursorEntry then
               self.events.cursorEntry(self)
            end
         elseif (Msg.type == JET_CROSSED_OUT) then
            self.bkgd.fill = gui.colours['widgetBkgd']
            if self.events.cursorExit then
               self.events.cursorExit(self)
            end
         elseif Msg.type == JET_LMB then
            if (Msg.value > 0) then
               if not self.disabled then
                  if bit.band(Msg.flags, JTYPE_REPEATED) != 0 then
                     if self.pulse then
                        if self.events.activate then self.events.activate(self) end
                     end
                  else
                     self.clicked = true
                     self.clickX  = Msg.x
                     self.clickY  = Msg.y
                  end
               end
            elseif self.clicked then
               self.clicked = false
               local clickX = Msg.x - self.clickX
               local clickY = Msg.y - self.clickY
               if (clickX < 0) then clickX = -clickX end
               if (clickY < 0) then clickY = -clickY end

               if ((clickX < 4) and (clickY < 4)) or self.pulse then
                  if self.events.activate then self.events.activate(self) end
               end
            end
         end
         Msg = Msg.next
      until Msg == nil

      Viewport.acDraw()
   end)

   if self.events.show then self.events.show(self) end

   return self
end
