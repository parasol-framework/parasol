--[[
Documentation is available in the Parasol Wiki.
--]]

   require 'common'
   require 'json'
   require 'gui'

   if not mGfx then mGfx = mod.load('display') end

   if (gui.dialog == nil) then gui.dialog = { } end

local BTNSIZE    = 20
local BTNGAP     = 3
local WIDGET_GAP = 6
local COL_BORDER = { r=0, g=0, b=0,  a=128 }

local COMMON = {
  '0,64,64', '0,128,128', '0,192,192', '0,255,255', '64,255,255',  '128,255,255', '192,255,255', '224,255,255', -- Aqua
  '0,64,0',  '0,128,0',   '0,192,0',   '0,255,0',   '64,255,64',   '128,255,128', '192,255,192', '224,255,224', -- Green
  '64,64,0', '128,128,0', '192,192,0', '255,255,0', '255,255,64',  '255,255,128', '255,255,192', '255,255,224', -- Yellow
  '64,0,0',  '128,0,0',   '192,0,0',   '255,0,0',   '255,64,64',   '255,128,128', '255,192,192', '255,224,224', -- Red
  '64,0,64', '128,0,128', '192,0,192', '255,0,255', '255,64,255',  '255,128,255', '255,192,255', '255,224,255', -- Purple
  '0,0,64',  '0,0,128',   '0,0,192',   '0,0,255',   '64,64,255',   '128,128,255', '192,192,255', '224,224,255', -- Blue
  '0,0,0',   '32,32,32',  '64,64,64',  '96,96,96',  '128,128,128', '160,160,160', '192,192,192', '255,255,255'  -- Grey
}

local glRainbowBitmap

local function saveColours(self)
   if (not self._paletteChanged) then return end

   local output = json.encode(self._userColours)
   if nz(output) then
      catch(function()
         local saveFile = obj.new('file', { path='user:config/colours.json', flags='!NEW|WRITE' })
         saveFile.acWrite(output)
      end,
      function(Exception)
         msg('Failed to save custom colour table: ' .. Exception.message)
      end)
   end
end

local function updateRGB(self, RGB)
   if not RGB then return end
   self._rgb = RGB
   if self.vecChosenColour then
      self.vecChosenColour.fill = gui.rgbToSVG(self._rgb)
   end
   self.inputRGB.text.string = nz(self._rgb.r,0) .. ',' .. nz(self._rgb.g,0) .. ',' .. nz(self._rgb.b,0)
   self.viewport.acDraw()
end

local function refreshColourNodes(self)
   for k, node in ipairs(self._colourNodes) do
      local rgb = nz(self._userColours[k], { })

      if not rgb.r then rgb.r = 255 end
      if not rgb.g then rgb.g = 255 end
      if not rgb.b then rgb.b = 255 end
      if not rgb.a then rgb.a = 255 end

      node.fill = gui.rgbToSVG(rgb)
   end
end

local function getRainbowBitmap()
   if glRainbowBitmap then return glRainbowBitmap end

   local size = ((BTNSIZE + BTNGAP) * 7) - BTNGAP
   glRainbowBitmap = obj.new('bitmap', { width=size, height=size, bitsPerPixel=32 })

   local val = glRainbowBitmap.height / 2
   for y=0, (glRainbowBitmap.height / 2) - 1 do
      local s = 1 - (val / (glRainbowBitmap.height / 2))
      local v = 1
      for x=0, glRainbowBitmap.width-1 do
         local h = x * 6 / glRainbowBitmap.width
         local i = math.floor(h)
         local f = h - i
         if bit.band(i, 1) == 0 then
            f = 1 - f
         end
         local m = v * (1 - s)
         local n = v * (1 - s * f)

         local err, rgb
         if (i == 1) then err, rgb = glRainbowBitmap.mtGetColour(n * 255, v * 255, m * 255, 255)
         elseif (i == 2) then err, rgb = glRainbowBitmap.mtGetColour(m * 255, v * 255, n * 255, 255)
         elseif (i == 3) then err, rgb = glRainbowBitmap.mtGetColour(m * 255, n * 255, v * 255, 255)
         elseif (i == 4) then err, rgb = glRainbowBitmap.mtGetColour(n * 255, m * 255, v * 255, 255)
         elseif (i == 5) then err, rgb = glRainbowBitmap.mtGetColour(v * 255, m * 255, n * 255, 255)
         else err, rgb = glRainbowBitmap.mtGetColour(v * 255, n * 255, m * 255, 255)
         end

         mGfx.DrawPixel(glRainbowBitmap, x, y, rgb)
      end
      val = val - 1
   end

   local val = glRainbowBitmap.height / 2
   for y=glRainbowBitmap.height/2, glRainbowBitmap.height-1 do
      local s = val / (glRainbowBitmap.height / 2)
      local v = val / (glRainbowBitmap.height / 2)
      for x=0, glRainbowBitmap.width-1 do
         local h = x * 6.0 / glRainbowBitmap.width
         local i = math.floor(h)
         local f = h - i
         if bit.band(i, 1) == 0 then
            f = 1 - f
         end
         local m = v * (1 - s)
         local n = v * (1 - s * f)

         local err, rgb
         if (i == 1) then err, rgb = glRainbowBitmap.mtGetColour(n * 255, v * 255, m * 255, 255)
         elseif (i == 2) then err, rgb = glRainbowBitmap.mtGetColour(m * 255, v * 255, n * 255, 255)
         elseif (i == 3) then err, rgb = glRainbowBitmap.mtGetColour(m * 255, n * 255, v * 255, 255)
         elseif (i == 4) then err, rgb = glRainbowBitmap.mtGetColour(n * 255, m * 255, v * 255, 255)
         elseif (i == 5) then err, rgb = glRainbowBitmap.mtGetColour(v * 255, m * 255, n * 255, 255)
         else err, rgb = glRainbowBitmap.mtGetColour(v * 255, n * 255, m * 255, 255)
         end

         mGfx.DrawPixel(glRainbowBitmap, x, y, rgb)
      end
      val = val - 1
   end

   return glRainbowBitmap
end

local function buildLayout(self, Options)
   if not self.scene then return end

   self._links = { }

   local dx = WIDGET_GAP
   local dy = 0

   self.txtBasicColours = self.viewport.new('VectorText', {
      x        = dx,
      y        = dy + gui.getFontHeight(gui.fonts.window),
      string   = 'Basic colours',
      fill     = 'rgba(0,0,0,1)',
      face     = gui.fonts.window.face,
      fontSize = string.format('%.2fpt', gui.fonts.window.size),
      align    = 'left'
   })

   dy = dy + gui.getFontHeight(gui.fonts.window) + WIDGET_GAP

   -- Configure an array of 8x6 buttons representing a pre-selected colour palette

   local y = dy
   local colour = 1
   for row=1, 7 do
      local x = WIDGET_GAP - 1
      for col=1, 8 do
         local rgb = gui.strToRGB(COMMON[colour])

         local vec = self.viewport.new('VectorRectangle', {
            fill   = gui.rgbToSVG(rgb),
            stroke = gui.rgbToSVG(COL_BORDER),
            strokeWidth = 1,
            x      = x,
            y      = y,
            width  = BTNSIZE,
            height = BTNSIZE,
            roundX = 2,
            roundY = 2
         })

         table.insert(self._links, {
            vector=vec, x=x, y=y, width=BTNSIZE, height=BTNSIZE, colour=rgb,
            routine = function(Link)
               updateRGB(self, Link.colour)
            end
         })

         x = x + BTNSIZE + BTNGAP
         colour = colour + 1
      end
      y = y + BTNSIZE + BTNGAP
   end

   dy = y + BTNGAP

   -- Configure an array of 8x2 user customised colours

   self.txtPersonalColours = self.viewport.new('VectorText', {
      x        = dx,
      y        = dy + gui.getFontHeight(gui.fonts.window),
      string   = 'Personal colours',
      fill     = 'rgba(0,0,0,1)',
      face     = gui.fonts.window.face,
      fontSize = string.format('%.2fpt', gui.fonts.window.size),
      align    = 'left'
   })

   self._colourNodes = { }

   dy = dy + gui.getFontHeight(gui.fonts.window) + WIDGET_GAP
   y = dy
   local ci = 1
   for row=1, 2 do
      local x = dx
      for column=1, 7 do
         local rgb = nz(self._userColours[ci], { r=255, g=255, b=255, a=255 })
         if not rgb.r then rgb.r = 255 end
         if not rgb.g then rgb.g = 255 end
         if not rgb.b then rgb.b = 255 end
         if not rgb.a then rgb.a = 255 end

         local vec = self.viewport.new('VectorRectangle', {
            fill   = gui.rgbToSVG(rgb),
            stroke = gui.rgbToSVG(COL_BORDER),
            strokeWidth = 1,
            x      = x,
            y      = y,
            width  = BTNSIZE,
            height = BTNSIZE,
            roundX = 2,
            roundY = 2
         })

         table.insert(self._colourNodes, vec)

         table.insert(self._links, { vector=vec, x=x, y=y, width=BTNSIZE, height=BTNSIZE, colour=rgb,
            routine = function(Link)
               updateRGB(self, Link.colour)
            end
         })

         x = x + BTNSIZE + BTNGAP
         ci = ci + 1
      end

      -- Add buttons for the adding and removing of personal colours

      if (row == 1) then
         gui.icon({
            target = self.viewport, x = x+2, y = y, size = BTNSIZE, image = 'items/add',
            events = {
               activate = function(Icon)
                  for k, v in pairs(self._userColours) do
                     if (v.r == self._rgb.r) and (v.g == self._rgb.g) and (v.b == self._rgb.b) then return end
                  end

                  if (#self._userColours < 7 * 2) then
                     self._paletteChanged = true
                     table.insert(self._userColours, self._rgb)
                     refreshColourNodes(self)
                     self.viewport.acDraw()
                  else
                     gui.dialog.message({
                        icon    = 'items/error',
                        image   = 'items/error',
                        type    = 'error',
                        buttons = 'okay',
                        title   = 'Out of Palette Space',
                        popOver = self._window.surface,
                        string  = 'You have run out of space for adding new colours to your personal palette.  Please delete some of your existing colours before adding new ones.',
                     })
                  end
               end
            }
         })
      elseif (row == 2) then
         gui.icon({
            target = self.viewport, x = x+2, y = y, size = BTNSIZE, image = 'items/trash',
            events = {
               activate = function(Icon)
                  for k, v in pairs(self._userColours) do
                     if (v.r == self._rgb.r) and (v.g == self._rgb.g) and (v.b == self._rgb.b) then
                        self._paletteChanged = true
                        table.remove(self._userColours, k)
                        refreshColourNodes(self)
                        self.viewport.acDraw()
                        break
                     end
                  end
               end
            }
         })
      end

      y = y + BTNSIZE + BTNGAP
   end

   local bottom = y + WIDGET_GAP

   -- Configure the palette selection area

   dx = dx + ((BTNSIZE + BTNGAP) * 8) + 10
   dy = 0

   self.txtRainbowPalette = self.viewport.new('VectorText', {
      x        = dx,
      y        = dy + gui.getFontHeight(gui.fonts.window),
      string   = 'Rainbow palette',
      fill     = 'rgba(0,0,0,1)',
      face     = gui.fonts.window.face,
      fontSize = string.format('%.2fpt', gui.fonts.window.size),
      align    = 'left'
   })

   dy = dy + gui.getFontHeight(gui.fonts.window) + WIDGET_GAP

   local rainbow = getRainbowBitmap()

   self.vecRainbowPalette = self.viewport.new('VectorRectangle', {
      x      = dx,
      y      = dy,
      width  = rainbow.width,
      height = rainbow.height,
      roundX = 4,
      roundY = 4,
      stroke = gui.rgbToSVG(COL_BORDER),
      fill   = 'url(#Rainbow)'
   })

   self._rainbowX = dx
   self._rainbowY = dy

   dy = dy + self.vecRainbowPalette.height + WIDGET_GAP

   -- The picker selects colours in the rainbow palette and is only visible if the user activates it.

   self.vecPicker = self.viewport.new('VectorEllipse', {
      cX      = self._rainbowX,
      cY      = self._rainbowY,
      radiusX = 4,
      radiusY = 4,
      visibility = VIS_HIDDEN
   })

   self.vecChosenColour = self.viewport.new('VectorRectangle', {
      x      = dx,
      y      = dy,
      roundX = 4,
      roundY = 4,
      width  = rainbow.width,
      height = 32,
      fill   = gui.rgbToSVG(self._rgb),
      stroke = gui.rgbToSVG(COL_BORDER)
   })

   dy = dy + self.vecChosenColour.height + WIDGET_GAP

   self.inputRGB = gui.input({
      target = self.viewport,
      x      = dx,
      y      = dy,
      width  = rainbow.width,
      label  = 'RGB:',
      inputMask = '^%d+,%d+,%d+$',
      events = {
         activate = function(Widget, Event)
            updateRGB(self, gui.strToRGB(Event.text))
         end
      }
   })

   dy = dy + self.inputRGB.viewport.height + WIDGET_GAP

   -- Okay and cancel buttons

   lCancelButton = gui.button({
      target  = self.viewport,
      text    = 'Cancel',
      xOffset = WIDGET_GAP,
      y       = dy,
      icon    = 'items/cancel',
      events = {
         activate = function(Widget)
            if (self.feedback != nil) then
               self.feedback(nil)
            end
            table.clear(self)
         end
      }
   })

   lOkayButton = gui.button({
      target  = self.viewport,
      text    = 'OK',
      xOffset = lCancelButton.viewport.width + (WIDGET_GAP * 2),
      y       = dy,
      icon    = 'items/checkmark',
      events = {
         activate = function(Widget)
            saveColours(self)
            if (self.feedback != nil) then
               self.feedback(self._rgb.r .. ',' .. self._rgb.g .. ',' .. self._rgb.b)
            end
            table.clear(self)
         end
      }
   })

   dy = dy + lOkayButton.viewport.height + WIDGET_GAP
   if (dy > bottom) then bottom = dy end

   collectgarbage()

   return (self._rainbowX + rainbow.width + WIDGET_GAP), bottom
end

-- Locate the picker within the rainbow palette, if active

local function arrangePicker(self)
   if not self.vecPicker then return end

   if (self._picker) then
      local val = (self._picker.y * 255) / (getRainbowBitmap().height * 0.75)
      if (val > 255) then val = 255 end

      self.vecPicker.cX = self._rainbowX + self._picker.x
      self.vecPicker.cY = self._rainbowY + self._picker.y

      self.vecPicker.stroke   = 'rgba(' .. val .. ',' .. val .. ',' .. val .. ',1)'
      self.vecPicker.visibility = VIS_VISIBLE
   else
      self.vecPicker.visibility = VIS_HIDDEN
   end
end

local function arrangeLayout(self)
   -- Recalculate clickable links

   for _, link in ipairs(self._links) do
      if link.vector then
         _, link.x, link.y, link.width, link.height = link.vector.mtGetBoundary()
      end
   end

   if self.vecRainbowPalette then
      _, self._rainbow.winX, self._rainbow.winY, self._rainbow.winWidth, self._rainbow.winHeight = self.vecRainbowPalette.mtGetBoundary()
   end

   arrangePicker(self)
end

-- Executed when the user clicks the rainbow palette area.  Some coordinate translation
-- occurs in order to manage viewport scaling within the display window.

local function selectPalette(self, X, Y)
   if (X < 0) then X = 0 end
   if (Y < 0) then Y = 0 end
   if (X >= self._rainbow.winWidth) then X = self._rainbow.winWidth - 1 end
   if (Y >= self._rainbow.winHeight) then Y = self._rainbow.winHeight - 1 end

   local rainbow = getRainbowBitmap()
   local descaleX, descaleY = (rainbow.width / self._rainbow.winWidth), (rainbow.height / self._rainbow.winHeight)
   local dX, dY = X * descaleX, Y * descaleY

   local rgb = mGfx.ReadRGBPixel(rainbow, descaleX * X, descaleY * Y)

   if (not self._picker) then self._picker = { x=dX, y=dY } end

   local left, top, right, bottom = self._picker.x - 4, self._picker.y - 4, self._picker.x + 4, self._picker.y + 4

   if (dX < self._picker.x) then
      left = dX - 4
   else
      right = dX + 4
   end

   if (dY < self._picker.y) then
      top = dY - 4
   else
      bottom = dY + 4
   end

   self._picker = { x=dX, y=dY }

   arrangePicker(self)

   self.viewport.acDraw()

   updateRGB(self, { r=rgb.red, g=rgb.green, b=rgb.blue })
end

local function loadColours(self)
   pcall(function()
      local js = file.readAll('user:config/colours.json')
      if nz(js) then
         self._userColours = json.decode(js)
      end
   end)
end

gui.dialog.colour = function(Options)
   local self = { -- Public variables and global resources that need to be retained
      windowID   = nil,
      colour     = { r=0, g=0, b=0, a=255 },
      feedback   = Options.feedback,
      _absX      = -1,
      _absY      = -1,
      _rainbowX  = -1,
      _rainbowY  = -1,
      _rainbow   = { winX = 0, winY = 0, winWidth = 0, winHeight = 0 },
      _rainbowBmp,
      _rgb       = { r=200, g=200, b=200, a=255 },
      _links     = { },
      _userColours = { },
      _picker = nil
   }

   local function inputFeedback(Viewport, Msg)
      if (Msg.type == JET_BUTTON_1) then
         if (Msg.value > 0) then -- Button down
            if (Msg.x >= self._rainbow.winX) and
               (Msg.y >= self._rainbow.winY) and
               (Msg.x < self._rainbow.winX + self._rainbow.winWidth) and
               (Msg.y < self._rainbow.winY + self._rainbow.winHeight) then
               selectPalette(self, Msg.x - self._rainbow.winX, Msg.y - self._rainbow.winY)
               self._rainbowClick = true
            end
            self._absX = Msg.absX
            self._absY = Msg.absY
         else -- Button released
            self._rainbowClick = false

            if (math.abs(Msg.absX - self._absX) <= 2) and (math.abs(Msg.absY - self._absY) <= 2) then
               for _, link in ipairs(self._links) do
                  if (Msg.x >= link.x) and (Msg.x < link.x + link.width) and
                     (Msg.y >= link.y) and (Msg.y < link.y + link.height) then
                     link.routine(link)
                     break
                  end
               end
            end
         end
      elseif (Msg.type == JET_ABS_XY) then
         if (self._rainbowClick) then selectPalette(self, Msg.x - self._rainbow.winX, Msg.y - self._rainbow.winY) end
      end
   end

   loadColours(self)

   self._window = gui.window({
      insideWidth  = 600,
      insideHeight = 400,
      minWidth     = 200,
      minHeight    = 50,
      quit         = false,
      center       = true,
      stickToFront = true,
      aspectRatio  = true,
      popOver      = Options.popOver,
      parent       = Options.target,
      icon         = 'tools/palette',
      title        = nz(Options.title, 'Select a colour'),
      modal        = nz(Options.modal, false),
      events = {
         close = function(Window)
            saveColours(self)
            if (self.feedback != nil) then
               self.feedback(nil)
            end
            table.clear(self)
         end
      }
   })

   self.scene = self._window.scene

   self.viewport = self._window:clientViewport({
      resizeEvent = function(Viewport, Vector, X, Y, Width, Height)
         arrangeLayout(self)
      end
   })

   check(self.scene.mtAddDef('Rainbow', self.scene.new('VectorImage', { bitmap = getRainbowBitmap() })))

   self.viewport.viewWidth, self.viewport.viewHeight = buildLayout(self, Options)

   check(self.viewport.mtSubscribeInput(bit.bor(JTYPE_MOVEMENT, JTYPE_BUTTON), inputFeedback))

   -- Manage the aspect ratio.  The current width will determine the height

   local client = self._window:getClientSize()
   local scale = self.viewport.viewHeight / self.viewport.viewWidth

   self._window:resizeClientArea(client.width, math.floor(client.width * scale))
   self._window.surface.minWidth  = math.floor(client.width * 0.25)
   self._window.surface.minHeight = math.floor(client.width * scale * 0.25)

   updateRGB(self, gui.strToRGB(nz(Options.colour, '200,200,200')))

   self._window:moveToFront()
   self._window:show()

   arrangeLayout(self)

   return self
end

--=====================================================================================================================
-- This sub-routine is provided for languages other than Fluid to use the interface.

   do
      local state = getExecutionState()
      if (state.inRequire != true) then
         local dlg = colour.dialog({
            popOver    = arg('popOver'),
            target     = arg('target'),
            modal      = arg('modal'),
            okText     = arg('okText'),
            cancelText = arg('cancelText'),
            icon       = arg('icon')
         })

         return dlg.windowID
      end
   end
