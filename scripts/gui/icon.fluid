--[[
Documentation is available in the Parasol Wiki.
--]]

   require 'common'
   require 'gui'

local FONT_MAX_HEIGHT, FONT_HEIGHT = gui.getFontHeight(gui.fonts.icon)
local MARGIN = math.floor(FONT_HEIGHT * 0.5) + 1

-- NB: If a custom SVG file is desired then the client must specify a volume in the path.

local function imageLocation(Path)
   if (Path:find('^icons:') == 1) then
      return Path
   elseif (Path:find('^[%w]+:') == 1) then
      return Path
   else
      return 'icons:' .. Path
   end
end

gui.icon = function(Options)
   local self = { -- Public variables
      parentViewport = Options.target,
      events         = nz(Options.events, { }),
      viewport       = nil -- The icon's primary viewport
   }

   local lText
   local lTextGroup
   local lClick      = { held=false, x=0, y=0 }
   local lWords      = { }
   local lLines      = { }
   local lIconSize   = nz(Options.size, 66)
   local lIconWidth  = lIconSize
   local lFontSize   = FONT_HEIGHT
   local lLineHeight = 0

   local function inputFeedback(Viewport, Msg)
      if (Msg.type == JET_BUTTON_1) then
         if (Msg.value > 0) then
            lClick.held = true
            lClick.x = Msg.absX
            lClick.y = Msg.absY
            Viewport.opacity = 0.5
            --Viewport.acMoveToFront()
         else
            lClick.held = false
            Viewport.opacity = 1.0
            --Viewport.acMoveToBack()

            if ((math.abs(Msg.absX - lClick.x) > 2) or (math.abs(Msg.absY - lClick.y) > 2)) then
               -- Do nothing - mouse moved/dragged when icon was clicked
            elseif self.events.activate then
               if (bit.band(Msg.flags, JTYPE_DBL_CLICK) != 0) then
                  self.events.activate(self, { name='dblclick' })
               else
                  self.events.activate(self, { name='click' })
               end
            end
         end
         Viewport.acDraw()
      elseif (Msg.type == JET_BUTTON_2) then
         self.events.activate(self, { name='altclick' })
      end
   end

   local function calcWords()
      lWords = { }
      lLines = { }
      if (lText == nil) or (#lText == 0) then return end

      if (lIconSize < 26) then
         lFontSize = 6
      elseif (lIconSize < 60) then
         lFontSize = 8
      else
         lFontSize = 10
      end

      local err, font = mVec.getFontHandle(gui.fonts.icon.face, "Regular", 0, lFontSize)
      local metrics = struct.new('FontMetrics')
      local err = mVec.getFontMetrics(font, metrics)
      lLineHeight = metrics.lineSpacing

      -- Extract each word's pixel width

      local widest_word = 0
      for _, word in ipairs(lText) do
         local width = mVec.stringWidth(font, word, -1)
         if (width > widest_word) then widest_word = width end
         table.insert(lWords, { word=word, width=width })
      end

      -- If necessary, expand the width of the icon to fit the longest word.

      lIconWidth = lIconSize
      if (widest_word + (MARGIN * 2) > lIconWidth) then
         lIconWidth = widest_word + (MARGIN * 2)
      end

      local current_line
      for _, word in ipairs(lWords) do
         if (current_line == nil) then
            current_line = word.word
         else
            local new_line = current_line .. ' ' .. word.word
            local width = mVec.stringWidth(font, new_line, -1)
            if (width + (MARGIN * 2) < lIconWidth) then
               current_line = new_line
            else
               table.insert(lLines, current_line)
               current_line = word.word -- Push the word to the next line
            end
         end
      end

      if (current_line != nil) then
         table.insert(lLines, current_line)
      end
   end

   local function initText()
      -- Create a dark rounded box in the background of the text, this will make it easier to distinguish the text
      -- against a busy background or one of a similar colour.

      if #lLines == 0 then return end

      local box_height = self.viewport.height - (lIconSize + MARGIN)
      local y = lIconSize + MARGIN

      lTextGroup = self.viewport.new('VectorGroup', { })

      lTextGroup.new('VectorRectangle', {
         fill   = 'rgba(0,0,0,.5)',
         x      = 0,
         y      = math.floor(y),
         roundX = 5,
         roundY = 5,
         width  = lIconSize - 1.0,
         height = box_height
      })

      for _, line in ipairs(lLines) do
         local vText = lTextGroup.new('VectorText', {
            x        = math.floor(lIconSize * 0.5),
            face     = gui.fonts.icon.face,
            fontSize = string.format('%.2fpt', lFontSize),
            fill     = gui.style.widget.text,
            align    = 'horizontal',
            string   = line
         })

         y = y + lLineHeight
         vText.y = math.floor(y)
      end
   end

   -- Main entry point

   if nz(Options.text) then
      lText = Options.text:trim():gsub('%s+', ' '):split(' ')
   else
      lText = nil
   end

   if not Options.target then error('A target viewport is required.') end
   if not nz(Options.image) then error('The image option is required.') end

   if (Options.theme == 'light') then
      lThemeColour = { first={ r=250,g=249,b=248 }, last={ r=210,g=211,b=212 } }
   else
      lThemeColour = { first={ r=90,g=90,b=90 }, last={ r=70,g=70,b=110 } }
   end

   calcWords()

   self.viewport = Options.target.new('VectorViewport', {
      x = nz(Options.x, 0), y = nz(Options.y, 0),
      width = lIconSize, height = lIconSize,
      aspectRatio = 'XMid|YMin|Meet',
      cursor = 'hand'
   })

   self.iconVP = self.viewport.new('VectorViewport', {
      x = 0, y = 0, width = lIconSize, height = lIconSize
   })

   self.viewport.dragCallback = function(Viewport, X, Y)
      Viewport.x = X
      Viewport.y = Y
      Viewport.acDraw()
   end

   local src = imageLocation(Options.image)
   if not src then error('Invalid image source ' .. Options.image) end
   self.svg = obj.new('svg', { target=self.iconVP, path=src })

   local gname = 'iconFill' .. self.iconVP.id
   self.svgGradient = gui.simpleGradient(self.iconVP.scene, gname, { lThemeColour.first, lThemeColour.last },
      0, self.iconVP.y, 0, self.iconVP.height, 'boundingbox')
   gui.applyFill(self.iconVP, 'url(#' .. gname .. ')')

   check(self.viewport.mtSubscribeInput(JTYPE_BUTTON, inputFeedback))

   local gap = self.viewport.height * 0.1
   if (gap < 2) then gap = 2 end

   self.viewport.height = self.viewport.height + gap + MARGIN + (lLineHeight * #lLines)

   initText()

   if self.events.show then
      self.events.show(self)
   end

   self.viewport.acDraw()

   return self
end
