--[[
The ToolBar interface creates and manages the use of items and groups of items in the UI, typically using icons, text
or both for item representation.  Each item performs a specific application function that is activated via a callback
mechanism.

The following example illustrates basic usage:

   tbar = gui.toolbar(viewport, {
      x=0, y=0, xOffset=0,
      createItems = function(Bar)
         Bar.addItem(10, 'Rename', 'Rename', 'layout/interface_textbox', function()
            print('rename')
         end)
         Bar.addItem(11, 'Delete', 'Delete', 'tools/eraser', function()
            print('delete')
         end)
      end
   })

The first parameter is the hosting viewport for the ToolBar UI.  Valid options to use when creating the toolbar are
as follows:

  createItems: Required.  Defines the items that will be displayed in the toolbar.
  orientation: Defaults to 'horizontal' (left to right item arrangement).  Set to 'vertical' for top to bottom.
  x, y:        The x and y coordinates of the toolbar.
  xOffset:     Optional x offset.  If not set then the toolbar width is calculated based on the number of items.
  iconSize:    Optional.  The preferred size of the toolbar icons, in pixels.  This determines the overall size of the toolbar.
  cellMargin:  The amount of whitespace at the four edges of each item, measured in pixels.

The resulting object consists of the following accessible fields:

  viewport: The viewport that hosts the toolbar's UI.

--]]

   require 'common'
   require 'gui'
   require 'gui/tooltip'
   require 'translate'
   include 'vector'

local lColours = {
   hover       = 'rgb(0,0,0,32)',
   selected    = 'rgb(255,255,255,128)',
   groupBorder = 'rgb(255,255,255,128)',
   iconGradient = { first={ r=90,g=90,b=90 }, last={ r=70,g=70,b=110 } }
}

local lCounter = 0
local lTipDelay = 0.75

local TI_ICON  = 1
local TI_BREAK = 2
local TI_GROUP = 3

local function counter()
   lCounter = lCounter + 1
   return lCounter
end

gui.toolbar = function(HostVP, Options)
   local self = { -- Public variables
      host = nil,
      viewport   = nil,  -- The main viewport for the toolbar
      _groupMargin = 4,
      _groupCount = 0,
      _cellMargin = nz(Options.cellMargin, 6),
      _disabled = false,
      _lookup = { },
      _iconSize = nz(Options.iconSize, 20),
      _hasFocus = false
   }

   local function sendFeedback()
      if self._current and self._current.callback then
         self._current.callback(self._current.id, self._current.name)
      end
   end

   local function firstIcon() -- Return the first item that is an icon
      local item = self._first
      while ((item != nil) and (item.type != TI_ICON)) do item = item.next end
      return item
   end

   local function lastIcon() -- Return the last item that is an icon
      local item = self._last
      while ((item != nil) and (item.type != TI_ICON)) do item = item.prev end
      return item
   end

   local function newItem(Type, Name, ID)
      if ID and self._lookup[ID] then error('An item with identifier ' .. ID .. ' already exists.') end

      local item = { type=Type, id=ID, name=Name }
      if nz(Name) then
         item.displayName = string.translate(Name)
      end

      if self._last then self._last.next = item end
      item.prev = self._last
      item.next = nil
      self._last = item
      if not self._first then self._first = item end

      if ID then self._lookup[ID] = item end
      return item
   end

   local function resetTipTimer()
      if self._tipTimer then
         mSys.UpdateTimer(self._tipTimer, 0)
         self._tipTimer = nil
      end
   end

   -- Return the toolbar item located at position (x,y)

   local function getCursorItem(X, Y)
      local item = self._first
      while (item) do
         if (X >= item.x) and (X <  item.x + item.width) and (Y >= item.y) and (Y <  item.y + item.height) then
            if (item.type == TI_ICON) then return item end
         end
         item = item.next
      end
   end

   -- Highlight selected item (for keyboard item selection)

   local function highlightItem(Item)
      if self.hIcon.x == Item.x then return end

      self._current = Item
      self.hIcon.x = Item.x
      self.hIcon.y = 0
      self.hIcon.width  = Item.width
      self.hIcon.height = self.viewport.height
      self.hIcon.visibility = 'visible'
      if self._groupClip then
         self.hIcon.mask = self._groupClip
      end

      self.viewport.acDraw()
   end

   -- Main routine for arranging items within the toolbar's viewport.

   local function arrangeItems()
      local groupOffset = 0
      if (self._groupCount > 0) then
         groupOffset = self._groupMargin
      end

      if (not self._vHover) then
         if (self._groupCount > 0) then
            self._vHover = self.viewport.new('VectorRectangle', { -- Hover highlight
               fill='rgb(255,255,255)', x=0, y=0, width=1, height=1, visibility='hidden'
            })
         else
            self._vHover = self.viewport.new('VectorRectangle', { -- Hover highlight
               fill='rgb(255,255,255)', x=0, y=0, width=1, height=1, visibility='hidden', roundX=4, roundY=4
            })
         end
      end

      -- The _groupClip simplifies masking and 'vg' provides a container for hosting temporary vectors.

      if self._groupClip then self._groupClip.free() end
      if self.vg then self.vg.free() end

      if (self._groupCount > 0) then
         self._groupClip = self.viewport.scene.new('VectorClip', { name='GroupMask', units='UserSpace' })
      end

      self.vg = self.viewport.new('VectorGroup', { name='ItemGroup' })

      local item = self._first

      local x, y
      if self._horizontal then
         x = 0
         y = groupOffset
      else
         x = groupOffset
         y = 0
      end

      local currentGroup = nil
      local spanCount = 0
      while item do
         if (item.type == TI_BREAK) then
            item.x      = x
            item.y      = y
            item.width  = 6
            item.height = self._iconSize + (self._cellMargin * 2)

            local seq = string.format('M%f,%f l0,%f', x+(item.width-1) * 0.5, y+1, item.height)
            self.vg.new('VectorPath', {
               name = 'break', stroke = lColours.groupBorder, sequence = seq, dashArray = '1, 1'
            })

            if self._horizontal then
               x = x + item.width
            else
               y = y + item.height
            end
         elseif (item.type == TI_GROUP) then
            if self._horizontal then
               if not item.prev then
                  x = x + groupOffset
               else
                  x = x + (self._iconSize * 0.25)
               end
            else
               if not item.prev then
                  y = y + groupOffset
               else
                  y = y + (self._iconSize * 0.25)
               end
            end

            currentGroup = item
            spanCount = 0

            item.x = x
            item.y = y
            if self._horizontal then
               item.height = self._iconSize + (self._cellMargin * 2)
            else
               item.width = self._iconSize + (self._cellMargin * 2)
            end

            item.border = self.vg.new('VectorRectangle', {
               name = 'grouprect', stroke = lColours.groupBorder, fill = 'rgb(0,0,0,20)', strokeWidth = 2,
               x = x, y = y, roundX = 4, roundY = 4, width = 1, height = 1
            })

            if self._groupClip then
               item.clip = self._groupClip.viewport.new('VectorRectangle', {
                  name = 'groupclip', x = x, y = y, roundX = 4, roundY = 4, width = 1, height = 1
               })
            end
         elseif (item.type == TI_ICON) then
            item.x      = x
            item.y      = y
            item.width  = self._iconSize + (self._cellMargin * 2)
            item.height = self._iconSize + (self._cellMargin * 2)

            if item.svgGroup then
               item.svgGroup.x = x + self._cellMargin
               item.svgGroup.y = y + self._cellMargin
               if self._disabled or item.disabled then
                  item.vectorIcon.opacity = 0.5
               end
            elseif nz(item.displayName) then
               local gname = 'tbar_grd' .. counter()
               item.svgGradient = gui.simpleGradient(self.viewport.scene, gname, { lColours.iconGradient.first, lColours.iconGradient.last }, 0, item.y, 0, item.height, 'userspace')

               item.vectorText = self.vg.new('VectorText', {
                  x        = x + self._cellMargin,
                  face     = 'Noto Sans',
                  fontSize = self._iconSize * 0.75,
                  weight   = 500,
                  fill     = 'url(#' .. gname .. ')',
                  string   = item.displayName
               })

               local err, bx, by, bw, bh = item.vectorText.mtGetBoundary(0)
               item.width = bw + (self._cellMargin * 2)
               item.vectorText.y = (self.viewport.height * 0.5) + (item.vectorText.displaySize * 0.5)

               if self._disabled or item.disabled then
                  item.vectorText.opacity = 0.5
               end
            end

            if self._horizontal then
               x = x + item.width
            else
               y = y + item.height
            end

            spanCount = spanCount + 1

            if currentGroup then
               item.group = currentGroup
               if self._horizontal then
                  currentGroup.width  = x - currentGroup.x
                  currentGroup.height = self.viewport.height - (groupOffset * 2)
               else
                  currentGroup.width  = self.viewport.width - (groupOffset * 2)
                  currentGroup.height = y - currentGroup.y
               end
               currentGroup.border.width  = currentGroup.width
               currentGroup.border.height = currentGroup.height
               currentGroup.clip.width    = currentGroup.width
               currentGroup.clip.height   = currentGroup.height
               if (spanCount == currentGroup.span) then
                  if self._horizontal then
                     x = x + groupOffset -- Gap between groups
                  else
                     y = y + groupOffset
                  end
                  currentGroup = nil
               end
            end
         end

         item = item.next
      end

      if self._arrangedWidth then
         self.viewport.width = x
      end
      self._arranged = true
   end

   -- Insert a visual break between items.

   self.addBreak = function()
      newItem(TI_BREAK, 'break', nil)
      self._arranged = false
   end

   -- Add a clickable item to the toolbar.  The Name acts as the item text that is displayed in the toolbar if no
   -- icon can be displayed.  Set the Tip string for a user hint during hover events.  The icon string must be in the
   -- standard format of 'category/icon'.

   self.addItem = function(ID, Name, Tip, Icon, Function)
      local item = newItem(TI_ICON, Name, ID)
      item.callback = Function

      if Tip then
         item.tip = string.translate(Tip)
      end

      if Icon then
         pcall(function()
            item.icon = gui.createIcon(self.viewport.scene, 'icons:' .. Icon .. '.svg', self._iconSize, lColours.iconGradient, Icon)
            item.svgGroup = self.viewport.new('VectorRectangle', {
               fill = 'url(#' .. Icon .. ')',
               x=0, y=0, width=self._iconSize, height=self._iconSize
            })
         end)
      end

      self._arranged = false
   end

   -- Create a group of items with this method.  The total number of items that will be covered by the group must be
   -- known ahead of time, then added with calls to addItem().

   self.addGroup = function(ID, Name, Span)
      local item = newItem(TI_GROUP, Name, ID)
      item.group = { span=Span }
      self._groupCount = self._groupCount + 1
      return item
   end

   -- Individual toolbar items can be disabled with this method.  Reverse this action with enableItem().

   self.disableItem = function(ID)
      local item = self._lookup[ID]
      if item and (not item.disabled) then
         item.disabled = true
         self.viewport.acDraw()
      end
   end

   -- Items that have been disabled can be re-enabled by calling this method.

   self.enableItem = function(ID)
      local item = self._lookup[ID]
      if item and item.disabled then
         item.disabled = false
         self.viewport.acDraw()
      end
   end

   -- This method will reverse a previous call to selectItem() for a given item.

   self.deselectItem = function(ID)
      local item = self._lookup[ID]
      if item and item.selected then
         item.selected = false
         self.viewport.acDraw()
      else
         check(ERR_Search)
      end
   end

   -- Mark a toolbar item as selected, which results in the toolbar item being drawn with a special
   -- background to indicate that the item is active.  This operation can be reversed at any time by calling the
   -- deselectItem() method.  If Exclusive is true, all other items are deselected.

   self.selectItem = function(ID, Exclusive)
      local redraw = false
      local found  = false
      local item   = firstIcon()
      while (item) do
         if (item.type == TI_ICON) then
            if (item.id == ID) then
               if (not item.selected) then
                  item.selected = true
                  redraw = true
                  found = true
               end
            elseif Exclusive and item.selected then
               item.selected = false
               redraw = true
            end
         end
         item = item.next
      end

      if redraw then self.viewport.acDraw() end

      if (not found) then check(ERR_Search) end
   end

   -- Remove an item from the toolbar.

   self.removeItem = function(ID)
      local item = self._lookup[ID]
      self._lookup[ID] = nil
      if item.prev then item.prev.next = item.next end
      if item.next then item.next.prev = item.prev end
      if (item == self._first)  then self._first  = item.next end
      if (item == self._last)   then self._last   = item.prev end
      if (item == self._current) then self._current = nil end
   end

   local function tipTimer(Elapsed, CurrentTime)
      if self._current and nz(self._current.tip) then
         gui.tooltip({ text=self._current.tip })
      end
      self._tipTimer = nil
      check(ERR_Terminate)
   end

   local function hoverUpdate(Item, StateChanged) -- Highlight items that the user hovers over.
      if (self._current == Item) and (StateChanged != true) then return end

      self.hIcon.visibility = 'hidden'
      self._current = Item

      if self._current and (not self._current.disabled) and (not self._disabled) then
         if self._clicked then
            self._vHover.fill = lColours.selected
         else
            self._vHover.fill = lColours.hover
         end

         if self._horizontal then
            self._vHover.x      = self._current.x
            self._vHover.y      = 0
            self._vHover.width  = self._current.width
            self._vHover.height = self.viewport.height
         else
            self._vHover.x      = 0
            self._vHover.y      = self._current.y
            self._vHover.width  = self.viewport.width
            self._vHover.height = self._current.height
         end
         self._vHover.visibility = 'visible'
         if self._groupClip then
            self._vHover.mask = self._groupClip
         end
      else
         self._vHover.visibility = 'hidden'
      end

      self.viewport.acDraw()
   end

   local function inputFeedback(Viewport, Events) -- Internal input handler
      local ev = Events
      while ev do
         if (ev.type == JET_CROSSED_IN) then

         elseif (ev.type == JET_CROSSED_OUT) then
            resetTipTimer()
            if self._current then
               hoverUpdate(nil)
            end
         elseif (bit.band(ev.flags, JTYPE_MOVEMENT) != 0) then
            resetTipTimer()

            if self._clicked then return end

            local item = getCursorItem(ev.x, ev.y)
            if item and item.tip then -- Tool-tip management
               if self._tipTimer then
                  mSys.UpdateTimer(self._tipTimer, lTipDelay)
               else
                  local err
                  err, self._tipTimer = mSys.SubscribeTimer(lTipDelay, tipTimer)
               end
            end

            hoverUpdate(item)
         elseif bit.band(ev.flags, JTYPE_BUTTON) != 0 then
            if (ev.value > 0) then
               if self._disabled then return end

               resetTipTimer()

               if self._current then
                  if self._current.disabled then return end

                  if ev.type == JET_BUTTON_1 then
                     self._clicked = self._current
                     lClickX  = ev.x
                     lClickY  = ev.y
                     hoverUpdate(self._current, true)
                  end
               end
            elseif (ev.type == JET_BUTTON_1) then
               if self._clicked then
                  self._clicked = nil

                  hoverUpdate(self._current, true)

                  local delta_x = ev.x - lClickX
                  local delta_y = ev.y - lClickY
                  if (delta_x < 0) then delta_x = -delta_x end
                  if (delta_y < 0) then delta_y = -delta_y end

                  if (delta_x < 4) and (delta_y < 4) then
                     sendFeedback()
                  end
               end
            end
         end

         ev = ev.next
      end
   end

   -- Main entry point

   if (not HostVP) then error('A host viewport is required.') end

   if Options.groupMargin then
      self._groupMargin = Options.groupMargin
      if self._groupMargin < 1 then self._groupMargin = 1 end
   end

   self.host = HostVP
   self.viewport = HostVP.new('VectorViewport')
   self.viewport.x = nz(Options.x, 0)
   self.viewport.y = nz(Options.y, 0)

   if Options.yOffset then
      self.viewport.yOffset = Options.yOffset
   else
      self.viewport.height = 1
   end

   if Options.xOffset then
      self.viewport.xOffset = Options.xOffset
   else
      self.viewport.width = HostVP.width - self.viewport.x
      self._arrangedWidth = true
   end

   if Options.width then
      self.viewport.width = Options.width
      self._arrangedWidth = false
   end

   if (self.viewport.init() != ERR_Okay) then error('Failed to initialise viewport.') end

   self.viewport.subscribe('free', function(Viewport, Args)
      if self._tipTimer then mSys.UpdateTimer(self._tipTimer, 0) end
      self = { }
   end)

   self.viewport.mtSubscribeFeedback(bit.bor(FM_HAS_FOCUS, FM_CHILD_HAS_FOCUS, FM_LOST_FOCUS), function(Viewport, Event)
      if (Event == FM_LOST_FOCUS) then
         self._hasFocus = false
         if self._current then
            self.hIcon.visibility = 'hidden'
            self._current = nil
         end
      else
         self._hasFocus = true
      end

      self.viewport.acDraw()
   end)

   self.viewport.mtSubscribeKeyboard(function(Viewport, Qualifiers, Code, Unicode)
      if bit.band(Qualifiers, KQ_PRESSED) != 0 then
         if (Code == KEY_ENTER) or (Code == KEY_NP_ENTER) or (Code == KEY_SPACE) then
            sendFeedback()
         elseif (Code == KEY_UP) or (Code == KEY_LEFT) then
            if self._current then
               local scan = self._current.prev
               while scan and (scan.type != TI_ICON) do
                  scan = scan.prev
               end
               if (not scan) then scan = lastIcon() end
               highlightItem(scan)
            else
               highlightItem(firstIcon())
            end
         elseif (Code == KEY_DOWN) or (Code == KEY_RIGHT) then
            if self._current then
               local scan = self._current.next
               while scan and (scan.type != TI_ICON) do
                  scan = scan.next
               end
               if (not scan) then scan = firstIcon() end
               highlightItem(scan)
            else
               highlightItem(firstIcon())
            end
         end
      end
   end)

   self.viewport.mtSubscribeInput(bit.bor(JTYPE_BUTTON, JTYPE_MOVEMENT, JTYPE_CROSSING), inputFeedback)

   local fill = 'rgb(0,0,0,128)'
   if (Options.theme != 'light') then
      fill = 'rgb(255,255,255,200)'
   end

   self.hIcon = self.viewport.new('VectorRectangle', { -- Icon highlighter, for keyboard-based selection
      fill   = fill,
      x      = 0,
      y      = 0,
      width  = 16,
      height = 16,
      visibility = 'hidden'
   })

   Options.createItems(self)

   self._colBreadth = self._iconSize + (self._cellMargin * 2)
   if (self._groupCount > 0) then
      self._colBreadth = self._colBreadth + (self._groupMargin*2)
   end

   if (Options.orientation == 'horizontal') then
      self._horizontal = true
   elseif (Options.orientation == 'vertical') then
      self._horizontal = false
   end

   if (not self._horizontal) and (Options.y and Options.yOffset) then
      self._horizontal = false
   else
      self._horizontal = true
   end

   if self._horizontal then
      self.viewport.height = self._colBreadth
   else
      self.viewport.width = self._colBreadth
   end

   arrangeItems()

   return self
end
