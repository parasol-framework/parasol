--[[
The ListView API is used to display data to the user in the form of a list of items.

Documentation is available in the Parasol Wiki.
--]]

   require 'gui/libview'

local ICON_SIZE = 16
local VSPACING  = 2
local EDGE      = 4

local LINE_HEIGHT, FONT_HEIGHT = gui.getFontHeight(gui.fonts.widget)
LINE_HEIGHT = math.round(LINE_HEIGHT * 1.3)
local LINE_OFFSET = (LINE_HEIGHT + FONT_HEIGHT) * 0.5

local lColours = {
   fillItem           = 'rgb(0,0,0)',
   fillItemSelectHigh = 'rgb(255,255,255)',
   fillSelect         = 'rgb(0,0,60,140)',
   fillSelectFont     = 'rgb(255,255,255)',
   fillBkgdHighlight  = 'rgb(0,0,0,10)',
   fillBkgdSelectHighlight = 'rgb(0,0,90,140)'
}

gui.listView = function(Options)
   local lTextAttrib = nz(Options.textAttrib, 'name')
   local lCompact    = nz(Options.compact, 0)

   local function setListTextFill(Item, Fill)
      if Item._vectors.text then
         Item._vectors.text.fill = Fill
      end
   end

   -- When an item is hovered, create a highlight for it.

   local function highlightItem(View, Item, Highlighted)
      if (Item._vectors.viewport == nil) then return end

      if (not Item._vectors.highlight) then
         Item._vectors.highlight = Item._vectors.viewport.new('VectorRectangle', {
            roundX = 4, roundY = 4, width = '100%', height = '100%', visibility = VIS_HIDDEN
         })
         Item._vectors.highlight.acMoveToBack()
      end

      if Highlighted then
         if Item._selected then -- Both selected AND highlighted
            Item._vectors.highlight.fill = lColours.fillBkgdSelectHighlight
            setListTextFill(Item, lColours.fillItemSelectHigh)
         else
            Item._vectors.highlight.fill = lColours.fillBkgdHighlight
            setListTextFill(Item, lColours.fillItem)
         end

         Item._vectors.highlight.visibility = VIS_VISIBLE
      elseif (Item._selected) then
         setListTextFill(Item, lColours.fillItemSelectHigh)
         Item._vectors.highlight.fill = lColours.fillSelect
         Item._vectors.highlight.visibility = VIS_VISIBLE
      else
         setListTextFill(Item, lColours.fillItem)
         Item._vectors.highlight.visibility = VIS_HIDDEN
      end
   end

   local function newItems(View, Items)
      if #Items == 0 then return end

      local width  = View.window.width - EDGE - EDGE
      local height = View.window.height
      local x      = EDGE
      local y      = 0
      local widest_item = 0

      y = y + ((#View.items - #Items) * (LINE_HEIGHT + VSPACING))

      for _, item in pairs(Items) do
         if (not item._vectors) then item._vectors = { } end

         item._x = x
         item._y = y
         item._width  = width
         item._height = LINE_HEIGHT

         -- If the item is hovered, create a highlight for it.  ColBkgdHighlight defines the background colour to use
         -- when an item is highlighted.  If an item is also marked as selected, then the final colour is interpolated
         -- with ColSelect.

         item._highlightEvent = highlightItem

         -- Respond to positive item selection by the user (e.g. button click)

         item._selectEvent = function(View, Item)
            if (Item == View.hItem) then
               Item._highlightEvent(View, Item, true)
            else
               Item._highlightEvent(View, Item, false)
            end
         end

         -- Each item gets its own viewport in the page

         if not item._vectors.viewport then
            item._vectors.viewport = View.page.new('VectorViewport', {
               x       = EDGE,
               y       = y + EDGE,
               xOffset = EDGE,
               height  = LINE_HEIGHT
            })
         end

         local MARGIN = LINE_HEIGHT * 0.2
         local ICON_MARGIN = 0

         if not Options.noIcons then
            ICON_MARGIN = ICON_SIZE + MARGIN
         end

         local vp = item._vectors.viewport

         if item.icon then
            pcall(function()
               if not View.icons then View.icons = { } end

               if not View.icons[item.icon] then
                  gui.createIcon(View.scene, item.icon, ICON_SIZE)
                  View.icons[item.icon] = true
               end

               if not item._vectors.iconImage then
                  item._vectors.iconImage = vp.new('VectorRectangle', {
                     fill   = 'url(#' .. item.icon .. ')',
                     x      = LINE_HEIGHT * 0.2,
                     y      = (LINE_HEIGHT - ICON_SIZE) * 0.5,
                     width  = ICON_SIZE,
                     height = ICON_SIZE
                  })
               end
            end)
         end

         local item_name = item[lTextAttrib]
         if item_name then
            if not item._vectors.text then
               item._vectors.text = vp.new('VectorText', {
                  face     = gui.fonts.widget.face,
                  fontSize = string.format('%.2fpt', gui.fonts.widget.size),
                  align    = 'left',
                  y        = LINE_OFFSET
               })
            end

            item._vectors.text.x = MARGIN + ICON_MARGIN
            item._vectors.text.y = LINE_OFFSET
            if (type(item_name) == 'table') then
               item._vectors.text.string = item_name.value
            else
               item._vectors.text.string = item_name
            end
            --font.wrapEdge = x + item.Width

            local err, bx, by, bw, bh = item._vectors.text.mtGetBoundary(0)

            width = MARGIN + ICON_MARGIN + bw + MARGIN

            if item._selected then
               item._vectors.text.fill = lColours.fillSelectFont
            elseif (item.index == lHighlightedItem) and (lColours.highlight) then
               item._vectors.text.fill = lColours.highlight
            else
               item._vectors.text.fill = nz(item.colour, lColours.fillItem)
            end
         end

         y = y + LINE_HEIGHT + VSPACING
         if (width > widest_item) then widest_item = width end
      end

      -- Item click and hover management

      for _, item in pairs(View.items) do
         if (Options.compact == 1) then
            View.addZone(item._x, item._y, widest_item, item._height, item, itemHoverCallback)
         else
            View.addZone(item._x, item._y, nil, item._height, item, itemHoverCallback)
         end
      end

      -- Adjust the page dimensions and report to the scrollbar

      if View.scrollbar then
         widest_item = widest_item + EDGE + EDGE
         View.scrollbar.setDynamicPageSize(widest_item, widest_item, y + EDGE + VSPACING)
      end
   end

   local function constructListView(View, Scene, Window, Page)
      if #View.items > 0 then newItems(View, View.items) end

      collectgarbage()
   end

   local vw = gui.initView(Options, constructListView, newItems)

   vw.sort = function(Attrib, Ascending)
      vw.sortItems(Attrib, Ascending)
      --rearrangeItems(vw)
   end

   return vw
end
