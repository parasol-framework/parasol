--[[
The gui.combobox API creates and manages combobox boxes in the user interface.

Documentation is available in the Parasol Wiki.
--]]

   require 'common'
   require 'gui'
   require 'gui/menu'

local FONT_MAX_HEIGHT, FONT_HEIGHT = gui.getFontHeight(gui.fonts.widget)
local BOX_HEIGHT    = math.floor(FONT_MAX_HEIGHT * 1.35) + 1
local MARGIN        = math.floor(FONT_HEIGHT * 0.5) + 1
local STROKE_WIDTH  = 2
local DEFAULT_WIDTH = 160

local function iconTheme()
   if (gui.rgbValue(gui.strToRGB(gui.colours['widgetText'])) > 127) then
      return 'pearl'
   else
      return 'default' -- The default theme is dark
   end
end

local function reportFeedback(self)
   if not self.events.activate then return end
   local text = self.text.string
   local hash = string.hash(text)
   if (hash != self.hash) then
      self.hash = hash
      self.events.activate(self, text)
   end
end

local function toggleMenu(self)
   local err, bx, by, bw, bh = self.viewport.mtGetBoundary(0)

   self.menu.x = bx + self.labelWidth
   self.menu.y = by + BOX_HEIGHT
   if not self.unlockMenuWidth then
      self.menu.surface.width = self.viewport.width - self.labelWidth
   end

   self.menu.toggle()
end

gui.combobox = function(Options)
   local self = { -- Public variables
      events         = nz(Options.events, { }),
      label          = Options.label,
      parentViewport = Options.target,
      allowCustom    = Options.allowCustom,
      text           = nil, -- A VectorText that represents the string
      viewport       = nil  -- The primary viewport
   }

   -- Change the active state of the combobox box to disabled or enabled

   self.disable = function(self)
      self.disabled = true
      self.viewport.acDisable()
      self.text.opacity = 0.5
      self.bkgd.fill = gui.colours['widgetBkgd']
      if self.events.disable then self.events.disable(self) end
      self.viewport.acDraw()
   end

   self.enable = function(self)
      self.disabled = false
      self.viewport.acDisable()
      self.text.opacity = 1.0
      self.bkgd.fill = gui.colours['widgetBkgd']
      if self.events.enable then self.events.enable(self) end
      self.viewport.acDraw()
   end

   -- Main entry point --

   if not Options.target then error('A target viewport is required.') end
   if not Options.items or (#Options.items == 0) then error('A list of items is required.') end

   local vps = { -- Viewport settings
      x       = Options.x,
      y       = Options.y,
      width   = Options.width,
      height  = BOX_HEIGHT,
      xOffset = Options.xOffset,
      yOffset = Options.yOffset
   }

   if not vps.x and not vps.xOffset then vps.x = 0 end
   if not vps.y and not vps.yOffset then vps.y = 0 end
   if not vps.width and not vps.xOffset then
      vps.width = DEFAULT_WIDTH
      self.unlockMenuWidth = true
   end

   self.viewport = self.parentViewport.new('VectorViewport', vps)

   self.inputViewport = self.viewport.new('VectorViewport', {
      x = 0,
      y = 0,
      width = self.viewport.width,
      yOffset = 0,
      resizeEvent = function(Viewport, Vector, X, Y, Width, Height)
         local new_width = Width - self.labelWidth
         if (Vector.width != new_width) then
            Vector.width = new_width
         end

         if (Vector.height != Height) then
            Vector.height = Height
         end
      end
   })

   if self.label then
      self.labelText = self.viewport.new('VectorText', {
         name     = 'Label',
         x        = 0,
         y        = FONT_HEIGHT + math.floor((BOX_HEIGHT - FONT_HEIGHT) * 0.5),
         face     = gui.fonts.widget.face,
         fontSize = string.format('%.2fpt', gui.fonts.widget.size),
         fill     = gui.colours['windowText'],
         string   = self.label,
         lineLimit = 1
      })

      self.labelWidth = self.labelText.textWidth + MARGIN
      self.inputViewport.x = self.labelText.x + self.labelWidth
      self.inputViewport.width = self.viewport.width - self.labelWidth
   else
      self.labelWidth = 0
   end

   self.bkgd = self.inputViewport.new('VectorRectangle', {
      fill   = gui.colours['widgetBkgd'],
      x      = 0,
      y      = 0,
      width  = '100%',
      height = '100%',
   })

   local ICON_SIZE = FONT_HEIGHT
   gui.createIcon(self.viewport.scene, 'arrows/down', ICON_SIZE, iconTheme())

   self.iconRender = self.viewport.new('VectorViewport', {
      xOffset = MARGIN,
      y      = (self.viewport.height - ICON_SIZE) * 0.5,
      width  = ICON_SIZE,
      height = ICON_SIZE,
      fill   = 'url(#arrows/down)'
   })

   if not Options.flushEdges then
      self.bkgd.stroke      = gui.colours['widgetStroke']
      self.bkgd.strokeWidth = STROKE_WIDTH
      self.bkgd.roundX      = STROKE_WIDTH * 2
      self.bkgd.roundY      = STROKE_WIDTH * 2
   end

   self._textClip = self.inputViewport.new('VectorViewport', {
      cursor = (function()
         if self.allowCustom then return 'text' end
      end)(),
      x=STROKE_WIDTH, y=STROKE_WIDTH, xOffset=self.iconRender.width + MARGIN + MARGIN, yOffset=STROKE_WIDTH, overflow=VOF_HIDDEN
   })

   local defaultText = Options.text
   if not Options.allowCustom then
      defaultText = Options.items[1].item
   end

   self.text = self._textClip.new('VectorText', {
      x         = 4,
      y         = FONT_HEIGHT + math.floor((BOX_HEIGHT - FONT_HEIGHT - STROKE_WIDTH - STROKE_WIDTH) * 0.5),
      face      = gui.fonts.widget.face,
      fontSize  = string.format('%.2fpt', gui.fonts.widget.size),
      fill      = gui.colours['widgetText'],
      string    = defaultText,
      lineLimit = 1,
      textFlags = (function()
         local flags = 0
         if self.allowCustom then
            flags = bit.bor(flags, VTXF_EDITABLE)
         end
         return flags
      end)()
   })

   if Options.selected then self.text.mtSelectArea(0, 20000) end

   self.viewport.mtSubscribeFeedback(bit.bor(FM_HAS_FOCUS, FM_CHILD_HAS_FOCUS, FM_LOST_FOCUS), function(Viewport, Event)
      if (Event == FM_LOST_FOCUS) then
         self.bkgd.stroke = gui.colours['widgetStroke']
         if self.events.lostFocus then self.events.lostFocus(self) end
         if self.allowCustom then
            reportFeedback(self)
         end

         self.menu.hide()
      else
         self._lastGoodInput = self.text.string
         if self.disabled then
            self.bkgd.stroke = gui.colours['widgetStroke']
         else
            self.bkgd.stroke = gui.colours['widgetStrokeFocus']
            if self.events.focus then self.events.focus(self) end
         end
      end

      Viewport.acDraw()
   end)

   self._textClip.mtSubscribeKeyboard(function(Viewport, Qualifiers, Value, Unicode)
      if bit.band(Qualifiers, KQ_PRESSED) == 0 then return end

      if (Value == KEY_ENTER) or (Value == KEY_NP_ENTER) or ((not self.allowCustom) and (Value == KEY_SPACE)) then
         toggleMenu(self)
         if self.allowCustom then
            reportFeedback(self)
         end
      end
   end)

   self.inputViewport.mtSubscribeInput(JTYPE_BUTTON, function(Viewport, Msg)
      repeat
         if (Msg.type == JET_LMB) and (Msg.value > 0) then
            toggleMenu(self)
         end
         Msg = Msg.next
      until Msg == nil
   end)

   self.menu = gui.menu({
      relative  = self.viewport,
      client    = self.inputViewport,
      style     = 'list',
      config    = Options.items,
      lineLimit = 8,
      feedback = function(Menu, Item)
         self.text.string = Item.item
         reportFeedback(self)
         self.viewport.acDraw()
      end
   })

   if self.unlockMenuWidth then -- Set combobox size to the width of the menu
      self.viewport.width = self.menu.surface.width + self.labelWidth
   end

   if self.events.show then self.events.show(self) end

   return self
end
