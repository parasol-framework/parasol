--[[
Internal script for combobox drop-down menus.
--]]

   require 'common'
   require 'gui'
   include 'display'

   if not mGfx then mGfx = mod.load('display') end

local ITEM_SPACING = 1.2

gui.dropdown = function(Options)
   local self = { -- Public variables
      surface  = nil,
      timeShow = 0,
      timeHide = 0,
      visible  = false,
      client   = Options.client,
      feedback = Options.feedback,
      x        = nz(Options.x, 0),
      y        = nz(Options.y, 0),
      relative = Options.relative,
      items    = { }
   }

   local function initVectorScene()
      local GAP_X = 6
      local showIcons = nz(Options.showIcons, true)
      local textX = GAP_X

      if showIcons then
         local iconsPresent = false
         for _, item in ipairs(Options.config) do
            if item['icon'] then
               iconsPresent = true
               textX = 34
            end
         end
      end

      -- To use the clip, set the 'mask' field of any drawable vector.
      self.clip = self.scene.new('VectorClip', { units='BoundingBox' })
      local clipRect = self.clip.viewport.new('VectorRectangle', {
         x = 1.5, y = 1.5, roundX = 3, roundY = 3, width = 1, height = 1
      })

      self.viewport.new('VectorRectangle', {
         name = 'bkgd_rect', fill = gui.style.dropdown.bkgd,
         x = 1.5, y = 1.5, roundX = 3, roundY = 3, width = 1, height = 1,
         resizeEvent = function(Viewport, Vector, X, Y, Width, Height)
            Vector.width  = Width - (Vector.x * 2)
            Vector.height = Height - (Vector.y * 2)
            clipRect.width  = Width - (Vector.x * 2)
            clipRect.height = Height - (Vector.y * 2)
         end
      })

      self.viewport.new('VectorRectangle', { -- Border must be the most foregound
         name = 'menu_border', stroke = gui.style.dropdown.stroke,
         strokeWidth = 1.5, x = 1.5, y = 1.5, roundX = 3, roundY = 3, width = 1, height = 1,
         resizeEvent = function(Viewport, Vector, X, Y, Width, Height)
            Vector.width  = Width - (Vector.x * 2)
            Vector.height = Height - (Vector.y * 2)
         end
      })

      self.items = { }
      local widestItem = 0
      local widestKey = 0
      local y = 9
      for _, item in ipairs(Options.config) do
         if item['item'] then
            local mi = { y=y, config=item }
            local vText = self.viewport.new('VectorText', {
               x        = textX,
               face     = gui.fonts.menu.face,
               fontSize = string.format('%.2fpt', gui.fonts.menu.size),
               fill     = gui.style.page.text,
               align    = 'left',
               string   = item['item']
            })

            local err, bx, by, bw, bh = vText.mtGetBoundary(0)

            mi.text = vText
            mi.textY = y + ((vText.lineSpacing + vText.displaySize) * 0.5)

            if bw > widestItem then widestItem = bw end

            local icon_size = vText.displayHeight + vText.descent

            if showIcons and item['icon'] then
               catch(function()
                  local svgGroup = self.viewport.new('VectorViewport', {
                     x=8, y=y, width=icon_size, height=icon_size
                  })
                  local svg = obj.new('svg', { target=svgGroup, path='icons:' .. item['icon'] .. '.svg' })
                  gui.applyFill(svgGroup, 'rgb(80,80,120,255)')
                  mi.svgIcon = svgGroup
               end)
            end

            vText.y = mi.textY
            mi.height = vText.lineSpacing * ITEM_SPACING
            y = y + mi.height

            table.insert(self.items, mi)
         end
      end

      self.surface.width  = textX + widestItem + (GAP_X * 3) + widestKey + GAP_X
      self.surface.height = y
   end

   -- toggle() alternates the visible state of the menu.  A TimeLapse is supported so that rapid changes to
   -- menu visibility can be avoided.

   local lastTime = 0
   self.toggle = function(TimeLapse)
      local timelapse
      if TimeLapse and (TimeLapse >= 0) then
         timelapse = TimeLapse * 1000
      else
         timelapse = 5000
      end

      local currentTime = mSys.PreciseTime()
      if self.timeShow > self.timeHide then -- Hide the menu
         if (currentTime - self.timeShow >= timelapse) then self.hide() end
         lastTime = currentTime
         return 0
      else
         if (currentTime - self.timeHide >= timelapse) then self.show() end
         lastTime = currentTime
         return 1
      end
   end

   self.selectItem = function()

   end

   self.getItem = function()

   end

   self.hide = function()
      self.surface.acHide()
      self.timeHide = mSys.PreciseTime()
   end

   self.show = function()
      local surface = self.surface
      if bit.band(surface.flags, RNF_VISIBLE) != 0 then return end

      if self.relative then
         -- Correct the position of the menu according to the relative vector that it is offset from.

         local err, target = mGfx.GetSurfaceInfo(self.relative.scene.surface)
         if err == ERR_Okay then
            local rel = { absX = target.absX, absY = target.absY }
            local target = { absX = 0, absY = 0, height = 4096 }

            if Options.target then
               local err, target = mGfx.GetSurfaceInfo(Options.target)
               if err == ERR_Okay then
                  target.absX   = target.absX
                  target.absY   = target.absY
                  target.height = target.height
               end
            else
               local err, display = mGfx.GetDisplayInfo(0)
               if err == ERR_Okay then
                  target.height = display.height
               end
            end

            local x = rel.absX + self.x - target.absX
            local y = rel.absY + self.y - target.absY

            if lReverseY then
               y = rel.absY + nz(Options.y, 0) - target.absY - surface.height
            end

            if y + surface.height > target.height then
               y = y - surface.height - nz(Options.y, 0)
            end

            surface.acMoveToPoint(x, y, 0, bit.bor(MTF_X, MTF_Y))
         end
      end

      self.surface.acShow()
      self.surface.acMoveToFront()
      self.timeShow = mSys.PreciseTime()
   end

   local function highlightItem(Item)
      if Item == self.hItem then
         return
      elseif Item then
         if Item.lineBreak or Item.disabled then
            return
         end
      end

      if self.hItem then -- Redraw the previously highlighted item
         self.hItem.text.fill = gui.style.page.text
         self.surface.mtScheduleRedraw()
         self.hItem = nil
      end

      self.hItem = Item

      if Item then -- Draw the newly highlighted area
         Item.text.fill = 'rgb(180,0,0)'
         self.surface.mtScheduleRedraw()
      end
   end

   -- Main entry point --

   if not Options.config then error('A config value is required to define the Menu items') end

   self.surface = obj.new('surface')
   self.surface.name       = 'menu'
   self.surface.width      = nz(Options.width, 400)
   self.surface.parent     = Options.target
   self.surface.flags      = bit.bor(RNF_STICK_TO_FRONT, RNF_COMPOSITE)
   self.surface.x          = -10000
   self.surface.y          = -10000
   self.surface.windowType = 'NONE'
   self.surface.height     = 400
   if self.surface.init() != ERR_Okay then error('Failed to initialise surface.') end

   self.scene = obj.new('VectorScene', { flags=VPF_RESIZE, surface=self.surface })
   self.viewport = self.scene.new('VectorViewport', { })

   self.surface.subscribe('free', function(Surface, Args)
      self.surface = nil
   end)

   self.surface.subscribe('hide', function(Surface, Args)
      self.visible = false
      self.timeHide = mSys.preciseTime()
   end)

   self.surface.subscribe('show', function(Surface, Args)
      self.visible = true
      self.timeShow = mSys.preciseTime()

      -- Keyboard support requires a client reference to grab input from.

      if self.client and (not self._subscribedKb) then
         if self.client.mtSubscribeKeyboard(function(Viewport, Qualifiers, Value, Unicode)
            if not self.visible then
               self._subscribedKb = false
               check(ERR_Terminate)
            end

            if bit.band(Qualifiers, KQ_PRESSED) == 0 then return end
            if Value == KEY_UP then
            elseif Value == KEY_DOWN then

            elseif Value == KEY_RETURN then

            end
         end) == ERR_Okay then
            self._subscribedKb = true
         end
      end
   end)

   self.viewport.mtSubscribeInput(bit.bor(JTYPE_MOVEMENT, JTYPE_BUTTON, JTYPE_CROSSING), function(Viewport, Events)
      local ev = Events
      while ev do
         if ev.type == JET_BUTTON_1 then
            if ev.value == 1 then
               if self.hItem then -- Menu item activated
                  if self.hItem.config.feedback then
                     self.hItem.config.feedback(self, self.hItem.config)
                  end
                  if self.feedback then
                     self.feedback(self, self.hItem.config)
                  end
                  self.surface.acHide()
               end
            end
         elseif ev.type == JET_ABS_XY then
            local highlightFound = false
            for _, item in pairs(self.items) do
               if not item.lineBreak then
                  if (ev.y >= item.y) and (ev.y < item.y + item.height) then
                     if self.hItem != item then
                        highlightItem(item)
                     end
                     highlightFound = true
                     break
                  end
               end
            end

            -- Remove existing menu highlighting if the cursor is no longer positioned over a highlight-able item.

            if not highlightFound and self.hItem then
               highlightItem(nil)
            end
         end

         ev = ev.next
      end
   end)

   initVectorScene()

   return self
end
