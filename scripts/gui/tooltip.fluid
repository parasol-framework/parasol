--[[
To create a tool tip:

   local tip = gui.tooltip({ Options... })

Valid options to use when creating the dialog are as follows:

   text: The text to display inside the tool-tip
   icon: Optional icon to display alongside the text.

The surface representing the tooltip is readable from the 'surface' field.  Early termination of the tooltip
is possible by calling the free method.
--]]

   require 'common'

   if (gui == nil) then gui = { } end

local FONT_FACE = 'Open Sans'
local FONT_SIZE = 11

gui.tooltip = function(Options)
   local self = { } -- Public variables

   self.free = function()
      self.surface.acFree()
      table.clear(self)
   end

   local ptr = obj.find('systempointer')

   self.surface = obj.new('surface', {
      name = 'rgnTip',
      x = ptr.x + 6, y = ptr.y, width = 300,
      parent = 0, windowType = 'none',
      flags = bit.bor(RNF_STICK_TO_FRONT, RNF_COMPOSITE)
   })

   self.scene = self.surface.new('VectorScene', { flags=VPF_RESIZE, surface=self.surface })

   self.viewport = self.scene.new('VectorViewport', { })

   self.box = self.viewport.new('VectorRectangle', {
      x = 1, y = 1,
      height = '100%', width = '100%',
      stroke = '#606040', fill = '#ffffe0',
      strokeWidth = 2,
      roundX = 4, roundY = 4,
      resizeEvent = function(Viewport, Vector, X, Y, Width, Height)
         Vector.width  = Width - (Vector.x * 2)
         Vector.height = Height - (Vector.y * 2)
      end
   })

   self.text = self.viewport.new('VectorText', {
      x        = FONT_SIZE,
      string   = Options.text,
      fill     = 'rgb(0,0,0)',
      flags    = '!wordwrap',
      face     = FONT_FACE,
      fontSize = string.format('%.2fpt', FONT_SIZE),
   })

   self.surface.height = (FONT_SIZE*1.5) + self.text.fontSize
   self.surface.y = ptr.y - self.surface.height
   self.text.y = math.floor((self.viewport.height * 0.5) + (self.text.font.height * 0.5))

   -- This code segment attaches to the surface and terminates it when the pointer is moved by the user.

   self.surface.new('fluid', { name='flTip', _surface=self.surface.id, statement=[[
      include 'display'
      local surface = obj.find(arg('surface'))
      if (surface != nil) then
         input.subscribe(JTYPE_MOVEMENT, nil, 0, function(Input, Message)
            Input.unsubscribe()
            surface.acFree()
         end)
      end
   ]] }).acActivate()

   -- Reduce the width of the tooltip if the text is short.

   if (self.surface.width > self.text.textWidth + (FONT_SIZE*2)) then
      self.surface.width = (FONT_SIZE*2) + self.text.textWidth
   end

   -- Adjust the position of the tool tip so that it fits on the screen.
--[[
   if (systemSurface != nil) then
      if (self.surface.right > systemSurface.width) then
         self.surface.x = ptr.x - self.surface.width
      end
   end
--]]

   if (self.surface.y < 0) then
      self.surface.y = ptr.y + 20
   end

   self.surface.acShow()
   self.surface.detach()

   return self
end

