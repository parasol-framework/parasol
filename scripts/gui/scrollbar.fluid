--[[
Documentation is available in the Parasol Wiki.
--]]

   require 'common'
   require 'gui'

   local lStyle
   if (mSys.AnalysePath('style:scrollbar.fluid') == ERR_Okay) then
      lStyle = loadFile('style:scrollbar.fluid')
   else
      lStyle = loadFile('styles:default/scrollbar.fluid')
   end

gui.scrollbar = function(Options)
   local self = { } -- Public variables
   local lTarget   = Options.target
   local lPage     = Options.page
   local lView     = Options.view
   local lBreadth  = nz(Options.breadth, 16)
   local lPageMode = 'fixed'
   local lMinWidth = 0

   local function calcSlider(ViewLength, PageLength, HostLength, Position)
      local slider_size = HostLength * (ViewLength / PageLength)

      if (PageLength <= ViewLength) then -- Hide the scrollbar if the page is smaller than the view
         return 0, 0
      end

      local offset
      local min_size = 20
      if (slider_size < min_size) then -- Fixed slider calculation
         slider_size = min_size
         local scale = (PageLength - ViewLength) / (HostLength - min_size)
         offset = Position / scale
         if (slider_size + offset > HostLength) then
            offset = HostLength - slider_size
            if (offset < 0) then offset = 0 end
            if (slider_size + offset) > HostLength then
               slider_size = HostLength
            end
         end
      else -- Proportional slider calculation
         if (Position + ViewLength) == PageLength then
            offset = HostLength - slider_size
         else
            offset = (Position * HostLength) / PageLength
         end
         if (offset < 0) then offset = 0 end
      end

      if (slider_size + offset) > HostLength then
         slider_size = HostLength - offset
      end

      return offset, slider_size
   end

   -- Reading the position of the page & view, recompute the position of the slider.

   local function recalcSlidersFromView()
      if self.vbar then
         self.vbar.viewport.acMoveToFront()

         local offset, slider_size = calcSlider(lView.height, lPage.height, self.vbar.sliderHostVP.height, -lPage.y)
         if (offset != self.vbar.slider.offset) or (slider_size != self.vbar.slider.size) then
            self.vbar.slider.offset   = offset
            self.vbar.slider.size     = slider_size
            self.vbar.sliderVP.y      = offset
            self.vbar.sliderVP.height = slider_size

            if (slider_size <= 12) then
               self.vbar.viewport.visibility = VIS_HIDDEN
               lView.xOffset = 0
               if self.hbar then self.hbar.viewport.xOffset = 0 end
            else
               self.vbar.viewport.visibility = VIS_VISIBLE
               lView.xOffset = self.vbar.sliderVP.width
               if self.hbar then self.hbar.viewport.xOffset = lBreadth end
            end

            lStyle.arrange(self.vbar)
         end
      end

      if self.hbar then
         self.hbar.viewport.acMoveToFront()

         local offset, slider_size = calcSlider(lView.width, lPage.width, self.hbar.sliderHostVP.width, -lPage.x)
         if (offset != self.hbar.slider.offset) or (slider_size != self.hbar.slider.size) then
            self.hbar.slider.offset   = offset
            self.hbar.slider.size     = slider_size
            self.hbar.sliderVP.x      = offset
            self.hbar.sliderVP.width  = slider_size

            if (slider_size <= 12) then
               self.hbar.viewport.visibility = VIS_HIDDEN
               lView.yOffset = 0
            else
               self.hbar.viewport.visibility = VIS_VISIBLE
               lView.yOffset = self.hbar.sliderVP.height
            end

            lStyle.arrange(self.hbar)
         end
      end

      lTarget.acDraw()
   end

   local function createScrollbar(Direction)
      local bar

      if (Direction == 'V') then
         local vp = lTarget.new('VectorViewport', { y = 0, xOffset = 0, yOffset = 0, width = lBreadth, overflow = VOF_HIDDEN })

         bar = vp.state()
         bar.viewport  = vp
         bar.direction = 'V'

         lStyle.background(bar, bar.viewport)

         bar.negVP = vp.new('VectorViewport', { width = lBreadth, height = lBreadth, overflow = VOF_HIDDEN })
         bar.posVP = vp.new('VectorViewport', { yOffset = 0, width = lBreadth, height = lBreadth, overflow = VOF_HIDDEN })
         bar.sliderHostVP = vp.new('VectorViewport', { y = lBreadth, width = '100%', yOffset = lBreadth, overflow = VOF_HIDDEN })
         bar.sliderVP = bar.sliderHostVP.new('VectorViewport', { width = lBreadth, height = bar.sliderHostVP.height, overflow = VOF_HIDDEN })

         -- Respond to the user dragging the slider.  Moving the page is all that is necessary; this
         -- will result in downstream callbacks making the necessary updates.

         bar.sliderVP.dragCallback = function(Viewport, X, Y)
            local slider_height = Viewport.height
            local host_height   = self.vbar.sliderHostVP.height
            if (Y < 0) then Y = 0 end
            if (Y + slider_height > host_height) then Y = host_height - slider_height end
            if (Viewport.y == Y) then return end

            if (Y != self.vbar.slider.offset) or (slider_height != self.vbar.slider.size) then
               local pct_pos = Y / (host_height - slider_height)
               lPage.y = -math.floor((lPage.height - lView.height) * pct_pos)
               lTarget.acDraw()
            end
         end
      else
         local vp = lTarget.new('VectorViewport', { x = 0, xOffset = 0, yOffset = 0, height = lBreadth })
         if self.vbar and (self.vbar.viewport.visibility == VIS_VISIBLE) then vp.xOffset = lBreadth end

         bar = vp.state()
         bar.viewport  = vp
         bar.direction = 'H'

         lStyle.background(bar, bar.viewport)

         bar.negVP = vp.new('VectorViewport', { width = lBreadth, height = lBreadth, overflow = VOF_HIDDEN })
         bar.posVP = vp.new('VectorViewport', { xOffset = 0, width = lBreadth, height = lBreadth, overflow = VOF_HIDDEN })
         bar.sliderHostVP = vp.new('VectorViewport', { x = lBreadth, height = '100%', xOffset = lBreadth, overflow = VOF_HIDDEN })
         bar.sliderVP = bar.sliderHostVP.new('VectorViewport', { width = bar.sliderHostVP.height, height = lBreadth, overflow = VOF_HIDDEN })

         bar.sliderVP.dragCallback = function(Viewport, X, Y)
            local slider_width = Viewport.width
            local host_width   = self.hbar.sliderHostVP.width
            if (X < 0) then X = 0 end
            if (X + slider_width > host_width) then X = host_width - slider_width end
            if (Viewport.x == X) then return end

            if (X != self.hbar.slider.offset) or (slider_width != self.hbar.slider.size) then
               local pct_pos = X / (host_width - slider_width)
               lPage.x = -math.floor((lPage.width - lView.width) * pct_pos)
               lTarget.acDraw()
            end
         end
      end

      lStyle.negButton(bar, bar.negVP)
      lStyle.posButton(bar, bar.posVP)
      lStyle.slider(bar, bar.sliderVP)

      -- Capture user interactivity within the bar area.

      bar.sliderHostVP.mtSubscribeInput(bit.bor(JTYPE_BUTTON, JTYPE_REPEATED),
         function(Viewport, Msg)
            repeat
               if (Msg.type == JET_LMB) and (Msg.value > 0) then
                  if (bar.direction == 'V') then
                     if (Msg.y < bar.sliderVP.y) then
                        self.scrollPage(0, (lView.height * 0.9))
                     elseif (Msg.y > bar.sliderVP.y + bar.sliderVP.height) then
                        self.scrollPage(0, -(lView.height * 0.9))
                     end
                  else
                     if (Msg.x < bar.sliderVP.x) then
                        self.scrollPage((lView.width * 0.9), 0)
                     elseif (Msg.x > bar.sliderVP.x + bar.sliderVP.width) then
                        self.scrollPage(-(lView.width * 0.9), 0)
                     end
                  end
               end
               Msg = Msg.next
            until Msg == nil
         end)

      bar.negVP.mtSubscribeInput(bit.bor(JTYPE_BUTTON, JTYPE_REPEATED),
         function(Viewport, Msg)
            repeat
               if (Msg.type == JET_LMB) then
                  if (Msg.value > 0) then
                     if (bar.direction == 'V') then
                        self.scrollPage(0, (lView.height * 0.10))
                     else
                        self.scrollPage((lView.width * 0.10), 0)
                     end
                  end

                  lStyle.negButtonPress(bar, Msg.value)
               end
               Msg = Msg.next
            until Msg == nil
         end)

      bar.posVP.mtSubscribeInput(bit.bor(JTYPE_BUTTON, JTYPE_REPEATED),
         function(Viewport, Msg)
            repeat
               if (Msg.type == JET_LMB) then
                  if (Msg.value > 0) then
                     if (bar.direction == 'V') then
                        self.scrollPage(0, -(lView.height * 0.10))
                     else
                        self.scrollPage(-(lView.width * 0.10), 0)
                     end
                  end

                  lStyle.posButtonPress(bar, Msg.value)
               end
               Msg = Msg.next
            until Msg == nil
         end)

      return bar
   end

   self.scrollPage = function(DeltaX, DeltaY)
      local current_x = lPage.x
      local current_y = lPage.y
      local x = current_x + DeltaX
      local y = current_y + DeltaY

      if (x > 0) or (lPage.width < lView.width) then
         x = 0
      elseif (x + lPage.width < lView.width) then
         x = -lPage.width + lView.width
      end

      if (y > 0) or (lPage.height < lView.height) then
         y = 0
      elseif (y + lPage.height < lView.height) then
         y = -lPage.height + lView.height
      end

      if (x != current_x) or (y != current_y) then
         lPage.x = math.floor(x)
         lPage.y = math.floor(y)
         lTarget.acDraw()
      end
   end

   -- NB: As a client you can set the page height and width directly if no mode change is required.

   self.setFixedPageSize = function(Width, Height)
      lPageMode = 'fixed'
      if (Width != lPage.width) then lPage.width = Width end
      if (Height != lPage.height) then lPage.height = Height end
   end

   self.setDynamicPageSize = function(NominalWidth, MinWidth, Height)
      lPageMode = 'dynamic'
      lMinWidth = nz(MinWidth, 0)

      if (NominalWidth < MinWidth) then
         NominalWidth = MinWidth
      end

      if (NominalWidth >= lView.width) then
         lPage.width  = NominalWidth
         lPage.height = Height
      else
         lPage.width  = '100%'
         lPage.height = Height
      end
   end

   self.changeViewport = function(View, Page)
      lView = View
      lPage = Page
      recalcSlidersFromView()
   end

   -- Main entry point

   if (not lTarget) then error('A target viewport is required.') end
   if (not lPage) then error('A page setting is required.') end
   if (not lView) then error('A view setting is required.') end
   if (lView.id == lTarget.id) then error('The view and target cannot be the same.') end
   if (lPage.parent.id != lView.id) then error('The page is not a child of the view.') end
   if (lView.overflow != VOF_HIDDEN) then error('The overflow setting for the view must be HIDDEN.') end
   if (lView.xOffset != 0) then error('The XOffset of the view must be set to zero.') end
   if (lView.yOffset != 0) then error('The YOffset of the view must be set to zero.') end

   if (Options.direction == 'all') then Options.direction = nil end

   if (Options.direction == 'vertical') or (Options.direction == nil) then
      self.vbar = createScrollbar('V')
   end

   if (Options.direction == 'horizontal') or (Options.direction == nil) then
      self.hbar = createScrollbar('H')
   end

   -- The slider and possibly the page need to be repositioned whenever the view is resized.

   lView.mtSubscribeFeedback(FM_PATH_CHANGED, function(Viewport, Event)
      local px = lPage.x
      local py = lPage.y
      local pw = lPage.width

      if (lPageMode == 'dynamic') then
         local nw = lMinWidth
         if (nw < lView.width) then -- Maximise page width in dynamic mode
            if (px != 0) then
               px = 0
               lPage.x = 0
            end
            nw = lView.width
         end
         if (pw != nw) then
            lPage.width = nw
            pw = nw
         end
      end

      if (px + pw < lView.width) then
         local x = lView.width - pw
         if (x > 0) then x = 0 end
         if (px != x) then lPage.x = math.floor(x) end
      end

      if (py + lPage.height < lView.height) then
         local y = lView.height - lPage.height
         if (y > 0) then y = 0 end
         if (py != y) then lPage.y = math.floor(y) end
      end

      recalcSlidersFromView()
   end)

   lPage.mtSubscribeFeedback(FM_PATH_CHANGED, function(Viewport, Event)
      recalcSlidersFromView()
   end)

   lPage.mtSubscribeInput(JTYPE_EXT_MOVEMENT, function(Viewport, Events)
      local ev = Events
      while (ev) do
         if (ev.type == JET_WHEEL) then
            local length = lPage.height - lView.height
            if (length > 0) then
               if (length > lView.height) then length = lView.height end
               self.scrollPage(0, -ev.value * length * 0.06)
            end
         end
         ev = ev.next
      end
   end)

   return self
end
