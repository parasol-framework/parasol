--[[
To create a dialog box:

   gui.dialog.font({ Options... })

If the dialog box is modal, the call will not return until the user has responded to the dialog.

To receive feedback from the dialog box, set the feedback option with a function that follows this prototype:

   function feedback(Dialog, Font)

Whereby Dialog refers to the dialog object and Font refers to font meta data.  In the event that the dialog is
cancelled, the Font is set to nil.

Note that the dialog box should be managed as a dynamic resource, i.e. created as necessary and deallocated once the
user has responded (i.e. set all references to nil).  Retaining dialog boxes in memory will provide no descernible
speed improvement to the user.

Valid options to use when creating the dialog are as follows:

   popOver:    Place the dialog window over the referenced surface.
   target:     Open the dialog window within the referenced surface.
   modal:      Set to true if the dialog box needs to be modal (prevents interaction with other windows).
   okText:     Text to display in the OK button.
   cancelText: Text to display in the Cancel button.
   path:       The initial selection path.
   feedback:   Refers to a Fluid function that will receive the user's response to the dialog.
   style:      Preset the font's style, e.g. 'Bold Italic'.  The default is 'Regular'.
   face:       Preset the font's face and additional details.  Defaults to 'Noto Sans'.
               The full format is "Face:Size:Style:Colour"
   example:    Overrides the example text normally printed in the dialog.
   colour:     Change the default font colour to something other than black.

--]]

   require 'common'
   require 'gui/listview'
   include 'display'

   if (gui == nil) then gui = { } end
   if (gui.dialog == nil) then gui.dialog = { } end

gui.dialog.font = function(Options)
   local mFont = mod.load('font')

   local self = { -- Public variables
      windowID    = nil,
      face        = 'Noto Sans',
      pointSize   = 12,
      style       = 'Regular',
      compactFace = nil,
      colour      = { r=0, g=0, b=0, a=255 }
   }

   local lLongText = [[
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas varius dignissim sapien eu pellentesque. Ètiam libero velit, vehicula nec ante non, sodales ultricies metus. Phasellus commodo dolor turpis. Âliquam sed pellentesque magna, non luctus sapien. Ètiam molestie dui nibh, nec finibus velit molestie non. Ut feugiat maximus elit nec mattis. Suspendisse porta vestibulum faucibus. Sed iaculis placerat justo id lobortis. Interdum et malesuada fames ac ante ipsum primis in faucibus.

Morbi tincidunt varius ante sit amet pulvinar. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla ante orci, faucibus non odio viverra, tempus rutrum ex. Mauris sit amet hendrerit quam. Vestibulum tincidunt magna suscipit ultrices congue. Aliquam et blandit tellus, ut porta libero. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Cras vulputate congue eros sed placerat. Nunc eleifend nec felis sit amet fermentum. Cras suscipit ullamcorper eros, id consectetur quam blandit ac.

Suspendisse sed diam ut sem euismod accumsan commodo vehicula sapien. Nullam nisl augue, suscipit vitae posuere sit amet, porttitor et ex. Duis at elit pellentesque, placerat risus in, placerat mauris. Nam in metus sed dui iaculis aliquam sed ut sem. In varius euismod quam, sed lobortis sem. Aliquam nec dui magna. Suspendisse lobortis enim vitae vestibulum accumsan. Pellentesque ac tincidunt est. Ut porta, arcu eu ornare placerat, urna urna venenatis est, at imperdiet lectus justo vel neque. Sed congue dolor eget erat dignissim sollicitudin. Aliquam mollis massa in est gravida faucibus.

Fusce auctor metus egestas commodo laoreet. Morbi sed venenatis augue. Maecenas non nisi vehicula, aliquam turpis in, mattis lectus. Dõnec magna metus, tempor fringilla metus ac, ultricies efficitur ante. Quisque at semper elit. Ut in purus in est venenatis interdum. Curabitur a dui mauris. Suspendisse potenti. Suspendisse tempus dictum ipsum, id condimentum nulla fermentum sed. Etiam mattis ligula lacus, a tempor felis sodales fermentum. Donec in risus vulputate, tempor neque vel, volutpat mauris. Integer placerat a nunc a aliquet. Phasellus quis porta leo. Etiam et arcu ex. Nunc dictum at ipsum eu dapibus.

Ĉras metus mi, ultricies nec blandit condimentum, congue dapibus libero. Nulla eget ornare ante, ac efficitur turpis. Proin venenatis eget sapien vitae volutpat. In interdum id ante in aliquet. Quisque convallis lacus in gravida fringilla. Nam porta pellentesque turpis, ut efficitur neque suscipit vel. Morbi vitae consequat nisl. Donec turpis lorem, dapibus eget scelerisque quis, porttitor bibendum leo.
]]

   local lWindow, lFonts, vwSize, vwStyle, vwFace
   local lShortText = 'The Quick Brown Fox Jumped Over The Lazy Dog'
   local lOptions   = Options
   local lSizes     = { 6, 8, 10, 12, 14, 18, 24, 30, 36, 42, 50, 70, 90, 100, 120 }
   local WIDGET_GAP = 6

   local function exampleMargin()
      return math.round(self.examplePage.width * 0.05)
   end

   local function sendFeedback(Accepted)
      local colour = self.colour.r .. ',' .. self.colour.g .. ',' .. self.colour.b .. ',' .. self.colour.a
      self.compactFace = self.face .. ':' .. self.pointSize .. ':' .. self.style .. ':' .. colour

      if (lOptions.feedback != nil) then
         lOptions.feedback(self, Accepted)
      end

      lWindow = nil
      return true
   end

   local function refreshGuidelines()
      if self.exampleText then
         local seq = ''
         local gap       = exampleMargin()
         local spacing   = self.exampleText.lineSpacing
         local pageWidth = self.examplePage.width
         local baseline  = self.exampleText.y

         local x1 = gap
         local x2 = pageWidth - gap
         for y = baseline, self.examplePage.height, spacing do
            seq = seq .. string.format('M%f,%f L%f,%f ', x1, y, x2, y)
         end
         self.guidelines.sequence = seq

         self.exampleText.inlineSize = x2 - x1
         self.exampleText.x = gap
      else
         self.guidelines.sequence = 'M-1,-1 Z'
      end
   end

   local function refreshExample()
      if not self.guidelines then
         self.guidelines = self.examplePage.new('VectorPath', { strokeWidth = 0.5, stroke = 'rgb(0,0,180,64)' })
      end

      local pageWidth = self.examplePage.width
      local gap = exampleMargin()

      if self.exampleText then
         self.exampleText.free()
         self.exampleText = nil
      end

      catch(function()
         self.exampleText = self.examplePage.new('VectorText', {
            x          = gap,
            fill       = 'rgb(0,0,0)',
            inlineSize = pageWidth - (gap * 2),
            face       = self.face,
            fontSize   = self.pointSize .. 'pt',
            fontStyle  = self.style,
            string     = lLongText,
            textFlags  = VTXF_RASTER
         })
      end,
      function()
         msg('Failed to create example text for ' .. self.face .. ' ' .. nz(self.style,'NIL'))
      end)

      if self.exampleText then
         self.exampleText.y = math.floor(gap + self.exampleText.displaySize)
      end

      refreshGuidelines()

      collectgarbage()
      self.viewport.acDraw()
   end

   -- Retrieve the system list of known installed fonts and convert it to a Lua table.

   local function getFonts()
      local err, list = mFont.GetList()
      if (list == nil) then error('Failed to retrieve list of fonts, error: ' .. mSys.GetErrorMsg(err)) end

      lFonts       = { }
      lFontsSorted = { }
      local font   = list
      local index  = 0
      while (font) do
         lFonts[font.name] = { }
         lFonts[font.name].order  = index
         lFonts[font.name].name   = font.name
         lFonts[font.name].alias  = font.alias
         lFonts[font.name].styles = string.split(font.styles, ',')
         lFonts[font.name].sizes  = font.points
         lFonts[font.name].hidden = font.hidden
         if nz(font.scalable) then
            lFonts[font.name].scalable = true
         end
         if not nz(font.hidden) then
            table.insert(lFontsSorted, lFonts[font.name])
         end
         index = index + 1
         font = font.next
      end
   end

   local function showFontSizes(List)
      local sizes = { }
      for _, v in ipairs(List) do
         table.insert(sizes, { id=v, name=v })
      end
      vwSize.loadItems(sizes)
   end

   -- Refresh the style list for the selected face

   local function showStyles(Face)
      local styles = { }
      if nz(lFonts[Face].alias) then Face = lFonts[Face].alias end
      local font_styles = nz(lFonts[Face].styles, { 'Regular' })
      for _, v in ipairs(font_styles) do
         table.insert(styles, { id=v, name=v })
      end
      vwStyle.loadItems(styles)
   end

   local function highlightSize(Size)
      if not Size then return end
      local selectSize = Size
      for _,v in ipairs(lSizes) do
         if v <= Size then
            selectSize = v
         else
            break
         end
      end

      vwSize.selectItems(function(Item)
         if Item.id == selectSize then return true end
      end)
   end

   getFonts()

   -- Disassemble any compact font face definition.

   if (lOptions.face) then
      local s = string.split(face, ':') -- FaceName, Size, Style, Colour
      if (s[1]) then lOptions.face = s[1] end
      if (s[2]) then lOptions.pointSize = s[2] end
      if (s[3]) then lOptions.style = s[3] end
      if (s[4]) then lOptions.colour = s[4] end
   end

   lWindow = gui.window({
      insideWidth  = 700,
      insideHeight = 600,
      minWidth     = 500,
      minHeight    = 400,
      maxWidth     = 1024,
      maxHeight    = 800,
      quit         = false,
      center       = true,
      popOver      = lOptions.popOver,
      parent       = lOptions.target,
      icon         = 'items/font',
      title        = nz(lOptions.title, 'Select a font'),
      modal        = nz(lOptions.modal, false),
      events = {
         close = function(Window)
            if (lOptions.feedback != nil) then
               lOptions.feedback(self, nil)
            end
            lWindow = nil
         end
      }
   })

   self.viewport = lWindow:clientViewport({
      resizeEvent = function(Window)
         refreshGuidelines()
      end
   })

   -- Okay and cancel buttons

   local footer = lWindow.margins.bottom

   lCancelButton = gui.button({
      target  = self.viewport,
      text    = nz(lOptions.cancelText, 'Cancel'),
      xOffset = WIDGET_GAP,
      yOffset = footer,
      icon    = 'items/cancel',
      events = {
         activate = function(Button)
            sendFeedback(false)
         end
      }
   })

   lOkayButton = gui.button({
      target  = self.viewport,
      text    = nz(lOptions.okText, 'OK'),
      xOffset = lCancelButton.viewport.width + (WIDGET_GAP * 2),
      yOffset = footer,
      icon    = 'items/checkmark',
      events = {
         activate = function(Button)
            sendFeedback(true)
         end
      }
   })

   footer = footer + lOkayButton.viewport.height + WIDGET_GAP

   -- Font example area

   self.exampleVP = self.viewport.new('VectorViewport', {
      x       = 210,
      y       = lWindow.margins.top,
      xOffset = lWindow.margins.right,
      yOffset = footer
   })

   self.exampleBkgd = self.exampleVP.new('VectorRectangle', {
      fill   = 'rgb(253,255,246)',
      stroke = 'rgb(0,0,0,64)',
      strokeWidth = 2,
      x      = 0,
      y      = 0,
      width  = '100%',
      height = '100%'
   })

   self.exampleView = self.exampleVP.new('VectorViewport', {
      x = 4, y = 4, xOffset = 4, yOffset = 4, overflow = VOF_HIDDEN
   })

   self.examplePage = self.exampleView.new('VectorViewport', {
      name='view_page', width='100%', height='100%'
   })

   refreshExample()

   -- Font size selection

   vwSize = gui.listView({
      x          = self.exampleVP.x - WIDGET_GAP - 60,
      yOffset    = footer,
      height     = 140,
      width      = 60,
      target     = self.viewport,
      style      = 'LongList',
      sensitive  = true,
      noIcons    = true,
      textAttrib = 'name',
      itemSelected = function(View, Reason, Item)
         local selection = Item.name
         self.pointSize = tonumber(selection)
         if (self.pointSize < 4) then
            self.pointSize = 4
         elseif (self.pointSize > 400) then
            self.pointSize = 400
         end
         collectgarbage()
         refreshExample()
      end
   })

   showFontSizes(lSizes)

   -- Font style selection

   vwStyle = gui.listView({
      x            = lWindow.margins.left,
      yOffset      = footer,
      height       = 140,
      width        = vwSize.viewport.x - WIDGET_GAP - lWindow.margins.left,
      target       = self.viewport,
      sensitive    = true,
      noIcons      = true,
      textAttrib   = 'name',
      itemSelected = function(View, Reason, Item)
         self.style = Item.name
         collectgarbage()
         refreshExample()
      end
   })

   footer = footer + vwStyle.viewport.height + WIDGET_GAP

   -- Available font faces

   vwFace = gui.listView({
      x            = lWindow.margins.left,
      y            = lWindow.margins.top,
      width        = self.exampleVP.x - WIDGET_GAP - lWindow.margins.left,
      yOffset      = footer,
      target       = self.viewport,
      sensitive    = true,
      textAttrib   = 'name',
      itemSelected = function(View, Reason, Item)
         if (lFonts[Item.name] == nil) then
            error('Font "' .. nz(Item.name,'NIL') .. '" not recognised.')
         end

         self.face = Item.name

         showStyles(Item.name)

         -- Highlight the correct style, trying to keep the current setting if possible.

         if self.style and lFonts[self.face] then
            local supported = false
            for _, v in ipairs(lFonts[self.face].styles) do
               if (v == self.style) then
                  supported = true
                  break
               end
            end

            if not supported then self.style = 'Regular' end
         else
            self.style = 'Regular'
         end

         vwStyle.selectItems(function(Item)
            if (Item.id == self.style) then return true end
         end)

         refreshExample()

         local sizes = lFonts[Item.name].sizes
         if (lFonts[Item.name].scalable) or (sizes == nil) or (#sizes == 0) then
            sizes = lSizes
         end

         showFontSizes(sizes)

         if (sizes[1] > self.pointSize) then self.pointSize = sizes[1] end
         highlightSize(self.pointSize)
      end
   })

   local faces = { }
   for _, font in ipairs(lFontsSorted) do
      local new_font = { id=font.name, name=font.name }
      if (font.scalable) then
         new_font.icon = 'items/font'
      else
         new_font.icon = 'layout/text_sans'
      end
      table.insert(faces, new_font)
   end
   vwFace.loadItems(faces)

   -- Preselect list items based on the preferences supplied by the client.

   vwFace.selectItems(function(Item)
      if Item.id == nz(lOptions.face, 'Noto Sans') then return true end
   end)

   vwStyle.selectItems(function(Item)
      if Item.id == nz(lOptions.style, 'Regular') then return true end
   end)

   highlightSize(self.pointSize)

   lWindow:moveToFront()
   lWindow:show()
   --vwFace.acFocus()

   return self
end

   -- This sub-routine is provided for languages other than Fluid to utilise the module.

   do
      local state = getExecutionState()
      if (state.inRequire != true) then
         local dlg = font.dialog({
            popOver    = arg('popOver'),
            target     = arg('target'),
            modal      = arg('modal'),
            okText     = arg('okText'),
            cancelText = arg('cancelText'),
            icon       = arg('icon')
         })

         return dlg.windowID
      end
   end
