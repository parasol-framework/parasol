--[[
The Menu class provides a convenient interface for creating and managing menus.

The following example illustrates typical usage:

   gui.menu({
      target = surface,
      x = 10, y = 10,
      config = {
         { item='New File', icon='items/file_new', qualifier='CTRL', key='N', feedback=itemClicked },
         { item='Open File', icon='office/documents', qualifier='CTRL', key='O', feedback=itemClicked }
      }
   })

Valid options to use when creating the menu are as follows:

  target:    Optional reference to a Surface that will contain the menu.  Viewports are not supported.
  config:    Required.  A list of items for configuring the content of the menu.
  client:    Optional vector deemed responsible for instantiating the menu.  Recommended to enable keyboard
             navigation for the user.
  x:         The x coordinate of the menu.
  y:         The y coordinate of the menu.
  width:     The preferred width of the menu, in pixels.
  popup:     Locks the position of the menu to the mouse pointer; also grabs the UI focus.
  style:     'menubar', 'list', 'popup'
  noTranslation: If true, do not translate menu text to the user's native language.
--]]

   require 'common'
   require 'gui'
   include 'display'

   if (not mFont) then mFont = mod.load('font') end
   if (not mGfx)  then mGfx = mod.load('display') end

local FONT_FACE = 'Open Sans'
local FONT_SIZE = 11
local MARGIN    = 6
local RIGHT_MARGIN = MARGIN

local function applyFill(Vector, Fill)
   while (Vector != nil) do
      if (Vector.fill != 'none') then
         Vector.fill = Fill
      end
      if (Vector.stroke != nil) then Vector.stroke = Fill end
      local child = Vector.child
      if (child != nil) then applyFill(child, Fill) end
      Vector = Vector.next
   end
end

gui.menu = function(Options)
   local self = { -- Public variables
      surface  = nil,
      rootMenu = true,
      reverseX = false,
      timeShow = 0,
      timeHide = 0,
      tipDelay = 500,
      visible  = false,
      client   = Options.client,
      feedback = Options.feedback,
      x        = nz(Options.x, 0),
      y        = nz(Options.y, 0),
      popup    = nz(Options.popup, false),
      relative = Options.relative,
      style    = nz(Options.style, 'popup'),
      items    = { }
   }

   local function initVectorScene()
      local GAP_X = 6

      local showIcons = nz(Options.showIcons, true)

      local textX = GAP_X

      if showIcons then
         local iconsPresent = false
         for _, item in ipairs(Options.config) do
            if item['icon'] then
               iconsPresent = true
               textX = 34
            end
         end
      end

      -- To use the clip, set the 'mask' field of any drawable vector.
      self.clip = self.scene.new('VectorClip', { units='BoundingBox' })
      local clipRect = self.clip.new('VectorRectangle', {
         x      = 1.5,
         y      = 1.5,
         roundX = 3,
         roundY = 3,
         width  = 1,
         height = 1
      })

      self.vg.new('VectorRectangle', {
         name   = 'bkgd_rect',
         fill   = 'rgb(240,240,240,255)',
         x      = 1.5,
         y      = 1.5,
         roundX = 3,
         roundY = 3,
         width  = 1,
         height = 1,
         resizeEvent = function(Viewport, Vector, X, Y, Width, Height)
            Vector.width  = Width - (Vector.x * 2)
            Vector.height = Height - (Vector.y * 2)
            clipRect.width  = Width - (Vector.x * 2)
            clipRect.height = Height - (Vector.y * 2)
         end
      })

      if showIcons and (self.style == 'menubar') or (self.style == 'popup') then
         self.vg.new('VectorRectangle', {
            name   = 'icon_bar',
            fill   = 'rgb(220,220,255,255)',
            x      = 0,
            y      = 0,
            width  = 30,
            height = '100%',
            mask   = self.clip
         })
      end

      self.vg.new('VectorRectangle', { -- Border must be the most foregound
         name   = 'menu_border',
         stroke = 'rgb(60,60,80,180)',
         strokeWidth = 1.5,
         x      = 1.5,
         y      = 1.5,
         roundX = 3,
         roundY = 3,
         width  = 1,
         height = 1,
         resizeEvent = function(Viewport, Vector, X, Y, Width, Height)
            Vector.width  = Width - (Vector.x * 2)
            Vector.height = Height - (Vector.y * 2)
         end
      })

      self.items = { }
      local widestItem = 0
      local widestKey = 0
      local y = 9
      for _, item in ipairs(Options.config) do
         if item['item'] then
            local mi = { y=y, config=item }
            local vText = self.vg.new('VectorText', {
               x        = textX,
               face     = FONT_FACE,
               fontSize = string.format('%.2fpt', FONT_SIZE),
               fill     = 'rgb(0,0,0)',
               align    = 'left',
               string   = item['item']
            })

            mi.text = vText
            mi.textY = y + vText.font.height + ((vText.font.maxHeight - vText.font.height)/2)

            itemWidth = mFont.StringWidth(vText.font, item['item'], -1)
            if (itemWidth > widestItem) then widestItem = itemWidth end

            local icon_size = vText.font.maxHeight

            if showIcons and item['icon'] then
               catch(function()
                  local svgGroup = self.viewport.new('VectorViewport', {
                     x=8, y=y, width=icon_size, height=icon_size
                  })
                  local svg = obj.new('svg', { target=svgGroup, path='icons:' .. item['icon'] .. '.svg' })
                  applyFill(svgGroup, 'rgb(80,80,120,255)')
                  mi.svgIcon = svgGroup
               end)
            end

            if item['key'] then
               local key = item['key']
               if item['qualifier'] then
                  key = item['qualifier'] .. ' + ' .. key
               end

               local vKey = self.vg.new('VectorText', {
                  x        = self.surface.width,
                  face     = FONT_FACE,
                  fontSize = string.format('%.2fpt', FONT_SIZE),
                  fill     = 'rgb(30,80,0,255)',
                  align    = 'right',
                  string   = key
               })
               vKey.y = y + vKey.font.height + ((vKey.font.maxHeight - vKey.font.height)/2)

               keyWidth = mFont.StringWidth(vKey.font, key, -1)
               if (keyWidth > widestKey) then widestKey = keyWidth end
               mi.keyText = vKey
            end

            vText.y = mi.textY
            mi.height = vText.font.maxHeight * 1.4
            y = y + mi.height

            table.insert(self.items, mi)
         end
      end

      self.surface.width  = textX + widestItem + (GAP_X * 3) + widestKey + GAP_X
      self.surface.height = y

      for _, item in pairs(self.items) do
         if item['keyText'] then
            item.keyText.x = self.surface.width - GAP_X
         end
      end
   end

   -- The toggle() method alternates the the visible state of the menu - for example, if the menu is hidden, it
   -- will show the menu.  A time-lapse feature is supported so that rapid changes to menu visibility can be avoided.
   -- For example, if the TimeLapse option is set to 10 milliseconds, the menu state will not change unless the
   -- specified amount of time has elapsed since the last toggle.

   local lastTime = 0
   self.toggle = function(TimeLapse)
      local timelapse
      if TimeLapse and (TimeLapse >= 0) then
         timelapse = TimeLapse * 1000
      else
         timelapse = 5000
      end

      local currentTime = mSys.PreciseTime()
      if (self.timeShow > self.timeHide) then -- Hide the menu
         if (currentTime - self.timeShow >= timelapse) then self.hide() end
         lastTime = currentTime
         return 0
      else
         if (currentTime - self.timeHide >= timelapse) then self.show() end
         lastTime = currentTime
         return 1
      end
   end

   self.selectItem = function()

   end

   self.getItem = function()

   end

   self.hide = function()
      self.surface.acHide()
      self.timeHide = mSys.PreciseTime()
   end

   self.show = function()
      local surface = self.surface
      if bit.band(surface.flags, RNF_VISIBLE) != 0 then return end

      self.reverseX = nz(Options.reverseX, false)

      if self.popup then
         local err, cursor_x, cursor_y = mGfx.getCursorPos()
         if (err == ERR_Okay) then
            local parent = { }

            local sp = surface.parent
            if sp then
               err, parentInfo = mGfx.GetSurfaceInfo(sp)
               if (err == ERR_Okay) then
                  parent.width  = parentInfo.width
                  parent.height = parentInfo.height
                  parent.absX   = parentInfo.absX
                  parent.absY   = parentInfo.absY
               else
                  error('Failed to analyse parent surface: ' .. mSys.GetErrorMsg(err))
               end
            else
               local err, scrInfo = mGfx.GetDisplayInfo(0)
               if err == ERR_Okay then
                  parent.width  = scrInfo.width
                  parent.height = scrInfo.height
                  parent.absX   = 0
                  parent.absY   = 0
               else
                  parent.absX   = 0
                  parent.absY   = 0
                  parent.width  = 0
                  parent.height = 0
               end
            end

            if parent.width and parent.height then
               -- Determine the position at which the pop-up menu will open at, relative to the parent surface.
               -- Notice that we don't want the menu to appear off the edge of the parent if we can help it.

               local x
               if self.reverseX then
                  x = cursor_x - parent.absX - 1 - surface.width + RIGHT_MARGIN
                  if (x < 0) then
                     x = 0
                     self.reverseX = false
                  end
               else
                  x = cursor_x - parent.absX - 1
                  if (x + surface.width > parent.width - 2) then
                     x = x - surface.width + RIGHT_MARGIN
                     self.reverseX = true
                  end
               end

               local y = cursor_y - parent.absY - 1
               if (y + surface.height > parent.height - 2) then
                  y = y - surface.height + surface.bottomMargin
               end

               surface.acMoveToPoint(x, y, 0, bit.bor(MTF_X, MTF_Y))
            end
         end
      elseif self.parentMenu then -- Display this menu relative to a parent menu in the hierarchy
--[[
         local parent = { x=0, y = 0, width = 0 }
         local parent = self.parentMenu
         if (parent.menuSurfaceID) then
            local err, info = mGfx.GetSurfaceInfo(parent.MenuSurfaceID)
            if err == ERR_Okay then
               parent.x = info.x
               parent.y = info.y
               parent.width = info.width
            end
         end
         parent.currentMenu = self

         local x = parent.x + parent.width - RIGHT_MARGIN
         if (self.reverseX) then
            x = parent.x - surface.width + RIGHT_MARGIN
            if x < 2 then
               x = 2
               self.reverseX = false
            end
         else
            SURFACEINFO *target
            if (Options.target) and (!mGfx.GetSurfaceInfo(Options.target, &target)) then
               -- A specific target surface is hosting the menu layer adjust the coordinate if necessary to keep
               -- it from being partially hidden.
               if x + surface.width >= target.width then
                  x = target.x - surface.width + RIGHT_MARGIN
                  self.reverseX = true
               end
            end
         end

         acMoveToPoint(surface, x, parent_y + self.VOffset, 0, MTF_X|MTF_Y)

         ensure_on_display(self)
--]]
      elseif self.relative then
         -- Correct the position of the menu according to the relative vector that it is offset from.

         local err, target = mGfx.GetSurfaceInfo(self.relative.scene.surface)
         if err == ERR_Okay then
            local rel = { absX = target.absX, absY = target.absY }
            local target = { absX = 0, absY = 0, height = 4096 }

            if Options.target then
               local err, target = mGfx.GetSurfaceInfo(Options.target)
               if (err == ERR_Okay) then
                  target.absX   = target.absX
                  target.absY   = target.absY
                  target.height = target.height
               end
            else
               local err, display = mGfx.GetDisplayInfo(0)
               if (err == ERR_Okay) then
                  target.height = display.height
               end
            end

            local x = rel.absX + self.x - target.absX
            local y = rel.absY + self.y - target.absY

            if lReverseY then
               y = rel.absY + nz(Options.y, 0) - target.absY - surface.height
            end

            if (y + surface.height > target.height) then
               if self.parentMenu then -- Child menu
                  y = y - surface.height --+ get_item_height() + self.vWhiteSpace
               else
                  y = y - surface.height - nz(Options.y, 0) --+ self.vWhiteSpace
               end
            end

            surface.acMoveToPoint(x, y, 0, bit.bor(MTF_X, MTF_Y))
         end
      end

      self.surface.acShow()
      self.surface.acMoveToFront()
      self.timeShow = mSys.PreciseTime()
   end

   local function highlightItem(Item)
      if Item == self.hItem then
         return
      elseif Item then
         if Item.lineBreak or Item.disabled then
            return
         end
      end

      if self.hItem then  -- Redraw the previously highlighted item
         self.hItem.text.fill = 'rgb(0,0,0)'
         self.viewport.acDraw()
         self.hItem = nil
      end

      self.hItem = Item

      if Item then -- Draw the newly highlighted area
         Item.text.fill = 'rgb(180,0,0)'
         self.viewport.acDraw()
      end
   end

   local function timer(Elapsed, CurrentTime)
      if (lCurrentItem) and nz(lCurrentItem.tip) then
         gui.tooltip({ text=lCurrentItem.tip })
      end
      self.tipTimer = nil
      check(ERR_Terminate)
   end

   -- Main entry point --

   if not Options.config then error('A config value is required to define the Menu items') end

   self.surface = obj.new('surface')
   self.surface.name       = 'menu'
   self.surface.width      = nz(Options.width, 200)
   self.surface.parent     = Options.target
   self.surface.flags      = bit.bor(RNF_STICK_TO_FRONT, RNF_COMPOSITE)
   self.surface.x          = self.x
   self.surface.y          = self.y
   self.surface.windowType = 'NONE'
   self.surface.height     = 40
   if (self.surface.init() != ERR_Okay) then error('Failed to initialise surface.') end

   self.scene = obj.new('VectorScene', { flags=VPF_RESIZE, surface=self.surface })
   self.viewport = self.scene.new('VectorViewport', { })
   self.vg = self.viewport.new('VectorGroup', { })

   self.surface.subscribe('free', function(Surface, Args)
      if self.tipTimer then mSys.UpdateTimer(self.tipTimer, 0) end
      self.surface = nil
   end)

   if self.popup then
      self.surface.subscribe('lostfocus', function(Surface, Args)
         self.surface.acHide()
      end)
   end

   self.surface.subscribe('hide', function(Surface, Args)
      self.visible = false
      self.timeHide = mSys.preciseTime()
   end)

   self.surface.subscribe('show', function(Surface, Args)
      if self.popup then
         self.surface.acFocus()
      end
      self.visible = true
      self.timeShow = mSys.preciseTime()

      -- Keyboard support requires a client reference to grab input from.

      if self.client and (not self._subscribedKb) then
         if self.client.mtSubscribeKeyboard(function(Viewport, Qualifiers, Value, Unicode)
            if not self.visible then
               self._subscribedKb = false
               check(ERR_Terminate)
            end

            if bit.band(Qualifiers, KQ_PRESSED) == 0 then return end
            if (Value == KEY_UP) then
            elseif (Value == KEY_DOWN) then

            elseif (Value == KEY_RETURN) then

            end
         end) == ERR_Okay then
            self._subscribedKb = true
         end
      end
   end)

   self.viewport.mtSubscribeInput(bit.bor(JTYPE_MOVEMENT, JTYPE_BUTTON, JTYPE_CROSSING), function(Viewport, Events)
      local ev = Events
      while ev do
         if (ev.type == JET_BUTTON_1) then
            if ev.value == 1 then
               if self.hItem then -- Menu item activated
                  if self.hItem.config.feedback then
                     self.hItem.config.feedback(self, self.hItem.config)
                  end
                  if self.feedback then
                     self.feedback(self, self.hItem.config)
                  end
                  self.surface.acHide()
               end
            end
         elseif (ev.type == JET_ABS_X) or (ev.type == JET_ABS_Y) then
            local highlightFound = false
            if (ev.overID == self.surface.id) then
               for _, item in pairs(self.items) do
                  if not item.lineBreak then
                     if (ev.y >= item.y) and (ev.y < item.y + item.height) then
                        if (self.hItem != item) then
                           highlightItem(item)
                        end
                        highlightFound = true
                        break
                     end
                  end
               end
            end

            -- Remove existing menu highlighting if the cursor is no longer positioned over a highlight-able item.

            if not highlightFound and self.hItem then
               highlightItem(nil)
            end

            if highlightFound then
               if self.tipTimer then
                  mSys.UpdateTimer(self.tipTimer, self.tipDelay)
               else
                  local err
                  err, self.tipTimer = mSys.SubscribeTimer(self.tipDelay, timer)
               end
            end
         end

         ev = ev.next
      end
   end)

   initVectorScene()

   return self
end
