--[[

The Divider interface is used to break up the space between surface areas and provides drag support so that the
amount of space on either side of the divider can be adjusted by the user.

A divider object is configured by specifying the surfaces positioned to the left and right of the divider for a
vertical split, or the top and bottom for a horizontal split.

To create a divider:

   gui.divider({ Options... })

Example:

   gui.divider({ left={ leftSurface }, right={ rightSurface }, min={ left=50, right=50 } })

Valid options to use when creating the divider are as follows:

   surface:    The surface object that will contain the divider (optional, is otherwise inferred from surface arrays).
   left:       Array of surface objects for the left side.
   right:      Array of surface objects for the right side.
   top:        Array of surface objects for the top side.
   bottom:     Array of surface objects for the bottom side.
   min{}:      A table of minimum pixel dimensions for left, right, top, bottom.
   max{}:      A table of maximum pixel dimensions for left, right, top, bottom.
   gap:        The pixel gap dividing either side of the divider.
   fixedSize:  Set to true if the divider position should remain fixed when the window is resized.
   style:      Set to 'none', 'default' or 'alt' for an alternative
   background: A background colour in 'R,G,B,A' format for the divider.  The default is transparent.
--]]

   require 'common'
   require 'gui'

gui.divider = function(Options)
   local mSurface = mod.load('surface')
   local mGfx = mod.load('display')

   local self = { // Public variables
   }

   local lSelf = obj.find('self')
   local lSurface
   local lButtonState = 'released'
   local lStyle = nz(Options.style,'default')
   local lDirection = 'h'
   local lBackground = { r=0, g=0, b=0, a=0 }
   local lMin = { left=5, right=5, top=5, bottom=5 }
   local lMax = { left=4000, right=4000, top=4000, bottom=4000 }
   local lLeft, lRight, lTop, lBottom // Surface arrays
   local lFixedSize = Options.fixedSize
   local lPercentX = 1.0
   local lPercentY = 1.0
   local lInput
   local lSplit = { } // Area of the divider 'strip' between the opposing regions.
   local arrangeAll
   local lCursorSet = 0
   local lParent = { }

   local function validateArray(Array)
      for k,surface in ipairs(Array) do
         local err, info = mSurface.GetSurfaceInfo(surface)
         if (err != ERR_Okay) then error('Failed to analyse surface: ' .. mSys.GetErrorMsg(err)) end
         if (info.parentID != lSurface.id) then
            error('Surface #' .. surface.id .. ' is not contained by divider surface #' .. lSurface.id .. ' got #' .. info.parentID)
         end
      end
   end

   // Checks if the given coordinates fall within the given area.

   local function withinArea(X, Y)
      if (X < lSplit.x) or (Y < lSplit.y) or (X >= lSplit.x + lSplit.width) or (Y >= lSplit.y + lSplit.height) then
         return false
      else
         return true
      end
   end

   local function getSplitCursor()
      if (lDirection == 'h') then
         return PTR_SPLIT_HORIZONTAL
      else
         return PTR_SPLIT_VERTICAL
      end
   end

   // User I/O feedback

   local function inputFeedback(Surface, Msg)
      if bit.band(Msg.flags, JTYPE_MOVEMENT) != 0 then
         if (lButtonState == 'held') then
            local err, x, y = mGfx.GetRelativeCursorPos(lSurface, Msg.x, Msg.y)
            arrangeAll(x, y)
            lPercentX = lSplit.x / lParent.width
            lPercentY = lSplit.y / lParent.height
         else
            // If the user is moving the mouse pointer over the resizing area and the mouse button is not currently
            // held, check if we can change the pointer image to something else.  This provides effective visual
            // notification to the user.

            if (Msg.overID == lSurface.id) then
               if withinArea(Msg.x, Msg.y) then
                  local cursor = getSplitCursor()
                  if (cursor != lCursorSet) then
                     if mGfx.SetCursor(0, bit.bor(CRF_BUFFER, CRF_NO_BUTTONS), cursor, 0, lSelf.id) == ERR_Okay then
                        lCursorSet = cursor
                     end
                  end
               elseif (lCursorSet != 0) then
                  mGfx.RestoreCursor(PTR_DEFAULT, lSelf.id)
                  lCursorSet = 0
               end
            elseif (lCursorSet != 0) then
               mGfx.RestoreCursor(PTR_DEFAULT, lSelf.id)
               lCursorSet = 0
            end
         end
      end

      if (Msg.type == JET_BUTTON_1) then // LMB
         if (Msg.value > 0) then
            if withinArea(Msg.x, Msg.y) then
               // Anchor the pointer
               //if mGfx.LockCursor(lSurface) == ERR_Okay then
               //   lAnchored = true
               //   lAnchorX  = input.x
               //   lAnchorY  = input.y
               //end
               lButtonState = 'held'
            end
         elseif (lButtonState == 'held') then
            if (lAnchored) then
               lAnchored = false
               mGfx.UnlockCursor(lSurface)
            end

            local err, x, y = mGfx.GetRelativeCursorPos(lSurface, Msg.x, Msg.y)
            if (err == ERR_Okay) and withinArea(x, y) then
               // Do nothing
            else // Release the cursor image
               if (lCursorSet != 0) then
                  mGfx.RestoreCursor(PTR_DEFAULT, lSelf.id)
                  lCursorSet = 0
               end
            end

            lButtonState = 'released'
         end
      end
   end

   // Return the maximum area covered by the surfaces referenced in an array.

   local function maxCoverageArea(List)
      local count = 0
      local max = { left=0, right=0, top=0, bottom=0 }
      for _, surface in ipairs(List) do
         local err, x, y, absx, absy, width, height = mSurface.GetSurfaceCoords(surface)
         if (err == ERR_Okay) then
            if (count == 0) then
               max.left   = x
               max.top    = y
               max.right  = x + width
               max.bottom = y + height
            else
               if (x < max.left) then max.left = x end
               if (y < max.top) then max.top = y end
               if (x + width  > max.right) then max.right = x + width end
               if (y + height > max.bottom) then max.bottom = y + height end
            end
            count = count + 1
         end
      end

      if (max.right  > lParent.width) then max.right = lParent.width end
      if (max.bottom > lParent.height) then max.bottom = lParent.height end

      return max
   end

   // This function arranges surfaces on the split-side of the divider so that they are flush against everything on the
   // left/top sides.

   local function arrangeOppositeSurfaces()
      if (lRelativeGap) then // Recalculate the gap size in pixels
         if (lDirection == 'h') then
            lGap = lParent.width * lRelativeGap / 100
         else
            lGap = lParent.height * lRelativeGap / 100
         end
      end

      local max = { }

      if (lDirection == 'h') then // Split left & right
         local area = maxCoverageArea(lLeft)

         max.left   = area.left
         max.top    = area.top
         max.right  = area.right
         max.bottom = area.bottom

         lSplit.x      = area.right
         lSplit.y      = area.top
         lSplit.width  = lGap
         lSplit.height = area.bottom - area.top

         // Arrange everything on the right side of the divider

         for _, surface in ipairs(lRight) do
            if (surface.minWidth > lMin.right) then
               lMin.right = surface.minWidth
            end

            if (surface.maxWidth < 2000) and (surface.maxWidth > lMax.right) then
               lMax.right = surface.maxWidth
            end

            surface.acRedimension(area.right + lGap, surface.y, 0,
               surface.right - (area.right + lGap), surface.height, 0)

            if (surface.x < max.left) then max.left = surface.x end
            if (surface.y < max.top) then max.top = surface.y end
            if (surface.right > max.right) then max.right = surface.right end
            if (surface.bottom > max.bottom) then max.bottom = surface.bottom end
         end
      else // Split top & bottom
         local area = maxCoverageArea(lTop)

         max.left   = area.left
         max.top    = area.top
         max.right  = area.right
         max.bottom = area.bottom

         lSplit.x      = area.left
         lSplit.y      = area.bottom
         lSplit.width  = area.right - area.left
         lSplit.height = lGap

         // Arrange everything underneath the divider

         for _, surface in ipairs(lBottom) do
            if (surface.minHeight > lMin.bottom) then
               lMin.bottom = surface.minHeight
            end

            if (surface.maxHeight < 2000) and (surface.MaxHeight > lMax.bottom) then
               lMax.bottom = surface.maxHeight
            end

            surface.acRedimension(surface.x, area.bottom + lGap, 0,
               surface.width, surface.y + surface.height - (area.bottom + lGap), 0)

            if (surface.x < max.left) then max.left = surface.x end
            if (surface.y < max.top) then max.top = surface.y end
            if (surface.right > max.right) then max.right = surface.right end
            if (surface.bottom > max.bottom) then max.bottom = surface.bottom end
         end
      end

      return max
   end

   // Redimension everything on the left or top side of the divider, the call arrangeOppositeSurfaces() to resize
   // everything on the other side of the divider.

   arrangeAll = function(OverX, OverY) // OverX and OverY are absolute coordinates.
      mSurface.ForbidDrawing()

         if (lDirection == 'h') then // Arrange the width of everything on the left side of the divider
            local x_change = OverX - (lSplit.x + (lGap / 2))
            for _, surface in ipairs(lLeft) do
               local right = surface.x + surface.width + x_change
               if (right < lMin.left) then
                  right = lMin.left
               end

               if (lMax.left > 1) and (right > lMax.left) then
                  right = lMax.left
               end

               if (right > lParent.width - lMin.right - lGap) then
                  right = lParent.width - lMin.right - lGap
               end

               surface.acRedimension(surface.x, surface.y, 0, right - surface.x, surface.height, 0)
            end
         else // Arrange the height of everything at the top of the divider
            local y_change = OverY - (lSplit.y + (lGap / 2))
            for _, surface in ipairs(lTop) do
               local bottom = surface.y + surface.height + y_change
               if (bottom < lMin.top) then
                  bottom = lMin.top
               end

               if ((lMax.top > 1) and (bottom > lMax.top)) then
                  bottom = lMax.top
               end

               if (bottom > lParent.height - lMin.bottom - lGap) then
                  bottom = lParent.height - lMin.bottom - lGap
               end

               surface.acRedimension(surface.x, surface.y, 0, surface.width, bottom - surface.y, 0)
            end
         end

         // Arrange everything on the other side of the surface

         local area = arrangeOppositeSurfaces()

      mSurface.PermitDrawing()

      lSurface.mtInvalidateRegion(area.left, area.top, area.right - area.left, area.bottom - area.top)

      // If we have anchored the pointer, we need to tell the pointer to move or else it will stay locked at its
      // current position.

      if (lAnchored) then
         local err
         err, lParent.x, lParent.y, lParent.absX, lParent.absY, lParent.width, lParent.height = mGfx.GetSurfaceCoords(lSurface)

         if (lDirection == 'h') then
            mGfx.SetCursorPos(lParent.absX + lSplit.x + (lGap / 2), lParent.absY + lAnchorY)
         else
            mGfx.SetCursorPos(lParent.absX + lAnchorX, lParent.absY + lSplit.y + (lGap / 2))
         end
      end
   end

   // Principal drawing routine

   local function drawDivider(Surface, Bitmap)
      local TOTAL = 4

      local err, bkgd  = Bitmap.mtGetColour(lBackground.r, lBackground.g, lBackground.b, lBackground.a)
      local err, white = Bitmap.mtGetColour(255, 255, 255, 128)
      local err, dark  = Bitmap.mtGetColour(0, 0, 0, 80)

      if (lDirection == 'h') then
         if (lBackground.a > 0) then
            Bitmap.mtDrawRectangle(lSplit.x, lSplit.y, lGap, lSplit.height, bkgd, bit.bor(BAF_FILL, BAF_BLEND))
         end

         if (lGap > 4) then
            local x = lSplit.x + (lGap / 2)
            local y = lSplit.y + (lSplit.height / 2)
            if (lStyle == 'alt') then // Diagonal slashes
               x = x - 2
               y = y - ((TOTAL * lGap)/2)
               for i=1,TOTAL do
                  Bitmap.mtDrawLine(x, y, x+3, y-3, dark)
                  Bitmap.mtDrawLine(x, y+1, x+3, y-2, white)
                  y = y + lGap
               end
            elseif (lStyle != 'none') then // Black & white alternating lines
               x = x - 1
               y = y - ((TOTAL * lGap)/2)
               for i=1,TOTAL do
                  Bitmap.mtDrawRectangle(x, y, 2, 2, dark, bit.bor(BAF_FILL, BAF_BLEND))
                  y = y + lGap
               end
            end
         end
      else
         if (lBackground.a > 0) then
            Bitmap.mtDrawRectangle(lSplit.x, lSplit.y, lSplit.width, lGap, bkgd, bit.bor(BAF_FILL, BAF_BLEND))
         end

         if (lGap > 4) then
            local x = lSplit.x + (lSplit.width / 2)
            local y = lSplit.y + (lGap / 2)
            if (lStyle == 'alt') then // Diagonal slashes
               y = y - 2
               x = x - ((TOTAL * lGap) / 2)
               for i=1,TOTAL do
                  Bitmap.mtDrawLine(x, y, x-3, y+3, dark)
                  Bitmap.mtDrawLine(x+1, y, x+3, y-2, white)
                  x = x + lGap
               end
            elseif (lStyle != 'none') then // Black & white alternating lines
               y = y - 1
               x = x - ((TOTAL * lGap) / 2)
               for i=1,TOTAL do
                  Bitmap.mtDrawRectangle(x, y, 2, 2, dark, bit.bor(BAF_FILL, BAF_BLEND))
                  x = x + lGap
               end
            end
         end
      end
   end

   // Main entry point

   catch(function()
      if (Options.min) then
         lMin.left   = nz(Options.min.left, lMin.left)
         lMin.right  = nz(Options.min.right, lMin.right)
         lMin.top    = nz(Options.min.top, lMin.top)
         lMin.bottom = nz(Options.min.bottom, lMin.bottom)
      end

      if (Options.max) then
         lMax.left   = nz(Options.max.left, lMax.left)
         lMax.right  = nz(Options.max.right, lMax.right)
         lMax.top    = nz(Options.max.top, lMax.top)
         lMax.bottom = nz(Options.max.bottom, lMax.bottom)
      end

      if (Options.gap == nil) or (Options.gap < 3) or (Options.gap > 20) then
         lGap = 6
      else
         lGap = Options.gap
      end

      if (Options.background) then
         lBackground = gui.strToRGB(Options.background)
      end

      if (Options.left) and (Options.right) then
         if (#Options.left < 1) then error('The left-side surface list is empty.') end
         if (#Options.right < 1) then error('The right-side surface list is empty.') end
         lDirection = 'h'
         lLeft  = Options.left
         lRight = Options.right
         if (Options.surface == nil) then Options.surface = lLeft[1].parent end
      elseif (Options.top) and (Options.bottom) then
         if (#Options.top < 1) then error('The top-side surface list is empty.') end
         if (#Options.bottom < 1) then error('The bottom-side surface list is empty.') end
         lDirection = 'v'
         lTop    = Options.top
         lBottom = Options.bottom
         if (Options.surface == nil) then Options.surface = lTop[1].parent end
      else
         error('The left/right or top/bottom options must be specified.')
      end

      lSurface = Options.surface
      if (lSurface == nil) then error('The surface option must be defined.') end

      if (lLeft) then validateArray(lLeft) end
      if (lRight) then validateArray(lRight) end
      if (lTop) then validateArray(lTop) end
      if (lBottom) then validateArray(lBottom) end

      lSurface.subscribe('redimension', function(Surface, Args)
         lParent.x = Args.x
         lParent.y = Args.y

         // If the container surface moved, we don't have to do anything.  Only true resizes are important to us.

         if (Args.width != lParent.width) or (Args.height != lParent.height) then
            lParent.width  = Args.width
            lParent.height = Args.height

            // The fixed resize option means that when the parent surface is resized, the divider is not shifted
            // to compensate.

            if (lFixedSize) then
               arrangeOppositeSurfaces()
            else
               arrangeAll(lPercentX * Args.width, lPercentY * Args.height)
            end
         end
      end)

      lInput = input.subscribe(bit.bor(JTYPE_MOVEMENT, JTYPE_BUTTON), Surface, 0, inputFeedback)

      lSurface.mtAddCallback(drawDivider)

      lParent = { x=lSurface.x, y=lSurface.y, width=lSurface.width, height=lSurface.height }

      // Pull max and min values from the surfaces

      if (lLeft) then
         for k, surface in ipairs(lLeft) do
            if (surface.minWidth + surface.x > lMin.left) then
               lMin.left = surface.minWidth + surface.x
            end

            if (surface.maxWidth < 4000) and (surface.maxWidth + surface.x > lMax.left) then
               lMax.Left = surface.maxWidth + surface.x
            end
         end
      end

      if (lRight) then
         for k, surface in ipairs(lRight) do
            local margin = lParent.width - surface.x - surface.width
            if (surface.minWidth > lMin.right + margin) then
               lMin.right = margin + surface.minWidth
            end

            if (surface.maxWidth < 4000) and (surface.maxWidth + margin > lMax.right) then
               lMax.right = surface.maxWidth + margin
            end
         end
      end

      if (lTop) then
         for k, surface in ipairs(lTop) do
            if (surface.minHeight + surface.y > lMin.top) then
               lMin.top = surface.minHeight + surface.y
            end

            if (surface.maxHeight < 4000) and (surface.maxHeight + surface.y > lMax.top) then
               lMax.top = surface.maxHeight + surface.y
            end
         end
      end

      if (lBottom) then
         for k, surface in ipairs(lBottom) do
            local margin = lParent.height - surface.y - surface.height
            if (surface.minHeight > lMin.bottom + margin) then
               lMin.bottom = margin + surface.minHeight
            end

            if (surface.maxHeight < 4000) and (surface.maxHeight + margin > lMax.bottom) then
               lMax.bottom = surface.maxHeight + margin
            end
         end
      end

      // Monitor the surface for its destruction

      lSurface.subscribe('free', function(Surface)
         if (lAnchored) then mGfx.UnlockCursor(lSurface) end
         if (lCursorSet != 0) then mGfx.RestoreCursor(PTR_DEFAULT, lSelf.id) end
         if (lInput) then lInput.unsubscribe() end
      end)

      // Arrange the surfaces around the divider

      arrangeOppositeSurfaces()
      lPercentX = lSplit.x / lParent.width
      lPercentY = lSplit.y / lParent.height
   end,
   function(Exception)
      error('Failed to initialise Divider: ' .. Exception.message)
   end)

   return self
end
