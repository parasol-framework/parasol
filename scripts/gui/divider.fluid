--[[
Documentation is available in the Parasol Wiki.
--]]

   require 'common'
   require 'gui'

   if not mGfx then mGfx = mod.load('display') end

local GAP = 6
local HALF_GAP = GAP / 2

----------------------------------------------------------------------------------------------------------------------

local function arrangeAll(self, Middle)
   local a_len

   if Middle then
      local a_limit = math.floor(self._vp[self._length] - self._minB - GAP)
      a_len = math.floor(Middle - HALF_GAP)
      local minA = math.floor(self._primary[self._anchor] + self._minA)
      local maxA = math.floor(self._primary[self._anchor] + self._maxA)
      if (a_len < minA) then a_len = minA end
      if (a_len > maxA) then a_len = maxA end
      if (a_len > a_limit) then a_len = a_limit end
      self._primary[self._length] = a_len - self._primary[self._anchor]
   else -- (A) side will stay the same, (B) side will be resized
      a_len = self._primary[self._anchor] + self._primary[self._length]
   end

   if (self._orientation == 'h') then
      local margin = 0
      self._div = { x = a_len, y = self._primary.y + margin, width = GAP, height = self._primary.height - (margin*2) }
   else
      local margin = 0
      self._div = { x = self._primary.x + margin, y = a_len, width = self._primary.width - (margin*2), height = GAP }
   end

   self._secondary[self._anchor] = a_len + GAP
   -- It is presumed that _secondary.[x|y]Offset is preset by the client.

   self._dividerVP.acRedimension(self._div.x, self._div.y, 0, self._div.width, self._div.height, 0)

   if self._anchored then -- If pointer is anchored, it must be moved manually.
      if (self._orientation == 'h') then
         mGfx.setCursorPos(self._vp.absX + self._div.x + HALF_GAP, self._vp.absY + self._anchorY)
      else
         mGfx.setCursorPos(self._vp.absX + self._anchorX, self._vp.absY + self._div.y + HALF_GAP)
      end
   end

   self._vp.acDraw()
end

----------------------------------------------------------------------------------------------------------------------

gui.divider = function(Options)
   local self = {
      _pct          = 0.5,
      _proportional = not Options.fixedSize,
      _buttonHeld   = false,
      _minA = nz(Options.minA, 5),
      _minB = nz(Options.minB, 5),
      _maxA = nz(Options.maxA, 8000),
      _maxB = nz(Options.maxB, 8000),
      _div  = { } -- Area of the 'strip' between the opposing regions.
   }

   if (Options.left) and (Options.right) then
      self._orientation = 'h'
      self._primary     = Options.left
      self._secondary   = Options.right
      self._anchor      = 'x'
      self._length      = 'width'

      local sd = self._secondary.dimensions
      if (bit.band(sd, DMF_FIXED_X) == 0) or (bit.band(sd, DMF_FIXED_X_OFFSET) == 0) then
         error('The opposing viewport must use fixed x and xOffset coordinates.')
      end
   elseif (Options.top) and (Options.bottom) then
      self._orientation = 'v'
      self._primary     = Options.top
      self._secondary   = Options.bottom
      self._anchor      = 'y'
      self._length      = 'height'

      local sd = self._secondary.dimensions
      if (bit.band(sd, DMF_FIXED_Y) == 0) or (bit.band(sd, DMF_FIXED_Y_OFFSET) == 0) then
         error('The opposing viewport must use fixed y and yOffset coordinates.')
      end
   else
      error('A left/right or top/bottom pair must be specified.')
   end

   self._vp = self._primary.parent
   if (self._vp.id != self._secondary.parent.id) then
      error('The provided viewports do not share the same parent.')
   end

   local div_name = 'divider-bkgd-' .. self._vp.id
   if (Options.style != 'none') then
      local opacity = 0.25
      if (self._orientation == 'h') then -- Top to bottom tiling
         self._pattern = self._vp.scene.new('VectorPattern', {
            name = 'div_pattern', x = 0, y = 0, pageWidth = GAP, pageHeight = GAP*4, width = GAP, height = GAP*4,
            units = VUNIT_USERSPACE, spreadMethod = VSPREAD_REPEAT
         })

         local pt = string.format('%d,%d, %d,%d, %d,%d %d,%d', 0, 0, GAP, GAP*2, GAP, GAP*4, 0, GAP*2)
         self._pattern.viewport.new('VectorPolygon', { points = pt, fill = gui.palette.base, opacity = opacity })
      else -- Left to right tiling
         self._pattern = self._vp.scene.new('VectorPattern', {
            name = 'div_pattern', x = 0, y = 0, pageWidth = GAP*4, pageHeight=GAP, width=GAP*4, height=GAP,
            units = VUNIT_USERSPACE, spreadMethod = VSPREAD_REPEAT
         })

         local pt = string.format('%d,%d, %d,%d, %d,%d %d,%d', GAP*2, 0, GAP*4, 0, GAP*2, GAP, 0, GAP)
         self._pattern.viewport.new('VectorPolygon', { points = pt, fill = gui.palette.base, opacity = opacity })
      end

      check(self._vp.scene.mtAddDef(div_name, self._pattern))
   end

   self._vp.subscribe('free', function(Viewport)
      if self._anchored then mGfx.unlockCursor(self._vp) end
   end)

   if (self._orientation == 'h') then
      self._dividerVP = self._vp.new('VectorViewport', {
         name='div_vp', x=0, y=0, width=GAP, height='100%', cursor=PTC_SPLIT_HORIZONTAL
      })
   else
      self._dividerVP = self._vp.new('VectorViewport', {
         name='div_vp', x=0, y=0, width='100%', height=GAP, cursor=PTC_SPLIT_VERTICAL
      })
   end

   if (Options.style != 'none') then
      self._dividerVP.new('VectorRectangle', {
         name='div_fill', x='1%', y='1%', width='98%', height='98%', fill='url(#' .. div_name .. ')'
      })
   end

   arrangeAll(self)

   self._pct = (self._div[self._anchor] + HALF_GAP) / self._vp[self._length]

   self._vp.mtSubscribeFeedback(FM_PATH_CHANGED, function(Viewport, Event)
      if self._proportional then
         if (self._orientation == 'h') then
            arrangeAll(self, self._pct * Viewport.width)
         else
            arrangeAll(self, self._pct * Viewport.height)
         end
      else
         arrangeAll(self)
      end

      Viewport.acDraw()
   end)

   check(self._dividerVP.mtSubscribeInput(bit.bor(JTYPE_MOVEMENT, JTYPE_BUTTON), function(Viewport, Events)
      local ev = Events
      while ev do
         if (ev.type == JET_ABS_XY) then
            if self._buttonHeld then
               if (self._orientation == 'h') then
                  arrangeAll(self, ev.absX - self._vp.absX)
               else
                  arrangeAll(self, ev.absY - self._vp.absY)
               end
               self._pct = (self._div[self._anchor] + HALF_GAP) / self._vp[self._length]
            end
         elseif (ev.type == JET_BUTTON_1) then -- LMB
            if (ev.value > 0) then
               if mGfx.lockCursor(self._vp) == ERR_Okay then
                  self._anchored = true
                  self._anchorX  = input.x
                  self._anchorY  = input.y
               end
               self._buttonHeld = true
            elseif self._buttonHeld then
               if self._anchored then
                  self._anchored = false
                  mGfx.unlockCursor(self._vp)
               end

               self._buttonHeld = false
            end
         end
         ev = ev.next
      end
   end))

   return self
end
