-- These graphics constants are re-usable across all modules.

enum("PTR", { start=0, comment="Predefined cursor styles" },
    "NO_CHANGE",
    "DEFAULT: The default cursor (usually an arrow pointing to the upper left).",
    "SIZE_BOTTOM_LEFT: Sizing cursor - for resizing the bottom left corner of any rectangular area.",
    "SIZE_BOTTOM_RIGHT: Sizing cursor - for resizing the bottom right corner of any rectangular area.",
    "SIZE_TOP_LEFT: Sizing cursor - for resizing the top left corner of any rectangular area.",
    "SIZE_TOP_RIGHT: Sizing cursor - for resizing the top right corner of any rectangular area.",
    "SIZE_LEFT: Sizing cursor - for resizing the left edge of any rectangular area.",
    "SIZE_RIGHT: Sizing cursor - for resizing the right edge of any rectangular area.",
    "SIZE_TOP: Sizing cursor - for resizing the top edge of any rectangular area.",
    "SIZE_BOTTOM: Sizing cursor - for resizing the bottom edge of any rectangular area.",
    "CROSSHAIR: The cross hair is used for targeting specific pixel points (common in paint programs).",
    "SLEEP: The sleep cursor is used to inform the user that the computer is busy.",
    "SIZING: Multi-directional sizing cursor - for resizing in any direction.",
    "SPLIT_VERTICAL: The vertical split cursor is typically used for splitting rectangles in half, or dragging a vertical split within a large rectangular space.",
    "SPLIT_HORIZONTAL: The horizontal split cursor is typically used for splitting rectangles in half, or dragging a horizontal split within a large rectangular space.",
    "MAGNIFIER: Represents a magnifying glass.",
    "HAND: The hand cursor is often used for indicating click-able content (hyper-links, icons etc).",
    "HAND_LEFT: Similar to the standard hand cursor, but points to the left.",
    "HAND_RIGHT: Similar to the standard hand cursor, but points to the right.",
    "TEXT: The text cursor is popular for the precise positioning of text cursors.",
    "PAINTBRUSH: The paintbrush cursor is typically employed by paint programs.",
    "STOP: The stop cursor is used to inform the user that an operation is not possible (e.g. drag and drop to an unsupported object area).",
    "INVISIBLE: The cursor graphic is invisible (but will continue to operate as normal in all other respects).",
    "CUSTOM: Works in conjunction with the SetCustomCursor() function to represent a program defined bitmap.",
    "DRAGGABLE: Used to indicate that a surface or object can be dragged by the user.",
    "END") -- Any new cursor images must be added to the CursorLookup array in pointer_class.c

flags("DMF", { bits=32 },
    "RELATIVE_X: The X field is relative to this object's parent.",
    "RELATIVE_Y: The Y field is relative to this object's parent.",
    "FIXED_X: The X field is a fixed coordinate.",
    "FIXED_Y: The Y field is a fixed coordinate.",
    "RELATIVE_X_OFFSET: The XOffset field is relative to this object's parent.",
    "RELATIVE_Y_OFFSET: The YOffset field is relative to this object's parent.",
    "FIXED_X_OFFSET: The XOffset field is a fixed coordinate.",
    "FIXED_Y_OFFSET: The YOffset field is a fixed coordinate.",
    "FIXED_HEIGHT: The Height field is a fixed size.",
    "FIXED_WIDTH: The Width field is a fixed suze.",
    "RELATIVE_HEIGHT: The Height field is relative to this object's parent.",
    "RELATIVE_WIDTH: The Width field is relative to this object's parent.",
    "FIXED_DEPTH: The Depth field is a fixed size.",
    "RELATIVE_DEPTH: The Depth field is a relative size to this object's parent.",
    "FIXED_Z: The Z field is a fixed coordinate.",
    "RELATIVE_Z: The Z field is a relative coordinate to this object's parent.",
    { RELATIVE_RADIUS_X = "0x00010000: The RadiusX field is a relative size to this object's parent.",
      FIXED_RADIUS_X    = "0x00020000: The RadiusX field is a fixed size.",
      RELATIVE_CENTER_X = "0x00040000: The CenterX field is a relative size to this object's parent.",
      RELATIVE_CENTER_Y = "0x00080000: The CenterY field is a relative size to this object's parent.",
      FIXED_CENTER_X    = "0x00100000: The CenterX field is a fixed size.",
      FIXED_CENTER_Y    = "0x00200000: The CenterY field is a fixed size.",
      STATUS_CHANGE_H   = 0x00400000,
      STATUS_CHANGE_V   = 0x00800000,
      RELATIVE_RADIUS_Y = "0x01000000: The RadiusY field is a relative size to this object's parent.",
      FIXED_RADIUS_Y    = "0x02000000: The RadiusY field is a fixed size." },
    { X                = "FIXED_X|RELATIVE_X",
      Y                = "FIXED_Y|RELATIVE_Y",
      WIDTH            = "FIXED_WIDTH|RELATIVE_WIDTH",
      HEIGHT           = "FIXED_HEIGHT|RELATIVE_HEIGHT",
      X_OFFSET         = "FIXED_X_OFFSET|RELATIVE_X_OFFSET",
      Y_OFFSET         = "FIXED_Y_OFFSET|RELATIVE_Y_OFFSET",
      RELATIVE_RADIUS  = "RELATIVE_RADIUS_X|RELATIVE_RADIUS_Y",
      FIXED_RADIUS     = "FIXED_RADIUS_X|FIXED_RADIUS_Y",
      STATUS_CHANGE    = "STATUS_CHANGE_H|STATUS_CHANGE_V",
      HORIZONTAL_FLAGS = "FIXED_WIDTH|RELATIVE_WIDTH|FIXED_X_OFFSET|RELATIVE_X_OFFSET|FIXED_X|RELATIVE_X",
      VERTICAL_FLAGS   = "FIXED_HEIGHT|RELATIVE_HEIGHT|FIXED_Y_OFFSET|RELATIVE_Y_OFFSET|FIXED_Y|RELATIVE_Y",
      WIDTH_FLAGS      = "FIXED_WIDTH|RELATIVE_WIDTH|FIXED_X_OFFSET|RELATIVE_X_OFFSET",
      HEIGHT_FLAGS     = "FIXED_HEIGHT|RELATIVE_HEIGHT|FIXED_Y_OFFSET|RELATIVE_Y_OFFSET"
    }
)

enum("DRL", { start=0, comment="Compass directions." },
    "NORTH|UP",
    "SOUTH|DOWN",
    "EAST|RIGHT",
    "WEST|LEFT",
    "NORTH_EAST",
    "NORTH_WEST",
    "SOUTH_EAST",
    "SOUTH_WEST")

flags("MOVE", { comment="Generic flags for controlling movement." },
    "DOWN",
    "UP",
    "LEFT",
    "RIGHT",
    { ALL = "DOWN|UP|LEFT|RIGHT" })

flags("EDGE", { comment="Edge flags" },
    "TOP", "LEFT", "RIGHT", "BOTTOM", "TOP_LEFT", "TOP_RIGHT", "BOTTOM_LEFT", "BOTTOM_RIGHT", { ALL = 0xff })

flags("ALIGN", { comment="Universal values for alignment of graphics and text" },
    "LEFT: Align to left",
    "RIGHT: Align to right",
    "HORIZONTAL: Align to horizontal center",
    "VERTICAL: Align to vertical center",
    "TOP: Align to top",
    "BOTTOM: Align to bottom",
    { CENTER = "HORIZONTAL|VERTICAL" },
    { MIDDLE = "HORIZONTAL|VERTICAL" })

flags("LAYOUT", { comment="Universal values for alignment of graphic layouts in documents." },
    "TIGHT: Text wraps to the shape of the image (alpha blended/masked images only)",
    "LEFT: The text boundary is extended to the left edge of the page.",
    "RIGHT: The text boundary is extended to the right edge of the page.",
    "BACKGROUND: Graphic is placed behind text.  The text will not be wrapped around the object",
    "FOREGROUND: Graphic is placed in front of the text.  The text will not be wrapped around the object",
    "EMBEDDED: Graphic is embedded in the text stream (treated as a character).  The height of the line can be extended to match the height of the graphic in this mode.",
    "LOCK: Lock the position of the graphic to the top left of the view and not the scrolling position of the page.",
    "IGNORE_CURSOR: The object has a fixed X/Y position, unrelated to the cursor",
    "TILE: The graphic will be tiled.  Tiled graphics also meet the LAYOUT_BACKGROUND criteria (no wrapping).",
    { WIDE = "RIGHT|LEFT: The text boundary is extended to the left and right edges of the page." },
    { SQUARE = "0: The default.  Text will clip around the image's border" })

struct("HSV", { comment="Colour structure for Hue, Saturation and Value components." }, [[
    double Hue        # Between 0 and 359.999
    double Saturation # Between 0 and 1.0
    double Value      # Between 0 and 1.0.  Corresponds to Value, Lightness or Brightness
  ]])

struct("FRGB", { comment="64-bit floating point RGB colour value." }, [[
    float Red   # Red component value
    float Green # Green component value
    float Blue  # Blue component value
    float Alpha # Alpha component value
  ]])

struct("DRGB", { type="DRGB", comment="64-bit floating point RGB colour value." }, [[
    double Red    # Red component value
    double Green  # Green component value
    double Blue   # Blue component value
    double Alpha  # Alpha component value
  ]])

struct("RGB8", { type="RGB8", comment="8-bit RGB colour value." }, [[
    uchar Red    # Red component value
    uchar Green  # Green component value
    uchar Blue   # Blue component value
    uchar Alpha  # Alpha component value
  ]])

struct("RGB16", { comment="16-bit RGB colour value." }, [[
    ushort Red    # Red component value
    ushort Green  # Green component value
    ushort Blue   # Blue component value
    ushort Alpha  # Alpha component value
  ]])

struct("RGB32", { comment="32-bit RGB colour value." }, [[
    uint Red     # Red component value
    uint Green   # Green component value
    uint Blue    # Blue component value
    uint Alpha   # Alpha component value
  ]])

struct("RGBPalette", { }, [[
    int AmtColours              # Amount of Colours
    array(struct(RGB8),256) Col # RGB Palette
  ]])

struct("ColourFormat", { type="colourformat" }, [[
    uchar  RedShift     # Right shift value for red (15/16 bit formats only)
    uchar  GreenShift   # Right shift value for green
    uchar  BlueShift    # Right shift value for blue
    uchar  AlphaShift   # Right shift value for alpha
    uchar  RedMask      # Unshifted mask value for red (ranges from 0x00 to 0xff)
    uchar  GreenMask    # Unshifted mask value for green
    uchar  BlueMask     # Unshifted mask value for blue
    uchar  AlphaMask    # Unshifted mask value for alpha
    uchar  RedPos       # Left shift/positional value for red
    uchar  GreenPos     # Left shift/positional value for green
    uchar  BluePos      # Left shift/positional value for blue
    uchar  AlphaPos     # Left shift/positional value for alpha
    uchar  BitsPerPixel # Number of bits per pixel for this format.
  ]])

struct("ClipRectangle", { comment="Generic structure for rectangular clipping." }, [[
    int Left     # Left-most coordinate
    int Right    # Right-most coordinate
    int Bottom   # Bottom coordinate
    int Top      # Top coordinate
  ]])

struct("Edges", { comment="Generic structure for declaring edge coordinates." }, [[
    int Left     # Left-most coordinate
    int Right    # Right-most coordinate
    int Bottom   # Bottom coordinate
    int Top      # Top coordinate
  ]])
