-- Type conversion for idl-c

-----------------------------------------------------------------------------------------------------------------------
-- Conversion table for FDL types to their C/C++ and Field Definition equivalents.
-- Use cType() to perform conversion and don't access glTypes directly.

glTypes = {
   arraysize  = { fd='FD_LONG|FD_ARRAYSIZE',  c_type='LONG' },
   bufsize    = { fd='FD_LONG|FD_BUFSIZE',    c_type='LONG' },
   char       = { fd='FD_BYTE',               c_type='BYTE' },
   cid        = { fd='FD_LONG|FD_UNSIGNED',   c_type='CLASSID' },
   cptr       = { fd='FD_PTR',                c_type='const void *' },
   cstr       = { fd='FD_STR',                c_type='CSTRING' },
   double     = { fd='FD_DOUBLE',             c_type='DOUBLE' },
   eid        = { fd='FD_LONG',               c_type='EVENTID' },
   error      = { fd='FD_LONG|FD_ERROR',      c_type='ERROR' },
   ext        = { fd='FD_OBJECTPTR',          c_type='OBJECTPTR' },
   fid        = { fd='FD_LARGE',              c_type='FIELD' },
   flags      = { fd='FD_LONG',               c_type='LONG' },
   float      = { fd='FD_FLOAT',              c_type='FLOAT' },
   func       = { fd='FD_FUNCTION',           c_type='FUNCTION' },
   hhandle    = { fd='FD_PTR',                c_type='HOSTHANDLE' },
   int        = { fd='FD_LONG',               c_type='LONG' },
   large      = { fd='FD_LARGE',              c_type='LARGE' },
   maxint     = { fd='FD_LARGE',              c_type='MAXINT' },
   mem        = { fd='FD_LONG',               c_type='MEMORYID' },
   obj        = { fd='FD_OBJECTPTR',          c_type='OBJECTPTR' },
   oid        = { fd='FD_OBJECTID',           c_type='OBJECTID' },
   printf     = { fd='FD_TAGS',               c_type='...' },
   ptr        = { fd='FD_PTR',                c_type='APTR' },
   resource   = { fd='FD_STRUCT|FD_RESOURCE', c_type='APTR' },
   short      = { fd='FD_WORD',               c_type='WORD' },
   str        = { fd='FD_STR',                c_type='STRING', cpp_type='std::string' },
   struct     = { fd='FD_STRUCT',             c_type='APTR' },
   structsize = { fd='FD_LONG|FD_BUFSIZE',    c_type='LONG' },
   tags       = { fd='FD_TAGS',               c_type='...' },
   uchar      = { fd='FD_BYTE',               c_type='UBYTE' },
   uint       = { fd='FD_LONG|FD_UNSIGNED',   c_type='ULONG' },
   ushort     = { fd='FD_WORD',               c_type='UWORD' },
   va_list    = { fd='FD_PTR',                c_type='va_list' },
   void       = { fd='FD_VOID',               c_type='void' },
   vtags      = { fd='FD_VARTAGS',            c_type='...' }
}

-----------------------------------------------------------------------------------------------------------------------
-- Convert FD flags into a printable C type.

function getFieldType(Type, CustomName, Option)
   local result

   if bit.band(Type, FD_CUSTOM) != 0 then
      if nz(CustomName) then
         return CustomName
      else
         return 'APTR'
      end
   elseif bit.band(Type, FD_ARRAY) != 0 then
      -- All arrays are pointers, with additional information indicating the type of values in the array.

      if bit.band(Type, FD_CPP) != 0 then
         if bit.band(Type, FD_BYTE) != 0 then
            return 'pf::vector<BYTE>'
         elseif bit.band(Type, FD_WORD) != 0 then
            return 'pf::vector<WORD>'
         elseif bit.band(Type, FD_LONG) != 0 then
            return 'pf::vector<LONG>'
         elseif bit.band(Type, FD_FLOAT) != 0 then
            return 'pf::vector<FLOAT>'
         elseif bit.band(Type, FD_DOUBLE) != 0 then
            return 'pf::vector<DOUBLE>'
         elseif bit.band(Type, FD_STRING) != 0 then
            return 'pf::vector<std::string>'
         elseif bit.band(Type, FD_POINTER) != 0 then
            return 'pf::vector<APTR>'
         elseif bit.band(Type, FD_STRUCT) != 0 then
            return 'pf::vector<STRUCT>'
         else
            return 'pf::vector<>'
         end
      else
         if bit.band(Type, FD_BYTE) != 0 then
            return 'BYTE []'
         elseif bit.band(Type, FD_WORD) != 0 then
            return 'WORD []'
         elseif bit.band(Type, FD_LONG) != 0 then
            return 'LONG []'
         elseif bit.band(Type, FD_FLOAT) != 0 then
            return 'FLOAT []'
         elseif bit.band(Type, FD_DOUBLE) != 0 then
            return 'DOUBLE []'
         elseif bit.band(Type, FD_STRING) != 0 then
            return 'STRING []'
         elseif bit.band(Type, FD_POINTER) != 0 then
            return 'APTR []'
         elseif bit.band(Type, FD_STRUCT) != 0 then
            return 'STRUCT []'
         else
            return 'ARRAY'
         end
      end
   elseif bit.band(Type, FD_STRING) != 0 then
      return 'STRING'
   elseif bit.band(Type, FD_FUNCTION) != 0 then
      return 'FUNCTION'
   elseif bit.band(Type, FD_POINTER) != 0 then
      local ptr = 0
      if bit.band(Type, FD_LONG) != 0 then
         result = 'LONG'
         ptr = ptr + 1
      elseif bit.band(Type, FD_LARGE) != 0 then
         result = 'LARGE'
         ptr = ptr + 1
      elseif bit.band(Type, FD_DOUBLE) != 0 then
         result = 'DOUBLE'
         ptr = ptr + 1
      elseif bit.band(Type, bit.bor(FD_OBJECT, FD_INTEGRAL)) != 0 then
         return 'OBJECTPTR'
      elseif bit.band(Type, FD_STRING) != 0 then
         return 'STRING'
      elseif bit.band(Type, FD_RGB) != 0 then
         result = 'RGB'
         ptr = ptr + 1
      elseif bit.band(Type, FD_FUNCTION) != 0 then
         result = 'FUNCTION'
         ptr = ptr + 1
      elseif bit.band(Type, FD_STRUCT) != 0 then
         if nz(Option) then -- We need a way to convert the Option number to a string address...
            result = 'APTR'
         else
            result = 'APTR'
         end
      else
         return 'APTR'
      end

      if (ptr > 0) then
         return result .. ' ' .. string.rep('*', ptr)
      else
         return result
      end
   elseif bit.band(Type, FD_RGB) != 0 then
      return 'RGB8'
   elseif bit.band(Type, FD_LONG) != 0 then
      if bit.band(Type, FD_OBJECT) != 0 then
         return 'OBJECTID'
      else
         return 'LONG'
      end
   elseif bit.band(Type, FD_LARGE) != 0 then
      return 'LARGE'
   elseif bit.band(Type, FD_DOUBLE) != 0 then
      return 'DOUBLE'
   elseif bit.band(Type, FD_FLOAT) != 0 then
      return 'FLOAT'
   else
      print(string.format('Failed to identify field type $%.8x for field "%s"', Type, CustomName))
      return 'void'
   end
end

-----------------------------------------------------------------------------------------------------------------------

function cType(Field, Origin)
   if (Field.type == nil) then
      error("Field definition incorrect, missing 'type' value for '" .. nz(Origin,"NIL") .. "'")
   end

   Field.defType = Field.type -- Save the original type name

   -- A ! symbol indicates that the field is a result that is allocated and can be removed with FreeResource()
   -- A & symbol indicates that the field is a pointer to a reserved area that will store a result value, e.g. LONG *

   local resultValue
   local special, result_type = Field.type:match("^([!&]+)(.+)")
   if (special != nil) and (result_type != nil) then
      if (special:find("!")) then Field.allocated = true end
      resultValue = true
      Field.type = result_type
   end

   if (Field.type:match("^structsize") != nil) then
      Field.sizeof = true
   end

   -- The use of cpp() converts the encapsulated type to its C++ variant.  E.g. 'str' becomes a std::string

   do
      local cpp_type = Field.type:match("^cpp%((.+)%)$")
      if (cpp_type != nil) then
         Field.cpp  = true
         Field.type = cpp_type
         Field = cType(Field, Origin)
         Field.fullType = { fd="FD_CPP|" .. Field.fullType.fd, c_type=Field.fullType.c_type }
         goto finalise
      end
   end

   do
      local const, struct = Field.type:match("^(c-)class%((.+)%)$")
      if (struct) then
         Field.isClass = true
      else
         const, struct = Field.type:match("^(c-)struct%((.+)%)$")
      end

      if (struct != nil) then
         local ptr_struct = struct:match("%*(.+)")
         if (ptr_struct != nil) then struct = ptr_struct end

         Field.struct = struct
         if Field.isClass then
            Field.type = 'class ' .. struct
         else
            Field.type = 'struct ' .. struct
         end

         if (glStructures[struct] != nil) then
            glActiveRefs['STRUCT:' .. struct] = 1

            if (glStructures[struct].version != nil) then
               Field.type = Field.type .. 'V' .. glStructures[struct].version
            end
         elseif (glCurrentStructure != struct) then
            if not glPrivateNames[struct] then
               print('WARN: Unknown struct reference "' .. struct .. '"')
            end
         end

         if (ptr_struct != nil) then
            Field.type = Field.type .. " *"
            Field.fullType = { fd="FD_PTR|FD_STRUCT", c_type="APTR" }
         elseif (Field.isFunction) then
            if (Field.isArray) then
               Field.fullType = { fd="FD_STRUCT", c_type="APTR" }
            else
               Field.type = Field.type .. " *"
               Field.fullType = { fd="FD_PTR|FD_STRUCT", c_type="APTR" }
            end
         else
            Field.fullType = { fd="FD_PTR|FD_STRUCT", c_type="APTR" }
         end

         if (nz(const)) then
            Field.type =  "const " .. Field.type
         end

         goto finalise
      end
   end

   do -- Resources are structs, but with an FD_RESOURCE marker.
      local const, struct = Field.type:match("^(c-)resource%((.+)%)$")
      if (struct != nil) then
         local ptr_struct = struct:match("%*(.+)")
         if (ptr_struct != nil) then struct = ptr_struct end

         Field.struct = struct
         Field.type = "struct " .. struct

         if (glStructures[struct] != nil) then
            glActiveRefs['STRUCT:' .. struct] = 1

            if (glStructures[struct].version != nil) then
               Field.type = Field.type .. "V" .. glStructures[struct].version
            end
         end

         if (ptr_struct != nil) then
            Field.type = Field.type .. " *"
            Field.fullType = { fd="FD_PTR|FD_STRUCT|FD_RESOURCE", c_type="APTR" }
         elseif (Field.isFunction) then
            if (Field.isArray) then
               Field.fullType = { fd="FD_STRUCT|FD_RESOURCE", c_type="APTR" }
            else
               Field.type = Field.type .. " *"
               Field.fullType = { fd="FD_PTR|FD_STRUCT|FD_RESOURCE", c_type="APTR" }
            end
         else
            Field.fullType = { fd="FD_PTR|FD_STRUCT|FD_RESOURCE", c_type="APTR" }
         end

         if (nz(const)) then
            Field.type =  "const " .. Field.type
         end

         goto finalise
      end
   end

   do
      local ref_obj = Field.type:match("^ext%((.+)%)$")
      local extended = false
      if (ref_obj != nil) then -- 'ext' indicates an object class extended with private fields.
         extended = true
      else
         ref_obj = Field.type:match("^obj%((.+)%)$")
      end

      if (ref_obj != nil) then
         local ptr_object = ref_obj:match("%*(.+)")
         if (ptr_object != nil) then
            Field.type = "obj" .. ptr_object .. " **"
            if extended then Field.extType = "ext" .. ptr_object .. " **" end
            Field.className = ptr_object
         else
            Field.type = "obj" .. ref_obj .. " *"
            if extended then Field.extType = "ext" .. ref_obj .. " *" end
            Field.className = ref_obj
         end
         Field.fullType = glTypes.obj
         goto finalise
      end
   end

   do -- Example: bit(int)
      local bitType = Field.type:match("^bit%((.+)%)$")
      if (bitType != nil) then
         Field.type     = cType({ type=bitType, name='' }, Origin).type
         Field.name     = Field.name
         Field.fullType = glTypes[bitType]
         Field.bits     = 1
         goto finalise
      end
   end

   do -- Integer flags type reference, can be used for strongly typed enum flags
      local prefix = Field.type:match("^flags%((%a+)%)")
      if (prefix != nil) then
         Field.type     = prefix
         Field.fullType = glTypes.int
         Field.ref      = glCustomTypes[prefix]
         Field.lookup   = prefix

         if (glCustomTypes[prefix] != nil) then
            glActiveRefs['TYPE:' .. prefix] = 1
         else
            print('Unknown custom type "' .. prefix .. '"')
         end
         goto finalise
      end
   end

   do -- Integer/Char/Large type reference
      local type, prefix = Field.type:match("^([intlargecharuso]+)%((%a+)%)")
      if (prefix != nil) then
         if (type == 'char') then
            Field.type     = 'char'
            Field.fullType = glTypes.char
         elseif (type == 'int') then
            Field.type     = 'LONG'
            Field.fullType = glTypes.int
         elseif (type == 'large') then
            Field.type     = 'LARGE'
            Field.fullType = glTypes.large
         elseif (type == 'short') then
            Field.type = 'WORD'
            Field.fullType = glTypes.short
         elseif (type == 'ushort') then
            Field.type = 'UWORD'
            Field.fullType = glTypes.ushort
         else
            error('Invalid type "' .. type .. '"')
         end

         Field.ref    = glCustomTypes[prefix]
         Field.lookup = prefix

         if (glCustomTypes[prefix] != nil) then
            glActiveRefs['TYPE:' .. prefix] = 1
            if (glCustomTypes[prefix].type) then -- Strongly typed
               Field.type = prefix
            end
         else
            print('Unknown custom type "' .. prefix .. '"')
         end
         goto finalise
      end
   end

   do -- Char arrays
      local unsigned, count = Field.type:match("^(u-)char%((.+)%)$")
      if (count != nil) then
         Field.type = "char"
         if nz(unsigned) then Field.type = "unsigned " .. Field.type end
         Field.arraySize = tonumber(count)
         Field.fullType = glTypes.char
         goto finalise
      end
   end

   do -- Integer arrays
      local unsigned, count = Field.type:match("^(u-)int%((%d+)%)")
      if (count != nil) then
         if nz(unsigned) then
            Field.type = "ULONG"
         else
            Field.type = "LONG"
         end
         Field.arraySize = tonumber(count)
         Field.fullType = glTypes.int
         goto finalise
      end
   end

   do -- Double arrays
      local count = Field.type:match("^double%((.+)%)")
      if (count != nil) then
         Field.type = "DOUBLE"
         Field.arraySize = tonumber(count)
         Field.fullType = glTypes.double
         goto finalise
      end
   end

   do -- Float arrays
      local count = Field.type:match("^float%((.+)%)")
      if (count != nil) then
         Field.type = "FLOAT"
         Field.arraySize = tonumber(count)
         Field.fullType = glTypes.float
         goto finalise
      end
   end

   do
      local const, ptr_type = Field.type:match("^(c-)ptr%((.+)%)")
      if (ptr_type != nil) then
         Field.type = cType({ type=ptr_type }, Origin).type .. " *"
         if (nz(const)) then
            Field.type =  "const " .. Field.type
         end
         if (ptr_type == "func") then
            Field.fullType = { fd="FD_FUNCTIONPTR", c_type="FUNCTION *" }
         else
            Field.fullType = glTypes.ptr
         end
         goto finalise
      end
   end

   do
      local buf_type = Field.type:match("^buf%((.+)%)")
      if (buf_type != nil) then
         Field.type = buf_type
         Field = cType(Field, Origin)
         Field.fullType = { fd="FD_BUFFER|" .. Field.fullType.fd, c_type="APTR" }
         goto finalise
      end
   end

   -- ARRAY CLIENT NOTES
   -- For primitive embedded array types, use 'type(n)' such as 'int(4)'.  See above patterns for details.
   -- To describe a pointer to an array of any type, use 'array(type)' such as 'array(cstr)'
   -- To describe a pointer to a null-terminated array, use 'array(type,0)'
   -- To describe complex embedded types of fixed size, use 'array(type,n)' such as 'array(struct(RGB8),256)'

   do
      local array_type, array_size = Field.type:match("^array%((.+),(%d+)%)$")
      if (array_type != nil) then
         array_size = tonumber(array_size)
         if (array_size == 0) then
            Field.isArray = true
            Field.type = array_type
            Field.arraySize = 0
            Field = cType(Field, Origin)
            if (Field.cpp) then
               if Field.struct then
                  Field.type = 'pf::vector<' .. Field.struct .. '>'
               else
                  Field.type = 'pf::vector<' .. Field.type .. '>'
               end
            else
               Field.type = Field.type .. " *"
            end
            Field.fullType = { fd="FD_ARRAY|" .. Field.fullType.fd, c_type=Field.fullType.c_type  }
         else
            Field.type = array_type
            Field = cType(Field, Origin)
            Field.arraySize = array_size
            Field.fullType = glTypes.ptr
         end
         goto finalise
      end
   end

   do
      local array_type = Field.type:match("^array%((.+)%)$")
      if (array_type != nil) then
         Field.isArray = true
         Field.type = array_type
         Field = cType(Field, Origin)
         if (Field.cpp) then
            if Field.struct then
               Field.type = 'pf::vector<' .. Field.struct .. '>'
            else
               Field.type = 'pf::vector<' .. Field.type .. '>'
            end
         else
            Field.type = Field.type .. " *"
         end
         Field.fullType = { fd="FD_ARRAY|" .. Field.fullType.fd, c_type=Field.fullType.c_type }
         goto finalise
      end
   end

   do
      local args = Field.type:match("^fptr%((.+)%)$")
      if (args != nil) then
         local arglist = args:split(" ")

         -- Process function result type

         if (#arglist < 1) then
            Field.type = "void"
         else
            Field.type = nz(glTypes[arglist[1]].c_type, arglist[1])
         end

         Field.type = Field.type .. " (*" .. Field.name .. ")"

         -- Process function parameters

         if (#arglist < 2) then
            Field.type = Field.type .. "(void)"
         else
            local params = ""
            for i=2, #arglist do
               if nz(params) then params = params .. ", " end
               params = params .. cType({ type=arglist[i], name='' }, Origin).type
            end
            Field.type = Field.type .. "(" .. params .. ")"
         end

         Field.isFunctionPtr = true
         Field.fullType = glTypes.ptr
         goto finalise
      end
   end

   if (glTypes[Field.type] == nil) then
      error("No handling for field type '" .. Field.type .. "' from " .. Origin)
   end

   Field.fullType = glTypes[Field.type]
   if (Field.cpp) then
      Field.type = nz(glTypes[Field.type].cpp_type, Field.type)
   else
      Field.type = nz(glTypes[Field.type].c_type, Field.type)
   end

::finalise::
   Field.basicType = Field.type
   if (resultValue) then -- If the type is a result value, append a '*'
      Field.resultValue = true

      if (Field.isResponse) then
         -- Do nothing
      elseif Field.type:find("%*$") then
         Field.type = Field.type .. "*"
      else
         Field.type = Field.type .. " *"
      end
   end
   return Field -- type, fullType, basicType, allocated, resultValue
end
