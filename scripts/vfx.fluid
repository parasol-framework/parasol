-- Visual FX interface.  Applies cosmetic effects to viewports.

   if not mVector then mVector = mod.load('vector') end

if (vfx == nil) then
   vfx = {
      fps = 1/60 -- Desired FPS for the effects, ideally matches the display
   }
end

vfx.wipes = { shutter = { }, simple = { }, radial = { }, shape = { }, clock = { }, pixelate = { } }

vfx.dist = function(X1, Y1, X2, Y2)
   local a = math.abs(X2 - X1)
   local b = math.abs(Y2 - Y1)
   if (a > b) then
      local t = a
      a = b
      b = t
   end
   return b + 0.428 * a * a / b
end

----------------------------------------------------------------------------------------------------------------------

vfx.wipes.simple.animate = function(State, Options, Progress)
   -- Use the diagonal to determine the bar width because the client might use rotation.
   local max_width = vfx.dist(0, 0, State.v_width, State.v_height)

   State.clip_path.acClear()

   local pc = State.path_cmd
   pc.type = PE_Move
   pc.x    = -((max_width - State.v_width) * 0.5)
   pc.y    = 0
   State.clip_path.mtAddCommand(pc)

   pc.type = PE_Line
   pc.x = max_width
   State.clip_path.mtAddCommand(pc)

   pc.y = Progress * State.v_height
   State.clip_path.mtAddCommand(pc)

   pc.x = -((max_width - State.v_width) * 0.5)
   State.clip_path.mtAddCommand(pc)

   pc.type = PE_Close
   State.clip_path.mtAddCommand(pc)
end

----------------------------------------------------------------------------------------------------------------------

vfx.wipes.clock.animate = function(State, Options, Progress)
   local radius = vfx.dist(0, 0, State.v_width+2, State.v_height+2) * 0.5

   State.clip_path.acClear()
   local bar_pos = 0
   local height  = Progress * State.v_height

   local angle = Progress * 360
   local rad = math.rad(angle)
   local cx = State.v_width * 0.5
   local cy = State.v_height * 0.5

   local x = (radius * math.sin(rad)) + cx
   local y = (-radius * math.cos(rad)) + cy

   local top_right_pt    = 90 - math.deg(math.atan2((State.v_height*0.5), cx))
   local bottom_right_pt = 180 - top_right_pt
   local bottom_left_pt  = 180 + top_right_pt
   local top_left_pt     = 360 - top_right_pt

   local pc = State.path_cmd

   pc.type = PE_Move -- Center
   pc.x    = State.v_width * 0.5
   pc.y    = State.v_height * 0.5
   State.clip_path.mtAddCommand(pc)

   pc.type = PE_Line -- Clock hand
   pc.x = State.v_width * 0.5
   pc.y = -1
   State.clip_path.mtAddCommand(pc)

   if (angle > top_right_pt) then -- Fill corners
      pc.x = State.v_width + 1
      pc.y = -1
      State.clip_path.mtAddCommand(pc)
   end

   if (angle > bottom_right_pt) then
      pc.x = State.v_width + 1
      pc.y = State.v_height + 1
      State.clip_path.mtAddCommand(pc)
   end

   if (angle > bottom_left_pt) then
      pc.x = -1
      pc.y = State.v_height + 1
      State.clip_path.mtAddCommand(pc)
   end

   if (angle > top_left_pt) then
      pc.x = -1
      pc.y = -1
      State.clip_path.mtAddCommand(pc)
   end

   pc.x = x -- The angled point
   pc.y = y
   State.clip_path.mtAddCommand(pc)

   pc.type = PE_Close
   State.clip_path.mtAddCommand(pc)
end

----------------------------------------------------------------------------------------------------------------------

vfx.wipes.shutter.animate = function(State, Options, Progress)
   -- Use the diagonal to determine the bar width because the client might use rotation.
   local max_width  = vfx.dist(0, 0, State.v_width, State.v_height)

   local total_bars = nz(Options.bars, 10)
   if (total_bars > max_width * 0.33) then total_bars = max_width * 0.33 end

   local pc = State.path_cmd
   local interval   = 1.0 / total_bars
   local bar_height = State.v_height / total_bars

   State.clip_path.acClear()
   for i=0,total_bars-1 do
      local bar_pos = i * bar_height
      local height  = (Progress / ((i * interval) + interval)) * bar_height

      if (height > bar_height) then height = bar_height end

      pc.type = PE_Move
      pc.x = -((max_width - State.v_width) * 0.5)
      pc.y = bar_pos
      State.clip_path.mtAddCommand(pc)

      pc.type = PE_Line
      pc.x = max_width
      State.clip_path.mtAddCommand(pc)

      pc.y = bar_pos + height
      State.clip_path.mtAddCommand(pc)

      pc.x = -((max_width - State.v_width) * 0.5)
      State.clip_path.mtAddCommand(pc)

      pc.type = PE_Close
      State.clip_path.mtAddCommand(pc)
   end
end

----------------------------------------------------------------------------------------------------------------------
-- Generic routine for initialising and processing the effect timer

vfx.initTimer = function(State, Options)
   local err
   err, State.timerID = mSys.SubscribeTimer(1 * vfx.fps, function(Subscriber, Elapsed, CurrentTime)
      if not State.viewport.exists() then check(ERR_Terminate) end

      if (State.time == nil) then State.time = CurrentTime end
      if (State.delay > 0) then
         if ((CurrentTime - State.time) >= State.delay * 1000000) then
            State.delay = 0
            mSys.UpdateTimer(State.timerID, 1 * vfx.fps) -- Resubscribe to the timer to clear the TotalElapsed counter
            State.time = nil
         end
      else
         local value = (CurrentTime - State.time) / (State.seconds * 1000000)
         if (value >= 1.0) then
            if (State.free != nil) then State:free() end
            if State.callback then State.callback(State) end
            check(ERR_Terminate)
         else
            if Options.inverse then
               State.animate(State, Options, 1.0 - value)
            else
               State.animate(State, Options, value)
            end
            State.viewport.acDraw()
         end
      end
   end)
end

----------------------------------------------------------------------------------------------------------------------
-- Use 'screen wipe' effects to display or hide a viewport.  The Viewport's Mask is utilised to achieve this.  A
-- wipe-out can be achieved by setting inverse=true in the Options.
--
-- Seconds:  Specifies the maximum number of seconds for the effect to complete.
-- Delay: Delays the initial start of the effect, measured in seconds.
-- Style: 'shutter', 'simple', 'radial', 'shape', 'clock', 'pixelate'

vfx.wipe = function(Viewport, Seconds, Delay, Style, Options)
   if not Options then Options = { } end
   if not Style then Style = 'shutter' end

   local state = {
      name = 'wipe', viewport = Viewport, seconds = nz(Seconds, 1.0), delay = nz(Delay, 0),
      v_width = Viewport.width, v_height = Viewport.height,
      animate = vfx.wipes[Style].animate, callback = CallbackOnCompletion,
      path_cmd = struct.new('PathCommand')
   }

   state.clip      = Viewport.scene.new('VectorClip', { })
   state.clip_path = state.clip.new('VectorPath', { })
   Viewport.mask   = state.clip

   if (Options.inverse) then
      local pc = state.path_cmd
      pc.type = PE_Move
      pc.x    = -1
      pc.y    = -1
      state.clip_path.mtAddCommand(pc)
      pc.type = PE_Line
      pc.x = state.v_width + 1
      state.clip_path.mtAddCommand(pc)
      pc.y = state.v_height + 1
      state.clip_path.mtAddCommand(pc)
      pc.x = -1
      state.clip_path.mtAddCommand(pc)
      pc.type = PE_Close
      state.clip_path.mtAddCommand(pc)
   end

   if (Options.rotate) then
      local err
      err, state.matrix = state.clip_path.mtNewMatrix()
      mVector.Rotate(state.matrix, Options.rotate, state.v_width * 0.5, state.v_height * 0.5)
   end

   state.free = function(State)
      State.viewport.mask = nil
      State.clip.free()
      State.clip = nil
      State.clip_path = nil
      collectgarbage()
      State.viewport.acDraw()
   end

   vfx.initTimer(state, Options)
   return state
end

----------------------------------------------------------------------------------------------------------------------
-- Enables fading-in of a viewport.
--
-- Seconds:  Specifies the maximum number of seconds for the effect to complete.
-- Delay: Delays the initial start of the effect, measured in seconds.

vfx.fadeIn = function(Viewport, Seconds, Delay)
   local state = { name = 'fadeIn', seconds = nz(Seconds, 1.0), delay = nz(Delay, 0), callback = CallbackOnCompletion }

   Viewport.opacity = 0
   local err
   err, state.timerID = mSys.SubscribeTimer(1*vfx.fps, function(Subscriber, Elapsed, CurrentTime)
      if not Viewport.exists() then check(ERR_Terminate) end

      if (state.time == nil) then state.time = CurrentTime end
      if (state.delay > 0) then
         if ((CurrentTime - state.time) >= state.delay * 1000000) then
            state.delay = 0
            mSys.UpdateTimer(state.timerID, 1*vfx.fps) -- Resubscribe to the timer to clear the TotalElapsed counter
            state.time = nil
         end
      else
         local value = (CurrentTime - state.time) / (state.seconds * 1000000)
         if (value >= 1.0) then
            Viewport.opacity = 1.0
            Viewport.acDraw()
            if state.callback then state.callback(state) end
            check(ERR_Terminate)
         else
            Viewport.opacity = value
            Viewport.acDraw()
         end
      end
   end)

   return state
end

----------------------------------------------------------------------------------------------------------------------
-- Scale the viewport from nothing to full-size within the allotted time.

vfx.zoomIn = function(Viewport, Seconds, Delay, CallbackOnCompletion)
   local state = { name = 'zoomIn', seconds = nz(Seconds, 1.0), delay = nz(Delay, 0), callback = CallbackOnCompletion }

   local err
   err, state.matrix = Viewport.mtNewMatrix()
   mVector.Translate(state.matrix, Viewport.width*0.5, Viewport.height*0.5)
   mVector.Scale(state.matrix, value, value)
   mVector.Translate(state.matrix, -Viewport.width*0.5, -Viewport.height*0.5)
   Viewport.acDraw()

   err, state.timerID = mSys.SubscribeTimer(1*vfx.fps, function(Subscriber, Elapsed, CurrentTime)
      if not Viewport.exists() then check(ERR_Terminate) end

      if (state.time == nil) then state.time = CurrentTime end
      if (state.delay > 0) then
         if ((CurrentTime - state.time) >= state.delay * 1000000) then
            state.delay = 0
            mSys.UpdateTimer(state.timerID, 1*vfx.fps) -- Resubscribe to the timer to clear the TotalElapsed counter
            state.time = nil
         end
      else
         local value = (CurrentTime - state.time) / (state.seconds * 1000000)
         if (value >= 1.0) then value = 1.0 end

         mVector.ResetMatrix(state.matrix)
         mVector.Translate(state.matrix, -Viewport.width*0.5, -Viewport.height*0.5)
         mVector.Scale(state.matrix, value, value)
         mVector.Translate(state.matrix, Viewport.width*0.5, Viewport.height*0.5)
         Viewport.acDraw()

         if (value >= 1.0) then
            if state.callback then state.callback(state) end
            check(ERR_Terminate)
         end
      end
   end)

   return state
end

----------------------------------------------------------------------------------------------------------------------
-- Scale the viewport from full-size to nothing within the allotted time.

vfx.zoomOut = function(Viewport, Seconds, Delay, CallbackOnCompletion)
   local state = { name = 'zoomOut', seconds = nz(Seconds, 1.0), delay = nz(Delay, 0), callback = CallbackOnCompletion }

   local err
   err, state.matrix = Viewport.mtNewMatrix()
   mVector.Translate(state.matrix, Viewport.width*0.5, Viewport.height*0.5)
   mVector.Scale(state.matrix, value, value)
   mVector.Translate(state.matrix, -Viewport.width*0.5, -Viewport.height*0.5)
   Viewport.acDraw()

   err, state.timerID = mSys.SubscribeTimer(1*vfx.fps, function(Subscriber, Elapsed, CurrentTime)
      if not Viewport.exists() then check(ERR_Terminate) end

      if (state.time == nil) then state.time = CurrentTime end
      if (state.delay > 0) then
         if ((CurrentTime - state.time) >= state.delay * 1000000) then
            state.delay = 0
            mSys.UpdateTimer(state.timerID, 1*vfx.fps) -- Resubscribe to the timer to clear the TotalElapsed counter
            state.time = nil
         end
      else
         local value = (CurrentTime - state.time) / (state.seconds * 1000000)
         if (value >= 1.0) then value = 1.0 end

         mVector.ResetMatrix(state.matrix)
         mVector.Translate(state.matrix, -Viewport.width*0.5, -Viewport.height*0.5)
         mVector.Scale(state.matrix, 1.0 - value, 1.0 - value)
         mVector.Translate(state.matrix, Viewport.width*0.5, Viewport.height*0.5)
         Viewport.acDraw()

         if (value >= 1.0) then
            if state.callback then state.callback(state) end
            check(ERR_Terminate)
         end
      end
   end)

   return state
end

----------------------------------------------------------------------------------------------------------------------
-- Move the viewport to its indicated (x,y) position within the allotted time.  By default the move will commence from
-- an out-of-bounds position on the left.  The client can override this with a custom FromX, FromY position.

vfx.moveIn = function(Viewport, Seconds, Delay, FromX, FromY)

end

vfx.moveOut = function(Viewport, Seconds, Delay, FromX, FromY)

end

----------------------------------------------------------------------------------------------------------------------
-- 'Shake' a vector by applying an alternating rotation around its center.  Intensity is between 0.1 and 2.0 and
-- affects the number of shakes and maximum angle of rotation.

vfx.shake = function(Viewport, Seconds, Delay, Intensity, CallbackOnCompletion)
   local state = { name = 'shake', intensity = nz(Intensity, 1.0), seconds = nz(Seconds, 1.0), delay = nz(Delay, 0), callback = CallbackOnCompletion }

   if (state.intensity < 0.1) then
      state.intensity = 0.1
   elseif (state.intensity > 2) then
      state.intensity = 2
   end

   local MAX_ANGLE = 90 * Intensity
   local QRT_ANGLE = MAX_ANGLE * 0.25
   local SHAKES    = math.round(6 * Intensity)
   if (SHAKES < 1) then SHAKES = 1 end

   local err
   err, state.matrix = Viewport.mtNewMatrix()
   err, state.timerID = mSys.SubscribeTimer(1*vfx.fps, function(Subscriber, Elapsed, CurrentTime)
      if not Viewport.exists() then check(ERR_Terminate) end

      if (state.time == nil) then state.time = CurrentTime end
      if (state.delay > 0) then
         if ((CurrentTime - state.time) >= state.delay * 1000000) then
            state.delay = 0
            mSys.UpdateTimer(state.timerID, 1*vfx.fps) -- Resubscribe to the timer to clear the TotalElapsed counter
            state.time = nil
         end
      else
         mVector.ResetMatrix(state.matrix)

         if (CurrentTime > state.time + (state.seconds * 1000000)) then
            Viewport.acDraw()
            if state.callback then state.callback(state) end
            check(ERR_Terminate)
         end

         local cycle = (state.seconds / SHAKES) * 1000000
         local angle = (math.fmod(CurrentTime - state.time, cycle) / cycle) * MAX_ANGLE

         if (angle < QRT_ANGLE) then -- (45)
            angle = angle
         elseif (angle < (MAX_ANGLE - QRT_ANGLE)) then
            angle = QRT_ANGLE - (angle - QRT_ANGLE)
         else
            angle = -QRT_ANGLE + (angle - (MAX_ANGLE - QRT_ANGLE))
         end

         mVector.Rotate(state.matrix, angle, Viewport.width*0.5, Viewport.height*0.5)
         Viewport.acDraw()
      end
   end)

   return state
end

----------------------------------------------------------------------------------------------------------------------
-- Rotate the viewport 360 degrees within the allotted time.  This feature is typically chained for use with other
-- effects.

vfx.rotate = function(Viewport, Seconds, Delay, CallbackOnCompletion)
   local state = { name = 'rotate', seconds = nz(Seconds, 1.0), delay = nz(Delay, 0), callback = CallbackOnCompletion }

   local err
   err, state.matrix = Viewport.mtNewMatrix()
   err, state.timerID = mSys.SubscribeTimer(1*vfx.fps, function(Subscriber, Elapsed, CurrentTime)
      if not Viewport.exists() then check(ERR_Terminate) end

      if (state.time == nil) then state.time = CurrentTime end
      if (state.delay > 0) then
         if ((CurrentTime - state.time) >= state.delay * 1000000) then
            state.delay = 0
            mSys.UpdateTimer(state.timerID, 1*vfx.fps) -- Resubscribe to the timer to clear the TotalElapsed counter
            state.time = nil
         end
      else
         local value = (CurrentTime - state.time) / (state.seconds * 1000000)
         if (value >= 1.0) then value = 1.0 end

         mVector.ResetMatrix(state.matrix)
         mVector.Rotate(state.matrix, 360 * value, Viewport.width*0.5, Viewport.height*0.5)

         Viewport.acDraw()

         if (value >= 1.0) then
            if state.callback then state.callback(state) end
            check(ERR_Terminate)
         end
      end
   end)

   return state
end

----------------------------------------------------------------------------------------------------------------------
-- Use chain() to receive a single callback once all effects in the chain have finished processing.
--
-- Example: vfx.chain({ vfx.zoomIn(Viewport, 0.5), vfx.fadeIn(Viewport, 0.25) }, Callback)

vfx.chain = function(Effects, CallbackOnCompletion)
   local state = { effects = Effects }

   state.counter = #Effects
   for _, effect in ipairs(Effects) do
      effect.callback = function()
         state.counter = state.counter - 1
         if (state.counter == 0) and CallbackOnCompletion then
            CallbackOnCompletion(state)
         end
      end
   end

   return state
end
