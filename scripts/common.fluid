-- Common utility functions are kept in this module.

------------------------------------------------------------------------------
-- Serialise the key-values of a table into an XML string.

table.toXML = function(t)
   local out = ''
   for tag,v in pairs(t) do
      if type(v) is 'table' then -- tag
         out = out .. '<' .. tag
         local child = ''
         for ak,av in pairs(v) do
            if type(ak) is 'number' then -- key-less, can be child tag or content
               if type(av) is 'table' then
                  for ck,cv in pairs(av) do
                     if type(cv) is 'table' then
                        child = child .. table.toXML({ [ck] = cv })
                     else
                        child = child .. string.escXML(cv)
                     end
                  end
               else
                  child = child .. string.escXML(tostring(av)) -- content
               end
            elseif type(av) is 'string' then -- attribute
               out = out .. ' ' .. ak .. '="' .. string.escXML(av) .. '"'
            elseif type(av) is 'number' then -- attribute
               out = out .. ' ' .. ak .. '=' .. av
            elseif type(av) is 'boolean' then -- attribute
               if av is true then
                  out = out .. ' ' .. ak
               end
            else
               child = child .. string.escXML(tostring(av)) -- content
            end
         end

         if child != '' then
            out = out .. '>' .. child .. '</>'
         else
            out = out .. '/>'
         end
      else
         out = '<' .. tag .. '/>'
      end
   end
   return out
end

------------------------------------------------------------------------------
-- Usage: for k,v in table.sortByKeys(the_table) do

table.sortByKeys = function(t, f)
   local a = {}
   for n in pairs(t) do table.insert(a, n) end
   table.sort(a, f)
   local i = 0
   local iter = function()
      i = i + 1
      if a[i] is nil then return nil
      else return a[i], t[a[i]]
      end
   end
   return iter
end

------------------------------------------------------------------------------

if file is nil then
   file = { ui = { } }
end

-- Read an entire file as a string.
-- Will throw an exception if the file is not found or the complete data cannot be read.

file.readAll = function(Path)
   local ex, fl = catch(function() return obj.new('file', { flags='READ', path=Path } ) end)

   if ex then
      error('Failed to open file "' .. nz(Path,'NIL') .. '": ' .. ex.message)
   end

   local file_buffer = string.alloc(fl.size)
   local err, bytes_read = fl.acRead(file_buffer)
   fl.free()
   if (err is ERR_Okay) or (bytes_read != #file_buffer) then
      return file_buffer
   else
      error('Failed to read ' .. #file_buffer .. ' bytes from "' .. Path .. '"')
   end
end

------------------------------------------------------------------------------

file.writeAll = function(Path, Content)
   local fl = obj.new('file', { path = Path, flags = 'WRITE|NEW' })
   fl.acWrite(Content)
   fl.free()
end

------------------------------------------------------------------------------

file.isFolder = function(Path)
   local e = string.sub(Path, -1)
   if (e is '/') or (e is '\\') or (e is ':') then return true end
   return false
end

------------------------------------------------------------------------------

file.splitPath = function(Path)
   if Path is nil then return nil, nil end
   local path, fl = string.match(Path, '^(.+[/:\\])(.+)$')
   if path is nil then
      return nil, Path
   end
   return path, fl
end

------------------------------------------------------------------------------

file.sanitisePath = function(Path)
   local v = string.gsub(Path, '[:/\\][:/\\]+', function(n) return n:sub(1,1) end)
   return v
end
