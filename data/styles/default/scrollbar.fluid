-- Styling for the 'gui/scrollbar' script.

   if mVec == nil then mVec = mod.load('vector') end

   local glCounter = 0

local ARROW_FILL = 'rgba(0,0,0,.8)'
local ARROW_FILL_ACTIVE = 'rgba(0,0,0,.95)'

return {
   arrange = function(State)
      State.slider.border.width  = State.sliderVP.width - 2
      State.slider.border.height = State.sliderVP.height - 2
   end,
   background = function(State, Viewport)
      local gradient = 'scrollbar' .. glCounter
      glCounter = glCounter + 1

      gui.simpleGradient(Viewport.scene, gradient, { { r=176,g=178,b=183,a=255 }, { r=212,g=211,b=215,a=255 } }, 0, 0, 0, '100%', nil, true)

      State.barBkgd = Viewport.new('VectorRectangle', {
         width = '100%', height = '100%', fill = 'url(#' .. gradient .. ')'
      })
   end,
   slider = function(State, Viewport)
      local gradient = 'slider' .. glCounter
      glCounter = glCounter + 1
      State.slider = { }

      if (State.direction == 'V') then
         gui.simpleGradient(Viewport.scene, gradient, { { r=252,g=251,b=255,a=255 }, { r=205,g=206,b=220,a=255 } }, 0, 0, '100%', 0, 'boundingbox', true)
      else
         gui.simpleGradient(Viewport.scene, gradient, { { r=252,g=251,b=255,a=255 }, { r=205,g=206,b=220,a=255 } }, 0, 0, 0, '100%', 'boundingbox', true)
      end

      State.slider.bkRect = Viewport.new('VectorRectangle', {
         width = '100%', height = '100%',
         stroke = 'rgba(148,149,160,1)',
         strokeWidth = 1,
         fill = 'url(#' .. gradient .. ')'
      })

      State.slider.border = Viewport.new('VectorRectangle', {
         x = 1, y = 1,
         width = Viewport.width-2, height = Viewport.height-2,
         stroke = 'rgba(255,255,255,.8)'
      })

      State.slider.decoration = Viewport.new('VectorViewport', {
         aspectRatio = 'XMid|YMid|Meet',
         x = 0, y = 0,
         viewX = 0, viewY = 0,
      })
      local dec = State.slider.decoration

      local decA = dec.new('VectorPolygon', {
         strokeWidth = 1,
         stroke      = 'rgba(0,0,0,.6)',
         dashArray   = '3,6'
      })

      local decB = dec.new('VectorPolygon', {
         strokeWidth = 1,
         stroke      = 'rgba(255,255,255,.6)',
         dashArray   = '3,6'
      })

      if (State.direction == 'V') then
         dec.width      = Viewport.width
         dec.height     = '100%'
         dec.viewWidth  = Viewport.width
         dec.viewHeight = Viewport.width * 1.5

         decA.x1 = dec.width * 0.5
         decA.x2 = dec.width * 0.5
         decA.y1 = 0
         decA.y2 = dec.viewHeight

         decB.x1 = (dec.width * 0.5) + 1
         decB.x2 = (dec.width * 0.5) + 1
         decB.y1 = 0
         decB.y2 = dec.viewHeight
      else
         dec.width      = '100%'
         dec.height     = Viewport.height
         dec.viewWidth  = Viewport.height * 1.5
         dec.viewHeight = Viewport.height

         decA.y1 = dec.height * 0.5
         decA.y2 = dec.height * 0.5
         decA.x1 = 0
         decA.x2 = dec.viewWidth

         decB.y1 = (dec.height * 0.5) + 1
         decB.y2 = (dec.height * 0.5) + 1
         decB.x1 = 0
         decB.x2 = dec.viewWidth
      end
   end,
   negButton = function(State, Viewport)
      local gradient = 'neg' .. glCounter
      glCounter = glCounter + 1
      State.negButton = { viewport = Viewport }

      Viewport.viewX       = 23.6016 - 12
      Viewport.viewY       = 24.9375 - 12
      Viewport.viewWidth   = 28.5 + 24
      Viewport.viewHeight  = 25.3333 + 24
      Viewport.aspectRatio = bit.bor(ARF_X_MID, ARF_Y_MID, ARF_MEET)

      gui.simpleGradient(Viewport.scene, gradient, { { r=255,g=255,b=255,a=255 }, { r=202,g=203,b=217,a=255 } }, 0, 0, 0, '100%', 'boundingbox', true)

      Viewport.new('VectorRectangle', { -- Bkgd & border
         x      = Viewport.viewX-1,
         y      = Viewport.viewY-1,
         width  = Viewport.viewWidth+2,
         height = Viewport.viewHeight+2,
         fill   = 'url(#' .. gradient .. ')'
      })

      State.negButton.arrow = Viewport.new('VectorPath', { -- Arrow
         fill = ARROW_FILL,
         sequence = 'M 37.8516,35.625L 34.6849,38.7917L 23.6016,50.2708L 23.6016,39.9792L 37.8516,24.9375L 52.1016,39.9792L 52.1016,50.2708L 41.0182,38.7917L 37.8516,35.625 Z'
      })

      if (State.direction == 'H') then -- Point left
         local err, matrix = State.negButton.arrow.mtNewMatrix()
         mVec.rotate(matrix, 270, Viewport.viewX + (Viewport.viewWidth*0.5), Viewport.viewY + (Viewport.viewHeight*0.5))
      end
   end,
   posButton = function(State, Viewport)
      local gradient = 'pos' .. glCounter
      glCounter = glCounter + 1
      State.posButton = { viewport = Viewport }

      Viewport.viewX       = 23.6016 - 12
      Viewport.viewY       = 24.9375 - 12
      Viewport.viewWidth   = 28.5 + 24
      Viewport.viewHeight  = 25.3333 + 24
      Viewport.aspectRatio = bit.bor(ARF_X_MID, ARF_Y_MID, ARF_MEET)

      gui.simpleGradient(Viewport.scene, gradient, { { r=255,g=255,b=255,a=255 }, { r=202,g=203,b=217,a=255 } }, 0, 0, 0, '100%', 'boundingbox', true)

      Viewport.new('VectorRectangle', { -- Bkgd & border
         x      = Viewport.viewX-1,
         y      = Viewport.viewY-1,
         width  = Viewport.viewWidth+2,
         height = Viewport.viewHeight+2,
         fill   = 'url(#' .. gradient .. ')'
      })

      State.posButton.arrow = Viewport.new('VectorPath', {
         fill = ARROW_FILL,
         sequence = 'M 37.8516,35.625L 34.6849,38.7917L 23.6016,50.2708L 23.6016,39.9792L 37.8516,24.9375L 52.1016,39.9792L 52.1016,50.2708L 41.0182,38.7917L 37.8516,35.625 Z'
      })

      local err, matrix = State.posButton.arrow.mtNewMatrix()
      if (State.direction == 'V') then -- Point down
         mVec.rotate(matrix, 180, Viewport.viewX + (Viewport.viewWidth * 0.5), Viewport.viewY + (Viewport.viewHeight * 0.5))
      else -- Point right
         mVec.rotate(matrix, 90, Viewport.viewX + (Viewport.viewWidth * 0.5), Viewport.viewY + (Viewport.viewHeight * 0.5))
      end
   end,
   negButtonPress = function(State, Value)
      if (Value == 1) then
         State.negButton.arrow.fill = ARROW_FILL_ACTIVE
      else
         State.negButton.arrow.fill = ARROW_FILL
      end
      State.negButton.viewport.acDraw()
   end,
   posButtonPress = function(State, Value)
      if (Value == 1) then
         State.posButton.arrow.fill = ARROW_FILL_ACTIVE
      else
         State.posButton.arrow.fill = ARROW_FILL
      end
      State.posButton.viewport.acDraw()
   end
}
