
   require 'gui'

   if (not mVec) then mVec = mod.load('vector') end

-- Apply a fill to a vector and all its children

local function defineGradient(Scene, Name, First, Last, X1, Y1, X2, Y2, Units)
   local stops = { }
   local first = struct.new('GradientStop')
   first.offset    = 0
   first.rgb.red   = First.r / 255
   first.rgb.green = First.g / 255
   first.rgb.blue  = First.b / 255
   first.rgb.alpha = nz(First.a,255) / 255
   table.insert(stops, first)

   local last = struct.new('GradientStop')
   last.offset    = 1.0
   last.rgb.red   = Last.r / 255
   last.rgb.green = Last.g / 255
   last.rgb.blue  = Last.b / 255
   last.rgb.alpha = nz(Last.a,255) / 255
   table.insert(stops, last)

   if (Scene) then
      local gradient = Scene.new('VectorGradient', {
         name=nz(Name, 'styleGradient'), type='linear', stops=stops, x1=X1, y1=Y1, x2=X2, y2=Y2, units=nz(Units,'boundingbox')
      })
      Scene.mtAddDef(Name, gradient)
      return gradient
   else
      return obj.new('VectorGradient', {
         name=nz(Name, 'styleGradient'), type='linear', stops=stops, x1=X1, y1=Y1, x2=X2, y2=Y2, units=nz(Units,'boundingbox')
      })
   end
end

glStyles = {
   combobox = {
      decoration = function(Combo, Viewport)

         -- Compute the width of the combobox relative to the width of the drop-down menu.
--[[
         if bit.band(Viewport.dimensions, DMF_WIDTH) == 0 then
            if bit.band(Viewport.dimensions, DMF_X) == 0 or bit.band(Viewport.dimensions, DMF_X_OFFSET) == 0 then
               local menuWidth = menu.width
               if (menuWidth > MAX_MENU_WIDTH) then menuWidth = MAX_MENU_WIDTH end
               if (Combo.labelWidth + menuWidth > MIN_MENU_WIDTH) then
                  Viewport.width = Combo.labelWidth + menuWidth + iconSize
               else
                  Viewport.width = Combo.labelWidth + MIN_MENU_WIDTH + iconSize
               end
            end
         end

         Combo.menu.subscribe('activate', function(Menu, Args, Combo)
            local item = Combo.menu.selection
            if item then
               if item.text != textInput.string then
                  Combo.string = item.text
                  Combo.acActivate()
               end
            else
               error('No item selected.')
            end
         end, Combo)
--]]
      end
   },
   window = {
      defaultValues = function(Window)
         local parent = Window.parent
         if parent then
            Window.x = parent.leftMargin + 10
            Window.y = parent.topMargin + 10
         end
         Window.moveToBack   = 0
         Window.resizeBorder = 6
         Window.leftLimit    = 0
         Window.topLimit     = 0
         Window.rightLimit   = 0
         Window.bottomLimit  = 0
         Window.clientTop    = 29
         Window.clientLeft   = 5
         Window.clientRight  = 5
         Window.clientBottom = 5
         Window.leftMargin   = 5
         Window.topMargin    = 5
         Window.bottomMargin = 5
         Window.rightMargin  = 5
         Window.resize       = 'all'
         Window.minimiseCallback = function(Window)
            Window.surface.acHide()
            local desktop = obj.find('desktop')
            if (desktop) then desktop.acFocus() end
         end
      end,
      decoration = function(Window, Surface)
         Surface.mtAddCallback(function(Surface, Bitmap)
            local greyA, greyB, greyC
            local err, black = Bitmap.mtGetColour(0, 0, 0, 0, 255)
            if bit.band(Surface.flags, RNF_HAS_FOCUS) == 0 then
               err, greyA = Bitmap.mtGetColour(140, 140, 140, 255)
               err, greyB = Bitmap.mtGetColour(160, 160, 160, 255)
               err, greyC = Bitmap.mtGetColour(200, 200, 200, 255)
            else
               err, greyA = Bitmap.mtGetColour(120, 120, 190, 255)
               err, greyB = Bitmap.mtGetColour(140, 140, 210, 255)
               err, greyC = Bitmap.mtGetColour(180, 180, 250, 255)
            end

            -- Window Frame
            Bitmap.mtDrawRectangle(0, 0, Surface.width, Surface.height, black, 0)
            Bitmap.mtDrawRectangle(1, 1, Surface.width-2, Surface.height-2, greyA, 0)
            Bitmap.mtDrawRectangle(2, 2, Surface.width-4, Surface.height-4, greyB, 0)
            Bitmap.mtDrawRectangle(3, 3, Surface.width-6, Surface.height-6, greyC, 0)
            Bitmap.mtDrawRectangle(4, 4, Surface.width-8, Surface.height-8, greyB, 0)
            Bitmap.mtDrawRectangle(5, 5, Surface.width-10, Surface.height-10, gui.bitmapColour(Bitmap, 'window'), BAF_FILL)
            -- Titlebar edge
            Bitmap.mtDrawRectangle(4, 26, Surface.width-8, 1, greyB, BAF_FILL)
            Bitmap.mtDrawRectangle(4, 27, Surface.width-8, 1, greyC, BAF_FILL)
            Bitmap.mtDrawRectangle(4, 28, Surface.width-8, 1, greyB, BAF_FILL)

            if nz(Window.insideBorder) then
               local err, border = Bitmap.mtGetColour(180, 180, 200, 255)
               Bitmap.mtDrawRectangle(Surface.leftMargin-1, Surface.topMargin-1, Surface.width - Surface.rightMargin + 1,
                  Surface.height - Surface.bottomMargin + 1, border, BAF_BLEND)
            end
         end)
      end,
      menubar = function(Window, Surface)
         local menubar
         if (Surface.parent != nil) then -- Window is in the native desktop
            menubar = Surface.new('menubar', { x=5, y=Window.clientTop, xOffset=5, target=Surface.parent, path=Window.menu })
         else -- Window is in a hosted environment (e.g. X11, Windows)
            menubar = Surface.new('menubar', { x=0, y=0, xOffset=0, path=Window.menu })
         end
         Surface.topMargin = menubar.bottom + 4
         Window.menubar = menubar
      end,
      titlebar = function(Window, Surface)
         local bar = Surface.new('surface', { drag=Surface, height=21, x=5, y=5, xOffset=5, flags='!StickToFront' })

         local lGradientA = defineGradient(nil, nil, {r=76,g=62,b=128,a=255}, {r=126,g=123,b=187,a=255}, 0, 0, '100%', 0)
         local lGradientB = defineGradient(nil, nil, {r=76,g=76,b=76,a=255}, {r=150,g=150,b=150,a=255}, 0, 0, '100%', 0)

         bar.mtAddCallback(function(Surface, Bitmap)
            local err, path = mVec.generateRectangle(0, 0, Surface.width, Surface.height)
            if (err == ERR_Okay) then
               if (bit.band(Surface.flags, RNF_HAS_FOCUS) != RNF_HAS_FOCUS) then
                  mVec.drawPath(Bitmap, path, 0, nil, lGradientA)
               else
                  mVec.drawPath(Bitmap, path, 0, nil, lGradientB)
               end
               mVec.freePath(path)
            end
            for y=1,Surface.height,2 do
               local err, colShade = Bitmap.mtGetColour(0, 0, 0, 40)
               Bitmap.mtDrawRectangle(0, y, Surface.width, 1, colShade, bit.bor(BAF_FILL, BAF_BLEND))
            end
         end)

         Window.titleObject = bar.new('text', {
            face=gui.fonts.titlebar.face, colour=gui.fonts.titlebar.colour, outline='40,40,40',
            string=Window.title, x=26, xOffset=60, y=1
         })

         -- Application icon to the left of the titlebar

         bar.new('image', { x=5, align='vertical', path=Window.icon .. '(16)', iconFilter='pearl' })

         local tlX, tlY
         input.subscribe(JTYPE_BUTTON, bar, 0, function(Handler, Msg)
            if (Msg.type != JET_BUTTON_1) then return end
            if (Msg.x >= 5) and (Msg.x < 22) then
               if (Msg.value > 0) then -- Button down
                  tlX = Msg.absX
                  tlY = Msg.absY
               else -- Released
                  if (bit.band(Msg.flags, JTYPE_DBL_CLICK) != 0) then
                     if (math.abs(Msg.absX - tlX) <= 2) and (math.abs(Msg.absY - tlY) <= 2) then
                        Window.mtClose()
                     end
                  end
               end
            end
         end)

         -- Clicking anywhere on the titlebar will move the window to the front.

         input.subscribe(JTYPE_BUTTON, bar, 0, function(Handler, Msg)
            if (Msg.type == JET_BUTTON_1) and (Msg.value > 0) then
               Surface.acMoveToFront()
            end
         end)

         -- Double clicking on the titlebar will maximise it.

         local xoffset = 3
         if nz(Window.maximise) then
            input.subscribe(JTYPE_BUTTON, bar, 0, function(Handler, Msg)
               if (Msg.type == JET_BUTTON_1) and (bit.band(Msg.flags, JTYPE_DBL_CLICK) != 0) and (Msg.value == 0) then
                  if (Msg.x >= 24) and (Msg.y >= 0) and (Msg.x < bar.width - 60) and (Msg.y < bar.height) then
                     Window.mtMaximise(1)
                  end
               end
            end)
         end

         -- Close Gadget

         if nz(Window.close) then
            catch(function()
               local rgnClose = bar.new('surface', { xoffset=xoffset, y=2, width=17, height=17, region=true })
               rgnClose.acShow()
               input.subscribe(JTYPE_BUTTON, rgnClose, 0, function(Handler, Msg)
                  Window.mtClose()
               end)
               rgnClose.new('image', { path='icons:items/checkmark_cross(16)', iconFilter='pearl', align='center' })
               xoffset = xoffset + 22
            end)
         end

         -- Maximise Gadget

         catch(function()
            local max = bar.new('surface', { width=17, height=17, y=2, xoffset=xoffset, region=true })
            max.acShow()
            input.subscribe(JTYPE_BUTTON, max, 0, function(Handler, Msg)
               Window.mtMaximise()
            end)
            if nz(Window.maximise) then
               max.new('image', { path='icons:items/window_maximise(16)', iconFilter='pearl', align='center' })
            else
               max.new('image', { path='icons:items/window_maximise(16)', iconFilter='pearl', align='center', opacity='33%' })
            end
            xoffset = xoffset + 22
         end)

         -- Minimise Gadget

         catch(function()
            local min = bar.new('surface', { width=17, height=17, y=2, xoffset=xoffset, region=true })
            min.acShow()
            input.subscribe(JTYPE_BUTTON, min, 0, function(Handler, Msg)
               Window.mtMinimise()
            end)
            if nz(Window.minimise) then
               min.new('image', { path='icons:items/window_minimise(16)', iconFilter='pearl', align='center' })
            else
               min.new('image', { path='icons:items/window_minimise(16)', iconFilter='pearl', align='center', opacity='33%' })
            end
            xoffset = xoffset + 22
         end)

         -- Move-To-Back Gadget

         if nz(Window.moveToBack) then
            catch(function()
               local mtb = bar.new('surface', { width=17, height=17, y=2, xoffset=xoffset, region=true })
               mtb.acShow()
               input.subscribe(JTYPE_BUTTON, mtb, 0, function(Handler, Msg)
                  Surface.acMoveToBack()
               end)
               mtb.new('image', { path='icons:layers/bringforward(16)', align='center' })
               xoffset = xoffset + 22
            end)
         end

         bar.acShow()
      end
   }
} -- glStyles
