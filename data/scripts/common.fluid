-- Common utility functions are kept in this module.

math.round = function(num, idp)
   local mult = 10^(idp or 0)
   return math.floor(num * mult + 0.5) / mult
end

------------------------------------------------------------------------------
-- Parse the key-values of a table into an XML string.

table.toXML = function(t)
   local out = ''
   for tag,v in pairs(t) do
      if type(v) == 'table' then // tag
         out = out .. '<' .. tag
         local child = ''
         for ak,av in pairs(v) do
            if type(ak) == 'number' then // key-less, can be child tag or content
               if type(av) == 'table' then
                  for ck,cv in pairs(av) do
                     if type(cv) == 'table' then
                        child = child .. table.toXML({ [ck] = cv })
                     else
                        child = child .. string.escXML(cv)
                     end
                  end
               else
                  child = child .. string.escXML(tostring(av)) // content
               end
            elseif type(av) == 'string' then // attribute
               out = out .. ' ' .. ak .. '="' .. string.escXML(av) .. '"'
            elseif type(av) == 'number' then // attribute
               out = out .. ' ' .. ak .. '=' .. av
            elseif type(av) == 'boolean' then // attribute
               if av == true then
                  out = out .. ' ' .. ak
               end
            else
               child = child .. string.escXML(tostring(av)) // content
            end
         end

         if child != '' then
            out = out .. '>' .. child .. '</>'
         else
            out = out .. '/>'
         end
      else
         out = '<' .. tag .. '/>'
      end
   end
   return out
end

------------------------------------------------------------------------------

string.escXML = function(s)
   if (s == nil) then return '' end
   s = string.gsub(s, '&', '&amp;')
   s = string.gsub(s, '<', '&lt;')
   s = string.gsub(s, '>', '&gt;')
   return s
end

------------------------------------------------------------------------------

string.cap = function(s)
   if nz(s) then
      return s:sub(1,1):upper() .. s:sub(2)
   else
      return ''
   end
end

------------------------------------------------------------------------------
-- Trims either side of a string

string.trim = function(s)
   if nz(s) then
      return string.match(s,'^()%s*$') and '' or string.match(s,'^%s*(.*%S)')
   else
      return ''
   end
end

------------------------------------------------------------------------------

string.split = function(s, sep)
   if (s == nil) then return { } end
   if sep == nil then
      sep = '%s'
   end
   local t = { }
   local i = 1
   for str in string.gmatch(s, '([^' .. sep .. ']*)') do
      t[i] = t[i] or str
      if (str == '') then
         i = i + 1
      end
   end
   return t
end

------------------------------------------------------------------------------

string.startsWith = function(s, cmp)
   if s == nil or cmp == nil then return false end
   return string.sub(s, 1, #cmp) == cmp
end

------------------------------------------------------------------------------

string.endsWith = function(s, cmp)
   if s == nil or cmp == nil then return false end
   return cmp == "" or string.sub(s, -#cmp) == cmp
end

------------------------------------------------------------------------------
-- Usage: for k,v in table.sortByKeys(the_table) do

table.sortByKeys = function(t, f)
   local a = {}
   for n in pairs(t) do table.insert(a, n) end
   table.sort(a, f)
   local i = 0
   local iter = function()
      i = i + 1
      if a[i] == nil then return nil
      else return a[i], t[a[i]]
      end
   end
   return iter
end

------------------------------------------------------------------------------

if (file == nil) then
   file = { }
end

-- Will throw an exception if the file is not found or the complete data cannot be read.

file.readAll = function(Path)
   local fl = obj.new('file', { flags='READ', path=Path } )
   if (fl == nil) then error('Failed to open file "' .. nz(Path,'NIL') .. '"') end
   local fileBuffer = string.rep(nil, fl.size)
   local err, bytesRead = fl.acRead(fileBuffer)
   if (err == ERR_Okay) then
      return fileBuffer
   else
      error('Failed to read ' .. fl.size .. ' bytes from "' .. Path .. '"')
   end
end

------------------------------------------------------------------------------

file.isFolder = function(Path)
   local e = string.sub(Path, -1)
   if (e == '/') or (e == '\\') or (e == ':') then return true end
   return false
end

------------------------------------------------------------------------------

file.splitPath = function(Path)
   if (Path == nil) then return nil, nil end
   local path, fl = string.match(Path, '^(.+[/:\\])(.+)$')
   if (path == nil) then
      return nil, Path
   end
   return path, fl
end

------------------------------------------------------------------------------

file.sanitisePath = function(Path)
   return string.gsub(Path, '[:/\\][:/\\]+', function(n) return n:sub(1,1) end)
end
