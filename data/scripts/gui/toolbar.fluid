--[[
The ToolBar interface creates and manages the use of items and groups of items in the UI, typically using icons, text
or both for item representation.  Each item performs a specific application function that is activated via a callback
mechanism.

The following example illustrates basic usage:

   tbar = gui.toolbar(surface, {
      x=0, y=0, xOffset=0,
      createItems = function(Bar)
         Bar.addItem(10, 'Rename', 'Rename', 'layout/interface_textbox', function()
            print('rename')
         end)
         Bar.addItem(11, 'Delete', 'Delete', 'tools/eraser', function()
            print('delete')
         end)
      end
   })

The first parameter is the target surface for the ToolBar graphic.  Valid options to use when creating the toolbar are
as follows:

  createItems: Required.  Defines the items that will be displayed in the toolbar.
  orientation: Defaults to 'horizontal' (left to right item arrangement).  Set to 'vertical' for top to bottom.
  x, y:        The x and y coordinates of the toolbar.
  xOffset:     Optional x offset.  If not set then the toolbar width is calculated based on the number of items.
  tabFocus:    Optional reference to a TabFocus object for the ToolBar to connect to.
  iconSize:    The preferred size of the toolbar icons, in pixels.
  cellMargin:  The amount of whitespace at the four edges of each item, measured in pixels.
  theme:       Set to 'light' or 'dark' to affect the colour of the icons.

The following colour values can also be defined:

  shadow, highlight, hoverColour, selectedColour, groupBorderColour, fontColour

The resulting object consists of the following accessible fields:

  surface: The Surface object that hosts the toolbar's UI.

--]]

   require 'common'
   require 'gui'
   require 'gui/tooltip'
   include 'vector'

gui.toolbar = function(Target, Options)
   local mFont = mod.load('font')

   local self = { // Public variables
      surface  = nil
   }

   local lItemLookup = { }
   local lIcons = { }
   local lFirstItem, lLastItem, lClicked, lTipTimer, lScene, lViewport, lVectorGroup, lVectorHighlightIcon
   local lVectorHover, lGroupClip, lColumnBreadth
   local lArrangedWidth // True if the toolbar width is dynamic.
   local lHorizontal // True if items are arranged from left to right
   local lShadow       = gui.strToRGB(nz(Options.shadow, '0,0,0,128'))
   local lHighlight    = gui.strToRGB(nz(Options.highlight, '255,255,255,255'))
   local lColHover     = gui.strToRGB(nz(Options.hoverColour, '255,255,255,96'))
   local lColSelected  = gui.strToRGB(nz(Options.selectedColour, '255,255,255,128'))
   local lGroupBorder  = gui.strToRGB(nz(Options.groupBorderColour, '255,255,255,128'))
   local lTipDelay     = 0.75
   local lFontColour   = nz(Options.fontColour, '255,255,255,255')
   local lCellMargin   = nz(Options.cellMargin, 6)
   local lGroupCount   = 0
   local lIconSize     = nz(Options.iconSize, 16)
   local lDisabled     = false // If true, the entire toolbar is disabled.
   local lArranged     = false
   local lGroupMargin  = 4
   local lThemeColour
   local count = 0

   local TI_ICON  = 1
   local TI_BREAK = 2
   local TI_GROUP = 3

   local function counter()
      count = count + 1
      return count
   end

   local function sendFeedback()
      if (lCurrentItem) and (lCurrentItem.callback) then
         lCurrentItem.callback(lCurrentItem.id, lCurrentItem.name)
      end
   end

   local function drawItem(Item)
      if (Item) then
         self.surface.acDraw(Item.x, 0, Item.width, lSurfaceHeight)
      end
   end

   local function firstIcon() // Return the first item that is an icon
      local item = lFirstItem
      while ((item != nil) and (item.type != TI_ICON)) do item = item.next end
      return item
   end

   local function lastIcon() // Return the last item that is an icon
      local item = lLastItem
      while ((item != nil) and (item.type != TI_ICON)) do item = item.prev end
      return item
   end

   local function newItem(Type, Name, ID)
      if (ID) and (lItemLookup[ID]) then error('An item with identifier ' .. ID .. ' already exists.') end

      local item = { type=Type, id=ID, name=Name }
      if nz(Name) then
         item.displayName = mSys.StrTranslateText(Name)
      end

      if lLastItem then lLastItem.next = item end
      item.prev = lLastItem
      item.next = nil
      lLastItem = item
      if not lFirstItem then lFirstItem = item end

      if ID then lItemLookup[ID] = item end
      return item
   end

   local function resetTipTimer()
      if (lTipTimer) then
         mSys.UpdateTimer(lTipTimer, 0)
         lTipTimer = nil
      end
   end

   // Return the toolbar item located at position (x,y)

   local function getCursorItem(X, Y)
      local item = lFirstItem
      while (item) do
         if (X >= item.x) and (X <  item.x + item.width) and (Y >= item.y) and (Y <  item.y + item.height) then
            if (item.type == TI_ICON) then return item end
         end
         item = item.next
      end
   end

   // Highlight selected item (for keyboard item selection)

   local function highlightItem(Item)
      if lVectorHighlightIcon.x == Item.x then return end

      lCurrentItem = Item
      lVectorHighlightIcon.x = Item.x
      lVectorHighlightIcon.y = 0
      lVectorHighlightIcon.width  = Item.width
      lVectorHighlightIcon.height = lSurfaceHeight
      lVectorHighlightIcon.visibility = 'visible'
      if (lGroupClip) then
         lVectorHighlightIcon.mask = lGroupClip
      end

      self.surface.acDraw()
   end

   local function keyFeedback(Input, Surface, Flags, Code, Unicode)
      if bit.band(Flags, KQ_PRESSED) != 0 then
         if (Code == K_ENTER) or (Code == K_NP_ENTER) or (Code == K_SPACE) then
            sendFeedback()
         elseif (Code == K_UP) or (Code == K_LEFT) then
            if (lCurrentItem) then
               local scan = lCurrentItem.prev
               while (scan) and (scan.type != TI_ICON) do
                  scan = scan.prev
               end
               if (not scan) then scan = lastIcon() end
               highlightItem(scan)
            else
               highlightItem(firstIcon())
            end
         elseif (Code == K_DOWN) or (Code == K_RIGHT) then
            if (lCurrentItem) then
               local scan = lCurrentItem.next
               while (scan) and (scan.type != TI_ICON) do
                  scan = scan.next
               end
               if (not scan) then scan = firstIcon() end
               highlightItem(scan)
            else
               highlightItem(firstIcon())
            end
         end
      end
   end

   // Main routine for arranging items within the toolbar's surface.

   local function arrangeItems()
      if not nz(lSurfaceWidth) or not nz(lSurfaceHeight) then return end

      local groupOffset = 0
      if (lGroupCount > 0) then
         groupOffset = lGroupMargin
      end

      // Vector scene generation

      if (not lVectorHover) then
         if (lGroupCount > 0) then
            lVectorHover = lViewport.new('VectorRectangle', { // Hover highlight
               fill='rgb(255,255,255)', x=0, y=0, width=1, height=1, visibility='hidden'
            })
         else
            lVectorHover = lViewport.new('VectorRectangle', { // Hover highlight
               fill='rgb(255,255,255)', x=0, y=0, width=1, height=1, visibility='hidden', roundX=4, roundY=4
            })
         end
      end

      // lGroupClip simplifies masking and lVectorGroup provides a container for hosting temporary vectors.

      if (lGroupClip) then lGroupClip.acFree() end
      if (lVectorGroup) then lVectorGroup.acFree() end

      if (lGroupCount > 0) then
         lGroupClip = lScene.new('VectorClip', { name='GroupMask', units='BoundingBox' })
      end

      lVectorGroup = lViewport.new('VectorGroup', { name='ItemGroup' })

      local item = lFirstItem

      local x, y
      if (lHorizontal) then
         x = 0
         y = groupOffset
      else
         x = groupOffset
         y = 0
      end

      local currentGroup = nil
      local spanCount = 0
      while item do
         if (item.type == TI_BREAK) then
            item.x      = x
            item.y      = y
            item.width  = 6
            item.height = lIconSize + (lCellMargin * 2)

            local stroke = string.format('rgb(%d,%d,%d,%d)', lGroupBorder.r, lGroupBorder.g, lGroupBorder.b, lGroupBorder.a)
            local seq    = string.format('M%f,%f l0,%f', x+(item.width-1) / 2, y+1, item.height)
            lVectorGroup.new('VectorPath', {
               name = 'break', stroke = stroke, sequence = seq, dashArray = '1, 1'
            })

            if (lHorizontal) then
               x = x + item.width
            else
               y = y + item.height
            end
         elseif (item.type == TI_GROUP) then
            if (lHorizontal) then
               if not item.prev then
                  x = x + groupOffset
               else
                  x = x + (lIconSize/4)
               end
            else
               if not item.prev then
                  y = y + groupOffset
               else
                  y = y + (lIconSize/4)
               end
            end

            lCurrentGroup = item
            spanCount = 0

            item.x = x
            item.y = y
            if (lHorizontal) then
               item.height = lIconSize + (lCellMargin * 2)
            else
               item.width = lIconSize + (lCellMargin * 2)
            end

            local stroke = string.format('rgb(%d,%d,%d,%d)', lGroupBorder.r, lGroupBorder.g, lGroupBorder.b, lGroupBorder.a)
            item.border = lVectorGroup.new('VectorRectangle', {
               name = 'grouprect', stroke = stroke, fill = 'rgb(0,0,0,20)', strokeWidth = 2,
               x = x, y = y, roundX = 4, roundY = 4, width = 1, height = 1
            })

            if (lGroupClip) then
               item.clip = lGroupClip.new('VectorRectangle', {
                  name = 'groupclip', x = x, y = y, roundX = 4, roundY = 4, width = 1, height = 1
               })
            end
         elseif (item.type == TI_ICON) then
            item.x      = x
            item.y      = y
            item.width  = lIconSize + (lCellMargin * 2)
            item.height = lIconSize + (lCellMargin * 2)

            if (item.svg) then
               item.svgGroup.x = x + lCellMargin
               item.svgGroup.y = y + lCellMargin
               if (lDisabled) or (item.disabled) then
                  item.vectorIcon.opacity = 0.5
               end
            elseif nz(item.displayName) then
               local gname = 'bkgd' .. counter()
               item.svgGradient = gui.simpleGradient(lScene, gname, { lThemeColour.first, lThemeColour.last }, 0, item.y, 0, item.height, 'userspace')

               item.vectorText = lVectorGroup.new('VectorText', {
                  x        = x + lCellMargin,
                  face     = 'Open Sans',
                  fontSize = lIconSize * (3/4),
                  weight   = 500,
                  fill     = 'url(#' .. gname .. ')',
                  string  = item.displayName
               })

               item.width = mFont.StringWidth(item.vectorText.font, item.displayName, -1) + (lCellMargin * 2)
               item.vectorText.y = ((lSurfaceHeight)/2) + (item.vectorText.font.height/2)

               if lDisabled or item.disabled then
                  item.vectorText.opacity = 0.5
               end
            end

            if (lHorizontal) then
               x = x + item.width
            else
               y = y + item.height
            end

            spanCount = spanCount + 1

            if (lCurrentGroup) then
               if (lHorizontal) then
                  lCurrentGroup.width  = x - lCurrentGroup.x
                  lCurrentGroup.height = lSurfaceHeight - (groupOffset * 2)
               else
                  lCurrentGroup.width  = lSurfaceWidth - (groupOffset * 2)
                  lCurrentGroup.height = y - lCurrentGroup.y
               end
               lCurrentGroup.border.width  = lCurrentGroup.width
               lCurrentGroup.border.height = lCurrentGroup.height
               lCurrentGroup.clip.width    = lCurrentGroup.width
               lCurrentGroup.clip.height   = lCurrentGroup.height
               if (spanCount == lCurrentGroup.span) then
                  if (lHorizontal) then
                     x = x + groupOffset // Gap between groups
                  else
                     y = y + groupOffset
                  end
                  lCurrentGroup = nil
               end
            end
         end

         item = item.next
      end

      if (lArrangedWidth) then
         self.surface.width = x
      end
      lArranged = true
   end

   // Insert a visual break between items.

   self.addBreak = function()
      newItem(TI_BREAK, 'break', nil)
      lArranged = false
   end

   // Add a clickable item to the toolbar.  The Name acts as the item text that is displayed in the toolbar if no
   // icon can be displayed.  Set the Tip string for a user hint during hover events.  The icon string must be in the
   // standard format of 'category/icon'.

   self.addItem = function(ID, Name, Tip, Icon, Function)
      local item = newItem(TI_ICON, Name, ID)
      item.callback = Function

      if (Tip) then
         item.tip = mSys.StrTranslateText(Tip)
      end

      if (Icon) then
         catch(function()
            local gname = 'bkgd' .. counter()
            item.svgGroup = lViewport.new('VectorViewport', { x=0, y=0, width=lIconSize, height=lIconSize })
            item.svgGradient = gui.simpleGradient(lScene, gname, { lThemeColour.first, lThemeColour.last }, 0, 0, 0, 1)
            item.svg = obj.new('svg', { target=item.svgGroup, path='system:icons/Default/' .. Icon .. '.svg' })
            gui.applyFill(item.svgGroup, 'url(#' .. gname .. ')')

            local viewport = item.svgGroup.child
            if (viewport != nil) then
               while (child != nil) do
                  if (child.class.id == ID_VECTORVIEWPORT) then
                     viewport = child
                     break
                  end
               end

               if (viewport.viewHeight < viewport.viewWidth) then
                  item.svgGradient.y1 = viewport.viewY - ((viewport.viewWidth - viewport.viewHeight) * 0.5)
                  item.svgGradient.y2 = item.svgGradient.y1 + viewport.viewWidth
               else
                  item.svgGradient.y1 = viewport.viewY
                  item.svgGradient.y2 = viewport.viewY + viewport.viewHeight
               end
            end
         end)
      end

      lArranged = false
   end

   // Create a group of items with this method.  The total number of items that will be covered by the group must be
   // known ahead of time, then added with calls to addItem().

   self.addGroup = function(ID, Name, Span)
      local item = newItem(TI_GROUP, Name, ID)
      item.group = { span=Span }
      lGroupCount = lGroupCount + 1
      return item
   end

   // Individual toolbar items can be disabled with this method.  Reverse this action with enableItem().

   self.disableItem = function(ID)
      local item = lItemLookup[ID]
      if (item) and (not item.disabled) then
         item.disabled = true
         drawItem(item)
      end
   end

   // Items that have been disabled can be re-enabled by calling this method.

   self.enableItem = function(ID)
      local item = lItemLookup[ID]
      if (item) and (item.disabled) then
         item.disabled = false
         drawItem(item)
      end
   end

   // This method will reverse a previous call to selectItem() for a given item.

   self.deselectItem = function(ID)
      local item = lItemLookup[ID]
      if (item) and (item.selected) then
         item.selected = false
         self.surface.acDraw()
      else
         check(ERR_Search)
      end
   end

   // Mark a toolbar item as selected, which results in the toolbar item being drawn with a special
   // background to indicate that the item is active.  This operation can be reversed at any time by calling the
   // deselectItem() method.  If Exclusive is true, all other items are deselected.

   self.selectItem = function(ID, Exclusive)
      local redraw = false
      local found = false
      local item = firstIcon()
      while (item) do
         if (item.type == TI_ICON) then
            if (item.id == ID) then
               if (not item.selected) then
                  item.selected = true
                  redraw = true
                  found = true
               end
            elseif (Exclusive) and (item.selected) then
               item.selected = false
               redraw = true
            end
         end
         item = item.next
      end

      if (redraw) then self.surface.acDraw() end

      if (not found) then check(ERR_Search) end
   end

   // Remove an item from the toolbar.

   self.removeItem = function(ID)
      local item = lItemLookup[ID]
      lItemLookup[ID] = nil
      if (item.prev) then item.prev.next = item.next end
      if (item.next) then item.next.prev = item.prev end
      if (item == lFirstItem) then lFirstItem = item.next end
      if (item == lLastItem) then lLastItem = item.prev end
      if (item == lCurrentItem) then lCurrentItem = nil end
   end

   local function tipTimer(Elapsed, CurrentTime)
      if (lCurrentItem) and nz(lCurrentItem.tip) then
         gui.tooltip({ text=lCurrentItem.tip })
      end
      lTipTimer = nil
      check(ERR_Terminate)
   end

   local function hoverUpdate(Item, StateChanged) // Highlight items that the user hovers over.
      if (lCurrentItem == Item) and (StateChanged != true) then return end

      lVectorHighlightIcon.visibility = 'hidden'
      lCurrentItem = Item

      if (lCurrentItem) and (not lCurrentItem.disabled) and (not lDisabled) then
         if (lClicked) then
            lVectorHover.fill = string.format('rgb(%d,%d,%d,%d)', lColSelected.r, lColSelected.g, lColSelected.b, lColSelected.a)
         else
            lVectorHover.fill = string.format('rgb(%d,%d,%d,%d)', lColHover.r, lColHover.g, lColHover.b, lColHover.a)
         end

         if (lHorizontal) then
            lVectorHover.x = lCurrentItem.x
            lVectorHover.y = 0
            lVectorHover.width  = lCurrentItem.width
            lVectorHover.height = lSurfaceHeight
         else
            lVectorHover.x = 0
            lVectorHover.y = lCurrentItem.y
            lVectorHover.width  = lSurfaceWidth
            lVectorHover.height = lCurrentItem.height
         end
         lVectorHover.visibility = 'visible'
         if (lGroupClip) then
            lVectorHover.mask = lGroupClip
         end
      else
         lVectorHover.visibility = 'hidden'
      end

      self.surface.acDraw()
   end

   local function inputFeedback(Surface, Msg) // Internal input handler
      if (Msg.type == JET_ENTERED_SURFACE) then

      elseif (Msg.type == JET_LEFT_SURFACE) then
         resetTipTimer()
         if (lCurrentItem) then
            hoverUpdate(nil)
         end
      elseif (bit.band(Msg.flags, JTYPE_MOVEMENT) != 0) then
         resetTipTimer()

         if (lClicked) then return end

         local item
         if self.surface and Msg.overID == self.surface.id then // Determine what item we are positioned over
            item = getCursorItem(Msg.x, Msg.y)
         end

         if item and item.tip then // Tool-tip management
            if lTipTimer then
               mSys.UpdateTimer(lTipTimer, lTipDelay)
            else
               local err
               err, lTipTimer = mSys.SubscribeTimer(lTipDelay, tipTimer)
            end
         end

         hoverUpdate(item)

      elseif bit.band(Msg.flags, JTYPE_BUTTON) != 0 then
         if Msg.value > 0 then
            if lDisabled then return end

            resetTipTimer()

            if lCurrentItem then
               if lCurrentItem.disabled then return end

               if Msg.type == JET_BUTTON_1 then
                  lClicked = lCurrentItem
                  lClickX  = Msg.x
                  lClickY  = Msg.y
                  hoverUpdate(lCurrentItem, true)
               end
            end
         elseif Msg.type == JET_BUTTON_1 then
            if lClicked then
               lClicked = nil

               hoverUpdate(lCurrentItem, true)

               local delta_x = Msg.x - lClickX
               local delta_y = Msg.y - lClickY
               if (delta_x < 0) then delta_x = -delta_x end
               if (delta_y < 0) then delta_y = -delta_y end

               if (delta_x < 4) and (delta_y < 4) then
                  sendFeedback()
               end
            end
         end
      end
   end

   local function drawToolbar(Surface, Bitmap)
      lScene.bitmap = Bitmap
      lScene.pageWidth = lSurfaceWidth
      lScene.pageHeight = lSurfaceHeight
      lScene.acDraw()
   end

   // Main entry point

   catch(function()
      if (not Target) then error('A target surface is required.') end

      if (Options.groupMargin) then
         lGroupMargin = Options.groupMargin
         if lGroupMargin < 1 then lGroupMargin = 1 end
      end

      if (Options.theme == 'light') then
         lThemeColour = { first={ r=250,g=249,b=248 }, last={ r=210,g=211,b=212 } }
      else
         lThemeColour = { first={ r=90,g=90,b=90 }, last={ r=70,g=70,b=110 } }
      end

      self.surface = Target.new('surface')
      self.surface.region = true
      self.surface.flags  = '!StickToBack'
      self.surface.x      = nz(Options.x, 0)
      self.surface.y      = nz(Options.y, 0)

      if (Options.yOffset) then
         self.surface.yOffset = Options.yOffset
      else
         self.surface.height = 1
      end

      if (Options.xOffset) then
         self.surface.xOffset = Options.xOffset
      else
         self.surface.width = Target.width - self.surface.x
         lArrangedWidth = true
      end

      if (Options.width) then
         self.surface.width = Options.width
         lArrangedWidth = false
      end

      if (self.surface.acInit() != ERR_Okay) then error('Failed to initialise surface.') end

      self.surface.subscribe('free', function(Surface, Args)
         self.surface = nil
         lFirstItem   = nil
         lLastItem    = nil
         lCurrentItem = nil
         lGroupClip   = nil
         resetTipTimer()
      end)

      self.surface.subscribe('redimension', function(Surface, Args)
         lSurfaceWidth  = Surface.width
         lSurfaceHeight = Surface.height
      //   arrangeItems()
      end)

      self.surface.subscribe('focus', function(Surface, Args)
         self.surface.acDraw()
      end)

      self.surface.subscribe('lostfocus', function(Surface, Args)
         if (lCurrentItem) then
            lVectorHighlightIcon.visibility = 'visible'
            lCurrentItem = nil
            self.surface.acDraw()
         end
      end)

      self.surface.subscribe('enable', function(Surface, Args)
         lDisabled = false
         self.surface.acDraw()
      end)

      self.surface.subscribe('disable', function(Surface, Args)
         lDisabled = true
         resetTipTimer()
         self.surface.acDraw()
      end)

      self.surface.mtAddCallback(drawToolbar)

      input.subscribe(bit.bor(JTYPE_BUTTON, JTYPE_MOVEMENT, JTYPE_FEEDBACK), self.surface, 0, inputFeedback)
      input.keyboard(self.surface, keyFeedback)

      lScene = obj.new('VectorScene', { })
      lViewport = lScene.new('VectorViewport', { })

      local fill = 'rgb(0,0,0,128)'
      if (Options.theme != 'light') then
         fill = 'rgb(255,255,255,200)'
      end

      lVectorHighlightIcon = lViewport.new('VectorRectangle', { // Keyboard-based selection
         fill   = fill,
         x      = 0,
         y      = 0,
         width  = 16,
         height = 16,
         visibility = 'hidden'
      })

      Options.createItems(self)

      lColumnBreadth = lIconSize + (lCellMargin * 2)
      if (lGroupCount > 0) then
         lColumnBreadth = lColumnBreadth + (lGroupMargin*2)
      end

      if (Options.orientation == 'horizontal') then
         lHorizontal = true
      elseif (Options.orientation == 'vertical') then
         lHorizontal = false
      end

      if (not lHorizontal) and ((Options.y) and (Options.yOffset)) then
         lHorizontal = false
      else
         lHorizontal = true
      end

      if (lHorizontal) then
         self.surface.height = lColumnBreadth
      else
         self.surface.width = lColumnBreadth
      end

      lSurfaceWidth  = self.surface.width
      lSurfaceHeight = self.surface.height

      arrangeItems()

      if (Options.tabFocus) then
         Options.tabFocus.mtAddObject(self.surface)
      end

      self.surface.acShow()
   end,
   function(Exception)
      error('Failed to initialise Toolbar: ' .. Exception.message)
   end)

   return self
end
