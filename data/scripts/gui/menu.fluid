--[[
The Menu class provides a convenient interface for creating and managing menus.

The following example illustrates typical usage:

   gui.menu({
      target=surface,
      x=10, y=10
   })

Valid options to use when creating the menu are as follows:

  target:    Optional reference to a surface that will contain the menu.
  config:    Required.  A list of items for configuring the content of the menu.
  x:         The x coordinate of the menu.
  y:         The y coordinate of the menu.
  width:     The preferred width of the menu, in pixels.
  popup:     Locks the position of the menu to the mouse pointer.
  ignoreFocus:   If true, do not hide the menu if it loses the focus.
  noTranslation: If true, do not translate menu text to the user's native language.
--]]

   require 'common'
   require 'gui'

gui.menu = function(Options)
   local mFont = mod.load('font')
   local mSurface = mod.load('surface')
   local mGfx = mod.load('display')

   local self = { // Public variables
      surface  = nil
   }

   local lScene, lViewport, lGroupClip
   local lReverseX = false
   local lMenuWidth = nz(Options.width, 200)
   local MARGIN = 6
   local lIconSize = 16
   local FONT_FACE = 'Open Sans'
   local FONT_SIZE = 11
   local lVectorGroup
   local lConfig = nz(Options.config, { })
   local lItems = { }
   local lPopup = nz(Options.popup, false)
   local lRelative = Options.relative
   local lTimeShow = 0
   local lTimeHide = 0
   local lRightMargin = MARGIN
   local lVisible = false
   local lTipTimer
   local lHighlightItem
   local lVOffset = 0
   local lTipDelay = 500
   local lRootMenu = true

   local function applyFill(Vector, Fill)
      while (Vector != nil) do
         if (Vector.fill != 'none') then
            Vector.fill = Fill
         end
         if (Vector.stroke != nil) then Vector.stroke = Fill end
         local child = Vector.child
         if (child != nil) then applyFill(child, Fill) end
         Vector = Vector.next
      end
   end

   local function initVectorScene()
      local GAP_X = 6

      lScene    = obj.new('VectorScene', { })
      lViewport = lScene.new('VectorViewport', { }) // Main viewport for vector graphics.
      lVectorGroup = lViewport.new('VectorGroup', { })

      // To use the clip, set the 'mask' field of any drawable vector.
      lGroupClip = lScene.new('VectorClip', { units='BoundingBox' })
      local clipRect = lGroupClip.new('VectorRectangle', {
         x    = 1.5,
         y    = 1.5,
         roundX = 3,
         roundY = 3,
         width  = 1,
         height = 1
      })

      local lBkgdRect = lVectorGroup.new('VectorRectangle', {
         fill   = 'rgb(240,240,240,255)',
         x      = 1.5,
         y      = 1.5,
         roundX = 3,
         roundY = 3,
         width  = 1,
         height = 1
      })

      local lIconBar = lVectorGroup.new('VectorRectangle', {
         fill   = 'rgb(220,220,255,255)',
         x      = 0,
         y      = 0,
         width  = 30,
         height = '100%',
         mask   = lGroupClip
      })

      local lBorder = lVectorGroup.new('VectorRectangle', {
         stroke = 'rgb(60,60,80,255)',
         strokeWidth = 1.5,
         x      = 1.5,
         y      = 1.5,
         roundX = 3,
         roundY = 3,
         width  = 1,
         height = 1
      })

      local iconsPresent = false
      local textX = GAP_X
      for _, item in ipairs(Options.config) do
         if item['icon'] then
            iconsPresent = true
            textX = 34
         end
      end

      lItems = { }
      local widestItem = 0
      local widestKey = 0
      local y = 9
      for _, item in ipairs(Options.config) do
         if item['item'] then
            local mi = { y=y, config=item }
            local vText = lVectorGroup.new('VectorText', {
               x        = textX,
               face     = FONT_FACE,
               fontSize = string.format('%.2fpt', FONT_SIZE),
               fill     = 'rgb(0,0,0)',
               align    = 'left',
               string   = item['item']
            })

            mi.text = vText
            mi.textY = y + vText.font.height + ((vText.font.maxHeight - vText.font.height)/2)

            itemWidth = mFont.StringWidth(vText.font, item['item'], -1)
            if (itemWidth > widestItem) then widestItem = itemWidth end

            lIconSize = vText.font.maxHeight

            if item['icon'] then
               local svgGroup = lViewport.new('VectorViewport', { x=8, y=y, width=lIconSize, height=lIconSize })
               local svg = obj.new('svg', { target=svgGroup, path='system:icons/Default/' .. item['icon'] .. '.svg' })
               applyFill(svgGroup, 'rgb(80,80,120,255)')
               mi.svgIcon = svgGroup
            end

            if item['key'] then
               local key = item['key']
               if item['qualifier'] then
                  key = item['qualifier'] .. ' + ' .. key
               end

               local vKey = lVectorGroup.new('VectorText', {
                  x        = self.surface.width,
                  face     = FONT_FACE,
                  fontSize = string.format('%.2fpt', FONT_SIZE),
                  fill     = 'rgb(30,80,0,255)',
                  align    = 'right',
                  string   = key
               })
               vKey.y = y + vKey.font.height + ((vKey.font.maxHeight - vKey.font.height)/2)

               keyWidth = mFont.StringWidth(vKey.font, key, -1)
               if (keyWidth > widestKey) then widestKey = keyWidth end
               mi.keyText = vKey
            end

            vText.y = mi.textY
            mi.height = vText.font.maxHeight * 1.4
            y = y + mi.height

            table.insert(lItems, mi)
         end
      end

      self.surface.width  = textX + widestItem + (GAP_X * 3) + widestKey + GAP_X
      self.surface.height = y
      lBkgdRect.width  = self.surface.width - (lBkgdRect.x * 2)
      lBkgdRect.height = self.surface.height - (lBkgdRect.y * 2)
      lBorder.width    = lBkgdRect.width
      lBorder.height   = lBkgdRect.height
      clipRect.width   = self.surface.width - (lBkgdRect.x * 2)
      clipRect.height  = self.surface.height - (lBkgdRect.y * 2)

      for _, item in pairs(lItems) do
         if item['keyText'] then
            item.keyText.x = self.surface.width - GAP_X
         end
      end
   end

   // The switch() method alternates the the visible state of the menu - for example, if the menu is hidden, it
   // will show the menu.  A time-lapse feature is supported so that rapid changes to menu visibility can be avoided.
   // For example, if the TimeLapse option is set to 10 milliseconds, the menu state will not change unless the
   // specified amount of time has elapsed since the last show() or hide() call.

   self.switch = function(TimeLapse)
      local timelapse
      if ((TimeLapse) and (TimeLapse >= 0)) then
         timelapse = TimeLapse * 1000
      else
         timelapse = 5000
      end

      local time = mSys.PreciseTime()
      if lTimeShow > lTimeHide then // Hide the menu
         print('switch - hide menu')
         if (time - lTimeShow >= timelapse) then self.hide() end
         return 0
      else
         print('switch - show menu')
         if (time - lTimeHide >= timelapse) then self.show() end
         return 1
      end
   end

   self.selectItem = function()

   end

   self.getItem = function()

   end

   self.hide = function()
      self.surface.acHide()
      lTimeHide = mSys.PreciseTime()
   end

   self.show = function()
      local surface = self.surface
      if bit.band(surface.flags, RNF_VISIBLE) != 0 then return end

      lReverseX = nz(Options.reverseX, false)

      if lPopup then
         local err, cursor_x, cursor_y = mGfx.getCursorPos()
         if (err == ERR_Okay) then
            local parent = { }

            local err, parentInfo = mSurface.GetSurfaceInfo(surface.parentID)
            if (err != ERR_Okay) then error('Failed to analyse parent surface: ' .. mSys.GetErrorMsg(err)) end

            if (surface.parentID) and (err == ERR_Okay) then
               parent.width  = parentinfo.width
               parent.height = parentinfo.height
               parent.absX   = parentinfo.absX
               parent.absY   = parentinfo.absY
            else
               local err, scrInfo = mGfx.GetDisplayInfo(0)
               if err == ERR_Okay then
                  parent.width  = scrInfo.width
                  parent.height = scrInfo.height
                  parent.absX   = 0
                  parent.absY   = 0
               else
                  parent.absX   = 0
                  parent.absY   = 0
                  parent.width  = 0
                  parent.height = 0
               end
            end

            if parent.width and parent.height then
               // Determine the position at which the pop-up menu will open at, relative to the parent surface.
               // Notice that we don't want the menu to appear off the edge of the parent if we can help it.

               local x
               if lReverseX then
                  x = cursor_x - parent.absX - 1 - surface.width + lRightMargin
                  if x < 0 then
                     x = 0
                     lReverseX = false
                  end
               else
                  x = cursor_x - parent.absX - 1
                  if x + surface.width > parent.width - 2 then
                     x = x - surface.width + lRightMargin
                     lReverseX = true
                  end
               end

               local y = cursor_y - parent.absY - 1
               if y + surface.height > parent.height - 2 then
                  y = y - surface.height + surface.bottomMargin
               end

               surface.acMoveToPoint(x, y, 0, bit.bor(MTF_X, MTF_Y))
            end
         end
      elseif self.parentID then // Display this menu relative to its parent in the hierarchy
--[[
         local parent = { x=0, y = 0, width = 0 }
         local parent = self.parentID
         if (parent.menuSurfaceID) then
            local err, info = mSurface.GetSurfaceInfo(parent.MenuSurfaceID)
            if err == ERR_Okay then
               parent.x = info.x
               parent.y = info.y
               parent.width = info.width
            end
         end
         parent.currentMenu = self

         local x = parent.x + parent.width - lRightMargin
         if (lReverseX) then
            x = parent.x - surface.width + lRightMargin
            if x < 2 then
               x = 2
               lReverseX = false
            end
         else
            SURFACEINFO *target
            if (Options.target) and (!mSurface.GetSurfaceInfo(Options.target, &target)) then
               // A specific target surface is hosting the menu layer adjust the coordinate if necessary to keep
               // it from being partially hidden.
               if x + surface.width >= target.width then
                  x = target.x - surface.width + lRightMargin
                  lReverseX = true
               end
            end
         end

         acMoveToPoint(surface, x, parent_y + self.VOffset, 0, MTF_X|MTF_Y)

         ensure_on_display(self)
--]]
      elseif lRelative then
         // Correct the position of the menu according to the relative object that it is offset from.

         local err, target = mSurface.GetSurfaceInfo(lRelative)
         if err == ERR_Okay then
            local rel = { absX = target.absX, absY = target.absY }
            local target = { absX = 0, absY = 0, height = 4096 }

            if Options.target then
               local err, target = mSurface.GetSurfaceInfo(Options.target)
               if err == ERR_Okay then
                  target.absX   = target.absX
                  target.absY   = target.absY
                  target.height = target.height
               end
            else
               local err, display = mGfx.GetDisplayInfo(0)
               if err == ERR_Okay then
                  target.height = display.height
               end
            end

            local x = rel.absX + nz(Options.x, 0) - target.absX
            local y = rel.absY + nz(Options.y, 0) - target.absY

            if lReverseY then
               y = rel.absY + nz(Options.y, 0) - target.absY - surface.height
            end

            if y + surface.height > target.height then
               if self.parent then // Child menu
                  y = y - surface.height //+ get_item_height() + self.vWhiteSpace
               else
                  y = y - surface.height - nz(Options.y, 0) //+ self.vWhiteSpace
               end
            end

            surface.acMoveToPoint(x, y, 0, bit.bor(MTF_X, MTF_Y))
         end
      end

      self.surface.acShow()
      self.surface.acMoveToFront()
      lTimeShow = mSys.PreciseTime()
   end

   local function highlightItem(Item)
      if Item == lHighlightItem then
         return
      elseif Item then
         if Item.lineBreak or Item.disabled then
            return
         end
      end

      if lHighlightItem then  // Redraw the previously highlighted item
         lHighlightItem.text.fill = 'rgb(0,0,0)'
         self.surface.acDraw(0, lHighlightItem.y + lVOffset, 10000, lHighlightItem.height)
         lHighlightItem = nil
      end

      lHighlightItem = Item

      if Item then // Draw the newly highlighted area
         Item.text.fill = 'rgb(180,0,0)'
         self.surface.acDraw(0, Item.y + lVOffset, 10000, Item.height)
      end
   end

   local function timer(Elapsed, CurrentTime)
      if (lCurrentItem) and nz(lCurrentItem.tip) then
         gui.tooltip({ text=lCurrentItem.tip })
      end
      lTipTimer = nil
      check(ERR_Terminate)
   end

   // Main entry point

   catch(function()
      if not Options.config then error('A config value is required to define the Menu items') end

      self.surface = obj.new('surface')
      self.surface.width  = lMenuWidth
      self.surface.parent = Options.target
      self.surface.flags  = '!stickToFront|composite'
      self.surface.x      = nz(Options.x, 0)
      self.surface.y      = nz(Options.y, 0)
      self.surface.windowType = 'NONE'
      self.surface.height = 40
      if (self.surface.acInit() != ERR_Okay) then error('Failed to initialise surface.') end

      self.surface.subscribe('free', function(Surface, Args)
         self.surface = nil
      end)

      if lRootMenu then
         self.surface.subscribe('focus', function(Surface, Args)
            if (self.keyMonitorID == Args.objectID) and (not self.keyEvent) then
               //SubscribeEvent(EVID_IO_KEYBOARD_KEYPRESS, &callback, self, &self.prvKeyEvent)
            end
         end)
      end

      self.surface.subscribe('lostfocus', function(Surface, Args)
         self.surface.acHide()
      end)

      self.surface.subscribe('hide', function(Surface, Args)
         lVisible = false
         lTimeHide = mSys.preciseTime()
      end)

      self.surface.subscribe('show', function(Surface, Args)
         if lPopup or lRootMenu then
            self.surface.acFocus()
         end
         lVisible = true
         lTimeShow = mSys.preciseTime()
      end)

      self.surface.mtAddCallback(function(Surface, Bitmap)
         if lScene then
            lScene.bitmap = Bitmap
            lScene.pageWidth = Surface.width
            lScene.pageHeight = Surface.height
            lScene.acDraw()
         end
      end)

      input.subscribe(bit.bor(JTYPE_MOVEMENT, JTYPE_BUTTON), self.surface, 0, function(Surface, Msg)
         if Msg.type == JET_BUTTON_1 then
            if Msg.value == 0 then
               if lHighlightItem and lHighlightItem.config.feedback then // Menu item activated
                  lHighlightItem.config.feedback(self, lHighlightItem.config)
                  self.surface.acHide()
               end
            end
         elseif (Msg.type == JET_ABS_X) or (Msg.type == JET_ABS_Y) then
            local highlightFound = false
            if Msg.overID == self.surface.id then
               for _, item in pairs(lItems) do
                  if not item.lineBreak then
                     if (Msg.y >= item.y) and (Msg.y < item.y + item.height) then
                        if lHighlightItem != item then
                           highlightItem(item)
                        end
                        highlightFound = true
                        break
                     end
                  end
               end
            end

            // Remove existing menu highlighting if the cursor is no longer positioned over a highlight-able item.

            if not highlightFound and lHighlightItem then
               highlightItem(nil)
            end

            if highlightFound then
               if lTipTimer then
                  mSys.UpdateTimer(lTipTimer, lTipDelay)
               else
                  local err
                  err, lTipTimer = mSys.SubscribeTimer(lTipDelay, timer)
               end
            end
         end
      end)

      initVectorScene()
   end,
   function(Exception)
      error('Failed to initialise Menu: ' .. Exception.message)
   end)

   return self
end
