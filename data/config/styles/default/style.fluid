// Class oriented UI style settings, managed by drwApplyStyleGraphics() and drwApplyStyleValues() in the Surface module.

   require 'gui'

   if (mVec == nil) then mVec = mod.load('vector') end
   if (mFont == nil) then mFont = mod.load('font') end

   glSelf = obj.find('self')

// The applyStyle() function is used to set style defaults against an object.

function applyStyle(Class, Object)
   if (Class) then
      Class = Class:lower()
      if (glStyles[Class]) and (glStyles[Class].defaultValues) then
         glStyles[Class].defaultValues(Object)
         return
      else
         msg('No style information for ' .. Class)
      end
   else
      msg('No class name specified to applyStyle().')
   end
   glSelf.error = ERR_NoSupport
end

function applyDecoration(Class, Object, Surface, StyleType)
   if (Class) then
      Class = Class:lower()
      if (glStyles[Class]) then
         if nz(StyleType) then
            if (glStyles[Class][StyleType]) then
               glStyles[Class][StyleType](Object, Surface)
               return
            else
               msg('No style type ' .. nz(StyleType,'NIL'))
            end
         elseif (glStyles[Class].decoration) then
            glStyles[Class].decoration(Object, Surface)
            return
         else
            msg('No decoration routine for ' .. Class)
         end
      else
         msg('No style information for ' .. Class)
      end
   else
      msg('No class name specified to applyDecoration().')
   end
   glSelf.error = ERR_NoSupport
end

// Apply a fill to a vector and all its children

local function applyFill(Vector, Fill)
   while (Vector != nil) do
      if (Vector.fill != 'none') then
         Vector.fill = Fill
      end
      if (Vector.stroke != nil) then Vector.stroke = Fill end
      local child = Vector.child
      if (child != nil) then applyFill(child, Fill) end
      Vector = Vector.next
   end
end

local function defineGradient(Scene, Name, First, Last, X1, Y1, X2, Y2, Units)
   local stops = { }
   local first = struct.new('GradientStop')
   first.offset    = 0
   first.rgb.red   = First.r / 255
   first.rgb.green = First.g / 255
   first.rgb.blue  = First.b / 255
   first.rgb.alpha = nz(First.a,255) / 255
   table.insert(stops, first)

   local last = struct.new('GradientStop')
   last.offset    = 1.0
   last.rgb.red   = Last.r / 255
   last.rgb.green = Last.g / 255
   last.rgb.blue  = Last.b / 255
   last.rgb.alpha = nz(Last.a,255) / 255
   table.insert(stops, last)

   if (Scene) then
      local gradient = Scene.new('VectorGradient', {
         name=nz(Name, 'styleGradient'), type='linear', stops=stops, x1=X1, y1=Y1, x2=X2, y2=Y2, units=nz(Units,'boundingbox')
      })
      Scene.mtAddDef(Name, gradient)
      return gradient
   else
      return obj.new('VectorGradient', {
         name=nz(Name, 'styleGradient'), type='linear', stops=stops, x1=X1, y1=Y1, x2=X2, y2=Y2, units=nz(Units,'boundingbox')
      })
   end
end

glColours = {
   button = {
      background = '230,230,230',
      click      = '200,200,200'
   },
   menu = {
      background = '240,240,240',
      border = '200,200,200'
   },
   widget = {
      background = '0,0,0,60',
      border     = '#909090',
      shadow     = '0,0,20,80',
      highlight  = '255,255,255,128',
      label      = '255,255,255',
      text       = '255,255,255'
   },
   menubar = '190,190,190',
   white = '255,255,255',
   red   = '255,0,0',
   green = '0,255,0',
   blue  = '0,0,255',
   window = {
      background = '220,220,220'
   }
}

glFonts = { // Use percentages for scalable sizes, where 100% is equivalent to the value of '/interface/@fontsize'
   default  = { face='Open Sans,Source Sans Pro', size='100%', colour='0,0,0' },
   window   = { face='Open Sans,Source Sans Pro', size='100%', colour='0,0,0' }, // Default inner window text, e.g. widget labels
   button   = { face='Open Sans,Source Sans Pro,*:100%', colour='0,0,0' }, // Text inside buttons
   icon     = { face='Open Sans,Source Sans Pro', size='100%', colour='255,255,255' }, // Text at the bottom of icons
   menu     = { face='Open Sans,Source Sans Pro', size='100%', colour='255,255,255', highlight='255,255,255' }, // Menu item text
   titlebar = { face='Open Sans', size='100%', colour='255,255,255' }, // Title bar text
   small    = { face='Tiny', size=6, colour='0,0,0' }, // Recommended text for small sizes
   large    = { face='Open Sans,Source Sans Pro', size='130%', colour='0,0,0' },   // Recommended text for headers
   widget   = { face='Open Sans,Source Sans Pro', size=11, colour='255,255,255' }, // Default text for widgets (e.g. combobox)
   label    = { face='Open Sans,Source Sans Pro:10:bold', size=11, colour='255,255,255' } // Text for labels
}

glStyles = {
   menu = {
      defaultValues = function(Menu)
         Menu.fontHighlight = '0,0,0'
         Menu.highlight     = '220,220,235'
         Menu.fontColour    = '0,0,0'
         Menu.flags         = '!showimages|showkeys'
         Menu.vSpacing      = 5
         Menu.highlightLM   = 1
         Menu.highlightRM   = 1
         Menu.font.face     = 'Open Sans'
         Menu.font.point    = 10
         //Menu.fadeDelay = ?
         //Menu.mouseOverDelay = ?
      end,
      decoration = function(Menu, Surface)
         Surface.mtAddCallback(function(Surface, Bitmap)
            local err, border = Bitmap.mtGetColour(100, 100, 100, 255)
            local err, colour = Bitmap.mtGetColour(240, 240, 240, 255)
            Bitmap.mtDrawRectangle(0, 0, Surface.width, Surface.height, border, 0)
            Bitmap.mtDrawRectangle(1, 1, Surface.width-2, Surface.height-2, colour, BAF_FILL)
         end)
      end,
      brk = function(MenuItem, Surface)
         Surface.mtAddCallback(function(Surface, Bitmap)
            local err, colour = Bitmap.mtGetColour(160, 160, 160, 255)
            Bitmap.mtDrawRectangle(32, MenuItem.y+2, Surface.width-64, 1, colour, BAF_BLEND)
         end)
      end
   },
   menudropdown = {
      defaultValues = function(Menu)
         Menu.fontHighlight = '#000000'
         Menu.highlight     = '220,220,235'
         Menu.fontColour    = '#000000'
         Menu.highlightLM   = 1
         Menu.highlightRM   = 1
      end,
      decoration = function(Menu, Surface)
         Surface.new('box', { border='120,120,120', colour='255,255,255' })
      end,
      brk = function(MenuItem, Surface)
         Surface.new('box', { x=6, xOffset=6, y=MenuItem.y+2, height=1, colour='#b0b0b0' })
      end
   },
   menupopup = {
      defaultValues = function(Menu)
         Menu.fontHighlight = '255,255,255'
         Menu.fontColour    = '255,255,255'
         Menu.highlight     = '#a080c0'
         Menu.vSpacing      = 5
         Menu.flags         = '!showimages'
         Menu.font.face     = 'Open Sans'
         Menu.font.point    = 10
         Menu.leftMargin    = 4
         Menu.topMargin     = 4
         Menu.bottomMargin  = 8
         Menu.rightMargin   = 8
         Menu.highlightLM   = 2
         Menu.highlightRM   = 6
         Menu.iconFilter    = 'pearl'
      end,
      decoration = function(Menu, Surface)
         Surface.precopy      = true
         Surface.rightMargin  = 4
         Surface.bottomMargin = 4

         Surface.new('box', { boxes='(4,!0,!0,4) (!0,4,4,!4)', colour='0,0,0,85', colour1='0,0,0,85' })
         Surface.new('gradient', { x=0, y=0, xOffset=4, yOffset=4, firstColour='76,62,128', lastColour='126,123,187', direction='horizontal' })
         local stripes = Surface.new('stripes', { direction='vertical', y=1, x=1, xOffset=5, yOffset=5 })
         stripes.acDataFeed(0, DATA_XML, [[<line colour="0,0,0,0"/><line colour="0,0,0,30"/>]])
         Surface.new('box', { raised=true, boxes='(0,0,!4,!4)', highlight='166,163,207,85', shadow='0,0,0,85' })
      end,
      brk = function(MenuItem, Surface)
         Surface.new('box', { x=32, xOffset=36, y=MenuItem.y+2, height=1, colour='#a0a0a0' })
      end
   },
   menucontext = {
      defaultValues = function(Menu)
         Menu.fontHighlight = '0,0,0'
         Menu.highlight     = '220,220,235'
         Menu.fontColour    = '0,0,0'
         Menu.face          = 'Open Sans:10'
         Menu.flags         = '!showimages|showkeys|popup'
         Menu.vSpacing      = 7
         Menu.highlightLM   = 1
         Menu.highlightRM   = 1
      end,
      decoration = function(Menu, Surface)
         Surface.new('box', { border='100,100,100', colour='240,240,240' })
      end,
      brk = function(MenuItem, Surface)
         Surface.new('box', { x=32, xOffset=32, y=MenuItem.y+2, height=1, colour='#a0a0a0' })
      end
   },
   button = {
      defaultValues = function(Button)

      end,
      decoration = function(Button, Surface)
         local lMargin = 5
         if bit.band(Surface.dimensions, DMF_HEIGHT) == 0 then
            if (bit.band(Surface.dimensions, DMF_Y) == 0) or
               (bit.band(Surface.dimensions, DMF_Y_OFFSET) == 0) then
               Surface.height = 20 + (lMargin * 2)
            end
         end

         local lScene = obj.new('VectorScene', { name='ButtonScene' })
         local lViewport = lScene.new('VectorViewport', { })
         local lFocusGap = 3
         local lCount = 0
         local lIconSize = Surface.height * 0.56
         local svgGroup, svgGradient, svg
         lThemeColour = { first={ r=250,g=249,b=248 }, last={ r=210,g=211,b=212 } }

         local lBkgd = lViewport.new('VectorRectangle', {
            stroke = 'rgb(255,255,255,60)',
            x      = 0,
            y      = 0,
            width  = '100%',
            roundX = 4,
            roundY = 4,
            height = '100%'
         })

         local lFocus = lViewport.new('VectorRectangle', {
            stroke      = 'rgb(255,255,255,180)',
            strokeWidth = 0.5,
            roundX      = 3,
            roundY      = 3,
            dashArray   = '2 2',
            visibility  = VIS_HIDDEN
         })

         local lLabel = lViewport.new('VectorText', {
            x        = lMargin,
            face     = glFonts.button.face,
            fontSize = Surface.height * 0.66 * (3/4),
            fill     = 'rgb(255,255,255,255)',
            string   = Button.string
         })

         if (Button.icon) then lLabel.x = lIconSize + (lMargin * 3) end

         if bit.band(Surface.dimensions, DMF_WIDTH) == 0 then
            if (bit.band(Surface.dimensions, DMF_X) == 0) or
               (bit.band(Surface.dimensions, DMF_X_OFFSET) == 0) then
               local w = (lMargin * 4) + mFont.StringWidth(lLabel.font, Button.string, -1)
               if (Button.icon) then w = w + lIconSize + (lMargin*2) end
               Surface.width = w
            end
         end

         if (Button.icon) then
            catch(function()
               local gname = 'btn' .. Button.id
               svgGroup = lViewport.new('VectorViewport', { x=Surface.height * 0.3, y=(Surface.height - lIconSize)/2, width=lIconSize, height=lIconSize })
               svgGradient = defineGradient(lScene, gname, lThemeColour.first, lThemeColour.last, 0, 0, 0, 1)
               local svg = obj.new('svg', { target=svgGroup, path='system:icons/Default/' .. Button.icon .. '.svg' })
               applyFill(svgGroup, 'url(#' .. gname .. ')')

               local viewport = svgGroup.child
               if (viewport != nil) then
                  while (child != nil) do
                     if (child.class.id == ID_VECTORVIEWPORT) then
                        viewport = child
                        break
                     end
                  end

                  if (viewport.viewHeight < viewport.viewWidth) then
                     svgGradient.y1 = viewport.viewY - ((viewport.viewWidth - viewport.viewHeight) * 0.5)
                     svgGradient.y2 = svgGradient.y1 + viewport.viewWidth
                  else
                     svgGradient.y1 = viewport.viewY
                     svgGradient.y2 = viewport.viewY + viewport.viewHeight
                  end
               end
            end)
         end

         Surface.mtAddCallback(function(Surface, Bitmap)
            local baseColour = 'rgb(0,0,0,80)'

            if (Button.clicked) then

            end

            if ((bit.band(Surface.flags, RNF_HAS_FOCUS) == RNF_HAS_FOCUS) and
                (bit.band(Surface.flags, RNF_DISABLED) != RNF_DISABLED)) then
               local gap = 3
               lFocus.x = gap
               lFocus.y = gap
               lFocus.width = Surface.width - (gap * 2)
               lFocus.height = Surface.height - (gap * 2)
               lFocus.visibility = VIS_VISIBLE
            else
               lFocus.visibility = VIS_HIDDEN
            end

            if ((Button.hoverState == BHS_INSIDE) or (Button.hoverState == BHS_ENTERED)) then
               if (bit.band(Surface.flags, RNF_DISABLED) != RNF_DISABLED) then
                  baseColour = 'rgb(255,255,255,40)'
               end
            end
            lBkgd.fill = baseColour

            if (bit.band(Surface.flags, RNF_DISABLED) == RNF_DISABLED) then
               lLabel.opacity = 0.25
            else
               lLabel.opacity = 1.0
            end

            lLabel.string = Button.string
            lLabel.y = (Surface.height/2) + (lLabel.font.height/2)

            lScene.bitmap = Bitmap
            lScene.pageWidth = Surface.width
            lScene.pageHeight = Surface.height
            lScene.acDraw()
         end)
      end
   },
   checkbox = {
      defaultValues = function(Check)
         Check.border = glColours.widget.border
      end,
      decoration = function(Check, Surface)
         local checkImage = 'items/checkmark'
         local border = 'rgb(100,100,100,255)'
         local bkgd = 'rgb(255,255,255,255)'
         local highlight = 'rgb(255,255,255,255)'
         local lMargin = 5

         local lScene = obj.new('VectorScene', { name='CheckboxScene' })
         local lViewport = lScene.new('VectorViewport', { })
         local lIconSize = Surface.height * 0.56
         local svgGroup, svg

         local lBkgd = lViewport.new('VectorRectangle', {
            stroke = 'rgb(255,255,255,60)',
            x      = 0,
            y      = 0,
            width  = '100%',
            roundX = 4,
            roundY = 4,
            height = '100%'
         })

         local lLabel = lViewport.new('VectorText', {
            x        = lMargin,
            face     = glFonts.checkbox.face,
            fontSize = Surface.height * 0.66 * (3/4),
            fill     = 'rgb(255,255,255,255)',
            string   = Check.label
         })

         if (Check.labelWidth < 1) and (Check.label[0]) then // Calculate the width of the text label, if there is one
            Check.labelWidth = mFont.StringWidth(lLabel.font, Check.label, -1) + 8
         end

         if bit.band(Surface.dimensions, DMF_HEIGHT) == 0 then
            if (bit.band(Surface.dimensions, DMF_Y) == 0) or
               (bit.band(Surface.dimensions, DMF_Y_OFFSET) == 0) then
               Surface.height = 18
            end
         end

         if bit.band(region.dimensions, DMF_WIDTH) == 0 then
            if (bit.band(region.dimensions, DMF_X) == 0) or
               (bit.band(region.dimensions, DMF_X_OFFSET) == 0) then
               region.width = Check.labelWidth + region.height
            end
         end

         local chkx = Check.labelWidth
         if bit.band(Check.align, ALIGN_RIGHT) == ALIGN_RIGHT then
            chkx = Surface.width - Surface.height
         end

         Surface.mtAddCallback(function(Surface, Bitmap)
            if Check.entered then
               if not (bit.band(Surface.flags, RNF_DISABLED) == RNF_DISABLED) then
                  lBkgd.stroke = highlight
                  lBkgd.fill = bkgd
               else
                  lBkgd.fill = bkgd
               end
            else
               lBkgd.fill = bkgd
            end

            if bit.band(Surface.Flags, RNF_HAS_FOCUS) == RNF_HAS_FOCUS then
               if bit.band(Surface.Flags, RNF_DISABLED) == 0 then
                  lBkgd.strokeWidth = 2
               end
            end

            if Check.label then
               lLabel.string = Check.label

               if bit.band(Surface.flags, RNF_DISABLED) != 0 then
                  lLabel.opacity = 0.25
               end

               //font.flags    |= FTF_CHAR_CLIP
               //font.wrapEdge  = Check.LabelWidth - 3
               //font.align     = ALIGN_VERTICAL
               if bit.band(Check.align, ALIGN_RIGHT) == ALIGN_RIGHT then
                  font.align = bit.bor(font.align, ALIGN_RIGHT)
               end

               if bit.band(Surface.flags, RNF_DISABLED) == RNF_DISABLED then
                  lLabel.opacity = 1.0
               end
            end

            if Check.picture then
               src = Check.picture.bitmap
               if (!Check.value) then src.opacity = 0.25 end

               gfxCopyArea(src, Bitmap, BAF_BLEND, 0, 0, src.Width, src.Height,
                  chkx + ((Surface.height - src.width)/2), ((Surface.height - src.height)/2))

               src.opacity = 1.0
            end

            lScene.bitmap = Bitmap
            lScene.pageWidth = Surface.width
            lScene.pageHeight = Surface.height
            lScene.acDraw()
         end)
      end
   },
   combobox = {
      defaultValues = function(Combo)
         Combo.border       = glColours.widget.border
         Combo.buttonOffset = 2
         Combo.font.colour  = glColours.widget.label
         Combo.highlight    = glColours.widget.highlight
         Combo.shadow       = glColours.widget.highlight
         Combo.colour       = glColours.widget.background
         Combo.textInput.colour = glColours.widget.text
      end
   },
   input = {
      defaultValues = function(Input)
         Input.highlight   = glColours.widget.highlight
         Input.shadow      = glColours.widget.highlight
         Input.colour      = glColours.widget.background
         Input.font.colour = glColours.widget.label
         Input.textInput.colour = glColours.widget.text
      end
   },
   menubar = {
      defaultValues = function(Bar)
         Bar.height     = 23
         Bar.font.point = 10
         Bar.font.face  = 'Open Sans'
      end,
      decoration = function(Bar, Surface)
         Surface.mtAddCallback(function(Surface, Bitmap)
            Bitmap.mtDrawRectangle(0, Surface.height-1, Surface.width, 1, gui.bitmapColour(Bitmap, 'highlight'), bit.bor(BAF_FILL, BAF_BLEND))
            Bitmap.mtDrawRectangle(0, Surface.height-2, Surface.width, 1, gui.bitmapColour(Bitmap, 'shadow'), bit.bor(BAF_FILL, BAF_BLEND))
         end)
      end
   },
   scrollbar = {
      defaultValues = function(Scrollbar)
         Scrollbar.breadth = 16   // Slider size
         Scrollbar.opacity = 100
      end
   },
   vscroll = {
      bar = function(Scrollbar, Surface)
         Surface.width = 18
         Surface.topMargin = Surface.width - 1
         Surface.bottomMargin = Surface.width - 1

         local lGradient = defineGradient(nil, nil, {r=186,g=188,b=193,a=255}, {r=212,g=211,b=215,a=255}, 0, 0, 0, '100%')

         Surface.mtAddCallback(function(Surface, Bitmap)
            local err, path = mVec.generateRectangle(0, 0, Surface.width, Surface.height)
            if (err == ERR_Okay) then
               mVec.drawPath(Bitmap, path, 0, nil, lGradient)
               mVec.freePath(path)
            end
            local err, colA = Bitmap.mtGetColour(0, 0, 0, 60)
            local err, colB = Bitmap.mtGetColour(0, 0, 0, 30)
            Bitmap.mtDrawRectangle(0, 0, 1, Surface.height, colA, bit.bor(BAF_FILL, BAF_BLEND))
            Bitmap.mtDrawRectangle(Surface.width-1, 0, 1, Surface.height, colB, bit.bor(BAF_FILL, BAF_BLEND))
         end)
      end,
      slider = function(Scrollbar, Surface)
         local lGradient = defineGradient(nil, nil, {r=252,g=251,b=255,a=255}, {r=205,g=206,b=220,a=255}, 0, 0, '100%', 0)

         Surface.mtAddCallback(function(Surface, Bitmap)
            local err, path = mVec.generateRectangle(0, 0, Surface.width, Surface.height)
            if (err == ERR_Okay) then
               mVec.drawPath(Bitmap, path, 0, nil, lGradient)
               mVec.freePath(path)
            end
            local err, colA = Bitmap.mtGetColour(148, 149, 160, 255)
            local err, colB = Bitmap.mtGetColour(255, 255, 255, 150)
            Bitmap.mtDrawRectangle(0, 0, Surface.width, Surface.height, colA, 0)
            Bitmap.mtDrawRectangle(1, 1, Surface.width-2, Surface.height-2, colB, BAF_BLEND)

            local err, lineA = Bitmap.mtGetColour(255, 255, 255, 128)
            local err, lineB = Bitmap.mtGetColour(0, 0, 0, 50)
            for i=((Surface.height-16)/2),((Surface.height+16)/2),3 do
               Bitmap.mtDrawRectangle(5, i, Surface.width - 10, 1, lineA, bit.bor(BAF_BLEND, BAF_FILL))
               Bitmap.mtDrawRectangle(5, i+1, Surface.width - 10, 1, lineB, bit.bor(BAF_BLEND, BAF_FILL))
            end
         end)
      end,
      buttons = function(Scrollbar, Surface)
         local button = Surface.new('button', { x=0, y=0, height=Scrollbar.width, xOffset=0, flags='!nofocus|nobkgd' })
         local lGradient = defineGradient(nil, nil, {r=255,g=255,b=255,a=255}, {r=202,g=203,b=217,a=255}, 0, 0, 0, '100%')
         button.region.mtAddCallback(function(Surface, Bitmap)
            local err, path = mVec.generateRectangle(0, 0, Surface.width, Surface.height)
            if (err == ERR_Okay) then
               mVec.drawPath(Bitmap, path, 0, nil, lGradient)
               mVec.freePath(path)
            end
            local err, colA = Bitmap.mtGetColour(148, 149, 160, 160)
            local err, colB = Bitmap.mtGetColour(255, 255, 255, 150) // !! glColours.widget.highlight
            Bitmap.mtDrawRectangle(0, 0, Surface.width, Surface.height, colA, 0)
            Bitmap.mtDrawRectangle(1, 1, Surface.width-2, Surface.height-2, colB, BAF_BLEND)
         end)
         local svgUp = button.region.new('svgimage', { path='system:icons/Default/arrows/up.svg', x='25%', xoffset='25%', y='25%', yoffset='25%' })
         Scrollbar.scroll.mtAddScrollButton(button.region, 1)

         // Lower button

         local button = Surface.new('button', { x=0, yOffset=0, height=Scrollbar.width, xOffset=0, flags='!nofocus|nobkgd' })
         button.region.mtAddCallback(function(Surface, Bitmap)
            local err, path = mVec.generateRectangle(1, 1, Surface.width-2, Surface.height-2)
            if (err == ERR_Okay) then
               mVec.drawPath(Bitmap, path, 0, nil, lGradient)
               mVec.freePath(path)
            end
            local err, colA = Bitmap.mtGetColour(148, 149, 160, 255)
            local colB = gui.bitmapColour(Bitmap, 'highlight')
            Bitmap.mtDrawRectangle(0, 0, Surface.width, Surface.height, colA, 0)
            Bitmap.mtDrawRectangle(1, 1, Surface.width-2, Surface.height-2, colB, BAF_BLEND)
         end)
         local svgDown = button.region.new('svgimage', { path='system:icons/Default/arrows/down.svg', x='25%', xoffset='25%', y='25%', yoffset='25%' })
         Scrollbar.scroll.mtAddScrollButton(button.region, 2)
      end
   },
   hscroll = {
      bar = function(Scrollbar, Surface)
         Surface.height = 18
         Surface.leftMargin = Surface.height - 1
         Surface.rightMargin = Surface.height - 1

         local lGradient = defineGradient(nil, nil, {r=186,g=188,b=193,a=255}, {r=212,g=211,b=215,a=255}, 0, 0, 0, '100%')

         Surface.mtAddCallback(function(Surface, Bitmap)
            local err, path = mVec.generateRectangle(0, 0, Surface.width, Surface.height)
            if (err == ERR_Okay) then
               mVec.drawPath(Bitmap, path, 0, nil, lGradient)
               mVec.freePath(path)
            end
            local err, colA = Bitmap.mtGetColour(0, 0, 0, 60)
            local err, colB = Bitmap.mtGetColour(0, 0, 0, 30)
            Bitmap.mtDrawRectangle(0, 0, Surface.width, 1, colA, bit.bor(BAF_FILL, BAF_BLEND))
            Bitmap.mtDrawRectangle(0, Surface.height-1, 0, Surface.width, 1, colB, bit.bor(BAF_FILL, BAF_BLEND))
         end)
      end,
      slider = function(Scrollbar, Surface)
         local lGradient = defineGradient(nil, nil, {r=252,g=251,b=255,a=255}, {r=205,g=206,b=220,a=255}, 0, 0, 0, '100%')

         Surface.mtAddCallback(function(Surface, Bitmap)
            local err, path = mVec.generateRectangle(0, 0, Surface.width, Surface.height)
            if (err == ERR_Okay) then
               mVec.drawPath(Bitmap, path, 0, nil, lGradient)
               mVec.freePath(path)
            end
            local err, colA = Bitmap.mtGetColour(148, 149, 160, 160)
            local err, colB = Bitmap.mtGetColour(255, 255, 255, 150)
            Bitmap.mtDrawRectangle(0, 0, Surface.width, Surface.height, colA, 0)
            Bitmap.mtDrawRectangle(1, 1, Surface.width-2, Surface.height-2, colB, BAF_BLEND)

            local err, lineA = Bitmap.mtGetColour(255, 255, 255, 128)
            local err, lineB = Bitmap.mtGetColour(0, 0, 0, 50)
            for i=((Surface.width-16)/2), ((Surface.width+16)/2), 3 do
               Bitmap.mtDrawRectangle(i, 5, 1, Surface.height - 10, lineA, bit.bor(BAF_BLEND, BAF_FILL))
               Bitmap.mtDrawRectangle(i+1, 5, 1, Surface.height - 10, lineB, bit.bor(BAF_BLEND, BAF_FILL))
            end
         end)
      end,
      buttons = function(Scrollbar, Surface)
         local button = Surface.new('button', { y=0, x=0, width=Surface.height, yOffset=0, flags='!nofocus|nobkgd' })
         local lGradient = defineGradient(nil, nil, {r=255,g=255,b=255,a=255}, {r=202,g=203,b=217,a=255}, 0, 0, 0, '100%')
         button.region.mtAddCallback(function(Surface, Bitmap)
            local err, path = mVec.generateRectangle(0, 0, Surface.width, Surface.height)
            if (err == ERR_Okay) then
               mVec.drawPath(Bitmap, path, 0, nil, lGradient)
               mVec.freePath(path)
            end
            local err, colA = Bitmap.mtGetColour(148, 149, 160, 160)
            local colB = gui.bitmapColour(Bitmap, 'highlight')
            Bitmap.mtDrawRectangle(0, 0, Surface.width, Surface.height, colA, BAD_BLEND)
            Bitmap.mtDrawRectangle(1, 1, Surface.width-2, Surface.height-2, colB, BAF_BLEND)
         end)
         local svgUp = button.region.new('svgimage', { path='system:icons/Default/arrows/left.svg', x='25%', xoffset='25%', y='25%', yoffset='25%' })
         Scrollbar.scroll.mtAddScrollButton(button.region, 3)

         // Lower button

         local button = Surface.new('button', { y=0, xOffset=0, width=Surface.height, yoffset=0, flags='!nofocus|nobkgd' })
         button.region.mtAddCallback(function(Surface, Bitmap)
            local err, path = mVec.generateRectangle(1, 1, Surface.width-2, Surface.height-2)
            if (err == ERR_Okay) then
               mVec.drawPath(Bitmap, path, 0, nil, lGradient)
               mVec.freePath(path)
            end
            local err, colA = Bitmap.mtGetColour(148, 149, 160, 255)
            local colB = gui.bitmapColour(Bitmap, 'highlight')
            Bitmap.mtDrawRectangle(0, 0, Surface.width, Surface.height, colA, BAF_BLEND)
            Bitmap.mtDrawRectangle(1, 1, Surface.width-2, Surface.height-2, colB, BAF_BLEND)
         end)
         local svgDown = button.region.new('svgimage', { path='system:icons/Default/arrows/right.svg', x='25%', xoffset='25%', y='25%', yoffset='25%' })
         Scrollbar.scroll.mtAddScrollButton(button.region, 4)
      end
   },
   view = {
      defaultValues = function(View)
         View.face         = 'open sans:10:light'
         View.groupFace    = 'open sans:12:bold'
         View.vSpacing     = 4
         View.colTitleFont = '255,255,255,255'
         View.gfxFlags     = '!outlinetitle|branches|drawtable'
         View.colHairline  = '255,255,255,0'
         View.colHighlight = '0,0,0,0'
         View.colSelectHairline = '255,255,255,0'
         View.colSelect         = '0,0,60,140'
         View.colSelectFont     = '255,255,255'
         View.colItem           = '#000000'
         View.colBkgdHighlight  = '0,0,0,10'
         View.colBackground     = '255,255,255'
         View.colBorder         = '160,160,160'
         View.buttonHighlight   = '#f0f0f0'
         View.buttonShadow      = '#d0d0d0'
         View.buttonBackground  = '#f0f0f0'
         View.buttonThickness   = 0
      end,
      groupheader = function(View, Surface)
         Surface.new('gradient', { firstColour='170,170,170', lastColour='140,140,140', direction='vertical', y=0, yoffset=0 })
         local stripes = Surface.new('stripes', { direction='vertical' })
         stripes.acDataFeed(0, DATA_XML, [[<line colour="0,0,0,20"/><line colour="0,0,0,0"/>]])
         Surface.new('box', { x=0, y=0, width=26, yoffset=0, colour='0,0,0,40' })
         Surface.new('box', { height=1, colour='255,255,255,64' })
         Surface.new('box', { height=1, yoffset=0, colour='0,0,0,30' })
      end,
      groupselect = function(View, Surface)
         Surface.new('gradient', { lastColour='200,200,200', firstColour='140,140,140', direction='vertical', y=0, yOffset=0 })
         local stripes = Surface.new('stripes', { direction='vertical' })
         stripes.acDataFeed(0, DATA_XML, [[<line colour="0,0,0,20"/><line colour="0,0,0,0"/>]])
         Surface.new('box', { x=0, y=0, width=26, yoffset=0, colour='0,0,0,40' })
         Surface.new('box', { height=1, colour='255,255,255,64' })
         Surface.new('box', { height=1, yoffset=0, colour='0,0,0,30' })
      end
   },
   fileview = {
      defaultValues = function(View)
         View.face         = 'Open Sans:10'
         View.groupFace    = 'Open Sans:10:bold'
         View.colTitleFont = '255,255,255,255'
         View.gfxFlags     = 'branches|hairlines'
         View.colHairline  = '0,0,0,80'
         View.colHighlight = '0,0,0,0'
         View.colSelectHairline = '255,255,255,0'
         View.colSelect         = '0,0,0,140'
         View.colSelectFont     = '255,255,255'
         View.colItem           = '#000000'
         View.colBkgdHighlight  = '0,0,0,10'
         View.colBackground     = '255,255,255'
         View.colBorder         = '0,0,0,0'
         View.colButtonFont     = '255,255,255'
         View.buttonhighlight   = '255,255,255,80'
         View.buttonshadow      = '0,0,0,0'
         View.buttonbackground  = '#55555F'
         View.buttonthickness   = 0
      end
   },
   window = {
      defaultValues = function(Window)
         local parent = Window.parent
         if parent then
            Window.x = parent.leftMargin + 10
            Window.y = parent.topMargin + 10
         end
         Window.moveToBack   = 0
         Window.resizeBorder = 6
         Window.leftLimit    = 0
         Window.topLimit     = 0
         Window.rightLimit   = 0
         Window.bottomLimit  = 0
         Window.clientTop    = 29
         Window.clientLeft   = 5
         Window.clientRight  = 5
         Window.clientBottom = 5
         Window.leftMargin   = 5
         Window.topMargin    = 5
         Window.bottomMargin = 5
         Window.rightMargin  = 5
         Window.resize       = 'all'
         Window.minimiseCallback = function(Window)
            Window.surface.acHide()
            local desktop = obj.find('desktop')
            if (desktop) then desktop.acFocus() end
         end
      end,
      decoration = function(Window, Surface)
         Surface.mtAddCallback(function(Surface, Bitmap)
            local greyA, greyB, greyC
            local err, black = Bitmap.mtGetColour(0, 0, 0, 0, 255)
            if (bit.band(Surface.flags, RNF_HAS_FOCUS) == 0) then
               err, greyA = Bitmap.mtGetColour(140, 140, 140, 255)
               err, greyB = Bitmap.mtGetColour(160, 160, 160, 255)
               err, greyC = Bitmap.mtGetColour(200, 200, 200, 255)
            else
               err, greyA = Bitmap.mtGetColour(120, 120, 190, 255)
               err, greyB = Bitmap.mtGetColour(140, 140, 210, 255)
               err, greyC = Bitmap.mtGetColour(180, 180, 250, 255)
            end

            // Window Frame
            Bitmap.mtDrawRectangle(0, 0, Surface.width, Surface.height, black, 0)
            Bitmap.mtDrawRectangle(1, 1, Surface.width-2, Surface.height-2, greyA, 0)
            Bitmap.mtDrawRectangle(2, 2, Surface.width-4, Surface.height-4, greyB, 0)
            Bitmap.mtDrawRectangle(3, 3, Surface.width-6, Surface.height-6, greyC, 0)
            Bitmap.mtDrawRectangle(4, 4, Surface.width-8, Surface.height-8, greyB, 0)
            Bitmap.mtDrawRectangle(5, 5, Surface.width-10, Surface.height-10, gui.bitmapColour(Bitmap, 'window'), BAF_FILL)
            // Titlebar edge
            Bitmap.mtDrawRectangle(4, 26, Surface.width-8, 1, greyB, BAF_FILL)
            Bitmap.mtDrawRectangle(4, 27, Surface.width-8, 1, greyC, BAF_FILL)
            Bitmap.mtDrawRectangle(4, 28, Surface.width-8, 1, greyB, BAF_FILL)

            if nz(Window.insideBorder) then
               local err, border = Bitmap.mtGetColour(180, 180, 200, 255)
               Bitmap.mtDrawRectangle(Surface.leftMargin-1, Surface.topMargin-1, Surface.width - Surface.rightMargin + 1,
                  Surface.height - Surface.bottomMargin + 1, border, BAF_BLEND)
            end
         end)
      end,
      menubar = function(Window, Surface)
         local menubar
         if (Surface.parent != nil) then // Window is in the native desktop
            menubar = Surface.new('menubar', { x=5, y=Window.clientTop, xOffset=5, target=Surface.parent, path=Window.menu })
         else // Window is in a hosted environment (e.g. X11, Windows)
            menubar = Surface.new('menubar', { x=0, y=0, xOffset=0, path=Window.menu })
         end
         Surface.topMargin = menubar.bottom + 4
         Window.menubar = menubar
      end,
      titlebar = function(Window, Surface)
         local bar = Surface.new('surface', { drag=Surface, height=21, x=5, y=5, xOffset=5, flags='!StickToFront' })

         local lGradientA = defineGradient(nil, nil, {r=76,g=62,b=128,a=255}, {r=126,g=123,b=187,a=255}, 0, 0, '100%', 0)
         local lGradientB = defineGradient(nil, nil, {r=76,g=76,b=76,a=255}, {r=150,g=150,b=150,a=255}, 0, 0, '100%', 0)

         bar.mtAddCallback(function(Surface, Bitmap)
            local err, path = mVec.generateRectangle(0, 0, Surface.width, Surface.height)
            if (err == ERR_Okay) then
               if (bit.band(Surface.flags, RNF_HAS_FOCUS) != RNF_HAS_FOCUS) then
                  mVec.drawPath(Bitmap, path, 0, nil, lGradientA)
               else
                  mVec.drawPath(Bitmap, path, 0, nil, lGradientB)
               end
               mVec.freePath(path)
            end
            for y=1,Surface.height,2 do
               local err, colShade = Bitmap.mtGetColour(0, 0, 0, 40)
               Bitmap.mtDrawRectangle(0, y, Surface.width, 1, colShade, bit.bor(BAF_FILL, BAF_BLEND))
            end
         end)

         Window.titleObject = bar.new('text', {
            face=glFonts.titlebar.face, colour=glFonts.titlebar.colour, outline='40,40,40',
            string=Window.title, x=26, xOffset=60, y=1
         })

         // Application icon to the left of the titlebar

         bar.new('image', { x=5, align='vertical', path=Window.icon .. '(16)', iconFilter='pearl' })

         local tlX, tlY
         input.subscribe(JTYPE_BUTTON, bar, 0, function(Handler, Msg)
            if (Msg.type != JET_BUTTON_1) then return end
            if (Msg.x >= 5) and (Msg.x < 22) then
               if (Msg.value > 0) then // Button down
                  tlX = Msg.absX
                  tlY = Msg.absY
               else // Released
                  if (bit.band(Msg.flags, JTYPE_DBL_CLICK) != 0) then
                     if (math.abs(Msg.absX - tlX) <= 2) and (math.abs(Msg.absY - tlY) <= 2) then
                        Window.mtClose()
                     end
                  end
               end
            end
         end)

         // Clicking anywhere on the titlebar will move the window to the front.

         input.subscribe(JTYPE_BUTTON, bar, 0, function(Handler, Msg)
            if (Msg.type == JET_BUTTON_1) and (Msg.value > 0) then
               Surface.acMoveToFront()
            end
         end)

         // Double clicking on the titlebar will maximise it.

         local xoffset = 3
         if nz(Window.maximise) then
            input.subscribe(JTYPE_BUTTON, bar, 0, function(Handler, Msg)
               if (Msg.type == JET_BUTTON_1) and (bit.band(Msg.flags, JTYPE_DBL_CLICK) != 0) and (Msg.value == 0) then
                  if (Msg.x >= 24) and (Msg.y >= 0) and (Msg.x < bar.width - 60) and (Msg.y < bar.height) then
                     Window.mtMaximise(1)
                  end
               end
            end)
         end

         // Close Gadget

         if nz(Window.close) then
            catch(function()
               local rgnClose = bar.new('surface', { xoffset=xoffset, y=2, width=17, height=17, region=true })
               rgnClose.acShow()
               input.subscribe(JTYPE_BUTTON, rgnClose, 0, function(Handler, Msg)
                  Window.mtClose()
               end)
               rgnClose.new('image', { path='icons:items/checkmark_cross(16)', iconFilter='pearl', align='center' })
               xoffset = xoffset + 22
            end)
         end

         // Maximise Gadget

         catch(function()
            local max = bar.new('surface', { width=17, height=17, y=2, xoffset=xoffset, region=true })
            max.acShow()
            input.subscribe(JTYPE_BUTTON, max, 0, function(Handler, Msg)
               Window.mtMaximise()
            end)
            if nz(Window.maximise) then
               max.new('image', { path='icons:items/window_maximise(16)', iconFilter='pearl', align='center' })
            else
               max.new('image', { path='icons:items/window_maximise(16)', iconFilter='pearl', align='center', opacity='33%' })
            end
            xoffset = xoffset + 22
         end)

         // Minimise Gadget

         catch(function()
            local min = bar.new('surface', { width=17, height=17, y=2, xoffset=xoffset, region=true })
            min.acShow()
            input.subscribe(JTYPE_BUTTON, min, 0, function(Handler, Msg)
               Window.mtMinimise()
            end)
            if nz(Window.minimise) then
               min.new('image', { path='icons:items/window_minimise(16)', iconFilter='pearl', align='center' })
            else
               min.new('image', { path='icons:items/window_minimise(16)', iconFilter='pearl', align='center', opacity='33%' })
            end
            xoffset = xoffset + 22
         end)

         // Move-To-Back Gadget

         if nz(Window.moveToBack) then
            catch(function()
               local mtb = bar.new('surface', { width=17, height=17, y=2, xoffset=xoffset, region=true })
               mtb.acShow()
               input.subscribe(JTYPE_BUTTON, mtb, 0, function(Handler, Msg)
                  Surface.acMoveToBack()
               end)
               mtb.new('image', { path='icons:layers/bringforward(16)', align='center' })
               xoffset = xoffset + 22
            end)
         end

         bar.acShow()
      end
   }
} // glStyles
