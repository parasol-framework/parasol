--[[
A demonstration of standard widgets
--]]

   require 'gui/toolbar'
   require 'gui/menubar'
   require 'gui/colourdialog'
   require 'gui/fontdialog'
   require 'gui/dialog'
   require 'gui/filedialog'
   require 'gui/icon'
   require 'gui/input'
   require 'gui/button'
   require 'gui/checkbox'
   require 'gui/combobox'
   require 'gui/window'
   require 'vfx'

   local win = gui.window({ title='Widget Examples', insideWidth=600, insideHeight=400, center=true })
   local viewport = win:clientViewport({ aspectRatio = ARF_MEET })

function itemCallback(ID, Name)
   print('Callback: ' .. ID .. ', ' .. Name)
end

-- This callback is activated whenever a menu is activated by the user.

function menuCallback(ID, Name)
   print('Callback: ' .. ID .. ', ' .. Name)
end

function itemClicked(Menu, Item)

end

function widgetFocus(Widget)
   --if Widget.effect then return end
   --Widget.effect = vfx.shake(nz(Widget.inputViewport, Widget.viewport), 0.2, 0, 0.2, function(Effect)
   --   Widget.effect = nil
   --end)
end

-- This is a universal callback for any menu item that is activated by the user.

function popupClicked(Menu, Item)
   print(Item.item)
end

   local menubar = gui.menubar(viewport, {
      createItems = function(Bar)
         Bar.addItem(1, 'File', 'devices/harddisk', menuCallback, {
            { item='New File', icon='items/file_new', qualifier='CTRL', key='N', feedback=itemClicked },
            { item='Open File', icon='office/documents', qualifier='CTRL', key='O', feedback=itemClicked },
            { item='Reload Document', icon='items/reload', key='F5', feedback=itemClicked },
            { item='Save File', icon='items/file_save', qualifier='CTRL', key='S', feedback=itemClicked }
         })
         Bar.addItem(2, 'Edit', 'tools/edit', menuCallback, {
            { item='Undo', icon='items/undo', qualifier='CTRL', key='Z', feedback=itemClicked },
            { item='Redo', icon='items/redo', qualifier='CTRL', key='Y', feedback=itemClicked },
            { menu={ text='Clipboard', icon='items/clipboard',
                items={
                  { item='Cut', icon='tools/cut', qualifier='CTRL', key='X', feedback=itemClicked },
                  { item='Copy', icon='tools/copy', qualifier='CTRL', key='C', feedback=itemClicked },
                  { item='Paste', icon='tools/paste', qualifier='CTRL', key='V', feedback=itemClicked }
                }
              }
            }
         })
         Bar.addItem(3, 'Search', 'tools/magnifier', menuCallback, {})
         Bar.addItem(4, 'View', 'page/page', menuCallback, {})
         Bar.addItem(5, 'Tools', 'tools/wizard', menuCallback, {})
         Bar.addItem(6, 'Help', 'items/help', menuCallback, {})
      end
   })

   local y = menubar.viewport.height

   lToolbar = gui.toolbar(viewport, {
      xOffset     = 0,
      y           = y,
      iconSize    = 22,
      createItems = function(Bar)
         Bar.addGroup(1, 'Navigation', 2)
         Bar.addItem(2, 'Root', 'Root Directory', 'devices/harddisk', itemCallback)
         Bar.addItem(3, 'Parent', 'Parent Folder', 'arrows/arrow_nw', itemCallback)
         Bar.addGroup(4, 'Clipboard', 3)
         Bar.addItem(5, 'Cut', 'Cut', 'tools/not_an_icon', itemCallback)
         Bar.addItem(6, 'Copy', 'Copy', 'tools/copy', itemCallback)
         Bar.addItem(7, 'Paste', 'Paste', 'tools/paste', itemCallback)
         Bar.addGroup(8, 'Actions', 3)
         Bar.addItem(9, 'Create Dir', 'Create Directory', 'folders/folder_new', itemCallback)
         Bar.addBreak()
         Bar.addItem(10, 'Rename', 'Rename', 'layout/interface_textbox', itemCallback)
         Bar.addItem(11, 'Delete', 'Delete', 'tools/eraser', itemCallback)
         Bar.addGroup(12, 'View', 2)
         Bar.addItem(13, 'Column View', 'Column View', 'layout/column_three', itemCallback)
         Bar.addItem(14, 'List View', 'List View', 'layout/list', itemCallback)
      end
   })

   y = y + lToolbar.viewport.height + 8

   local popupMenu = gui.menu({
      x     = 30,
      y     = 50,
      popup = true,
      config = {
         { group='Files' },
         { item='New File', icon='items/file_new', qualifier='CTRL', key='N', feedback=popupClicked },
         { item='Open File', icon='office/documents', qualifier='CTRL', key='O', feedback=popupClicked },
         { item='Reload Document', icon='items/reload', key='F5', feedback=popupClicked },
         { item='Save File', icon='items/file_save', qualifier='CTRL', key='S', feedback=popupClicked },
         { group='Print' },
         { item='Print', icon='devices/printer', qualifier='CTRL', key='P', feedback=popupClicked },
         { group='Quit' },
         { item='Quit', icon='items/quit', qualifier='CTRL', key='Q', feedback=popupClicked }
      }
   })

   input.subscribe(JTYPE_BUTTON, win.surface, 0, function(Surface, Events)
      if (Events.type == JET_BUTTON_2) then
         if (Events.value == 0) then
            popupMenu.show()
         end
      end
   end)

   local text = viewport.new('vectortext', {
      x=win.margins.left, y=y, string='Text Widget', face='Open Sans', fontSize=20, fill='rgb(0,0,0)', textflags='!editable'
   })
   text.y = y + text.font.height
   y = y + text.font.height + 8

   local msgButton = gui.button({
      target = viewport,
      text   = 'Message Box',
      x      = win.margins.left,
      y      = y,
      icon   = 'items/question',
      events = {
         activate = function(Widget)
            gui.dialog.message({
               modal         = true,
               image         = 'icons:items/warning',
               title         = 'Hamlet has a question',
               message       = 'To be or not to be?',
               userInput     = 'That is the question',
               checkboxLabel = '\'Tis nobler to suffer',
               options = {
                  { id=1, text='To be', icon='items/checkmark' },
                  { id=2, text='Not to be', icon='items/cancel' }
               },
               feedback = function(Dialog, Response, State)
                  if Response then
                     print('User selected option ' .. Response.id)
                  end
                  if State then
                     if State.input then
                        print('User entered string: ' .. State.input)
                     end
                     if State.checkbox then
                        print('User activated the checkbox')
                     end
                  end
               end
            })
         end,
         focus = widgetFocus
      }
   })

   local colourButton = gui.button({
      target = viewport,
      text   = 'Select Colour',
      x      = msgButton.viewport.x + msgButton.viewport.width + 4,
      y      = y,
      icon   = 'tools/palette',
      events = {
         activate = function(Widget)
            gui.dialog.colour({
               modal  = true,
               colour = '255,0,0',
               feedback = function(Colour)
                  if (not Colour) then
                     print('Dialog was cancelled.')
                     return
                  end

                  print('The user selected colour is ' .. Colour)
               end
            })
         end,
         focus = widgetFocus
      }
   })

   local fontButton = gui.button({
      target = viewport,
      text   = 'Select Font',
      x      = colourButton.viewport.x + colourButton.viewport.width + 4,
      y      = y,
      icon   = 'items/font',
      events = {
         activate = function(Widget)
            gui.dialog.font({
               okText     = 'Select Font',
               cancelText = 'Exit',
               modal      = true,
               feedback = function(Dialog, Accepted)
                  if (not Accepted) then
                     print('Dialog was cancelled.')
                  else
                     print("The user selected '" .. Dialog.face .. "', size " .. Dialog.size .. ", style '" .. Dialog.style .. "'")
                     print("This can be compacted to '" .. Dialog.compactFace .. "'")
                  end
               end
            })
         end,
         focus = widgetFocus
      }
   })

   local fileButton = gui.button({
      target = viewport,
      text   = 'Select File',
      x      = fontButton.viewport.x + fontButton.viewport.width + 4,
      y      = y,
      icon   = 'folders/folder',
      events = {
         activate = function(Widget)
            gui.dialog.file({
               filterList  = { { name='All Files', pattern='*' }, { name='MP3 Audio Files', pattern='*.mp3' }, { name='Text Files', pattern='*.txt' } },
               okText      = 'Select File',
               cancelText  = 'Exit',
               modal       = true,
               warnExists  = true,
               multiSelect = true,
               feedback = function(Dialog, Path, Files)
                  if (Files == nil) then
                     print('Dialog was cancelled or no files selected.')
                     return
                  end

                  for k, v in ipairs(Files) do
                      print(k, ' = ', nz(Path,'') .. v.filename)
                  end
               end
            })
         end,
         focus = widgetFocus
      }
   })

   y = y + msgButton.viewport.height + 8

   local checkbox = gui.checkbox({
      target = viewport,
      label  = 'Checkbox',
      align  = 'left',
      x      = win.margins.left,
      y      = y,
      events = {
         activate = function(Widget)
         end,
         focus = widgetFocus
      }
   })
   y = y + checkbox.viewport.height + 8

   local combobox = gui.combobox({
      target = viewport,
      label  = 'Combobox:',
      string = 'Your text here',
      x      = win.margins.left, y = y,
      allowCustom = true,
      items = {
         { group='Office' },
         { item='Address Book', icon='office/addressbook' },
         { item='Inbox', icon='office/cabinet_in' },
         { item='Tasks', icon='office/tasks' },
         { item='Finances', icon='office/money' },
         { group='Weather' },
         { item='Snow', icon='weather/snow' },
         { item='Thunder', icon='weather/thunder' }
      },
      events = {
         activate = function(Widget)
         end,
         focus = widgetFocus
      }
   })
   y = y + combobox.viewport.height + 8

   local input = gui.input({
      target = viewport,
      x      = win.margins.left,
      y      = y,
      width  = 260,
      label  = 'Inputbox: ',
      text   = 'Your text here',
      events = {
         activate = function(Widget, Event)
            print('Input state set to "' .. nz(Event.state,'NIL') .. '", text "' .. nz(Event.text,'NIL') .. '"')
         end,
         focus = widgetFocus
      }
   })
   y = y + input.viewport.height + 16

   gui.icon({
      target = viewport,
      x      = 20,
      y      = y,
      image  = 'time/alarm',
      text   = 'Alarm',
      size   = 80,
      events = {
         show = function(Icon)
            vfx.fadeIn(Icon.viewport, 1.0, 0.1)
         end,
         activate = function(Icon)
            if Icon.effect then return end
            Icon.effect = vfx.shake(Icon.viewport, 1.0, 0, 1.0, function(Effect)
               Icon.effect = nil
            end)
         end
      }
   })

   gui.icon({
      target = viewport,
      x      = 120,
      y      = y,
      image  = 'programs/filemanager',
      text   = 'Wilhelm\'s House',
      events = {
         show = function(Icon)
            vfx.rotate(Icon.viewport, 0.8, 0)
            vfx.zoomIn(Icon.viewport, 0.4, 0.3)
         end,
         activate = function(Icon)
            if Icon.effect then return end

            Icon.effect = vfx.chain({
               vfx.rotate(Icon.viewport, 0.8),
               vfx.zoomOut(Icon.viewport, 0.8)
            }, function()
               Icon.viewport.acFree()
               Icon.viewport = nil
            end)
         end
      }
   })

   win:show()
   processing.sleep() -- Will sleep until the window sends MSGID_QUIT

