--[[
A file viewer for recognised documents like SVG and RIPL
--]]

   require 'gui'
   require 'gui/window'
   require 'gui/divider'
   require 'gui/fileview'
   require 'gui/listview'
   require 'gui/scrollbar'
   require 'gui/filedialog'

   local glBody = [[<body fill="rgb(20,20,40)" font-fill="rgb(255,255,255)" font-size="12pt" margins="2em"/>]]

   local glIntroduction = [[
<template name="th">
  <cell stroke="rgb(255,255,255)" stroke-width="1" border="bottom"><p><b><inject/></b></p></cell>
</template>

<page name="Index">

<h1><i>Vue</i></h1>

<p>Vue is a simple file browser that supports the following file types:</p>

<p indent="1em">SVG, RIPL, JPEG, PNG</p>

<h2>Command Line</h2>

<p>The following command-line parameters are supported:</p>

<p indent="1em" font-face="courier">
<table collapsed="true" thin="true" cell-padding="0.2em" h-spacing="2em" columns="10%,90%" width="90%">
<row><th>Parameter</th><th>Description</th></row>
<row><cell><p>width</p></cell><cell>Width of the application window</cell></row>
<row><cell><p>height</p></cell><cell>Height of the application window.</cell></row>
<row><cell><p>path</p></cell><cell>Path to use in the file selector.</cell></row>
<row><cell><p>file</p></cell><cell>A source file to load and display in the application.</cell></row>
<row><cell><p>no-browser</p></cell><cell>Hide the file browser.</cell></row>
</table></p>

</page>
]]

   local glWindow, glViewport, glTerminateView, glScrollbar, glViewArea, glStats, glAppBar

   local glScript = obj.find('self')

----------------------------------------------------------------------------------------------------------------------

function displayInlineDoc(Content, Parameters)
   local doc = glViewArea.new('document', { })
   if type(Parameters) == 'table' then
      for k, v in pairs(Parameters) do
         doc.acSetKey(k, v)
      end
   end
   doc.acDataFeed(0, DATA_XML, Content)
   configureScrollbar(doc.view, doc.page)
   glTerminateView = function()
      doc.free()
   end
end

----------------------------------------------------------------------------------------------------------------------

function displayError(Message)
   local page = glBody .. [[<page name="Index">]] .. Message .. [[</page>]]
   displayInlineDoc(page, { })
end

----------------------------------------------------------------------------------------------------------------------

function configureScrollbar(View, Page)
   if glScrollbar then
      glScrollbar.changeViewport(View, Page)
   else
      glScrollbar = gui.scrollbar({
         target = glViewArea,
         view   = View,
         page   = Page,
         direction = 'all'
      })
   end
end

----------------------------------------------------------------------------------------------------------------------

function displaySVG(Path)
   local vp = glViewArea.new('VectorViewport', { x=0, y=0, xOffset=0, yOffset=0, overflow='hidden' })
   local svg = vp.new('svg', { target=vp, path=Path, flags=SVF_ENFORCE_TRACKING })

   if (svg.frameRate < 60) then svg.frameRate = 60 end
   svg.acActivate() -- Animation support

   glTerminateView = function()
      vp.free()
   end
end

function displayDoc(Path)
   local doc = glViewArea.new('document', { path = Path .. '#Index' })

   configureScrollbar(doc.view, doc.page)

   glTerminateView = function()
      doc.free()
   end
end

function displayImage(Path)
   catch(function()
      local pic = glWindow.scene.new('picture', { src=Path, flags='ForceAlpha32' })
      local img = glWindow.scene.new('VectorImage', { picture = pic })
      glWindow.scene.mtAddDef('Image', img)

      local window = glViewArea.new('VectorViewport', { x = 0, y = 0, width='100%', height='100%', overflow='hidden' })
      local page = window.new('VectorViewport', { x=0, y=0, width=pic.bitmap.width, height=pic.bitmap.height })
      local rect = page.new('VectorRectangle', {
         x=0, y=0, width=pic.bitmap.width, height=pic.bitmap.height, fill='url(#Image)'
      })

      glTerminateView = function()
         window.free()
         pic.free()
         img.free()
      end

      configureScrollbar(window, page)

      glStats = { width = pic.bitmap.width, height = pic.bitmap.height }
   end,
   function(Exception)
      displayError([[<p>Failed to process selected file.</p>]])
   end)
end

function displayText(Path)

end

function displayFile(Path)
   msg('Load file ' .. nz(Path,'NIL'))

   if not Path then return end

   if glTerminateView != nil then
      glTerminateView()
      glTerminateView = nil
   end

   glStats = { }

   local lpath = Path:lower()
   if (lpath:find('^.+%.png$')) then
      displayImage(Path)
   elseif (lpath:find('^.+%.jpeg$')) or (lpath:find('^.+%.jpg$')) then
      displayImage(Path)
   elseif (lpath:find('^.+%.svg$')) then
      displaySVG(Path)
   elseif (lpath:find('^.+%.ripl$')) or (lpath:find('^.+%.rpl$')) then
      displayDoc(Path)
   else -- File is unsupported
      displayError([[<p>Unrecognised file "]] .. Path .. [["</p>]])
   end

   glViewArea.scene.surface.mtScheduleRedraw()

   collectgarbage()
end

----------------------------------------------------------------------------------------------------------------------

   glWindow = gui.window({
      center = true,
      width  = arg('width', 1024),
      height = arg('height', 800),
      title  = 'Vue',
      icon   = 'icons:programs/pictureviewer',
      minHeight = 400,
      minWidth  = 600,
      borderless = true
   })

   glViewport = glWindow:clientViewport({ aspectRatio = ARF_MEET })

   if arg('no-browser') then
      glViewArea = glViewport.new('VectorViewport', {
        x=glWindow.margins.left, y=glWindow.margins.top,
        xOffset=glWindow.margins.right, yOffset=glWindow.margins.top
      })
   else
      -- File view on the left

      glView = gui.listView({
         target       = glViewport,
         x            = glWindow.margins.left,
         y            = glWindow.margins.top,
         width        = 200,
         yOffset      = glWindow.margins.top,
         dragDrop     = true,
         sensitive    = true,
         multiSelect  = false,
         borderless   = true
      })

      glFileview = gui.fileview(glView, {
         toolBar       = { navigation=true },
         displayPath   = true,
         path     = arg('path', ':'),
         filterList = {
            { name='SVG Images', ext='.svg' },
            { name='RIPL Documents', ext={ '.ripl', '.rpl' } },
            { name='JPEG Images', ext={ '.jpeg', '.jpg' } },
            { name='PNG Images', ext='.png' }
         },
         fileSelected = function(FileView)
            displayFile(FileView.selectionPath())
            title = FileView.selectionFile()
            if glStats.width and glStats.height then
               title = title .. ' [ ' .. glStats.width .. ' x ' .. glStats.height .. ' ]'
            end
            glWindow:setTitle(title)
         end
      })

      -- Document viewer on the right

      glViewManager = glViewport.new('VectorViewport', {
        x=glView.viewport.x + glView.viewport.width + 6, y=glWindow.margins.top,
        xOffset=glWindow.margins.right, yOffset=glWindow.margins.top
      })

      -- Copy, Save As, Info, Zoom, Rotate Left / Right

      local bkgd = glViewManager.new('VectorRectangle', {
         x=0, y=0, xOffset=0, height=1, fill=gui.palette.base
      })

      glAppBar = gui.toolbar({
         iconTheme = 'pearl',
         target  = glViewManager,
         x       = 0,
         y       = 0,
         xOffset = 0,
         flush   = true,
         createItems = function(Bar)
            Bar.addItem(2, 'Save As', 'Save Image As', 'items/file_saveas', function()
               gui.dialog.file({
                  title       = 'Save Image As...',
                  okText      = 'Save',
                  cancelText  = 'Cancel',
                  modal       = true,
                  popOver     = glWindow.surface,
                  warnExists  = true,
                  feedback = function(Dialog, Path, Files)
                     if (Files == nil) then return end

                     local target_file = Path .. Files[1].filename

                     local bmp = glViewArea.buffer
                     if bmp then
                        local pic = obj.new('picture', {
                           width = bmp.width, height = bmp.height, bitsPerPixel = bmp.bitsPerPixel,
                           flags = 'New|FORCE_ALPHA_32'
                        })
                        bmp.acCopyData(pic.bitmap)
                        local file = obj.new('file', { flags='NEW|WRITE', path=target_file })
                        pic.acSaveImage(file)
                     end
                  end
               })
            end)
         end
      })

      bkgd.height = glAppBar.viewport.height

      glViewArea = glViewManager.new('VectorViewport', {
         x = 0, xOffset = 0, y = glAppBar.viewport.height, yOffset = 0,
         buffered = true
      })

      gui.divider({
         left = glView.viewport, right = glViewManager,
         minA = 100, maxA = glWindow.surface.insideWidth * 0.4, minB = 100
      })
   end

   -- Display a file from the commandline, or show the application documentation.

   if nz(arg('file')) then
      displayFile(arg('file'))
   else
      local doc = glViewArea.new('document', { })
      doc.acDataFeed(0, DATA_XML, glBody .. glIntroduction)
      configureScrollbar(doc.view, doc.page)
      glTerminateView = function()
         doc.free()
      end
   end

   collectgarbage()

   glWindow:show()

----------------------------------------------------------------------------------------------------------------------

   processing.sleep()
