--[[
Gradient Demonstration
--]]

   require 'gui/window'
   require 'gui/combobox'
   require 'gui/slider'
   require 'gui/button'
   require 'gui/filedialog'

   local win, viewport, gradient, gradientVP, rect
   local focalEllipse, contourShape, uiEvent

   local LORES_COUNT = 10

----------------------------------------------------------------------------------------------------------------------

function selectGradient(Text)
   contourShape.visibility = 'hidden'
   focalEllipse.visibility = 'hidden'
   rect.visibility = 'visible'

   if Text == 'Radial' then
      gradient.type = 'radial'
      focalEllipse.visibility = 'visible'
      uiEvent = function(ev)
         gradient.fX = (ev.x / gradientVP.width * 100) .. '%'
         gradient.fY = (ev.y / gradientVP.height * 100) .. '%'
      end
      gradient.cX = '50%'
      gradient.cY = '50%'
   elseif (Text == 'Conic') or (Text == 'Diamond') then
      gradient.type = Text
      uiEvent = function(ev)
         gradient.cX = (ev.x / gradientVP.width * 100) .. '%'
         gradient.cY = (ev.y / gradientVP.height * 100) .. '%'
         gradient.x2 = (ev.x / gradientVP.width * 100) .. '%'
         gradient.y2 = (ev.y / gradientVP.height * 100) .. '%'
      end
   elseif Text == 'Contour' then
      gradient.type = 'contour'
      gradient.x1 = 0
      gradient.x2 = 2.0
      uiEvent = function(ev)
         local x = math.abs(ev.x - (gradientVP.width * 0.5)) / gradientVP.width * 2
         local y = math.abs(ev.y - (gradientVP.height * 0.5)) / gradientVP.height * 2

         if x > y then
            gradient.x1 = x * gradient.x2
         else
            gradient.x1 = y * gradient.x2
         end
      end
   elseif Text == 'Contour Shape' then
      contourShape.visibility = 'visible'
      gradient.type = 'contour'
      rect.visibility = 'hidden'
      gradient.x1 = 0.9
      gradient.x2 = 1.0
      uiEvent = function(ev)
         local xscale = math.abs(ev.x - (gradientVP.width * 0.5)) / gradientVP.width * 2
         local yscale = math.abs(ev.y - (gradientVP.height * 0.5)) / gradientVP.height * 2

         if xscale > yscale then
            gradient.x1 = xscale
         else
            gradient.x1 = yscale
         end
      end
   elseif Text == 'Linear' then
      gradient.type = 'linear'
      uiEvent = function(ev)
         gradient.cX = (ev.x / gradientVP.width * 100) .. '%'
         gradient.cY = (ev.y / gradientVP.height * 100) .. '%'
         gradient.x2 = (ev.x / gradientVP.width * 100) .. '%'
         gradient.y2 = (ev.y / gradientVP.height * 100) .. '%'
      end
      gradient.x1 = '50%'
      gradient.y1 = '50%'
      gradient.x2 = '100%'
      gradient.y2 = '100%'
   end
   gradientVP.scene.surface.mtScheduleRedraw()
end

----------------------------------------------------------------------------------------------------------------------

function buildScene()
   gradient = viewport.scene.new('VectorGradient', {
      name = 'gradient', type = 'radial', colourMap = 'cmap:magma',
      cX = '50%', cY = '50%',
      fX = '50%', fY = '50%', focalRadius = 100,
      units = 'userSpace', radius = 100,
      spreadMethod = 'reflect'
   })

   viewport.scene.mtAddDef('gradient', gradient)

   gradientVP = viewport.new('VectorViewport', { name='vp_gradient', x = 0, y = 20, xOffset = 0, yOffset=0, overflow='hidden', buffered = true })
   rect = gradientVP.new('VectorRectangle', { name='rect_gradient', x = 0, y = 0, width='100%', height='100%', fill='url(#gradient)' })

   focalEllipse = gradientVP.new('VectorEllipse', {
      name='focalEllipse', cx ='50%', cy='50%', radius=100, stroke='rgb(255,255,255)', strokeWidth=1
   })

   contourShape = gradientVP.new('VectorSpiral', {
      name='spiral', centerX='50%', centerY='50%',
      fill='url(#gradient)', spacing=140, loopLimit=6, visibility='hidden'
   })

   local cmbGradient = gui.combobox({
      target = viewport,
      label  = 'Gradient:',
      text   = 'Radial',
      x      = win.margins.left,
      y      = 10,
      items = {
         { item='Radial' },
         { item='Conic' },
         { item='Diamond' },
         { item='Linear' },
         { item='Contour' },
         { item='Contour Shape' }
      },
      events = {
         activate = function(Widget, Text)
            selectGradient(Text)
         end
      }
   })

   local cmbSpread = gui.combobox({
      target = viewport,
      label  = 'Spread Method:',
      text   = 'Reflect',
      x      = cmbGradient.viewport.x + cmbGradient.viewport.width + 10,
      y      = 10,
      items  = { { item='Pad' }, { item='Repeat' }, { item='Reflect' }, { item='Clip' } },
      events = {
         activate = function(Widget, Text)
            if Text == 'Pad' then
               gradient.spreadMethod = VSPREAD_PAD
            elseif Text == 'Reflect' then
               gradient.spreadMethod = VSPREAD_REFLECT
            elseif Text == 'Repeat' then
               gradient.spreadMethod = VSPREAD_REPEAT
            elseif Text == 'Clip' then
               gradient.spreadMethod = VSPREAD_CLIP
            end
            gradientVP.scene.surface.mtScheduleRedraw()
         end
      }
   })

   local cmbColours = gui.combobox({
      target = viewport,
      label  = 'Colour Map:',
      text   = 'Magma',
      x      = cmbSpread.viewport.x + cmbSpread.viewport.width + 10,
      y      = 10,
      items  = {
         { item='Magma' }, { item='Rocket' }, { item='Mako' }, { item='IceFire' },
         { item='Flare' }, { item='Crest' }, { item='Viridis' }, { item='Plasma' }, { item='Inferno' } },
      events = {
         activate = function(Widget, Text)
            gradient.colourMap = 'cmap:' .. Text:lower()
            gradientVP.scene.surface.mtScheduleRedraw()
         end
      }
   })

   local slResolution = gui.slider({
      target = viewport,
      label  = 'Resolution:',
      value  = 1,
      min    = 0.5,
      max    = 1,
      x      = cmbColours.viewport.x + cmbColours.viewport.width + 10,
      y      = 10,
      events = {
         activate = function(Widget, Value)
            gradient.resolution = Value
            gradientVP.scene.surface.mtScheduleRedraw()
         end
      }
   })

   local iSave = gui.button({
      target  = viewport,
      xOffset = win.margins.right,
      y       = 10,
      icon    = 'items/file_saveas',
      size    = cmbColours.viewport.height,
      events  = {
         activate = function(Button)
            gui.dialog.file({
               title       = 'Save Gradient as PNG Image',
               okText      = 'Save',
               cancelText  = 'Cancel',
               modal       = true,
               popOver     = win.surface,
               warnExists  = true,
               filterList  = { { name='PNG Images', ext='.png' } },
               feedback    = function(Dialog, Path, Files)
                  if (Files == nil) then return end

                  local target_file = Path .. Files[1].filename

                  local bmp = gradientVP.buffer
                  if bmp then
                     local pic = obj.new('picture', {
                        width = bmp.width, height = bmp.height, bitsPerPixel = bmp.bitsPerPixel,
                        flags = 'NEW'
                     })
                     bmp.acCopyData(pic.bitmap)
                     local file = obj.new('file', { flags='NEW|WRITE', path=target_file })
                     pic.acSaveImage(file)
                  end
               end
            })
         end
      }
   })

   gradientVP.y = cmbGradient.viewport.y + cmbGradient.viewport.height + 12

   selectGradient('Radial')
end

----------------------------------------------------------------------------------------------------------------------

   win = gui.window({ title='Gradient Demo', insideWidth=1024, insideHeight=800 })
   viewport = win:clientViewport({
      aspectRatio = ARF_MEET
   })

   buildScene()

   local button_held = false
   check(gradientVP.mtSubscribeInput(bit.bor(JTYPE_MOVEMENT, JTYPE_BUTTON), function(Viewport, Events)
      local ev = Events
      while ev do
         if (ev.type == JET_ABS_XY) then
            if button_held == 1 then
               uiEvent(ev)
               gradientVP.scene.surface.mtScheduleRedraw()
            end
         elseif (ev.type == JET_BUTTON_1) then -- LMB
            button_held = ev.value
            if button_held == 1 then
               uiEvent(ev)
               gradientVP.scene.surface.mtScheduleRedraw()
            end
         end
         ev = ev.next
      end
   end))

   win:show(true)
   processing.sleep()
