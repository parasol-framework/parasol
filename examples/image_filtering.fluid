--[[
Image Filter Demonstration
--]]

   require 'gui/window'
   require 'gui/combobox'
   require 'gui/slider'
   require 'gui/button'

   if not mVector then mVector = mod.load('vector') end

   local win, viewport, photo, mainVP, rect
   local glRotate = 0
   local glScale = 1.0

   glSelf = obj.find('self')
   glPath = glSelf.workingPath

----------------------------------------------------------------------------------------------------------------------

function selectFilter(Text)
   if Text == 'Bilinear' then
      mainVP.scene.sampleMethod = VSM_BILINEAR
   elseif (Text == 'Bicubic') then
      mainVP.scene.sampleMethod = VSM_BICUBIC
   elseif Text == 'Blackman' then
      mainVP.scene.sampleMethod = VSM_BLACKMAN
   elseif Text == 'Sinc' then
      mainVP.scene.sampleMethod = VSM_SINC
   elseif Text == 'Nearest Neighbour' then
      mainVP.scene.sampleMethod = 'NEIGHBOUR'
   elseif Text == 'Spline16' then
      mainVP.scene.sampleMethod = 'SPLINE16'
   elseif Text == 'Kaiser' then
      mainVP.scene.sampleMethod = 'KAISER'
   elseif Text == 'Quadric' then
      mainVP.scene.sampleMethod = 'QUADRIC'
   elseif Text == 'Gaussian' then
      mainVP.scene.sampleMethod = 'GAUSSIAN'
   elseif Text == 'Bessel' then
      mainVP.scene.sampleMethod = 'BESSEL'
   elseif Text == 'Mitchell' then
      mainVP.scene.sampleMethod = 'MITCHELL'
   end
   mainVP.scene.surface.mtScheduleRedraw()
end

function transform()
   if not glMatrix then
      local err
      err, glMatrix = rect.mtNewMatrix(false)
   end
   mVector.ResetMatrix(glMatrix)
   mVector.Rotate(glMatrix, glRotate, 0.5, 0.5)
   mVector.Translate(glMatrix, -0.5, -0.5)
   mVector.Scale(glMatrix, glScale, glScale)
   mVector.Translate(glMatrix, 0.5, 0.5)
   mainVP.scene.surface.mtScheduleRedraw()
end

----------------------------------------------------------------------------------------------------------------------

function buildScene()
   picPhoto = obj.new('picture', { src=glPath .. 'data/mandril.png', bitsPerPixel=32 })

   photo = viewport.scene.new('VectorImage', {
      name = 'photo', picture=picPhoto
   })

   viewport.scene.mtAddDef('photo', photo)
   viewport.scene.flags = bit.bor(viewport.scene.flags, VPF_RENDER_TIME)

   viewport.scene.subscribe('draw', function(Surface, Args)
      print('Rendering Time: ' .. string.format('%gs', viewport.scene.renderTime / 1000000))
   end)

   -- Notice the ViewWidth and ViewHeight of 1, which makes it easier to perform transforms in relative space.

   mainVP = viewport.new('VectorViewport', {
      name = 'vp_main',
      x = 0, y = 20,
      width = '100%', height = '100%',
      viewWidth = 1, viewHeight = 1,
      aspectRatio = bit.bor(ARF_MEET, ARF_X_MID, ARF_Y_MID),
      overflow = 'hidden',
      buffered = true
   })

   -- This rectangle will draw the selected image.

   rect = mainVP.new('VectorRectangle', { name='rect_viewer', x=0, y=0, width=1, height=1, fill='url(#photo)' })

   local cmbFilter = gui.combobox({
      target = viewport,
      label  = 'Filter:',
      text   = 'Bicubic',
      x      = win.margins.left,
      y      = 10,
      items = {
         { item='Nearest Neighbour' },
         { item='Bicubic' },
         { item='Bilinear' },
         { item='Blackman' },
         { item='Sinc' },
         { item='Lanczos' },
         { item='Spline16' },
         { item='Kaiser' },
         { item='Quadric' },
         { item='Gaussian' },
         { item='Bessel' },
         { item='Mitchell' }
      },
      events = {
         activate = function(Widget, Text)
            selectFilter(Text)
         end
      }
   })

   selectFilter('Bicubic')

   local cmbImageType = gui.combobox({
      target = viewport,
      label  = 'Image Type:',
      text   = 'Photo',
      x      = cmbFilter.viewport.x + cmbFilter.viewport.width + 10,
      y      = 10,
      items  = { { item='Test Pattern' }, { item='Photo' }, { item='Contrast' } },
      events = {
         activate = function(Widget, Text)
            if Text == 'Test Pattern' then
               rect.fill = 'url(#pattern)'
            elseif Text == 'Photo' then
               rect.fill = 'url(#photo)'
            elseif Text == 'Contrast' then
               rect.fill = 'url(#contrast)'
            end
            mainVP.scene.surface.mtScheduleRedraw()
         end
      }
   })

   local slRotate = gui.slider({
      target = viewport,
      label  = 'Rotate:',
      value  = 1,
      min    = 0,
      max    = 360,
      x      = cmbImageType.viewport.x + cmbImageType.viewport.width + 10,
      y      = 10,
      events = {
         activate = function(Widget, Value)
            glRotate = Value
            transform()
         end
      }
   })

   local slScale = gui.slider({
      target = viewport,
      label  = 'Scale:',
      value  = 1,
      min    = 0.1,
      max    = 3,
      x      = slRotate.viewport.x + slRotate.viewport.width + 10,
      y      = 10,
      events = {
         activate = function(Widget, Value)
            glScale = Value
            transform()
         end
      }
   })

   mainVP.y = cmbFilter.viewport.y + cmbFilter.viewport.height + 12
end

----------------------------------------------------------------------------------------------------------------------

   win = gui.window({ title='Image Filtering Demo', insideWidth=1024, insideHeight=800 })
   viewport = win:clientViewport({
      aspectRatio = ARF_MEET
   })

   buildScene()

   win:show(true)
   processing.sleep()
