name: CI

on:
  push:
    branches: [ master, test/* ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    name: ${{ matrix.os }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release, Debug, FastBuild]
        include:
          - os: ubuntu-latest
            cmake_generator: "Unix Makefiles"
            cmake_extra_args: ""
          - os: windows-latest
            cmake_generator: "Visual Studio 17 2022"
            cmake_extra_args: "-A x64"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Cache apt packages
      if: runner.os == 'Linux'
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ccache \
          libx11-dev \
          libxext-dev \
          libxrandr-dev \
          libxcursor-dev \
          libxinerama-dev \
          libxi-dev \
          libxss-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libasound2-dev \
          libpulse-dev \
          libudev-dev \
          libssl-dev \
          pkg-config

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-${{ matrix.build_type }}
        max-size: 500M
        variant: ${{ runner.os == 'Windows' && 'sccache' || 'ccache' }}

    - name: Configure CMake (Release)
      if: matrix.build_type == 'Release'
      shell: bash
      run: |
        LAUNCHER=${{ runner.os == 'Windows' && 'sccache' || 'ccache' }}
        cmake -S . -B build/ci \
          -G "${{ matrix.cmake_generator }}" \
          ${{ matrix.cmake_extra_args }} \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=install/ci \
          -DCMAKE_C_COMPILER_LAUNCHER=$LAUNCHER \
          -DCMAKE_CXX_COMPILER_LAUNCHER=$LAUNCHER \
          -DRUN_ANYWHERE=TRUE \
          -DPARASOL_STATIC=OFF \
          -DBUILD_DEFS=ON \
          -DBUILD_TESTS=ON

    - name: Configure CMake (Debug)
      if: matrix.build_type == 'Debug'
      shell: bash
      run: |
        LAUNCHER=${{ runner.os == 'Windows' && 'sccache' || 'ccache' }}
        cmake -S . -B build/ci \
          -G "${{ matrix.cmake_generator }}" \
          ${{ matrix.cmake_extra_args }} \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_INSTALL_PREFIX=install/ci \
          -DCMAKE_C_COMPILER_LAUNCHER=$LAUNCHER \
          -DCMAKE_CXX_COMPILER_LAUNCHER=$LAUNCHER \
          -DRUN_ANYWHERE=TRUE \
          -DPARASOL_STATIC=OFF \
          -DPARASOL_VLOG=TRUE \
          -DBUILD_DEFS=ON \
          -DBUILD_TESTS=ON

    - name: Configure CMake (FastBuild)
      if: matrix.build_type == 'FastBuild'
      shell: bash
      run: |
        LAUNCHER=${{ runner.os == 'Windows' && 'sccache' || 'ccache' }}
        cmake -S . -B build/ci \
          -G "${{ matrix.cmake_generator }}" \
          ${{ matrix.cmake_extra_args }} \
          -DCMAKE_BUILD_TYPE=FastBuild \
          -DCMAKE_INSTALL_PREFIX=install/ci \
          -DCMAKE_C_COMPILER_LAUNCHER=$LAUNCHER \
          -DCMAKE_CXX_COMPILER_LAUNCHER=$LAUNCHER \
          -DRUN_ANYWHERE=TRUE \
          -DPARASOL_STATIC=OFF \
          -DBUILD_DEFS=ON \
          -DBUILD_TESTS=ON

    - name: Build
      run: cmake --build build/ci --config ${{ matrix.build_type }} --parallel

    - name: Install
      run: cmake --install build/ci --config ${{ matrix.build_type }}

    - name: Run CTests
      run: ctest --build-config ${{ matrix.build_type }} --test-dir build/ci --output-on-failure

    - name: Package install tree (Linux)
      if: runner.os == 'Linux'
      run: |
        cd build/ci
        tar -czf parasol-install-${{ matrix.os }}-${{ matrix.build_type }}.tar.gz -C ../../install/ci .
        if [ ! -f parasol-install-${{ matrix.os }}-${{ matrix.build_type }}.tar.gz ]; then
          echo "Error: Archive creation failed"
          exit 1
        fi

    - name: Package install tree (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Compress-Archive -Path install/ci/* -DestinationPath build/ci/parasol-install-${{ matrix.os }}-${{ matrix.build_type }}.zip
        if (!(Test-Path build/ci/parasol-install-${{ matrix.os }}-${{ matrix.build_type }}.zip)) {
          Write-Error "Archive creation failed"
          exit 1
        }

    - name: Report artifact size
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          ls -lh build/ci/parasol-install-${{ matrix.os }}-${{ matrix.build_type }}.tar.gz
          echo "Archive size: $(du -h build/ci/parasol-install-${{ matrix.os }}-${{ matrix.build_type }}.tar.gz | cut -f1)"
        else
          ls -lh build/ci/parasol-install-${{ matrix.os }}-${{ matrix.build_type }}.zip
          echo "Archive size: $(du -h build/ci/parasol-install-${{ matrix.os }}-${{ matrix.build_type }}.zip | cut -f1)"
        fi

    - name: Upload install artifact (Linux)
      if: runner.os == 'Linux' && success()
      uses: actions/upload-artifact@v4
      with:
        name: parasol-install-${{ matrix.os }}-${{ matrix.build_type }}
        path: build/ci/parasol-install-${{ matrix.os }}-${{ matrix.build_type }}.tar.gz
        retention-days: 30

    - name: Upload install artifact (Windows)
      if: runner.os == 'Windows' && success()
      uses: actions/upload-artifact@v4
      with:
        name: parasol-install-${{ matrix.os }}-${{ matrix.build_type }}
        path: build/ci/parasol-install-${{ matrix.os }}-${{ matrix.build_type }}.zip
        retention-days: 30

    - name: Upload build artifacts on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/ci/CMakeFiles/CMakeOutput.log
          build/ci/CMakeFiles/CMakeError.log
          build/ci/Testing/Temporary/LastTest.log
        retention-days: 7

  static-build-test:
    name: Static Build Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Cache apt packages
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: ${{ runner.os }}-apt-static-${{ hashFiles('.github/workflows/ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-static-
          ${{ runner.os }}-apt-

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ccache \
          libx11-dev \
          libxext-dev \
          libssl-dev

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-static
        max-size: 500M

    - name: Configure CMake (Static)
      run: |
        cmake -S . -B build/static \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=install/static \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DRUN_ANYWHERE=TRUE \
          -DPARASOL_STATIC=ON \
          -DBUILD_DEFS=ON \
          -DBUILD_TESTS=OFF

    - name: Build Static
      run: cmake --build build/static --config Release --parallel

    - name: Install Static
      run: cmake --install build/static --config Release

    - name: Package static install tree
      shell: bash
      run: |
        tar -czf build/static/parasol-install-static.tar.gz -C install/static .

    - name: Report static artifact size
      run: |
        ls -lh build/static/parasol-install-static.tar.gz
        echo "Static archive size: $(du -h build/static/parasol-install-static.tar.gz | cut -f1)"

    - name: Upload static install artifact
      uses: actions/upload-artifact@v4
      with:
        name: parasol-install-static
        path: build/static/parasol-install-static.tar.gz
        retention-days: 30
