--[[
SVG Rendering Benchmark Tool

Written from scratch with Claude Code.

Loads an SVG file from the command line and repeatedly renders it to an internal bitmap, then reports back with
performance statistics.  This tool is intended to check on the impact that vector rendering changes have on rendering
speed.

Usage:
  parasol.exe svg_mark.fluid file=path/to/file.svg [width=1024] [height=768]

Parameters:
  file         - Path to the SVG file to benchmark (optional - file dialog shown if not provided)
  width        - Width of the render bitmap (default: 1024)
  height       - Height of the render bitmap (default: 768)
  warmup       - Number of warmup renders to exclude from statistics (default: 10)
  preview      - Show preview window (default: true, set to false for headless)
  cpu-affinity - CPU affinity bitmask (default: 6 = cores 1&2, 1=core 0, 3=cores 0&1, etc.)
--]]

   require 'gui'
   require 'gui/window'
   require 'gui/listview'
   require 'gui/filedialog'

   glSelf = obj.find('self')
   glPath = glSelf.workingPath
   glLogFile = io.open(glPath .. 'svg_mark_results.log', 'a')
   glGitInfo = { }

-----------------------------------------------------------------------------------------------------------------------

function createPreviewWindow(SvgPath)
   local previewWindow = gui.window({
      width  = 800,
      height = 700,
      title  = 'SVG Benchmark Preview - ' .. SvgPath,
      minHeight = 500,
      minWidth  = 600,
      events = {
         close = function(Window)
            mSys.SendMessage(MSGID_QUIT)
         end
      }
   })

   local viewport = previewWindow:clientViewport({ aspectRatio = ARF_MEET })

   -- Create main container
   local mainArea = viewport.new('VectorViewport', {
      x = previewWindow.margins.left,
      y = previewWindow.margins.top,
      xOffset = previewWindow.margins.right,
      yOffset = previewWindow.margins.bottom
   })

   -- SVG display area (top half)
   local svgViewport = mainArea.new('VectorViewport', {
      x=0, y=0, width='100%', height='60%', overflow='hidden'
   })
   local svg = svgViewport.new('svg', {
      target=svgViewport, path=SvgPath, flags=SVF_ENFORCE_TRACKING
   })

   -- Results display area (bottom half) - create listview for results
   local resultsListView = gui.listView({
      x = 0,
      y = '60%',
      width = '100%',
      height = '40%',
      target = mainArea,
      textAttrib = 'text',
      noIcons = true,
      sensitive = false,  -- Read-only display
      fontFace = 'Courier'
   })

   previewWindow:show()

   resultsListView.addItems({ { text = 'Initializing benchmark...' } })

   glStatusUpdater = function(message)
      resultsListView.addItems({ { text = message } })
   end

   return previewWindow
end

-----------------------------------------------------------------------------------------------------------------------

function logMessage(message)
   if glStatusUpdater then
      if message == '' then
         glStatusUpdater('------------------------------')
      else
         glStatusUpdater(message)
      end
   else
      print(message)
   end
end

function saveMessage(message)
   logMessage(message)
   glLogFile:write(message .. '\n')
end

-----------------------------------------------------------------------------------------------------------------------

function calculateStatistics(renderTimes)
   if #renderTimes == 0 then
      return {
         min = 0, max = 0, median = 0,
         p95 = 0, p99 = 0, stddev = 0
      }
   end

   -- Sort times for percentile calculations
   local sortedTimes = {}
   for i, time in ipairs(renderTimes) do
      sortedTimes[i] = time
   end
   table.sort(sortedTimes)

   -- Min and Max
   local minTime = sortedTimes[1]
   local maxTime = sortedTimes[#sortedTimes]

   -- Median
   local median
   local n = #sortedTimes
   if n % 2 == 0 then
      median = (sortedTimes[n/2] + sortedTimes[n/2 + 1]) / 2
   else
      median = sortedTimes[math.ceil(n/2)]
   end

   -- Percentiles
   local function getPercentile(times, p)
      local index = math.ceil(p * #times / 100)
      if index < 1 then index = 1 end
      if index > #times then index = #times end
      return times[index]
   end

   local p95 = getPercentile(sortedTimes, 95)
   local p99 = getPercentile(sortedTimes, 99)

   -- Standard deviation
   local sum = 0
   for _, time in ipairs(renderTimes) do
      sum = sum + time
   end
   local mean = sum / #renderTimes

   local variance = 0
   for _, time in ipairs(renderTimes) do
      variance = variance + (time - mean) ^ 2
   end
   variance = variance / #renderTimes
   local stddev = math.sqrt(variance)

   return {
      min = minTime,
      max = maxTime,
      median = median,
      p95 = p95,
      p99 = p99,
      stddev = stddev,
      mean = mean
   }
end

-----------------------------------------------------------------------------------------------------------------------

function getGitInfo()
   local gitInfo = { branch = 'unknown', commit = 'unknown' }

   -- Check if .git directory exists
   local err, file_type = mSys.AnalysePath(glPath .. '../.git/')
   if file_type != LOC_FOLDER then
      msg('No .git folder identified at ' .. glPath .. '../.git/')
      return gitInfo
   end

   -- Try to read current branch from .git/HEAD
   local headFile = io.open(glPath .. '../.git/HEAD', 'r')
   if headFile then
      local headContent = headFile:read('*all')
      headFile:close()

      if headContent then
         headContent = string.gsub(headContent, '\n', '')
         headContent = string.gsub(headContent, '\r', '')

         -- Check if HEAD points to a branch (ref: refs/heads/branch-name)
         local branchRef = string.match(headContent, 'ref: refs/heads/(.+)')
         if branchRef then
            gitInfo.branch = branchRef

            -- Try to read the commit hash from the branch file
            local branchFile = io.open(glPath .. '../.git/refs/heads/' .. branchRef, 'r')
            if branchFile then
               local commitHash = branchFile:read('*all')
               branchFile:close()

               if commitHash then
                  commitHash = string.gsub(commitHash, '\n', '')
                  commitHash = string.gsub(commitHash, '\r', '')
                  gitInfo.commit = commitHash
               end
            end
         else
            -- HEAD might contain a commit hash directly (detached HEAD)
            if string.len(headContent) == 40 then
               gitInfo.commit = headContent
               gitInfo.branch = 'detached HEAD'
            end
         end
      else
         msg('.git HEAD file is empty.')
      end
   else
      msg('Failed to open .git HEAD file.')
   end

   return gitInfo
end

-----------------------------------------------------------------------------------------------------------------------

function runBenchmark(SvgPath, Width, Height, Duration, WarmupRenders)
   local tm = obj.new('time')
   tm.acQuery()

   saveMessage('================================================================================')
   saveMessage(string.format('%04d-%02d-%02d %02d:%02d:%02d', tm.year, tm.month, tm.day, tm.hour, tm.minute, tm.second) .. '\n')
   saveMessage('Git branch: ' .. glGitInfo.branch .. ' / ' .. glGitInfo.commit)

   logMessage('Starting SVG benchmark...')
   saveMessage('File: ' .. SvgPath)
   saveMessage('Bitmap size: ' .. Width .. 'x' .. Height)
   saveMessage('Duration: ' .. Duration .. ' seconds')
   if WarmupRenders > 0 then
      logMessage('Warmup renders: ' .. WarmupRenders .. ' (excluded from statistics)')
   end

   -- Set high process priority and CPU affinity for consistent benchmarking

   -- Set high priority
   local err = processing.task().set('Priority', 20)  -- Highest priority
   if err == ERR_Okay then
      logMessage('Process priority set to HIGH for benchmarking')
   else
      logMessage('Warning: Failed to set high process priority (code: ' .. tostring(err) .. ')')
   end

   -- Set CPU affinity to cores 1-2 (avoid core 0 which handles system interrupts)
   -- AffinityMask = 6 (binary 0110) = cores 1 and 2
   local affinityMask = tonumber(arg('cpu-affinity')) or 6
   err = processing.task().set('AffinityMask', affinityMask)
   if err == ERR_Okay then
      logMessage('CPU affinity set to mask ' .. affinityMask .. ' for consistent benchmarking')
   else
      logMessage('Warning: Failed to set CPU affinity (code: ' .. tostring(err) .. ')')
   end

   logMessage('')

   local renderCount = 0
   local warmupCount = 0
   local renderTimes = {}
   local memoryUsage = {}
   local startTime = mSys.PreciseTime()
   local endTime = startTime + (Duration * 1000000) -- Convert to microseconds
   local benchmarkStartTime = startTime

   -- Get initial memory usage
   local initialMemory = mSys.GetResource(RES_MEMORY_USAGE)
   local peakMemory = initialMemory
   local memoryGrowth = 0

   local scene = obj.new('VectorScene', { pageWidth=Width, pageHeight=Height })
   local vp = scene.new('VectorViewport', { x=0, y=0, width='100%', height='100%' })
   local svg = obj.new('svg', { target=vp, path=SvgPath })
   local bmp = obj.new('bitmap', { width=scene.pageWidth, height=scene.pageHeight, bitsPerPixel=32, bkgd='255,255,255,255' })
   scene.bitmap = bmp

   while mSys.PreciseTime() < endTime do
      local renderStart = mSys.PreciseTime()
      scene.acDraw()
      local renderEnd = mSys.PreciseTime()

      renderCount = renderCount + 1
      local renderTime = (renderEnd - renderStart) / 1000 -- Convert to milliseconds

      -- Determine if this is a warmup render or benchmark render
      if warmupCount < WarmupRenders then
         warmupCount = warmupCount + 1
         if warmupCount == WarmupRenders then
            -- Warmup complete, reset timing and memory baseline
            benchmarkStartTime = mSys.PreciseTime()
            initialMemory = mSys.GetResource(RES_MEMORY_USAGE)
            peakMemory = initialMemory
            logMessage(string.format('Warmup completed (%d renders). Starting benchmark measurement...', WarmupRenders))
         end
      else
         -- This is a benchmark render, include in statistics
         table.insert(renderTimes, renderTime)
      end

      -- Track memory usage every 10 renders to avoid performance impact
      if renderCount % 10 == 0 then
         local currentMemory = mSys.GetResource(RES_MEMORY_USAGE)
         if warmupCount >= WarmupRenders then
            -- Only track memory during actual benchmark phase
            table.insert(memoryUsage, currentMemory)
         end
         if currentMemory > peakMemory then
            peakMemory = currentMemory
         end
         memoryGrowth = currentMemory - initialMemory
      end

      -- Print progress every 100 renders
      if renderCount % 100 == 0 then
         local elapsed = (mSys.PreciseTime() - startTime) / 1000000
         local currentMem = mSys.GetResource(RES_MEMORY_USAGE)
         local status = warmupCount < WarmupRenders and "Warmup" or "Benchmark"
         logMessage(string.format('%s: %d renders in %.1f seconds (%.1f renders/sec) | Memory: %.1f MB',
               status, renderCount, elapsed, renderCount / elapsed, currentMem / (1024*1024)))
      end
   end

   local totalTime = (mSys.PreciseTime() - startTime) / 1000000
   local benchmarkTime = (mSys.PreciseTime() - benchmarkStartTime) / 1000000
   local benchmarkRenders = #renderTimes
   local benchmarkRendersPerSecond = benchmarkRenders / benchmarkTime
   local stats = calculateStatistics(renderTimes)

   -- Final memory check
   local finalMemory = mSys.GetResource(RES_MEMORY_USAGE)
   local totalMemoryGrowth = finalMemory - initialMemory

   -- Calculate memory growth pattern
   local memoryLeakRate = 0
   if #memoryUsage > 1 and benchmarkTime > 0 then
      memoryLeakRate = totalMemoryGrowth / benchmarkTime -- bytes per second
   end

   logMessage('')
   saveMessage('=== BENCHMARK RESULTS ===')
   saveMessage(string.format('Total renders: %d (%d warmup + %d benchmark)', renderCount, warmupCount, benchmarkRenders))
   saveMessage(string.format('Total time: %.2f seconds', totalTime))
   saveMessage(string.format('Benchmark time: %.2f seconds', benchmarkTime))
   saveMessage(string.format('Overall rate: %.2f renders per second', renderCount / totalTime))
   saveMessage(string.format('Benchmark rate: %.2f renders per second', benchmarkRendersPerSecond))
   saveMessage('')
   saveMessage('=== RENDER TIME STATISTICS (ms) ===')
   saveMessage(string.format('Average:    %.3f ms', stats.mean))
   saveMessage(string.format('Median:     %.3f ms', stats.median))
   saveMessage(string.format('Minimum:    %.3f ms', stats.min))
   saveMessage(string.format('Maximum:    %.3f ms', stats.max))
   saveMessage(string.format('95th %%ile:  %.3f ms', stats.p95))
   saveMessage(string.format('99th %%ile:  %.3f ms', stats.p99))
   saveMessage(string.format('Std Dev:    %.3f ms', stats.stddev))
   saveMessage('')
   saveMessage(string.format('Consistency: %.1f%% (lower is more consistent)', (stats.stddev / stats.mean) * 100))
   saveMessage('')
   saveMessage('=== MEMORY USAGE STATISTICS ===')
   saveMessage(string.format('Initial:    %.2f MB', initialMemory / (1024*1024)))
   saveMessage(string.format('Peak:       %.2f MB', peakMemory / (1024*1024)))
   saveMessage(string.format('Final:      %.2f MB', finalMemory / (1024*1024)))
   saveMessage(string.format('Growth:     %.2f MB', totalMemoryGrowth / (1024*1024)))
   if memoryLeakRate > 0 then
      saveMessage(string.format('Leak Rate:  %.1f KB/sec', memoryLeakRate / 1024))
   else
      saveMessage('Leak Rate:  No significant growth detected')
   end
   if benchmarkRenders > 0 then
      local memoryEfficiency = (finalMemory - initialMemory) / benchmarkRenders
      saveMessage(string.format('Per Render: %.1f bytes/render', memoryEfficiency))
   end
end

-----------------------------------------------------------------------------------------------------------------------

   -- Check for file parameter, show dialog if not provided
   local svgFile = arg('file')

   glGitInfo = getGitInfo()

   if not svgFile then
      print('No file parameter provided. Opening file dialog...')

      local selectedFile = nil

      gui.dialog.file({
         title = 'Select SVG File for Benchmark',
         okText = 'Select',
         cancelText = 'Cancel',
         modal = true,
         filterList = {
            { name = 'SVG Files', ext = '.svg' },
            { name = 'All Files', ext = '*' }
         },
         feedback = function(Dialog, Path, Files)
            if Files and #Files > 0 then
               selectedFile = Path .. Files[1].filename
            end
            processing.signal()
         end
      })

      processing.sleep(nil, true)

      if not selectedFile then
         return
      end

      svgFile = selectedFile
   end

   local err, file_type = mSys.AnalysePath(svgFile)
   if file_type != LOC_FILE then
      print('Error: Cannot find file "' .. svgFile .. '"')
      return
   end

   -- Get benchmark parameters
   local width = tonumber(arg('width')) or 1024
   local height = tonumber(arg('height')) or 768
   local duration = tonumber(arg('duration')) or 10
   local warmup = tonumber(arg('warmup')) or 10
   local showPreview = arg('preview') != 'false'

   -- Validate parameters
   if width < 100 or width > 4096 then
      print('Error: Width must be between 100 and 4096 pixels')
      return
   end

   if height < 100 or height > 4096 then
      print('Error: Height must be between 100 and 4096 pixels')
      return
   end

   if duration < 1 or duration > 300 then
      print('Error: Duration must be between 1 and 300 seconds')
      return
   end

   if warmup < 0 or warmup > 1000 then
      print('Error: Warmup renders must be between 0 and 1000')
      return
   end

   -- Create and show preview window if enabled
   local previewWindow
   if showPreview then
      previewWindow = createPreviewWindow(svgFile)
      processing.sleep(0.2)
   else
      print('Preview disabled. Running in console mode.')
   end

   runBenchmark(svgFile, width, height, duration, warmup)

   if showPreview then
      logMessage('')
      logMessage('Benchmark complete. Close window to exit.')
      processing.sleep() -- Wait indefinitely until window is closed
   else
      processing.sleep(3)
   end
