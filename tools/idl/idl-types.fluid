-- Type conversion for idl-c

-----------------------------------------------------------------------------------------------------------------------
-- Conversion table for FDL types to their C/C++ and Field Definition equivalents.
-- Use cType() to perform conversion and don't access glTypes directly.

glTypes = {
   arraysize  = { fd='FD_INT|FD_ARRAYSIZE',   c_type='int', doc_type='INT' },
   bufsize    = { fd='FD_INT|FD_BUFSIZE',     c_type='int', doc_type='INT' },
   char       = { fd='FD_BYTE',               c_type='int8_t', doc_type='INT8' },
   cid        = { fd='FD_INT|FD_UNSIGNED',    c_type='CLASSID' },
   cptr       = { fd='FD_PTR',                c_type='const void *' },
   cstr       = { fd='FD_STR',                c_type='CSTRING' },
   double     = { fd='FD_DOUBLE',             c_type='double', doc_type='DOUBLE' },
   eid        = { fd='FD_INT',                c_type='EVENTID' },
   error      = { fd='FD_INT|FD_ERROR',       c_type='ERR' },
   ext        = { fd='FD_OBJECTPTR',          c_type='OBJECTPTR' },
   fid        = { fd='FD_INT64',              c_type='FIELD' },
   flags      = { fd='FD_INT',                c_type='int', doc_type='INT' },
   float      = { fd='FD_FLOAT',              c_type='float', doc_type='FLOAT' },
   func       = { fd='FD_FUNCTION',           c_type='FUNCTION' },
   hhandle    = { fd='FD_PTR',                c_type='HOSTHANDLE' },
   int        = { fd='FD_INT',                c_type='int', doc_type='INT' },
   int32      = { fd='FD_INT',                c_type='int32_t', doc_type='INT' },
   large      = { fd='FD_INT64',              c_type='int64_t', doc_type='INT64' },
   maxint     = { fd='FD_INT64',              c_type='MAXINT' },
   mem        = { fd='FD_INT',                c_type='MEMORYID' },
   obj        = { fd='FD_OBJECTPTR',          c_type='OBJECTPTR' },
   oid        = { fd='FD_OBJECTID',           c_type='OBJECTID' },
   printf     = { fd='FD_TAGS',               c_type='...' },
   ptr        = { fd='FD_PTR',                c_type='APTR' },
   resource   = { fd='FD_STRUCT|FD_RESOURCE', c_type='APTR' },
   short      = { fd='FD_WORD',               c_type='int16_t', doc_type='INT16' },
   strview    = { fd='FD_STR',                c_type='STRING', cpp_type='const std::string_view &' }, -- For API calls only
   str        = { fd='FD_STR',                c_type='STRING', cpp_type='std::string' },
   struct     = { fd='FD_STRUCT',             c_type='APTR' },
   structsize = { fd='FD_INT|FD_BUFSIZE',     c_type='int', doc_type='INT' },
   tags       = { fd='FD_TAGS',               c_type='...' },
   uchar      = { fd='FD_BYTE',               c_type='uint8_t', doc_type='UINT8' },
   uint       = { fd='FD_INT|FD_UNSIGNED',    c_type='uint32_t', doc_type='UINT' },
   ushort     = { fd='FD_WORD',               c_type='uint16_t', doc_type='UINT16' },
   va_list    = { fd='FD_PTR',                c_type='va_list' },
   void       = { fd='FD_VOID',               c_type='void' },
   vtags      = { fd='FD_VARTAGS',            c_type='...' }
}

-----------------------------------------------------------------------------------------------------------------------
-- Convert FD flags into a printable C type.  Used by getMetaFieldDefinition() for classes.

function getFieldType(Def, Type, CustomName, Option)
   local result

   if bit.band(Type, FD_CUSTOM) != 0 then
      if nz(CustomName) then
         Def.type = CustomName
      else
         Def.type = 'APTR'
      end
   elseif bit.band(Type, FD_ARRAY) != 0 then
      -- All arrays are pointers, with additional information indicating the type of values in the array.

      if bit.band(Type, FD_CPP) != 0 then
         if bit.band(Type, FD_BYTE) != 0 then
            Def.type = 'pf::vector<int8_t>'
         elseif bit.band(Type, FD_WORD) != 0 then
            Def.type = 'pf::vector<int16_t>'
         elseif bit.band(Type, FD_INT) != 0 then
            Def.type = 'pf::vector<int>'
         elseif bit.band(Type, FD_FLOAT) != 0 then
            Def.type = 'pf::vector<float>'
         elseif bit.band(Type, FD_DOUBLE) != 0 then
            Def.type = 'pf::vector<double>'
         elseif bit.band(Type, FD_STRING) != 0 then
            Def.type = 'pf::vector<std::string>'
         elseif bit.band(Type, FD_POINTER) != 0 then
            Def.type = 'pf::vector<APTR>'
         elseif bit.band(Type, FD_STRUCT) != 0 then
            Def.type = 'pf::vector<STRUCT>'
         else
            Def.type = 'pf::vector<>'
         end
      else
         if bit.band(Type, FD_BYTE) != 0 then
            Def.type = 'int8_t []'
            Def.doc_type = 'INT8 []'
         elseif bit.band(Type, FD_WORD) != 0 then
            Def.type = 'int16_t []'
            Def.doc_type = 'INT16 []'
         elseif bit.band(Type, FD_INT) != 0 then
            Def.type = 'int []'
            Def.doc_type = 'INT []'
         elseif bit.band(Type, FD_FLOAT) != 0 then
            Def.type = 'float []'
            Def.doc_type = 'FLOAT []'
         elseif bit.band(Type, FD_DOUBLE) != 0 then
            Def.type = 'double []'
            Def.doc_type = 'DOUBLE []'
         elseif bit.band(Type, FD_STRING) != 0 then
            Def.type = 'STRING []'
         elseif bit.band(Type, FD_POINTER) != 0 then
            Def.type = 'APTR []'
         elseif bit.band(Type, FD_STRUCT) != 0 then
            Def.type = 'STRUCT []'
         else
            Def.type = 'ARRAY'
         end
      end
   elseif bit.band(Type, FD_STRING) != 0 then
      Def.type = 'STRING'
   elseif bit.band(Type, FD_FUNCTION) != 0 then
      Def.type = 'FUNCTION'
   elseif bit.band(Type, FD_POINTER) != 0 then
      local ptr = 0
      if bit.band(Type, FD_INT) != 0 then
         result = 'INT'
         ptr = ptr + 1
      elseif bit.band(Type, FD_INT64) != 0 then
         result = 'INT64'
         ptr = ptr + 1
      elseif bit.band(Type, FD_DOUBLE) != 0 then
         result = 'DOUBLE'
         ptr = ptr + 1
      elseif bit.band(Type, bit.bor(FD_OBJECT, nz(FD_INTEGRAL, FD_LOCAL))) != 0 then // FD_INTEGRAL is deprecated
         Def.type = 'OBJECTPTR'
         return
      elseif bit.band(Type, FD_STRING) != 0 then
         Def.type = 'STRING'
         return
      elseif bit.band(Type, FD_RGB) != 0 then
         result = 'RGB'
         ptr = ptr + 1
      elseif bit.band(Type, FD_FUNCTION) != 0 then
         result = 'FUNCTION'
         ptr = ptr + 1
      elseif bit.band(Type, FD_STRUCT) != 0 then
         if nz(Option) then -- We need a way to convert the Option number to a string address...
            result = 'APTR'
         else
            result = 'APTR'
         end
      else
         Def.type = 'APTR'
         return
      end

      if (ptr > 0) then
         Def.type = result .. ' ' .. string.rep('*', ptr)
      else
         Def.type = result
      end
   elseif bit.band(Type, FD_RGB) != 0 then
      Def.type = 'RGB8'
   elseif bit.band(Type, FD_INT) != 0 then
      if bit.band(Type, FD_OBJECT) != 0 then
         Def.type = 'OBJECTID'
      else
         Def.type = 'int'
         Def.doc_type = 'INT'
      end
   elseif bit.band(Type, FD_INT64) != 0 then
      Def.type = 'int64_t'
      Def.doc_type = 'INT64'
   elseif bit.band(Type, FD_DOUBLE) != 0 then
      Def.type = 'DOUBLE'
   elseif bit.band(Type, FD_FLOAT) != 0 then
      Def.type = 'FLOAT'
   else
      print(string.format('Failed to identify field type $%.8x for field "%s"', Type, CustomName))
      Def.type = 'void'
   end
end

-----------------------------------------------------------------------------------------------------------------------
-- Returns { cpp, type, fullType, docType, defType, sizeof, ref, lookup, bits, name, comment }

function cType(Field, Origin)
   if (Field.type == nil) then
      error("Field definition incorrect, missing 'type' value for '" .. nz(Origin,"NIL") .. "'")
   end

   Field.defType = Field.type -- Save the original type name

   -- A ! symbol indicates that the field is a result that is allocated and can be removed with FreeResource()
   -- A & symbol indicates that the field is a pointer to a reserved area that will store a result value, e.g. INT *

   local resultValue
   local special, result_type = Field.type:match('^([!&]+)(.+)')
   if (special != nil) and (result_type != nil) then
      if (special:find('!')) then Field.allocated = true end
      resultValue = true
      Field.type = result_type
   end

   if (Field.type:match('^structsize') != nil) then
      Field.sizeof = true
   end

   -- The use of cpp() converts the encapsulated type to its C++ variant.  E.g. 'str' becomes a std::string

   do
      local cpp_type = Field.type:match('^cpp%((.+)%)$')
      if (cpp_type != nil) then
         Field.cpp  = true
         Field.type = cpp_type
         Field = cType(Field, Origin)
         Field.fullType = { fd='FD_CPP|' .. Field.fullType.fd, c_type=Field.fullType.c_type, doc_type=Field.fullType.doc_type }
         goto finalise
      end
   end

   do
      local const, struct = Field.type:match('^(c-)class%((.+)%)$')
      if (struct) then
         Field.isClass = true
      else
         const, struct = Field.type:match('^(c-)struct%((.+)%)$')
      end

      if (struct != nil) then
         local ptr_struct = struct:match('%*(.+)')
         if (ptr_struct != nil) then struct = ptr_struct end

         Field.struct = struct
         if Field.isClass then
            Field.type = 'class ' .. struct
         else
            Field.type = 'struct ' .. struct
         end

         if (glStructures[struct] != nil) then
            glActiveRefs['STRUCT:' .. struct] = 1

            if (glStructures[struct].version != nil) then
               Field.type = Field.type .. 'V' .. glStructures[struct].version
            end
         elseif (glCurrentStructure != struct) then
            if not glPrivateNames[struct] then
               print('WARN: Unknown struct reference "' .. struct .. '"')
            end
         end

         if (ptr_struct != nil) then
            Field.type = Field.type .. ' *'
            Field.fullType = { fd='FD_PTR|FD_STRUCT', c_type='APTR' }
         elseif (Field.isFunction) then
            if (Field.isArray) then
               Field.fullType = { fd='FD_STRUCT', c_type='APTR' }
            else
               Field.type = Field.type .. ' *'
               Field.fullType = { fd='FD_PTR|FD_STRUCT', c_type='APTR' }
            end
         else
            Field.fullType = { fd='FD_PTR|FD_STRUCT', c_type='APTR' }
         end

         if (nz(const)) then
            Field.type =  'const ' .. Field.type
         end

         goto finalise
      end
   end

   do -- Resources are structs, but with an FD_RESOURCE marker.
      local const, struct = Field.type:match('^(c-)resource%((.+)%)$')
      if (struct != nil) then
         local ptr_struct = struct:match('%*(.+)')
         if (ptr_struct != nil) then struct = ptr_struct end

         Field.struct = struct
         Field.type = 'struct ' .. struct

         if (glStructures[struct] != nil) then
            glActiveRefs['STRUCT:' .. struct] = 1

            if (glStructures[struct].version != nil) then
               Field.type = Field.type .. 'V' .. glStructures[struct].version
            end
         end

         if (ptr_struct != nil) then
            Field.type = Field.type .. ' *'
            Field.fullType = { fd='FD_PTR|FD_STRUCT|FD_RESOURCE', c_type='APTR' }
         elseif (Field.isFunction) then
            if (Field.isArray) then
               Field.fullType = { fd='FD_STRUCT|FD_RESOURCE', c_type='APTR' }
            else
               Field.type = Field.type .. ' *'
               Field.fullType = { fd='FD_PTR|FD_STRUCT|FD_RESOURCE', c_type='APTR' }
            end
         else
            Field.fullType = { fd='FD_PTR|FD_STRUCT|FD_RESOURCE', c_type='APTR' }
         end

         if (nz(const)) then
            Field.type =  'const ' .. Field.type
         end

         goto finalise
      end
   end

   do
      local ref_obj = Field.type:match('^ext%((.+)%)$')
      local extended = false
      if (ref_obj != nil) then -- 'ext' indicates an object class extended with private fields.
         extended = true
      else
         ref_obj = Field.type:match('^obj%((.+)%)$')
      end

      if (ref_obj != nil) then
         local ptr_object = ref_obj:match('%*(.+)')
         if (ptr_object != nil) then
            Field.type = 'obj' .. ptr_object .. ' **'
            if extended then Field.extType = 'ext' .. ptr_object .. ' **' end
            Field.className = ptr_object
         else
            Field.type = 'obj' .. ref_obj .. ' *'
            if extended then Field.extType = 'ext' .. ref_obj .. ' *' end
            Field.className = ref_obj
         end
         Field.fullType = glTypes.obj
         goto finalise
      end
   end

   do -- Example: bit(int)
      local bitType = Field.type:match('^bit%((.+)%)$')
      if (bitType != nil) then
         Field.type     = cType({ type=bitType, name='' }, Origin).type
         Field.name     = Field.name
         Field.fullType = glTypes[bitType]
         Field.bits     = 1
         goto finalise
      end
   end

   do -- Integer flags type reference, can be used for strongly typed enum flags
      local prefix = Field.type:match('^flags%((%a+)%)')
      if (prefix != nil) then
         Field.type     = prefix
         Field.fullType = glTypes.int
         Field.ref      = glCustomTypes[prefix]
         Field.lookup   = prefix

         if (glCustomTypes[prefix] != nil) then
            glActiveRefs['TYPE:' .. prefix] = 1
         else
            print('Unknown custom type "' .. prefix .. '"')
         end
         goto finalise
      end
   end

   do -- Integer/Char/Large type reference
      local t, prefix = Field.type:match('^([intlargecharuso]+)%((%a+)%)')
      if (prefix != nil) then
         if (t == 'char') then
            Field.type     = 'char'
            Field.fullType = glTypes.char
         elseif (t == 'int') then
            Field.type     = 'int'
            Field.fullType = glTypes.int
         elseif (t == 'large') then
            Field.type     = 'INT64'
            Field.fullType = glTypes.large
         elseif (t == 'short') then
            Field.type = 'int16_t'
            Field.fullType = glTypes.short
         elseif (t == 'ushort') then
            Field.type = 'uint16_t'
            Field.fullType = glTypes.ushort
         else
            error('Invalid type "' .. t .. '"')
         end

         Field.ref    = glCustomTypes[prefix]
         Field.lookup = prefix

         if (glCustomTypes[prefix] != nil) then
            glActiveRefs['TYPE:' .. prefix] = 1
            if (glCustomTypes[prefix].type) then -- Strongly typed
               Field.type = prefix
            end
         else
            print('Unknown custom type "' .. prefix .. '"')
         end
         goto finalise
      end
   end

   do -- Char arrays
      local unsigned, count = Field.type:match('^(u-)char%((.+)%)$')
      if (count != nil) then
         Field.type = 'char'
         if nz(unsigned) then Field.type = 'unsigned ' .. Field.type end
         Field.arraySize = tonumber(count)
         Field.fullType = glTypes.char
         goto finalise
      end
   end

   do -- Integer arrays
      local unsigned, count = Field.type:match('^(u-)int%((%d+)%)')
      if (count != nil) then
         if nz(unsigned) then
            Field.type = 'uint32_t'
         else
            Field.type = 'int'
         end
         Field.arraySize = tonumber(count)
         Field.fullType = glTypes.int
         goto finalise
      end
   end

   do -- Double arrays
      local count = Field.type:match('^double%((.+)%)')
      if (count != nil) then
         Field.type = 'DOUBLE'
         Field.arraySize = tonumber(count)
         Field.fullType = glTypes.double
         goto finalise
      end
   end

   do -- Float arrays
      local count = Field.type:match('^float%((.+)%)')
      if (count != nil) then
         Field.type = 'FLOAT'
         Field.arraySize = tonumber(count)
         Field.fullType = glTypes.float
         goto finalise
      end
   end

   do
      local const, ptr_type = Field.type:match('^(c-)ptr%((.+)%)')
      if (ptr_type != nil) then
         local ptr_ctype = cType({ type=ptr_type }, Origin)

         Field.type = ptr_ctype.type .. ' *'

         if (nz(const)) then
            Field.type =  'const ' .. Field.type
         end

         if (ptr_type == 'func') then
            Field.fullType = { fd='FD_FUNCTIONPTR', c_type='FUNCTION *' }
         else
            Field.fullType = { fd='FD_PTR', c_type='APTR' }
            if ptr_ctype.fullType.doc_type then
               Field.fullType.doc_type = ptr_ctype.fullType.doc_type .. ' *'
            end
         end

         goto finalise
      end
   end

   do
      local buf_type = Field.type:match('^buf%((.+)%)')
      if (buf_type != nil) then
         Field.type = buf_type
         Field = cType(Field, Origin)
         Field.fullType = { fd='FD_BUFFER|' .. Field.fullType.fd, c_type='APTR' }
         goto finalise
      end
   end

   -- ARRAY CLIENT NOTES
   -- For primitive embedded array types, use 'type(n)' such as 'int(4)'.  See above patterns for details.
   -- To describe a pointer to an array of any type, use 'array(type)' such as 'array(cstr)'
   -- To describe a pointer to a null-terminated array, use 'array(type,0)'
   -- To describe complex embedded types of fixed size, use 'array(type,n)' such as 'array(struct(RGB8),256)'

   do
      local array_type, array_size = Field.type:match('^array%((.+),(%d+)%)$')
      if array_type != nil then
         array_size = tonumber(array_size)
         if array_size == 0 then
            Field.isArray = true
            Field.type = array_type
            Field.arraySize = 0
            Field = cType(Field, Origin)
            if (Field.cpp) then
               if Field.struct then
                  Field.type = 'pf::vector<' .. Field.struct .. '>'
               else
                  Field.type = 'pf::vector<' .. Field.type .. '>'
               end
            else
               Field.type = Field.type .. ' *'
            end
            Field.fullType = { fd='FD_ARRAY|' .. Field.fullType.fd, c_type=Field.fullType.c_type, doc_type=Field.fullType.doc_type  }
         else
            Field.type = array_type
            Field = cType(Field, Origin)
            Field.arraySize = array_size
            Field.fullType = glTypes.ptr
         end
         goto finalise
      end
   end

   do
      local array_type = Field.type:match('^array%((.+)%)$')
      if array_type != nil then
         Field.isArray = true
         Field.type = array_type
         Field = cType(Field, Origin)
         if (Field.cpp) then
            if Field.struct then
               Field.type = 'pf::vector<' .. Field.struct .. '>'
            else
               Field.type = 'pf::vector<' .. Field.type .. '>'
            end
         else
            Field.type = Field.type .. ' *'
         end
         Field.fullType = { fd='FD_ARRAY|' .. Field.fullType.fd, c_type=Field.fullType.c_type, doc_type=Field.fullType.doc_type }
         goto finalise
      end
   end

   do
      local args = Field.type:match('^fptr%((.+)%)$')
      if args != nil then
         local arglist = args:split(' ')

         -- Process function result type

         if #arglist < 1 then
            Field.type = 'void'
         else
            Field.type = nz(glTypes[arglist[1]].c_type, arglist[1])
         end

         Field.type = Field.type .. ' (*' .. Field.name .. ')'

         -- Process function parameters

         if #arglist < 2 then
            Field.type = Field.type .. '(void)'
         else
            local params = ''
            for i=2, #arglist do
               if nz(params) then params = params .. ', ' end
               params = params .. cType({ type=arglist[i], name='' }, Origin).type
            end
            Field.type = Field.type .. '(' .. params .. ')'
         end

         Field.isFunctionPtr = true
         Field.fullType = glTypes.ptr
         goto finalise
      end
   end

   if glTypes[Field.type] == nil then
      error("No handling for field type '" .. Field.type .. "' from " .. Origin)
   end

   Field.fullType = glTypes[Field.type]
   if Field.cpp then
      Field.type = nz(glTypes[Field.type].cpp_type, Field.type)
   else
      Field.type = nz(glTypes[Field.type].c_type, Field.type)
   end

::finalise::
   Field.basicType = Field.type

   if resultValue then -- If the type is a result value, append a '*'
      Field.resultValue = true

      if (Field.isResponse) then
         -- Do nothing
      elseif Field.type:find('%*$') then
         Field.type = Field.type .. '*'
      else
         Field.type = Field.type .. ' *'
      end
   end

   if not Field.docType then
      if Field.fullType and Field.fullType.doc_type and not Field.lookup then
         Field.docType = Field.fullType.doc_type
      elseif Field.lookup then
         Field.docType = Field.type -- Normally refers to the name of the prefix, e.g. 'MEM'
      else
         Field.docType = Field.type
      end
   end

   local _, count = Field.type:gsub('*', '')
   local _, b_count = Field.docType:gsub('*', '')
   if count > 0 and b_count == 0 then
      Field.docType = Field.docType .. ' ' .. string.rep('*', count)
   end

   if Field.cpp then Field.docType = Field.type end

   return Field -- type, docType, fullType, basicType, allocated, resultValue
end
