-- This script will generate HTML documentation by running pandoc against every markdown document file found in the
-- wiki folder.  It will fail if pandoc is not installed on the system.
--
-- Support parameters:
--
--   src: Source folder for markdown documents

   require 'io/filesearch'

   glSelf = obj.find('self')

-----------------------------------------------------------------------------------------------------------------------
-- Resolve the location of the Parasol SDK and create an 'sdk:' volume.

function resolveSDKPath(Path)
   local sdk_path
   local err = ERR_Failed
   local search_list = { }
   if not Path then
      local search_path = 'CMakeLists.txt'
      local limit = 5
      while (err != ERR_Okay) and (limit > 0) do
         table.insert(search_list, search_path)
         err, sdk_path = mSys.ResolvePath(search_path)
         search_path = '../' .. search_path
         limit = limit - 1
      end
   else
      table.insert(search_list, Path .. '/CMakeLists.txt')
      err, sdk_path = mSys.ResolvePath(Path .. '/CMakeLists.txt')
   end

   if (err == ERR_Okay) then
      sdk_path = sdk_path:match('(.+)CMakeLists%.txt')
   else
      local msg = ''
      for _, path in ipairs(search_list) do
         msg = msg .. path .. '\n'
      end
      print('Unable to find CMakeLists.txt after searching the following paths:\n' .. msg)
      error('A path to the Parasol SDK could not be determined.')
   end

   mSys.SetVolume('sdk', sdk_path)
end

-----------------------------------------------------------------------------------------------------------------------

   resolveSDKPath(arg('sdk'))

   local state = mSys.GetSystemState()

   local pandoc = arg('pandoc', 'c:Program Files/Pandoc/pandoc')
   local md_folder = arg('wiki', 'sdk:docs/wiki/')

   local header = file.readAll('sdk:docs/wiki-header.html')
   local footer = file.readAll('sdk:docs/wiki-footer.html')

   local err, temp_output = mSys.ResolvePath('temp:markdown', RSF_NO_FILE_CHECK)
   local output_files = { }

   local err, pandoc_path = mSys.ResolvePath("pandoc", RSF_PATH)

   if not nz(pandoc_path) then
      if state.platform == 'Windows' then
         pandoc_path = 'C:\\Program Files\\Pandoc\\pandoc.exe'
         if (mSys.AnalysePath(pandoc_path) != ERR_Okay) then
            pandoc_path = nil
         end
      else
         pandoc_path = nil
      end

      assert(pandoc_path, 'pandoc not found on system path, please install it first.')
   end

   local cmdlist = ''

   file.search(md_folder, {
      nameFilter = '^.*%.md$',
      nameWild   = true,
      matchFeedback = function(Path, FileName, File)
         local title = FileName:gsub('-', ' ')
         title = title:gsub('.md', '')

         local src_path = Path .. FileName
         local output_path = src_path:gsub('[/\\]wiki[/\\]', '/html/wiki/')
         output_path = output_path:gsub('%.md', '.html')

         err, res_src_path = mSys.ResolvePath(src_path)
         assert(err == ERR_Okay, 'Failed to resolve path ' .. src_path)

         err, res_output_path = mSys.ResolvePath(output_path, RSF_NO_FILE_CHECK)
         assert(err == ERR_Okay, 'Failed to resolve path ' .. output_path)

         err, res_header_path = mSys.ResolvePath(glSelf.workingPath .. 'wiki-header.inc', RSF_NO_FILE_CHECK)
         assert(err == ERR_Okay, 'Failed to resolve path to wiki-header.inc')

         local pandoc_output = temp_output .. '-' .. math.random(1000000) .. '.html'
         local parameters = res_src_path .. ' -o ' .. pandoc_output .. ' -f gfm -t html5 -c github-markdown.css --wrap=preserve --embed-resource'

         cmdlist = cmdlist .. '"' .. pandoc_path .. '"' .. ' ' .. parameters .. '\n'

         table.insert(output_files, { title=title, pandoc_output=pandoc_output, target_path=res_output_path })
      end
   })

   local output_path = arg('output') -- Optional output path for the generated script.

   if state.platform == 'Windows' then
      if not output_path then output_path = 'temp:docgen.bat' end
      cmdlist = cmdlist:gsub('\\','\\\\')
   else
      if not output_path then output_path = 'temp:docgen.sh' end
      cmdlist = '#!/bin/bash\n' .. cmdlist
   end

   local fl = obj.new('file', { src=output_path, flags='NEW|WRITE', permissions='READ|WRITE|EXEC' })
   fl.acWrite(cmdlist)
   fl.free()

   if (not arg('dry-run')) then
      print('Running generated script from ' .. output_path)

      local task = obj.new('task', {
         src   = output_path,
         flags = 'WAIT',
         outputCallback = function(Task, Data)
            -- Critical: Pandoc needs stdout to be consumed in Windows or it doesn't work
         end,
         timeout = 20
      })

      task.acActivate()

      mSys.DeleteFile(output_path)

      for k,v in pairs(output_files) do
         local md_output = file.readAll(v.pandoc_output)
         local fl = obj.new('file', { path=v.target_path, flags='WRITE|NEW' })

         mod_header = header:gsub('<title>Parasol Wiki</title>', '<title>Parasol Wiki - ' .. v.title .. '</title>')
         md_output = md_output:gsub('<hr />', '<hr>') -- HTML5 compliance
         md_output = md_output:gsub("\r\n?", "\n") -- CRLF conversion

         fl.acWrite(mod_header)
         fl.acWrite('\n<h1>' .. v.title .. '</h1>\n')
         fl.acWrite(md_output)
         fl.acWrite(footer)

         mSys.DeleteFile(v.pandoc_output)
      end

      print('Finished.')
   else
      print('Dry run, generated script available at ' .. output_path)
   end
