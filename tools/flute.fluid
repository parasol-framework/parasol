-- $FLUID
--
-- Flute (FLUid TEst) provides a standard framework for the execution of unit tests in Fluid.
--
-- TODO: Support for JSON output of test results.
--       Support for parameterized tests.
--       Support for test retries on failure.
--       Support for test timeouts (mark as a fail after N seconds is exceeded).
--       Support for test filtering by tags or categories (dependent on annotations)

glHelp = [[
Flute provides a standard framework for the execution of unit tests in Fluid.

Example usage:

   parasol flute.fluid file=[file]
]]

   require 'common'

----------------------------------------------------------------------------------------------------------------------

function runTests()
   glTestTotal = 0
   glTestsPassed = 0

   local err, t = mSys.AnalysePath(glFile)
   if (err != ERR_Okay) or (t != LOC_FILE) then
      print("The targeted source file doesn't exist: " .. glFile)
      return
   end

   local body = loadFile(glFile)
   if not body then
      print("The Flute test file did not return a configuration table.  It is either not a Flute script or is misconfigured.")
      return
   end

   if body.init then
      local folder = file.splitPath(glFile)
      local tests = body.init(folder)
      -- The init() function can opt to return a customised set of test references at runtime;
      -- useful if the test suite has dependencies on files for example.
      if tests then
         body.tests = tests
      end
   end

   glTestTotal += #body.tests

   local i = 0
   for _,func in ipairs(body.tests) do
      i += 1
      skip = false
      if (type(func) == "string") then
         print("-- Test " .. i .. ": " .. func .. " --")
         if (glTest) and (func != glTest) then
            skip = true
         end
         func = _G[func]
      else
         print(i .. ". <Unnamed>")
      end

      if not skip then
         local startTime = mSys.PreciseTime()
         local status, result = pcall(func)
         local totalTime = (mSys.PreciseTime() - startTime) / 1000000

         collectgarbage()

         if (status == false) then
            if nz(result) then logOutput(result) end
            print(string.format("FAIL: %.6f sec", totalTime))
         else
            if nz(result) then logOutput(result) end
            print(string.format("PASS: %.6f sec", totalTime))
            glTestsPassed = glTestsPassed + 1
         end
      else
         print('SKIPPED')
         glTestTotal -= 1
      end
   end

   if (body.cleanup != nil) then
      body.cleanup()
   end

   print("--")

   if (glTestsPassed < glTestTotal) then
      -- Setting the errorString will ensure that an error code is returned to the shell.
      glSelf.errorString = "Ran " .. glTestTotal .. " tests, passed " .. glTestsPassed
   end

   print("Ran " .. glTestTotal .. " tests, passed " .. glTestsPassed)
end

----------------------------------------------------------------------------------------------------------------------
-- Unit tests should call logOutput() for the purpose of formally logging output for the current test.

function logOutput(Message)
   print(Message)
end

----------------------------------------------------------------------------------------------------------------------

   glFile = arg('file')
   glTest = arg('test')
   glSelf = obj.find('self')

   mSys = mod.load("core")

   if not nz(glFile) then
      print(glHelp)
      return
   end

   runTests()
