-- $FLUID:Batch
-- Example: input=secrets.txt out-private=key.prv out-public=key.pub out-sig=secrets.txt.sig

------------------------------------------------------------------------------

function saveKeys()
   if nz(glPrivateFile) then
      local file = obj.new("file", { path=glPrivateFile, flags="!NEW|WRITE" } )
      file.acWrite(privateKey)
   end

   if nz(glPublicFile) then
      local file = obj.new("file", { path=glPublicFile, flags="!NEW|WRITE" } )
      file.acWrite(publicKey)
   end
end

------------------------------------------------------------------------------

function signFiles(destPath)
   if not nz(destPath) then return end

   print("Generating signature for file: \"" .. destPath .. "\"")
   local input = obj.new("file", { path=destPath, flags="READ" } )
   local error, sig = mSSL.CalcSigFromObject(input, 0, privateKey, nil, "sha256")

   if (error == ERR_Okay) and (sig != nil) then
      if nz(glSigFile) then
         print("Saving signature to " .. glSigFile)
         local sigfile = obj.new("file", { path=glSigFile, flags="!NEW|WRITE" } )
         sigfile.acWrite(sig)
      end

      input.acSeek(0, 0)

      local error = mSSL.VerifySig(input, 0, publicKey, "sha256", sig)
      if (error != ERR_Okay) then print("Verification failed.")
      else print("Verification passed.") end
   else
      print("Failed to generate signature: " .. mSys.GetErrorMsg(error));
   end
end

------------------------------------------------------------------------------

   glInput       = arg("input")
   glPrivateFile = arg("out-private")
   glPublicFile  = arg("out-public")
   glSigFile     = arg("out-sig")
   glBits        = tonumber(arg("bits"))
   glPassword    = arg("password")

   print("SSL Key Generator\n")

   if (glInput == nil) or (glPrivateFile == nil) then
      print("This program generates an RSA key-pair and writes the keys as output files.")
      print("It can also generate the RSA signature for an input file and write generated signature to an output file.")
      print("")
      print("input        An input file to be signed.")
      print("out-private  Write the private key to this file.")
      print("out-public   Write the public key to this file.")
      print("out-sig      Write the resulting signature generated from 'input' to this file.")
      print("bits         Number of bits to use when generating the key.  Default: 2048")
      print("password     Password to use when generating the private key.")
      return
   end

   mSys  = mod.load("core")
   mSSL  = mod.load("openssl")

   if not nz(glBits) then glBits = 2048 end

   local error, privateKey, publicKey = mSSL.GenerateRSAKey(glBits, glPassword)

   print(privateKey)
   print(publicKey)

   saveKeys()
   signFiles(glInput)
