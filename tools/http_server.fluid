
glHelp = [[
This straight-forward implementation of an HTTP server supports the serving of static files from a folder.

Usage: parasol.exe http_server.fluid folder=path/to/files port=8080 [options...]

If a config file is stored at user:config/http_server_cfg.fluid then it will be loaded automatically.  Options
can be overridden via the command-line, or you can refer to a different file via the config parameter.

Parameters:

  config    - Refers to a Fluid config file with the options assigned to a glOptions table.
  folder    - The folder containing HTML pages and static files to serve
  port      - The port number to listen on (default: 8080)
  bind      - Bind to specific IP address (default: all interfaces, e.g., '127.0.0.1' for localhost only)
  verbose   - Enable verbose logging (true/false, default: false)
  timeout   - Request timeout in seconds (default: 30)
  autoindex - Enable automatic directory listing (true/false, default: true)
  ratelimit - Maximum requests per second (0-1000, default: unlimited)

Index files (checked in order): index.html, index.htm, default.html, default.htm
]]

   local httplib = require 'net/httpserver'

   glConfigFile = arg('config')

   glOptions = { }

   if not glConfigFile then glConfigFile = 'user:config/http_server_cfg.fluid' end

   if glConfigFile then
      if mSys.AnalysePath(glConfigFile) == ERR_Okay then
         loadFile(glConfigFile, glOptions)
      end
   end

   if arg('help') then
      print(glHelp)
      return
   end

   if arg('port') then glOptions.port = tonumber(arg('port'))end
   if arg('folder') then glOptions.folder = folder end

   if arg('verbose') then
      local verbose = arg('verbose'):lower()
      glOptions.verbose = (verbose == 'true' or verbose == '1')
   end

   if arg('timeout') then glOptions.timeout = tonumber(arg('timeout')) end

   if arg('autoindex') then
      local autoindex = arg('autoindex'):lower()
      glOptions.autoIndex = (autoindex == 'true' or autoindex == '1')
   end

   if arg('ratelimit') then glOptions.rateLimit = tonumber(arg('ratelimit')) end

   if arg('bind') then glOptions.bind = arg('bind') end

   if not glOptions.folder then
      print('Error: folder parameter is required')
      print('Usage: parasol.exe http_server.fluid folder=path/to/files port=8080 [verbose=true] [timeout=30]')
      return
   end

   -- Convert to absolute path
   local err, resolvedPath = mSys.ResolvePath(glOptions.folder)
   if err == ERR_Okay and resolvedPath then
      glOptions.folder = resolvedPath
   end

   local err, filetype = mSys.AnalysePath(glOptions.folder)
   if filetype != LOC_FOLDER then
      error('Error: folder "' .. nz(glOptions.folder,'NIL') .. '" does not exist')
   end

   glServer = httplib.start(glOptions)

   processing.sleep()

